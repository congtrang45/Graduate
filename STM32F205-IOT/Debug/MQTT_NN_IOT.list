
MQTT_NN_IOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a960  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000920  0800aae8  0800aae8  0001aae8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b408  0800b408  00020208  2**0
                  CONTENTS
  4 .ARM          00000008  0800b408  0800b408  0001b408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b410  0800b410  00020208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b410  0800b410  0001b410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b414  0800b414  0001b414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  0800b418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000614  20000208  0800b620  00020208  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000081c  0800b620  0002081c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020208  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dbd3  00000000  00000000  00020231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000219a  00000000  00000000  0002de04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  0002ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cb0  00000000  00000000  00030ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ed9f  00000000  00000000  00031950  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e667  00000000  00000000  000506ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b56fb  00000000  00000000  0005ed56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00114451  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004da0  00000000  00000000  001144a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000208 	.word	0x20000208
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800aad0 	.word	0x0800aad0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000020c 	.word	0x2000020c
 80001c4:	0800aad0 	.word	0x0800aad0

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	; 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_dmul>:
 8000564:	b570      	push	{r4, r5, r6, lr}
 8000566:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800056e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000572:	bf1d      	ittte	ne
 8000574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000578:	ea94 0f0c 	teqne	r4, ip
 800057c:	ea95 0f0c 	teqne	r5, ip
 8000580:	f000 f8de 	bleq	8000740 <__aeabi_dmul+0x1dc>
 8000584:	442c      	add	r4, r5
 8000586:	ea81 0603 	eor.w	r6, r1, r3
 800058a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800058e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000592:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000596:	bf18      	it	ne
 8000598:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a4:	d038      	beq.n	8000618 <__aeabi_dmul+0xb4>
 80005a6:	fba0 ce02 	umull	ip, lr, r0, r2
 80005aa:	f04f 0500 	mov.w	r5, #0
 80005ae:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005b6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ba:	f04f 0600 	mov.w	r6, #0
 80005be:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c2:	f09c 0f00 	teq	ip, #0
 80005c6:	bf18      	it	ne
 80005c8:	f04e 0e01 	orrne.w	lr, lr, #1
 80005cc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005d8:	d204      	bcs.n	80005e4 <__aeabi_dmul+0x80>
 80005da:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005de:	416d      	adcs	r5, r5
 80005e0:	eb46 0606 	adc.w	r6, r6, r6
 80005e4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005e8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005ec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005f8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005fc:	bf88      	it	hi
 80005fe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000602:	d81e      	bhi.n	8000642 <__aeabi_dmul+0xde>
 8000604:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000608:	bf08      	it	eq
 800060a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800060e:	f150 0000 	adcs.w	r0, r0, #0
 8000612:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000616:	bd70      	pop	{r4, r5, r6, pc}
 8000618:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800061c:	ea46 0101 	orr.w	r1, r6, r1
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	ea81 0103 	eor.w	r1, r1, r3
 8000628:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800062c:	bfc2      	ittt	gt
 800062e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000632:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000636:	bd70      	popgt	{r4, r5, r6, pc}
 8000638:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800063c:	f04f 0e00 	mov.w	lr, #0
 8000640:	3c01      	subs	r4, #1
 8000642:	f300 80ab 	bgt.w	800079c <__aeabi_dmul+0x238>
 8000646:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064a:	bfde      	ittt	le
 800064c:	2000      	movle	r0, #0
 800064e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000652:	bd70      	pople	{r4, r5, r6, pc}
 8000654:	f1c4 0400 	rsb	r4, r4, #0
 8000658:	3c20      	subs	r4, #32
 800065a:	da35      	bge.n	80006c8 <__aeabi_dmul+0x164>
 800065c:	340c      	adds	r4, #12
 800065e:	dc1b      	bgt.n	8000698 <__aeabi_dmul+0x134>
 8000660:	f104 0414 	add.w	r4, r4, #20
 8000664:	f1c4 0520 	rsb	r5, r4, #32
 8000668:	fa00 f305 	lsl.w	r3, r0, r5
 800066c:	fa20 f004 	lsr.w	r0, r0, r4
 8000670:	fa01 f205 	lsl.w	r2, r1, r5
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800067c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000680:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000684:	fa21 f604 	lsr.w	r6, r1, r4
 8000688:	eb42 0106 	adc.w	r1, r2, r6
 800068c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000690:	bf08      	it	eq
 8000692:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000696:	bd70      	pop	{r4, r5, r6, pc}
 8000698:	f1c4 040c 	rsb	r4, r4, #12
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f304 	lsl.w	r3, r0, r4
 80006a4:	fa20 f005 	lsr.w	r0, r0, r5
 80006a8:	fa01 f204 	lsl.w	r2, r1, r4
 80006ac:	ea40 0002 	orr.w	r0, r0, r2
 80006b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	f141 0100 	adc.w	r1, r1, #0
 80006bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c0:	bf08      	it	eq
 80006c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c6:	bd70      	pop	{r4, r5, r6, pc}
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f205 	lsl.w	r2, r0, r5
 80006d0:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d4:	fa20 f304 	lsr.w	r3, r0, r4
 80006d8:	fa01 f205 	lsl.w	r2, r1, r5
 80006dc:	ea43 0302 	orr.w	r3, r3, r2
 80006e0:	fa21 f004 	lsr.w	r0, r1, r4
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	fa21 f204 	lsr.w	r2, r1, r4
 80006ec:	ea20 0002 	bic.w	r0, r0, r2
 80006f0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f8:	bf08      	it	eq
 80006fa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fe:	bd70      	pop	{r4, r5, r6, pc}
 8000700:	f094 0f00 	teq	r4, #0
 8000704:	d10f      	bne.n	8000726 <__aeabi_dmul+0x1c2>
 8000706:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070a:	0040      	lsls	r0, r0, #1
 800070c:	eb41 0101 	adc.w	r1, r1, r1
 8000710:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000714:	bf08      	it	eq
 8000716:	3c01      	subeq	r4, #1
 8000718:	d0f7      	beq.n	800070a <__aeabi_dmul+0x1a6>
 800071a:	ea41 0106 	orr.w	r1, r1, r6
 800071e:	f095 0f00 	teq	r5, #0
 8000722:	bf18      	it	ne
 8000724:	4770      	bxne	lr
 8000726:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072a:	0052      	lsls	r2, r2, #1
 800072c:	eb43 0303 	adc.w	r3, r3, r3
 8000730:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000734:	bf08      	it	eq
 8000736:	3d01      	subeq	r5, #1
 8000738:	d0f7      	beq.n	800072a <__aeabi_dmul+0x1c6>
 800073a:	ea43 0306 	orr.w	r3, r3, r6
 800073e:	4770      	bx	lr
 8000740:	ea94 0f0c 	teq	r4, ip
 8000744:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000748:	bf18      	it	ne
 800074a:	ea95 0f0c 	teqne	r5, ip
 800074e:	d00c      	beq.n	800076a <__aeabi_dmul+0x206>
 8000750:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000754:	bf18      	it	ne
 8000756:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075a:	d1d1      	bne.n	8000700 <__aeabi_dmul+0x19c>
 800075c:	ea81 0103 	eor.w	r1, r1, r3
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd70      	pop	{r4, r5, r6, pc}
 800076a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076e:	bf06      	itte	eq
 8000770:	4610      	moveq	r0, r2
 8000772:	4619      	moveq	r1, r3
 8000774:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000778:	d019      	beq.n	80007ae <__aeabi_dmul+0x24a>
 800077a:	ea94 0f0c 	teq	r4, ip
 800077e:	d102      	bne.n	8000786 <__aeabi_dmul+0x222>
 8000780:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000784:	d113      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000786:	ea95 0f0c 	teq	r5, ip
 800078a:	d105      	bne.n	8000798 <__aeabi_dmul+0x234>
 800078c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000790:	bf1c      	itt	ne
 8000792:	4610      	movne	r0, r2
 8000794:	4619      	movne	r1, r3
 8000796:	d10a      	bne.n	80007ae <__aeabi_dmul+0x24a>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007a8:	f04f 0000 	mov.w	r0, #0
 80007ac:	bd70      	pop	{r4, r5, r6, pc}
 80007ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007b6:	bd70      	pop	{r4, r5, r6, pc}

080007b8 <__aeabi_ddiv>:
 80007b8:	b570      	push	{r4, r5, r6, lr}
 80007ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007c6:	bf1d      	ittte	ne
 80007c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007cc:	ea94 0f0c 	teqne	r4, ip
 80007d0:	ea95 0f0c 	teqne	r5, ip
 80007d4:	f000 f8a7 	bleq	8000926 <__aeabi_ddiv+0x16e>
 80007d8:	eba4 0405 	sub.w	r4, r4, r5
 80007dc:	ea81 0e03 	eor.w	lr, r1, r3
 80007e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007e8:	f000 8088 	beq.w	80008fc <__aeabi_ddiv+0x144>
 80007ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000800:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000804:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000808:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800080c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000810:	429d      	cmp	r5, r3
 8000812:	bf08      	it	eq
 8000814:	4296      	cmpeq	r6, r2
 8000816:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800081e:	d202      	bcs.n	8000826 <__aeabi_ddiv+0x6e>
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	1ab6      	subs	r6, r6, r2
 8000828:	eb65 0503 	sbc.w	r5, r5, r3
 800082c:	085b      	lsrs	r3, r3, #1
 800082e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000832:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000836:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083a:	ebb6 0e02 	subs.w	lr, r6, r2
 800083e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000842:	bf22      	ittt	cs
 8000844:	1ab6      	subcs	r6, r6, r2
 8000846:	4675      	movcs	r5, lr
 8000848:	ea40 000c 	orrcs.w	r0, r0, ip
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000894:	ea55 0e06 	orrs.w	lr, r5, r6
 8000898:	d018      	beq.n	80008cc <__aeabi_ddiv+0x114>
 800089a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800089e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008b6:	d1c0      	bne.n	800083a <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	d10b      	bne.n	80008d6 <__aeabi_ddiv+0x11e>
 80008be:	ea41 0100 	orr.w	r1, r1, r0
 80008c2:	f04f 0000 	mov.w	r0, #0
 80008c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ca:	e7b6      	b.n	800083a <__aeabi_ddiv+0x82>
 80008cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d0:	bf04      	itt	eq
 80008d2:	4301      	orreq	r1, r0
 80008d4:	2000      	moveq	r0, #0
 80008d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008da:	bf88      	it	hi
 80008dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e0:	f63f aeaf 	bhi.w	8000642 <__aeabi_dmul+0xde>
 80008e4:	ebb5 0c03 	subs.w	ip, r5, r3
 80008e8:	bf04      	itt	eq
 80008ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f2:	f150 0000 	adcs.w	r0, r0, #0
 80008f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fa:	bd70      	pop	{r4, r5, r6, pc}
 80008fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000900:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000904:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000908:	bfc2      	ittt	gt
 800090a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800090e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000912:	bd70      	popgt	{r4, r5, r6, pc}
 8000914:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000918:	f04f 0e00 	mov.w	lr, #0
 800091c:	3c01      	subs	r4, #1
 800091e:	e690      	b.n	8000642 <__aeabi_dmul+0xde>
 8000920:	ea45 0e06 	orr.w	lr, r5, r6
 8000924:	e68d      	b.n	8000642 <__aeabi_dmul+0xde>
 8000926:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092a:	ea94 0f0c 	teq	r4, ip
 800092e:	bf08      	it	eq
 8000930:	ea95 0f0c 	teqeq	r5, ip
 8000934:	f43f af3b 	beq.w	80007ae <__aeabi_dmul+0x24a>
 8000938:	ea94 0f0c 	teq	r4, ip
 800093c:	d10a      	bne.n	8000954 <__aeabi_ddiv+0x19c>
 800093e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000942:	f47f af34 	bne.w	80007ae <__aeabi_dmul+0x24a>
 8000946:	ea95 0f0c 	teq	r5, ip
 800094a:	f47f af25 	bne.w	8000798 <__aeabi_dmul+0x234>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e72c      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000954:	ea95 0f0c 	teq	r5, ip
 8000958:	d106      	bne.n	8000968 <__aeabi_ddiv+0x1b0>
 800095a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800095e:	f43f aefd 	beq.w	800075c <__aeabi_dmul+0x1f8>
 8000962:	4610      	mov	r0, r2
 8000964:	4619      	mov	r1, r3
 8000966:	e722      	b.n	80007ae <__aeabi_dmul+0x24a>
 8000968:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800096c:	bf18      	it	ne
 800096e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000972:	f47f aec5 	bne.w	8000700 <__aeabi_dmul+0x19c>
 8000976:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097a:	f47f af0d 	bne.w	8000798 <__aeabi_dmul+0x234>
 800097e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000982:	f47f aeeb 	bne.w	800075c <__aeabi_dmul+0x1f8>
 8000986:	e712      	b.n	80007ae <__aeabi_dmul+0x24a>

08000988 <__gedf2>:
 8000988:	f04f 3cff 	mov.w	ip, #4294967295
 800098c:	e006      	b.n	800099c <__cmpdf2+0x4>
 800098e:	bf00      	nop

08000990 <__ledf2>:
 8000990:	f04f 0c01 	mov.w	ip, #1
 8000994:	e002      	b.n	800099c <__cmpdf2+0x4>
 8000996:	bf00      	nop

08000998 <__cmpdf2>:
 8000998:	f04f 0c01 	mov.w	ip, #1
 800099c:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ac:	bf18      	it	ne
 80009ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b2:	d01b      	beq.n	80009ec <__cmpdf2+0x54>
 80009b4:	b001      	add	sp, #4
 80009b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ba:	bf0c      	ite	eq
 80009bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c0:	ea91 0f03 	teqne	r1, r3
 80009c4:	bf02      	ittt	eq
 80009c6:	ea90 0f02 	teqeq	r0, r2
 80009ca:	2000      	moveq	r0, #0
 80009cc:	4770      	bxeq	lr
 80009ce:	f110 0f00 	cmn.w	r0, #0
 80009d2:	ea91 0f03 	teq	r1, r3
 80009d6:	bf58      	it	pl
 80009d8:	4299      	cmppl	r1, r3
 80009da:	bf08      	it	eq
 80009dc:	4290      	cmpeq	r0, r2
 80009de:	bf2c      	ite	cs
 80009e0:	17d8      	asrcs	r0, r3, #31
 80009e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009e6:	f040 0001 	orr.w	r0, r0, #1
 80009ea:	4770      	bx	lr
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	d102      	bne.n	80009fc <__cmpdf2+0x64>
 80009f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fa:	d107      	bne.n	8000a0c <__cmpdf2+0x74>
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d1d6      	bne.n	80009b4 <__cmpdf2+0x1c>
 8000a06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0a:	d0d3      	beq.n	80009b4 <__cmpdf2+0x1c>
 8000a0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_cdrcmple>:
 8000a14:	4684      	mov	ip, r0
 8000a16:	4610      	mov	r0, r2
 8000a18:	4662      	mov	r2, ip
 8000a1a:	468c      	mov	ip, r1
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	4663      	mov	r3, ip
 8000a20:	e000      	b.n	8000a24 <__aeabi_cdcmpeq>
 8000a22:	bf00      	nop

08000a24 <__aeabi_cdcmpeq>:
 8000a24:	b501      	push	{r0, lr}
 8000a26:	f7ff ffb7 	bl	8000998 <__cmpdf2>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	bf48      	it	mi
 8000a2e:	f110 0f00 	cmnmi.w	r0, #0
 8000a32:	bd01      	pop	{r0, pc}

08000a34 <__aeabi_dcmpeq>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff fff4 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a3c:	bf0c      	ite	eq
 8000a3e:	2001      	moveq	r0, #1
 8000a40:	2000      	movne	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmplt>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffea 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a50:	bf34      	ite	cc
 8000a52:	2001      	movcc	r0, #1
 8000a54:	2000      	movcs	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmple>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffe0 	bl	8000a24 <__aeabi_cdcmpeq>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpge>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffce 	bl	8000a14 <__aeabi_cdrcmple>
 8000a78:	bf94      	ite	ls
 8000a7a:	2001      	movls	r0, #1
 8000a7c:	2000      	movhi	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpgt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffc4 	bl	8000a14 <__aeabi_cdrcmple>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmpun>:
 8000a98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa0:	d102      	bne.n	8000aa8 <__aeabi_dcmpun+0x10>
 8000aa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aa6:	d10a      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000aa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab0:	d102      	bne.n	8000ab8 <__aeabi_dcmpun+0x20>
 8000ab2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ab6:	d102      	bne.n	8000abe <__aeabi_dcmpun+0x26>
 8000ab8:	f04f 0000 	mov.w	r0, #0
 8000abc:	4770      	bx	lr
 8000abe:	f04f 0001 	mov.w	r0, #1
 8000ac2:	4770      	bx	lr

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b9ae 	b.w	8000ec8 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f83e 	bl	8000bf4 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__aeabi_d2lz>:
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4605      	mov	r5, r0
 8000b88:	460c      	mov	r4, r1
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	4628      	mov	r0, r5
 8000b90:	4621      	mov	r1, r4
 8000b92:	f7ff ff59 	bl	8000a48 <__aeabi_dcmplt>
 8000b96:	b928      	cbnz	r0, 8000ba4 <__aeabi_d2lz+0x20>
 8000b98:	4628      	mov	r0, r5
 8000b9a:	4621      	mov	r1, r4
 8000b9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ba0:	f000 b80a 	b.w	8000bb8 <__aeabi_d2ulz>
 8000ba4:	4628      	mov	r0, r5
 8000ba6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000baa:	f000 f805 	bl	8000bb8 <__aeabi_d2ulz>
 8000bae:	4240      	negs	r0, r0
 8000bb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bb4:	bd38      	pop	{r3, r4, r5, pc}
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2ulz>:
 8000bb8:	b5d0      	push	{r4, r6, r7, lr}
 8000bba:	2200      	movs	r2, #0
 8000bbc:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <__aeabi_d2ulz+0x34>)
 8000bbe:	4606      	mov	r6, r0
 8000bc0:	460f      	mov	r7, r1
 8000bc2:	f7ff fccf 	bl	8000564 <__aeabi_dmul>
 8000bc6:	f7ff ffa5 	bl	8000b14 <__aeabi_d2uiz>
 8000bca:	4604      	mov	r4, r0
 8000bcc:	f7ff fc50 	bl	8000470 <__aeabi_ui2d>
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4b07      	ldr	r3, [pc, #28]	; (8000bf0 <__aeabi_d2ulz+0x38>)
 8000bd4:	f7ff fcc6 	bl	8000564 <__aeabi_dmul>
 8000bd8:	4602      	mov	r2, r0
 8000bda:	460b      	mov	r3, r1
 8000bdc:	4630      	mov	r0, r6
 8000bde:	4639      	mov	r1, r7
 8000be0:	f7ff fb08 	bl	80001f4 <__aeabi_dsub>
 8000be4:	f7ff ff96 	bl	8000b14 <__aeabi_d2uiz>
 8000be8:	4621      	mov	r1, r4
 8000bea:	bdd0      	pop	{r4, r6, r7, pc}
 8000bec:	3df00000 	.word	0x3df00000
 8000bf0:	41f00000 	.word	0x41f00000

08000bf4 <__udivmoddi4>:
 8000bf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf8:	9e08      	ldr	r6, [sp, #32]
 8000bfa:	460d      	mov	r5, r1
 8000bfc:	4604      	mov	r4, r0
 8000bfe:	4688      	mov	r8, r1
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d14d      	bne.n	8000ca0 <__udivmoddi4+0xac>
 8000c04:	428a      	cmp	r2, r1
 8000c06:	4694      	mov	ip, r2
 8000c08:	d968      	bls.n	8000cdc <__udivmoddi4+0xe8>
 8000c0a:	fab2 f282 	clz	r2, r2
 8000c0e:	b152      	cbz	r2, 8000c26 <__udivmoddi4+0x32>
 8000c10:	fa01 f302 	lsl.w	r3, r1, r2
 8000c14:	f1c2 0120 	rsb	r1, r2, #32
 8000c18:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c20:	ea41 0803 	orr.w	r8, r1, r3
 8000c24:	4094      	lsls	r4, r2
 8000c26:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c2a:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c2e:	fa1f fe8c 	uxth.w	lr, ip
 8000c32:	fb01 8817 	mls	r8, r1, r7, r8
 8000c36:	fb07 f00e 	mul.w	r0, r7, lr
 8000c3a:	0c23      	lsrs	r3, r4, #16
 8000c3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c40:	4298      	cmp	r0, r3
 8000c42:	d90a      	bls.n	8000c5a <__udivmoddi4+0x66>
 8000c44:	eb1c 0303 	adds.w	r3, ip, r3
 8000c48:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c4c:	f080 811e 	bcs.w	8000e8c <__udivmoddi4+0x298>
 8000c50:	4298      	cmp	r0, r3
 8000c52:	f240 811b 	bls.w	8000e8c <__udivmoddi4+0x298>
 8000c56:	3f02      	subs	r7, #2
 8000c58:	4463      	add	r3, ip
 8000c5a:	1a1b      	subs	r3, r3, r0
 8000c5c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c60:	fb01 3310 	mls	r3, r1, r0, r3
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	b2a4      	uxth	r4, r4
 8000c6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6e:	45a6      	cmp	lr, r4
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x94>
 8000c72:	eb1c 0404 	adds.w	r4, ip, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c7a:	f080 8109 	bcs.w	8000e90 <__udivmoddi4+0x29c>
 8000c7e:	45a6      	cmp	lr, r4
 8000c80:	f240 8106 	bls.w	8000e90 <__udivmoddi4+0x29c>
 8000c84:	4464      	add	r4, ip
 8000c86:	3802      	subs	r0, #2
 8000c88:	2100      	movs	r1, #0
 8000c8a:	eba4 040e 	sub.w	r4, r4, lr
 8000c8e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c92:	b11e      	cbz	r6, 8000c9c <__udivmoddi4+0xa8>
 8000c94:	2300      	movs	r3, #0
 8000c96:	40d4      	lsrs	r4, r2
 8000c98:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca0:	428b      	cmp	r3, r1
 8000ca2:	d908      	bls.n	8000cb6 <__udivmoddi4+0xc2>
 8000ca4:	2e00      	cmp	r6, #0
 8000ca6:	f000 80ee 	beq.w	8000e86 <__udivmoddi4+0x292>
 8000caa:	2100      	movs	r1, #0
 8000cac:	e9c6 0500 	strd	r0, r5, [r6]
 8000cb0:	4608      	mov	r0, r1
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	fab3 f183 	clz	r1, r3
 8000cba:	2900      	cmp	r1, #0
 8000cbc:	d14a      	bne.n	8000d54 <__udivmoddi4+0x160>
 8000cbe:	42ab      	cmp	r3, r5
 8000cc0:	d302      	bcc.n	8000cc8 <__udivmoddi4+0xd4>
 8000cc2:	4282      	cmp	r2, r0
 8000cc4:	f200 80fc 	bhi.w	8000ec0 <__udivmoddi4+0x2cc>
 8000cc8:	1a84      	subs	r4, r0, r2
 8000cca:	eb65 0303 	sbc.w	r3, r5, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	4698      	mov	r8, r3
 8000cd2:	2e00      	cmp	r6, #0
 8000cd4:	d0e2      	beq.n	8000c9c <__udivmoddi4+0xa8>
 8000cd6:	e9c6 4800 	strd	r4, r8, [r6]
 8000cda:	e7df      	b.n	8000c9c <__udivmoddi4+0xa8>
 8000cdc:	b902      	cbnz	r2, 8000ce0 <__udivmoddi4+0xec>
 8000cde:	deff      	udf	#255	; 0xff
 8000ce0:	fab2 f282 	clz	r2, r2
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f040 8091 	bne.w	8000e0c <__udivmoddi4+0x218>
 8000cea:	eba1 000c 	sub.w	r0, r1, ip
 8000cee:	2101      	movs	r1, #1
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cfc:	fb07 0013 	mls	r0, r7, r3, r0
 8000d00:	0c25      	lsrs	r5, r4, #16
 8000d02:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d06:	fb0e f003 	mul.w	r0, lr, r3
 8000d0a:	42a8      	cmp	r0, r5
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x12c>
 8000d0e:	eb1c 0505 	adds.w	r5, ip, r5
 8000d12:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x12a>
 8000d18:	42a8      	cmp	r0, r5
 8000d1a:	f200 80ce 	bhi.w	8000eba <__udivmoddi4+0x2c6>
 8000d1e:	4643      	mov	r3, r8
 8000d20:	1a2d      	subs	r5, r5, r0
 8000d22:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d26:	fb07 5510 	mls	r5, r7, r0, r5
 8000d2a:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d34:	45a6      	cmp	lr, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x156>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d40:	d202      	bcs.n	8000d48 <__udivmoddi4+0x154>
 8000d42:	45a6      	cmp	lr, r4
 8000d44:	f200 80b6 	bhi.w	8000eb4 <__udivmoddi4+0x2c0>
 8000d48:	4628      	mov	r0, r5
 8000d4a:	eba4 040e 	sub.w	r4, r4, lr
 8000d4e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d52:	e79e      	b.n	8000c92 <__udivmoddi4+0x9e>
 8000d54:	f1c1 0720 	rsb	r7, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d62:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d6a:	fbba f8f9 	udiv	r8, sl, r9
 8000d6e:	fa20 f307 	lsr.w	r3, r0, r7
 8000d72:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d76:	408d      	lsls	r5, r1
 8000d78:	fa1f fe8c 	uxth.w	lr, ip
 8000d7c:	431d      	orrs	r5, r3
 8000d7e:	fa00 f301 	lsl.w	r3, r0, r1
 8000d82:	fb08 f00e 	mul.w	r0, r8, lr
 8000d86:	0c2c      	lsrs	r4, r5, #16
 8000d88:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d8c:	42a0      	cmp	r0, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b8>
 8000d94:	eb1c 0404 	adds.w	r4, ip, r4
 8000d98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d9c:	f080 8088 	bcs.w	8000eb0 <__udivmoddi4+0x2bc>
 8000da0:	42a0      	cmp	r0, r4
 8000da2:	f240 8085 	bls.w	8000eb0 <__udivmoddi4+0x2bc>
 8000da6:	f1a8 0802 	sub.w	r8, r8, #2
 8000daa:	4464      	add	r4, ip
 8000dac:	1a24      	subs	r4, r4, r0
 8000dae:	fbb4 f0f9 	udiv	r0, r4, r9
 8000db2:	fb09 4410 	mls	r4, r9, r0, r4
 8000db6:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dba:	b2ad      	uxth	r5, r5
 8000dbc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dc0:	45a6      	cmp	lr, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1e2>
 8000dc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc8:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dcc:	d26c      	bcs.n	8000ea8 <__udivmoddi4+0x2b4>
 8000dce:	45a6      	cmp	lr, r4
 8000dd0:	d96a      	bls.n	8000ea8 <__udivmoddi4+0x2b4>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4464      	add	r4, ip
 8000dd6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dda:	fba0 9502 	umull	r9, r5, r0, r2
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	42ac      	cmp	r4, r5
 8000de4:	46c8      	mov	r8, r9
 8000de6:	46ae      	mov	lr, r5
 8000de8:	d356      	bcc.n	8000e98 <__udivmoddi4+0x2a4>
 8000dea:	d053      	beq.n	8000e94 <__udivmoddi4+0x2a0>
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d069      	beq.n	8000ec4 <__udivmoddi4+0x2d0>
 8000df0:	ebb3 0208 	subs.w	r2, r3, r8
 8000df4:	eb64 040e 	sbc.w	r4, r4, lr
 8000df8:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfc:	fa04 f707 	lsl.w	r7, r4, r7
 8000e00:	431f      	orrs	r7, r3
 8000e02:	40cc      	lsrs	r4, r1
 8000e04:	e9c6 7400 	strd	r7, r4, [r6]
 8000e08:	2100      	movs	r1, #0
 8000e0a:	e747      	b.n	8000c9c <__udivmoddi4+0xa8>
 8000e0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e10:	f1c2 0120 	rsb	r1, r2, #32
 8000e14:	fa25 f301 	lsr.w	r3, r5, r1
 8000e18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1c:	fa20 f101 	lsr.w	r1, r0, r1
 8000e20:	4095      	lsls	r5, r2
 8000e22:	430d      	orrs	r5, r1
 8000e24:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e28:	fb07 3311 	mls	r3, r7, r1, r3
 8000e2c:	fa1f fe8c 	uxth.w	lr, ip
 8000e30:	0c28      	lsrs	r0, r5, #16
 8000e32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e36:	fb01 f30e 	mul.w	r3, r1, lr
 8000e3a:	4283      	cmp	r3, r0
 8000e3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e40:	d908      	bls.n	8000e54 <__udivmoddi4+0x260>
 8000e42:	eb1c 0000 	adds.w	r0, ip, r0
 8000e46:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e4a:	d22f      	bcs.n	8000eac <__udivmoddi4+0x2b8>
 8000e4c:	4283      	cmp	r3, r0
 8000e4e:	d92d      	bls.n	8000eac <__udivmoddi4+0x2b8>
 8000e50:	3902      	subs	r1, #2
 8000e52:	4460      	add	r0, ip
 8000e54:	1ac0      	subs	r0, r0, r3
 8000e56:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e5a:	fb07 0013 	mls	r0, r7, r3, r0
 8000e5e:	b2ad      	uxth	r5, r5
 8000e60:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e64:	fb03 f00e 	mul.w	r0, r3, lr
 8000e68:	42a8      	cmp	r0, r5
 8000e6a:	d908      	bls.n	8000e7e <__udivmoddi4+0x28a>
 8000e6c:	eb1c 0505 	adds.w	r5, ip, r5
 8000e70:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e74:	d216      	bcs.n	8000ea4 <__udivmoddi4+0x2b0>
 8000e76:	42a8      	cmp	r0, r5
 8000e78:	d914      	bls.n	8000ea4 <__udivmoddi4+0x2b0>
 8000e7a:	3b02      	subs	r3, #2
 8000e7c:	4465      	add	r5, ip
 8000e7e:	1a28      	subs	r0, r5, r0
 8000e80:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e84:	e738      	b.n	8000cf8 <__udivmoddi4+0x104>
 8000e86:	4631      	mov	r1, r6
 8000e88:	4630      	mov	r0, r6
 8000e8a:	e707      	b.n	8000c9c <__udivmoddi4+0xa8>
 8000e8c:	462f      	mov	r7, r5
 8000e8e:	e6e4      	b.n	8000c5a <__udivmoddi4+0x66>
 8000e90:	4618      	mov	r0, r3
 8000e92:	e6f9      	b.n	8000c88 <__udivmoddi4+0x94>
 8000e94:	454b      	cmp	r3, r9
 8000e96:	d2a9      	bcs.n	8000dec <__udivmoddi4+0x1f8>
 8000e98:	ebb9 0802 	subs.w	r8, r9, r2
 8000e9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ea0:	3801      	subs	r0, #1
 8000ea2:	e7a3      	b.n	8000dec <__udivmoddi4+0x1f8>
 8000ea4:	4643      	mov	r3, r8
 8000ea6:	e7ea      	b.n	8000e7e <__udivmoddi4+0x28a>
 8000ea8:	4628      	mov	r0, r5
 8000eaa:	e794      	b.n	8000dd6 <__udivmoddi4+0x1e2>
 8000eac:	4641      	mov	r1, r8
 8000eae:	e7d1      	b.n	8000e54 <__udivmoddi4+0x260>
 8000eb0:	46d0      	mov	r8, sl
 8000eb2:	e77b      	b.n	8000dac <__udivmoddi4+0x1b8>
 8000eb4:	4464      	add	r4, ip
 8000eb6:	3802      	subs	r0, #2
 8000eb8:	e747      	b.n	8000d4a <__udivmoddi4+0x156>
 8000eba:	3b02      	subs	r3, #2
 8000ebc:	4465      	add	r5, ip
 8000ebe:	e72f      	b.n	8000d20 <__udivmoddi4+0x12c>
 8000ec0:	4608      	mov	r0, r1
 8000ec2:	e706      	b.n	8000cd2 <__udivmoddi4+0xde>
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0xa8>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <case_insensitive_strcmp>:
    return version;
}

/* Case insensitive string comparison, doesn't consider two NULL pointers equal though */
static int case_insensitive_strcmp(const unsigned char *string1, const unsigned char *string2)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
    if ((string1 == NULL) || (string2 == NULL))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d002      	beq.n	8000ee2 <case_insensitive_strcmp+0x16>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <case_insensitive_strcmp+0x1a>
    {
        return 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	e056      	b.n	8000f94 <case_insensitive_strcmp+0xc8>
    }

    if (string1 == string2)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	429a      	cmp	r2, r3
 8000eec:	d10d      	bne.n	8000f0a <case_insensitive_strcmp+0x3e>
    {
        return 0;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e050      	b.n	8000f94 <case_insensitive_strcmp+0xc8>
    }

    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
    {
        if (*string1 == '\0')
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d101      	bne.n	8000efe <case_insensitive_strcmp+0x32>
        {
            return 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e04a      	b.n	8000f94 <case_insensitive_strcmp+0xc8>
    for(; tolower(*string1) == tolower(*string2); (void)string1++, string2++)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3301      	adds	r3, #1
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	3301      	adds	r3, #1
 8000f08:	603b      	str	r3, [r7, #0]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	73fb      	strb	r3, [r7, #15]
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	3301      	adds	r3, #1
 8000f14:	4a22      	ldr	r2, [pc, #136]	; (8000fa0 <case_insensitive_strcmp+0xd4>)
 8000f16:	4413      	add	r3, r2
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d103      	bne.n	8000f2a <case_insensitive_strcmp+0x5e>
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
 8000f24:	f103 0220 	add.w	r2, r3, #32
 8000f28:	e000      	b.n	8000f2c <case_insensitive_strcmp+0x60>
 8000f2a:	7bfa      	ldrb	r2, [r7, #15]
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	73bb      	strb	r3, [r7, #14]
 8000f32:	7bbb      	ldrb	r3, [r7, #14]
 8000f34:	3301      	adds	r3, #1
 8000f36:	491a      	ldr	r1, [pc, #104]	; (8000fa0 <case_insensitive_strcmp+0xd4>)
 8000f38:	440b      	add	r3, r1
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	f003 0303 	and.w	r3, r3, #3
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d102      	bne.n	8000f4a <case_insensitive_strcmp+0x7e>
 8000f44:	7bbb      	ldrb	r3, [r7, #14]
 8000f46:	3320      	adds	r3, #32
 8000f48:	e000      	b.n	8000f4c <case_insensitive_strcmp+0x80>
 8000f4a:	7bbb      	ldrb	r3, [r7, #14]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d0d0      	beq.n	8000ef2 <case_insensitive_strcmp+0x26>
        }
    }

    return tolower(*string1) - tolower(*string2);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	737b      	strb	r3, [r7, #13]
 8000f56:	7b7b      	ldrb	r3, [r7, #13]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	4a11      	ldr	r2, [pc, #68]	; (8000fa0 <case_insensitive_strcmp+0xd4>)
 8000f5c:	4413      	add	r3, r2
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	d103      	bne.n	8000f70 <case_insensitive_strcmp+0xa4>
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
 8000f6a:	f103 0220 	add.w	r2, r3, #32
 8000f6e:	e000      	b.n	8000f72 <case_insensitive_strcmp+0xa6>
 8000f70:	7b7a      	ldrb	r2, [r7, #13]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	781b      	ldrb	r3, [r3, #0]
 8000f76:	733b      	strb	r3, [r7, #12]
 8000f78:	7b3b      	ldrb	r3, [r7, #12]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	4908      	ldr	r1, [pc, #32]	; (8000fa0 <case_insensitive_strcmp+0xd4>)
 8000f7e:	440b      	add	r3, r1
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d102      	bne.n	8000f90 <case_insensitive_strcmp+0xc4>
 8000f8a:	7b3b      	ldrb	r3, [r7, #12]
 8000f8c:	3320      	adds	r3, #32
 8000f8e:	e000      	b.n	8000f92 <case_insensitive_strcmp+0xc6>
 8000f90:	7b3b      	ldrb	r3, [r7, #12]
 8000f92:	1ad3      	subs	r3, r2, r3
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3714      	adds	r7, #20
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop
 8000fa0:	0800aea8 	.word	0x0800aea8

08000fa4 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2028      	movs	r0, #40	; 0x28
 8000fb2:	4798      	blx	r3
 8000fb4:	60f8      	str	r0, [r7, #12]
    if (node)
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d004      	beq.n	8000fc6 <cJSON_New_Item+0x22>
    {
        memset(node, '\0', sizeof(cJSON));
 8000fbc:	2228      	movs	r2, #40	; 0x28
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	68f8      	ldr	r0, [r7, #12]
 8000fc2:	f005 f9d1 	bl	8006368 <memset>
    }

    return node;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8000fdc:	e037      	b.n	800104e <cJSON_Delete+0x7e>
    {
        next = item->next;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d108      	bne.n	8001002 <cJSON_Delete+0x32>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	689b      	ldr	r3, [r3, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d004      	beq.n	8001002 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff ffe7 	bl	8000fd0 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	68db      	ldr	r3, [r3, #12]
 8001006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d109      	bne.n	8001022 <cJSON_Delete+0x52>
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	691b      	ldr	r3, [r3, #16]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d005      	beq.n	8001022 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8001016:	4b12      	ldr	r3, [pc, #72]	; (8001060 <cJSON_Delete+0x90>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	687a      	ldr	r2, [r7, #4]
 800101c:	6912      	ldr	r2, [r2, #16]
 800101e:	4610      	mov	r0, r2
 8001020:	4798      	blx	r3
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800102a:	2b00      	cmp	r3, #0
 800102c:	d109      	bne.n	8001042 <cJSON_Delete+0x72>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 8001036:	4b0a      	ldr	r3, [pc, #40]	; (8001060 <cJSON_Delete+0x90>)
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	6a12      	ldr	r2, [r2, #32]
 800103e:	4610      	mov	r0, r2
 8001040:	4798      	blx	r3
        }
        global_hooks.deallocate(item);
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <cJSON_Delete+0x90>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	6878      	ldr	r0, [r7, #4]
 8001048:	4798      	blx	r3
        item = next;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d1c4      	bne.n	8000fde <cJSON_Delete+0xe>
    }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3710      	adds	r7, #16
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000000 	.word	0x20000000

08001064 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8001068:	232e      	movs	r3, #46	; 0x2e
#endif
}
 800106a:	4618      	mov	r0, r3
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
 8001072:	0000      	movs	r0, r0
 8001074:	0000      	movs	r0, r0
	...

08001078 <parse_number>:
/* get a pointer to the buffer at the position */
#define buffer_at_offset(buffer) ((buffer)->content + (buffer)->offset)

/* Parse the input text to generate a number, and populate the result into item. */
static cJSON_bool parse_number(cJSON * const item, parse_buffer * const input_buffer)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b098      	sub	sp, #96	; 0x60
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	6039      	str	r1, [r7, #0]
    double number = 0;
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    unsigned char *after_end = NULL;
 800108e:	2300      	movs	r3, #0
 8001090:	64bb      	str	r3, [r7, #72]	; 0x48
    unsigned char number_c_string[64];
    unsigned char decimal_point = get_decimal_point();
 8001092:	f7ff ffe7 	bl	8001064 <get_decimal_point>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    size_t i = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	65fb      	str	r3, [r7, #92]	; 0x5c

    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <parse_number+0x36>
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d101      	bne.n	80010b2 <parse_number+0x3a>
    {
        return false;
 80010ae:	2300      	movs	r3, #0
 80010b0:	e0c6      	b.n	8001240 <parse_number+0x1c8>
    }

    /* copy the number into a temporary buffer and replace '.' with the decimal point
     * of the current locale (for strtod)
     * This also takes care of '\0' not necessarily being available for marking the end of the input */
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010b6:	e063      	b.n	8001180 <parse_number+0x108>
    {
        switch (buffer_at_offset(input_buffer)[i])
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	681a      	ldr	r2, [r3, #0]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6899      	ldr	r1, [r3, #8]
 80010c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c2:	440b      	add	r3, r1
 80010c4:	4413      	add	r3, r2
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b45      	cmp	r3, #69	; 0x45
 80010ca:	dc3d      	bgt.n	8001148 <parse_number+0xd0>
 80010cc:	2b2b      	cmp	r3, #43	; 0x2b
 80010ce:	db66      	blt.n	800119e <parse_number+0x126>
 80010d0:	3b2b      	subs	r3, #43	; 0x2b
 80010d2:	2b1a      	cmp	r3, #26
 80010d4:	d863      	bhi.n	800119e <parse_number+0x126>
 80010d6:	a201      	add	r2, pc, #4	; (adr r2, 80010dc <parse_number+0x64>)
 80010d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010dc:	0800114d 	.word	0x0800114d
 80010e0:	0800119f 	.word	0x0800119f
 80010e4:	0800114d 	.word	0x0800114d
 80010e8:	0800116b 	.word	0x0800116b
 80010ec:	0800119f 	.word	0x0800119f
 80010f0:	0800114d 	.word	0x0800114d
 80010f4:	0800114d 	.word	0x0800114d
 80010f8:	0800114d 	.word	0x0800114d
 80010fc:	0800114d 	.word	0x0800114d
 8001100:	0800114d 	.word	0x0800114d
 8001104:	0800114d 	.word	0x0800114d
 8001108:	0800114d 	.word	0x0800114d
 800110c:	0800114d 	.word	0x0800114d
 8001110:	0800114d 	.word	0x0800114d
 8001114:	0800114d 	.word	0x0800114d
 8001118:	0800119f 	.word	0x0800119f
 800111c:	0800119f 	.word	0x0800119f
 8001120:	0800119f 	.word	0x0800119f
 8001124:	0800119f 	.word	0x0800119f
 8001128:	0800119f 	.word	0x0800119f
 800112c:	0800119f 	.word	0x0800119f
 8001130:	0800119f 	.word	0x0800119f
 8001134:	0800119f 	.word	0x0800119f
 8001138:	0800119f 	.word	0x0800119f
 800113c:	0800119f 	.word	0x0800119f
 8001140:	0800119f 	.word	0x0800119f
 8001144:	0800114d 	.word	0x0800114d
 8001148:	2b65      	cmp	r3, #101	; 0x65
 800114a:	d128      	bne.n	800119e <parse_number+0x126>
            case '9':
            case '+':
            case '-':
            case 'e':
            case 'E':
                number_c_string[i] = buffer_at_offset(input_buffer)[i];
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	6899      	ldr	r1, [r3, #8]
 8001154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001156:	440b      	add	r3, r1
 8001158:	4413      	add	r3, r2
 800115a:	7819      	ldrb	r1, [r3, #0]
 800115c:	f107 0208 	add.w	r2, r7, #8
 8001160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001162:	4413      	add	r3, r2
 8001164:	460a      	mov	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
                break;
 8001168:	e007      	b.n	800117a <parse_number+0x102>

            case '.':
                number_c_string[i] = decimal_point;
 800116a:	f107 0208 	add.w	r2, r7, #8
 800116e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001170:	4413      	add	r3, r2
 8001172:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8001176:	701a      	strb	r2, [r3, #0]
                break;
 8001178:	bf00      	nop
    for (i = 0; (i < (sizeof(number_c_string) - 1)) && can_access_at_index(input_buffer, i); i++)
 800117a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800117c:	3301      	adds	r3, #1
 800117e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001182:	2b3e      	cmp	r3, #62	; 0x3e
 8001184:	d80d      	bhi.n	80011a2 <parse_number+0x12a>
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00a      	beq.n	80011a2 <parse_number+0x12a>
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	689a      	ldr	r2, [r3, #8]
 8001190:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001192:	441a      	add	r2, r3
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	429a      	cmp	r2, r3
 800119a:	d38d      	bcc.n	80010b8 <parse_number+0x40>

            default:
                goto loop_end;
        }
    }
loop_end:
 800119c:	e001      	b.n	80011a2 <parse_number+0x12a>
                goto loop_end;
 800119e:	bf00      	nop
 80011a0:	e000      	b.n	80011a4 <parse_number+0x12c>
loop_end:
 80011a2:	bf00      	nop
    number_c_string[i] = '\0';
 80011a4:	f107 0208 	add.w	r2, r7, #8
 80011a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011aa:	4413      	add	r3, r2
 80011ac:	2200      	movs	r2, #0
 80011ae:	701a      	strb	r2, [r3, #0]

    number = strtod((const char*)number_c_string, (char**)&after_end);
 80011b0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4611      	mov	r1, r2
 80011ba:	4618      	mov	r0, r3
 80011bc:	f006 fde4 	bl	8007d88 <strtod>
 80011c0:	e9c7 0114 	strd	r0, r1, [r7, #80]	; 0x50
    if (number_c_string == after_end)
 80011c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80011c6:	f107 0308 	add.w	r3, r7, #8
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d101      	bne.n	80011d2 <parse_number+0x15a>
    {
        return false; /* parse_error */
 80011ce:	2300      	movs	r3, #0
 80011d0:	e036      	b.n	8001240 <parse_number+0x1c8>
    }

    item->valuedouble = number;
 80011d2:	6879      	ldr	r1, [r7, #4]
 80011d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80011d8:	e9c1 2306 	strd	r2, r3, [r1, #24]

    /* use saturation in case of overflow */
    if (number >= INT_MAX)
 80011dc:	a31a      	add	r3, pc, #104	; (adr r3, 8001248 <parse_number+0x1d0>)
 80011de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80011e6:	f7ff fc43 	bl	8000a70 <__aeabi_dcmpge>
 80011ea:	4603      	mov	r3, r0
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d004      	beq.n	80011fa <parse_number+0x182>
    {
        item->valueint = INT_MAX;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011f6:	615a      	str	r2, [r3, #20]
 80011f8:	e015      	b.n	8001226 <parse_number+0x1ae>
    }
    else if (number <= (double)INT_MIN)
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b14      	ldr	r3, [pc, #80]	; (8001250 <parse_number+0x1d8>)
 8001200:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001204:	f7ff fc2a 	bl	8000a5c <__aeabi_dcmple>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d004      	beq.n	8001218 <parse_number+0x1a0>
    {
        item->valueint = INT_MIN;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001214:	615a      	str	r2, [r3, #20]
 8001216:	e006      	b.n	8001226 <parse_number+0x1ae>
    }
    else
    {
        item->valueint = (int)number;
 8001218:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800121c:	f7ff fc52 	bl	8000ac4 <__aeabi_d2iz>
 8001220:	4602      	mov	r2, r0
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	615a      	str	r2, [r3, #20]
    }

    item->type = cJSON_Number;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2208      	movs	r2, #8
 800122a:	60da      	str	r2, [r3, #12]

    input_buffer->offset += (size_t)(after_end - number_c_string);
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8001232:	f107 0208 	add.w	r2, r7, #8
 8001236:	1a8a      	subs	r2, r1, r2
 8001238:	441a      	add	r2, r3
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	609a      	str	r2, [r3, #8]
    return true;
 800123e:	2301      	movs	r3, #1
}
 8001240:	4618      	mov	r0, r3
 8001242:	3760      	adds	r7, #96	; 0x60
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	ffc00000 	.word	0xffc00000
 800124c:	41dfffff 	.word	0x41dfffff
 8001250:	c1e00000 	.word	0xc1e00000

08001254 <parse_hex4>:
    return true;
}

/* parse 4 digit hexadecimal number */
static unsigned parse_hex4(const unsigned char * const input)
{
 8001254:	b480      	push	{r7}
 8001256:	b085      	sub	sp, #20
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
    unsigned int h = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	60fb      	str	r3, [r7, #12]
    size_t i = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	60bb      	str	r3, [r7, #8]

    for (i = 0; i < 4; i++)
 8001264:	2300      	movs	r3, #0
 8001266:	60bb      	str	r3, [r7, #8]
 8001268:	e04c      	b.n	8001304 <parse_hex4+0xb0>
    {
        /* parse digit */
        if ((input[i] >= '0') && (input[i] <= '9'))
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	4413      	add	r3, r2
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b2f      	cmp	r3, #47	; 0x2f
 8001274:	d90f      	bls.n	8001296 <parse_hex4+0x42>
 8001276:	687a      	ldr	r2, [r7, #4]
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	4413      	add	r3, r2
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b39      	cmp	r3, #57	; 0x39
 8001280:	d809      	bhi.n	8001296 <parse_hex4+0x42>
        {
            h += (unsigned int) input[i] - '0';
 8001282:	687a      	ldr	r2, [r7, #4]
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	4413      	add	r3, r2
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	4413      	add	r3, r2
 8001290:	3b30      	subs	r3, #48	; 0x30
 8001292:	60fb      	str	r3, [r7, #12]
 8001294:	e02d      	b.n	80012f2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'A') && (input[i] <= 'F'))
 8001296:	687a      	ldr	r2, [r7, #4]
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	4413      	add	r3, r2
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	2b40      	cmp	r3, #64	; 0x40
 80012a0:	d90f      	bls.n	80012c2 <parse_hex4+0x6e>
 80012a2:	687a      	ldr	r2, [r7, #4]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	2b46      	cmp	r3, #70	; 0x46
 80012ac:	d809      	bhi.n	80012c2 <parse_hex4+0x6e>
        {
            h += (unsigned int) 10 + input[i] - 'A';
 80012ae:	687a      	ldr	r2, [r7, #4]
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4413      	add	r3, r2
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	3b37      	subs	r3, #55	; 0x37
 80012be:	60fb      	str	r3, [r7, #12]
 80012c0:	e017      	b.n	80012f2 <parse_hex4+0x9e>
        }
        else if ((input[i] >= 'a') && (input[i] <= 'f'))
 80012c2:	687a      	ldr	r2, [r7, #4]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	4413      	add	r3, r2
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b60      	cmp	r3, #96	; 0x60
 80012cc:	d90f      	bls.n	80012ee <parse_hex4+0x9a>
 80012ce:	687a      	ldr	r2, [r7, #4]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4413      	add	r3, r2
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b66      	cmp	r3, #102	; 0x66
 80012d8:	d809      	bhi.n	80012ee <parse_hex4+0x9a>
        {
            h += (unsigned int) 10 + input[i] - 'a';
 80012da:	687a      	ldr	r2, [r7, #4]
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	4413      	add	r3, r2
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	4413      	add	r3, r2
 80012e8:	3b57      	subs	r3, #87	; 0x57
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	e001      	b.n	80012f2 <parse_hex4+0x9e>
        }
        else /* invalid */
        {
            return 0;
 80012ee:	2300      	movs	r3, #0
 80012f0:	e00c      	b.n	800130c <parse_hex4+0xb8>
        }

        if (i < 3)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d802      	bhi.n	80012fe <parse_hex4+0xaa>
        {
            /* shift left to make place for the next nibble */
            h = h << 4;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	011b      	lsls	r3, r3, #4
 80012fc:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < 4; i++)
 80012fe:	68bb      	ldr	r3, [r7, #8]
 8001300:	3301      	adds	r3, #1
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	2b03      	cmp	r3, #3
 8001308:	d9af      	bls.n	800126a <parse_hex4+0x16>
        }
    }

    return h;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	4618      	mov	r0, r3
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <utf16_literal_to_utf8>:

/* converts a UTF-16 literal to UTF-8
 * A literal can be one or two sequences of the form \uXXXX */
static unsigned char utf16_literal_to_utf8(const unsigned char * const input_pointer, const unsigned char * const input_end, unsigned char **output_pointer)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b08a      	sub	sp, #40	; 0x28
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	607a      	str	r2, [r7, #4]
    long unsigned int codepoint = 0;
 8001324:	2300      	movs	r3, #0
 8001326:	627b      	str	r3, [r7, #36]	; 0x24
    unsigned int first_code = 0;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    const unsigned char *first_sequence = input_pointer;
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	61bb      	str	r3, [r7, #24]
    unsigned char utf8_length = 0;
 8001330:	2300      	movs	r3, #0
 8001332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    unsigned char utf8_position = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    unsigned char sequence_length = 0;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    unsigned char first_byte_mark = 0;
 8001342:	2300      	movs	r3, #0
 8001344:	f887 3020 	strb.w	r3, [r7, #32]

    if ((input_end - first_sequence) < 6)
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	69bb      	ldr	r3, [r7, #24]
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	2b05      	cmp	r3, #5
 8001350:	f340 80b7 	ble.w	80014c2 <utf16_literal_to_utf8+0x1aa>
        /* input ends unexpectedly */
        goto fail;
    }

    /* get the first utf16 sequence */
    first_code = parse_hex4(first_sequence + 2);
 8001354:	69bb      	ldr	r3, [r7, #24]
 8001356:	3302      	adds	r3, #2
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff ff7b 	bl	8001254 <parse_hex4>
 800135e:	61f8      	str	r0, [r7, #28]

    /* check that the code is valid */
    if (((first_code >= 0xDC00) && (first_code <= 0xDFFF)))
 8001360:	69fb      	ldr	r3, [r7, #28]
 8001362:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001366:	d304      	bcc.n	8001372 <utf16_literal_to_utf8+0x5a>
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 800136e:	f0c0 80aa 	bcc.w	80014c6 <utf16_literal_to_utf8+0x1ae>
    {
        goto fail;
    }

    /* UTF16 surrogate pair */
    if ((first_code >= 0xD800) && (first_code <= 0xDBFF))
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	f5b3 4f58 	cmp.w	r3, #55296	; 0xd800
 8001378:	d337      	bcc.n	80013ea <utf16_literal_to_utf8+0xd2>
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 8001380:	d233      	bcs.n	80013ea <utf16_literal_to_utf8+0xd2>
    {
        const unsigned char *second_sequence = first_sequence + 6;
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	3306      	adds	r3, #6
 8001386:	617b      	str	r3, [r7, #20]
        unsigned int second_code = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
        sequence_length = 12; /* \uXXXX\uXXXX */
 800138c:	230c      	movs	r3, #12
 800138e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

        if ((input_end - second_sequence) < 6)
 8001392:	68ba      	ldr	r2, [r7, #8]
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	1ad3      	subs	r3, r2, r3
 8001398:	2b05      	cmp	r3, #5
 800139a:	f340 8096 	ble.w	80014ca <utf16_literal_to_utf8+0x1b2>
        {
            /* input ends unexpectedly */
            goto fail;
        }

        if ((second_sequence[0] != '\\') || (second_sequence[1] != 'u'))
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b5c      	cmp	r3, #92	; 0x5c
 80013a4:	f040 8093 	bne.w	80014ce <utf16_literal_to_utf8+0x1b6>
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	3301      	adds	r3, #1
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	2b75      	cmp	r3, #117	; 0x75
 80013b0:	f040 808d 	bne.w	80014ce <utf16_literal_to_utf8+0x1b6>
            /* missing second half of the surrogate pair */
            goto fail;
        }

        /* get the second utf16 sequence */
        second_code = parse_hex4(second_sequence + 2);
 80013b4:	697b      	ldr	r3, [r7, #20]
 80013b6:	3302      	adds	r3, #2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff ff4b 	bl	8001254 <parse_hex4>
 80013be:	6138      	str	r0, [r7, #16]
        /* check that the code is valid */
        if ((second_code < 0xDC00) || (second_code > 0xDFFF))
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	f5b3 4f5c 	cmp.w	r3, #56320	; 0xdc00
 80013c6:	f0c0 8084 	bcc.w	80014d2 <utf16_literal_to_utf8+0x1ba>
 80013ca:	693b      	ldr	r3, [r7, #16]
 80013cc:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 80013d0:	d27f      	bcs.n	80014d2 <utf16_literal_to_utf8+0x1ba>
            goto fail;
        }


        /* calculate the unicode codepoint from the surrogate pair */
        codepoint = 0x10000 + (((first_code & 0x3FF) << 10) | (second_code & 0x3FF));
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	029a      	lsls	r2, r3, #10
 80013d6:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <utf16_literal_to_utf8+0x1cc>)
 80013d8:	4013      	ands	r3, r2
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80013e0:	4313      	orrs	r3, r2
 80013e2:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    {
 80013e8:	e004      	b.n	80013f4 <utf16_literal_to_utf8+0xdc>
    }
    else
    {
        sequence_length = 6; /* \uXXXX */
 80013ea:	2306      	movs	r3, #6
 80013ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
        codepoint = first_code;
 80013f0:	69fb      	ldr	r3, [r7, #28]
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    }

    /* encode as UTF-8
     * takes at maximum 4 bytes to encode:
     * 11110xxx 10xxxxxx 10xxxxxx 10xxxxxx */
    if (codepoint < 0x80)
 80013f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013f6:	2b7f      	cmp	r3, #127	; 0x7f
 80013f8:	d803      	bhi.n	8001402 <utf16_literal_to_utf8+0xea>
    {
        /* normal ascii, encoding 0xxxxxxx */
        utf8_length = 1;
 80013fa:	2301      	movs	r3, #1
 80013fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8001400:	e01f      	b.n	8001442 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x800)
 8001402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001404:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001408:	d206      	bcs.n	8001418 <utf16_literal_to_utf8+0x100>
    {
        /* two bytes, encoding 110xxxxx 10xxxxxx */
        utf8_length = 2;
 800140a:	2302      	movs	r3, #2
 800140c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xC0; /* 11000000 */
 8001410:	23c0      	movs	r3, #192	; 0xc0
 8001412:	f887 3020 	strb.w	r3, [r7, #32]
 8001416:	e014      	b.n	8001442 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint < 0x10000)
 8001418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800141e:	d206      	bcs.n	800142e <utf16_literal_to_utf8+0x116>
    {
        /* three bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx */
        utf8_length = 3;
 8001420:	2303      	movs	r3, #3
 8001422:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xE0; /* 11100000 */
 8001426:	23e0      	movs	r3, #224	; 0xe0
 8001428:	f887 3020 	strb.w	r3, [r7, #32]
 800142c:	e009      	b.n	8001442 <utf16_literal_to_utf8+0x12a>
    }
    else if (codepoint <= 0x10FFFF)
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 8001434:	d24f      	bcs.n	80014d6 <utf16_literal_to_utf8+0x1be>
    {
        /* four bytes, encoding 1110xxxx 10xxxxxx 10xxxxxx 10xxxxxx */
        utf8_length = 4;
 8001436:	2304      	movs	r3, #4
 8001438:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        first_byte_mark = 0xF0; /* 11110000 */
 800143c:	23f0      	movs	r3, #240	; 0xf0
 800143e:	f887 3020 	strb.w	r3, [r7, #32]
        /* invalid unicode codepoint */
        goto fail;
    }

    /* encode as utf8 */
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001442:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001446:	3b01      	subs	r3, #1
 8001448:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800144c:	e015      	b.n	800147a <utf16_literal_to_utf8+0x162>
    {
        /* 10xxxxxx */
        (*output_pointer)[utf8_position] = (unsigned char)((codepoint | 0x80) & 0xBF);
 800144e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001450:	b2db      	uxtb	r3, r3
 8001452:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6819      	ldr	r1, [r3, #0]
 800145c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001460:	440b      	add	r3, r1
 8001462:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	701a      	strb	r2, [r3, #0]
        codepoint >>= 6;
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	099b      	lsrs	r3, r3, #6
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
    for (utf8_position = (unsigned char)(utf8_length - 1); utf8_position > 0; utf8_position--)
 8001470:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8001474:	3b01      	subs	r3, #1
 8001476:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800147a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1e5      	bne.n	800144e <utf16_literal_to_utf8+0x136>
    }
    /* encode first byte */
    if (utf8_length > 1)
 8001482:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001486:	2b01      	cmp	r3, #1
 8001488:	d909      	bls.n	800149e <utf16_literal_to_utf8+0x186>
    {
        (*output_pointer)[0] = (unsigned char)((codepoint | first_byte_mark) & 0xFF);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	b2d9      	uxtb	r1, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001496:	430a      	orrs	r2, r1
 8001498:	b2d2      	uxtb	r2, r2
 800149a:	701a      	strb	r2, [r3, #0]
 800149c:	e007      	b.n	80014ae <utf16_literal_to_utf8+0x196>
    }
    else
    {
        (*output_pointer)[0] = (unsigned char)(codepoint & 0x7F);
 800149e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a0:	b2da      	uxtb	r2, r3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]
    }

    *output_pointer += utf8_length;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80014b6:	441a      	add	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	601a      	str	r2, [r3, #0]

    return sequence_length;
 80014bc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80014c0:	e00b      	b.n	80014da <utf16_literal_to_utf8+0x1c2>
        goto fail;
 80014c2:	bf00      	nop
 80014c4:	e008      	b.n	80014d8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80014c6:	bf00      	nop
 80014c8:	e006      	b.n	80014d8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80014ca:	bf00      	nop
 80014cc:	e004      	b.n	80014d8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80014ce:	bf00      	nop
 80014d0:	e002      	b.n	80014d8 <utf16_literal_to_utf8+0x1c0>
            goto fail;
 80014d2:	bf00      	nop
 80014d4:	e000      	b.n	80014d8 <utf16_literal_to_utf8+0x1c0>
        goto fail;
 80014d6:	bf00      	nop

fail:
    return 0;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3728      	adds	r7, #40	; 0x28
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	000ffc00 	.word	0x000ffc00

080014e8 <parse_string>:

/* Parse the input text into an unescaped cinput, and populate item. */
static cJSON_bool parse_string(cJSON * const item, parse_buffer * const input_buffer)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
 80014f0:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = buffer_at_offset(input_buffer) + 1;
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	3301      	adds	r3, #1
 80014fc:	4413      	add	r3, r2
 80014fe:	627b      	str	r3, [r7, #36]	; 0x24
    const unsigned char *input_end = buffer_at_offset(input_buffer) + 1;
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	3301      	adds	r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	623b      	str	r3, [r7, #32]
    unsigned char *output_pointer = NULL;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
    unsigned char *output = NULL;
 8001512:	2300      	movs	r3, #0
 8001514:	61fb      	str	r3, [r7, #28]

    /* not a string */
    if (buffer_at_offset(input_buffer)[0] != '\"')
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	689b      	ldr	r3, [r3, #8]
 800151e:	4413      	add	r3, r2
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b22      	cmp	r3, #34	; 0x22
 8001524:	f040 8102 	bne.w	800172c <parse_string+0x244>
        goto fail;
    }

    {
        /* calculate approximate size of the output (overestimate) */
        size_t allocation_length = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	613b      	str	r3, [r7, #16]
        size_t skipped_bytes = 0;
 800152c:	2300      	movs	r3, #0
 800152e:	61bb      	str	r3, [r7, #24]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001530:	e017      	b.n	8001562 <parse_string+0x7a>
        {
            /* is escape sequence */
            if (input_end[0] == '\\')
 8001532:	6a3b      	ldr	r3, [r7, #32]
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b5c      	cmp	r3, #92	; 0x5c
 8001538:	d110      	bne.n	800155c <parse_string+0x74>
            {
                if ((size_t)(input_end + 1 - input_buffer->content) >= input_buffer->length)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	1c5a      	adds	r2, r3, #1
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	461a      	mov	r2, r3
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	429a      	cmp	r2, r3
 800154c:	f080 80f0 	bcs.w	8001730 <parse_string+0x248>
                {
                    /* prevent buffer overflow when last input character is a backslash */
                    goto fail;
                }
                skipped_bytes++;
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	3301      	adds	r3, #1
 8001554:	61bb      	str	r3, [r7, #24]
                input_end++;
 8001556:	6a3b      	ldr	r3, [r7, #32]
 8001558:	3301      	adds	r3, #1
 800155a:	623b      	str	r3, [r7, #32]
            }
            input_end++;
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	3301      	adds	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
        while (((size_t)(input_end - input_buffer->content) < input_buffer->length) && (*input_end != '\"'))
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	6a3a      	ldr	r2, [r7, #32]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	461a      	mov	r2, r3
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	429a      	cmp	r2, r3
 8001572:	d203      	bcs.n	800157c <parse_string+0x94>
 8001574:	6a3b      	ldr	r3, [r7, #32]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b22      	cmp	r3, #34	; 0x22
 800157a:	d1da      	bne.n	8001532 <parse_string+0x4a>
        }
        if (((size_t)(input_end - input_buffer->content) >= input_buffer->length) || (*input_end != '\"'))
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6a3a      	ldr	r2, [r7, #32]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	461a      	mov	r2, r3
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	685b      	ldr	r3, [r3, #4]
 800158a:	429a      	cmp	r2, r3
 800158c:	f080 80d2 	bcs.w	8001734 <parse_string+0x24c>
 8001590:	6a3b      	ldr	r3, [r7, #32]
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b22      	cmp	r3, #34	; 0x22
 8001596:	f040 80cd 	bne.w	8001734 <parse_string+0x24c>
        {
            goto fail; /* string ended unexpectedly */
        }

        /* This is at most how much we need for the output */
        allocation_length = (size_t) (input_end - buffer_at_offset(input_buffer)) - skipped_bytes;
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689b      	ldr	r3, [r3, #8]
 80015a2:	4413      	add	r3, r2
 80015a4:	6a3a      	ldr	r2, [r7, #32]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	461a      	mov	r2, r3
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	613b      	str	r3, [r7, #16]
        output = (unsigned char*)input_buffer->hooks.allocate(allocation_length + sizeof(""));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	3201      	adds	r2, #1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4798      	blx	r3
 80015bc:	61f8      	str	r0, [r7, #28]
        if (output == NULL)
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	f000 80b9 	beq.w	8001738 <parse_string+0x250>
        {
            goto fail; /* allocation failure */
        }
    }

    output_pointer = output;
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	60fb      	str	r3, [r7, #12]
    /* loop through the string literal */
    while (input_pointer < input_end)
 80015ca:	e093      	b.n	80016f4 <parse_string+0x20c>
    {
        if (*input_pointer != '\\')
 80015cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	2b5c      	cmp	r3, #92	; 0x5c
 80015d2:	d008      	beq.n	80015e6 <parse_string+0xfe>
        {
            *output_pointer++ = *input_pointer++;
 80015d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015d6:	1c53      	adds	r3, r2, #1
 80015d8:	627b      	str	r3, [r7, #36]	; 0x24
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	1c59      	adds	r1, r3, #1
 80015de:	60f9      	str	r1, [r7, #12]
 80015e0:	7812      	ldrb	r2, [r2, #0]
 80015e2:	701a      	strb	r2, [r3, #0]
 80015e4:	e086      	b.n	80016f4 <parse_string+0x20c>
        }
        /* escape sequence */
        else
        {
            unsigned char sequence_length = 2;
 80015e6:	2302      	movs	r3, #2
 80015e8:	75fb      	strb	r3, [r7, #23]
            if ((input_end - input_pointer) < 1)
 80015ea:	6a3a      	ldr	r2, [r7, #32]
 80015ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ee:	1ad3      	subs	r3, r2, r3
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f340 80a3 	ble.w	800173c <parse_string+0x254>
            {
                goto fail;
            }

            switch (input_pointer[1])
 80015f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f8:	3301      	adds	r3, #1
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b75      	cmp	r3, #117	; 0x75
 80015fe:	f300 809f 	bgt.w	8001740 <parse_string+0x258>
 8001602:	2b5c      	cmp	r3, #92	; 0x5c
 8001604:	da04      	bge.n	8001610 <parse_string+0x128>
 8001606:	2b22      	cmp	r3, #34	; 0x22
 8001608:	d05c      	beq.n	80016c4 <parse_string+0x1dc>
 800160a:	2b2f      	cmp	r3, #47	; 0x2f
 800160c:	d05a      	beq.n	80016c4 <parse_string+0x1dc>
                        goto fail;
                    }
                    break;

                default:
                    goto fail;
 800160e:	e097      	b.n	8001740 <parse_string+0x258>
            switch (input_pointer[1])
 8001610:	3b5c      	subs	r3, #92	; 0x5c
 8001612:	2b19      	cmp	r3, #25
 8001614:	f200 8094 	bhi.w	8001740 <parse_string+0x258>
 8001618:	a201      	add	r2, pc, #4	; (adr r2, 8001620 <parse_string+0x138>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	080016c5 	.word	0x080016c5
 8001624:	08001741 	.word	0x08001741
 8001628:	08001741 	.word	0x08001741
 800162c:	08001741 	.word	0x08001741
 8001630:	08001741 	.word	0x08001741
 8001634:	08001741 	.word	0x08001741
 8001638:	08001689 	.word	0x08001689
 800163c:	08001741 	.word	0x08001741
 8001640:	08001741 	.word	0x08001741
 8001644:	08001741 	.word	0x08001741
 8001648:	08001695 	.word	0x08001695
 800164c:	08001741 	.word	0x08001741
 8001650:	08001741 	.word	0x08001741
 8001654:	08001741 	.word	0x08001741
 8001658:	08001741 	.word	0x08001741
 800165c:	08001741 	.word	0x08001741
 8001660:	08001741 	.word	0x08001741
 8001664:	08001741 	.word	0x08001741
 8001668:	080016a1 	.word	0x080016a1
 800166c:	08001741 	.word	0x08001741
 8001670:	08001741 	.word	0x08001741
 8001674:	08001741 	.word	0x08001741
 8001678:	080016ad 	.word	0x080016ad
 800167c:	08001741 	.word	0x08001741
 8001680:	080016b9 	.word	0x080016b9
 8001684:	080016d3 	.word	0x080016d3
                    *output_pointer++ = '\b';
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60fa      	str	r2, [r7, #12]
 800168e:	2208      	movs	r2, #8
 8001690:	701a      	strb	r2, [r3, #0]
                    break;
 8001692:	e02b      	b.n	80016ec <parse_string+0x204>
                    *output_pointer++ = '\f';
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	1c5a      	adds	r2, r3, #1
 8001698:	60fa      	str	r2, [r7, #12]
 800169a:	220c      	movs	r2, #12
 800169c:	701a      	strb	r2, [r3, #0]
                    break;
 800169e:	e025      	b.n	80016ec <parse_string+0x204>
                    *output_pointer++ = '\n';
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1c5a      	adds	r2, r3, #1
 80016a4:	60fa      	str	r2, [r7, #12]
 80016a6:	220a      	movs	r2, #10
 80016a8:	701a      	strb	r2, [r3, #0]
                    break;
 80016aa:	e01f      	b.n	80016ec <parse_string+0x204>
                    *output_pointer++ = '\r';
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1c5a      	adds	r2, r3, #1
 80016b0:	60fa      	str	r2, [r7, #12]
 80016b2:	220d      	movs	r2, #13
 80016b4:	701a      	strb	r2, [r3, #0]
                    break;
 80016b6:	e019      	b.n	80016ec <parse_string+0x204>
                    *output_pointer++ = '\t';
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60fa      	str	r2, [r7, #12]
 80016be:	2209      	movs	r2, #9
 80016c0:	701a      	strb	r2, [r3, #0]
                    break;
 80016c2:	e013      	b.n	80016ec <parse_string+0x204>
                    *output_pointer++ = input_pointer[1];
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1c5a      	adds	r2, r3, #1
 80016c8:	60fa      	str	r2, [r7, #12]
 80016ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016cc:	7852      	ldrb	r2, [r2, #1]
 80016ce:	701a      	strb	r2, [r3, #0]
                    break;
 80016d0:	e00c      	b.n	80016ec <parse_string+0x204>
                    sequence_length = utf16_literal_to_utf8(input_pointer, input_end, &output_pointer);
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	461a      	mov	r2, r3
 80016d8:	6a39      	ldr	r1, [r7, #32]
 80016da:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80016dc:	f7ff fe1c 	bl	8001318 <utf16_literal_to_utf8>
 80016e0:	4603      	mov	r3, r0
 80016e2:	75fb      	strb	r3, [r7, #23]
                    if (sequence_length == 0)
 80016e4:	7dfb      	ldrb	r3, [r7, #23]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d02c      	beq.n	8001744 <parse_string+0x25c>
                    break;
 80016ea:	bf00      	nop
            }
            input_pointer += sequence_length;
 80016ec:	7dfb      	ldrb	r3, [r7, #23]
 80016ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f0:	4413      	add	r3, r2
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (input_pointer < input_end)
 80016f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016f6:	6a3b      	ldr	r3, [r7, #32]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	f4ff af67 	bcc.w	80015cc <parse_string+0xe4>
        }
    }

    /* zero terminate the output */
    *output_pointer = '\0';
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]

    item->type = cJSON_String;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2210      	movs	r2, #16
 8001708:	60da      	str	r2, [r3, #12]
    item->valuestring = (char*)output;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	69fa      	ldr	r2, [r7, #28]
 800170e:	611a      	str	r2, [r3, #16]

    input_buffer->offset = (size_t) (input_end - input_buffer->content);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6a3a      	ldr	r2, [r7, #32]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	461a      	mov	r2, r3
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	609a      	str	r2, [r3, #8]
    input_buffer->offset++;
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	609a      	str	r2, [r3, #8]

    return true;
 8001728:	2301      	movs	r3, #1
 800172a:	e01e      	b.n	800176a <parse_string+0x282>
        goto fail;
 800172c:	bf00      	nop
 800172e:	e00a      	b.n	8001746 <parse_string+0x25e>
                    goto fail;
 8001730:	bf00      	nop
 8001732:	e008      	b.n	8001746 <parse_string+0x25e>
            goto fail; /* string ended unexpectedly */
 8001734:	bf00      	nop
 8001736:	e006      	b.n	8001746 <parse_string+0x25e>
            goto fail; /* allocation failure */
 8001738:	bf00      	nop
 800173a:	e004      	b.n	8001746 <parse_string+0x25e>
                goto fail;
 800173c:	bf00      	nop
 800173e:	e002      	b.n	8001746 <parse_string+0x25e>
                    goto fail;
 8001740:	bf00      	nop
 8001742:	e000      	b.n	8001746 <parse_string+0x25e>
                        goto fail;
 8001744:	bf00      	nop

fail:
    if (output != NULL)
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d003      	beq.n	8001754 <parse_string+0x26c>
    {
        input_buffer->hooks.deallocate(output);
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	695b      	ldr	r3, [r3, #20]
 8001750:	69f8      	ldr	r0, [r7, #28]
 8001752:	4798      	blx	r3
    }

    if (input_pointer != NULL)
 8001754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001756:	2b00      	cmp	r3, #0
 8001758:	d006      	beq.n	8001768 <parse_string+0x280>
    {
        input_buffer->offset = (size_t)(input_pointer - input_buffer->content);
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	461a      	mov	r2, r3
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	609a      	str	r2, [r3, #8]
    }

    return false;
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3728      	adds	r7, #40	; 0x28
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop

08001774 <buffer_skip_whitespace>:
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer);
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer);

/* Utility to jump whitespace and cr/lf */
static parse_buffer *buffer_skip_whitespace(parse_buffer * const buffer)
{
 8001774:	b480      	push	{r7}
 8001776:	b083      	sub	sp, #12
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL))
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d003      	beq.n	800178a <buffer_skip_whitespace+0x16>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <buffer_skip_whitespace+0x1a>
    {
        return NULL;
 800178a:	2300      	movs	r3, #0
 800178c:	e02c      	b.n	80017e8 <buffer_skip_whitespace+0x74>
    }

    if (cannot_access_at_index(buffer, 0))
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d005      	beq.n	80017a0 <buffer_skip_whitespace+0x2c>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	689a      	ldr	r2, [r3, #8]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	d306      	bcc.n	80017ae <buffer_skip_whitespace+0x3a>
    {
        return buffer;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	e021      	b.n	80017e8 <buffer_skip_whitespace+0x74>
    }

    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
    {
       buffer->offset++;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	1c5a      	adds	r2, r3, #1
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	609a      	str	r2, [r3, #8]
    while (can_access_at_index(buffer, 0) && (buffer_at_offset(buffer)[0] <= 32))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d00d      	beq.n	80017d0 <buffer_skip_whitespace+0x5c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	d207      	bcs.n	80017d0 <buffer_skip_whitespace+0x5c>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	4413      	add	r3, r2
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d9e9      	bls.n	80017a4 <buffer_skip_whitespace+0x30>
    }

    if (buffer->offset == buffer->length)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	689a      	ldr	r2, [r3, #8]
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d104      	bne.n	80017e6 <buffer_skip_whitespace+0x72>
    {
        buffer->offset--;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	1e5a      	subs	r2, r3, #1
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 80017e6:	687b      	ldr	r3, [r7, #4]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bc80      	pop	{r7}
 80017f0:	4770      	bx	lr
	...

080017f4 <skip_utf8_bom>:

/* skip the UTF-8 BOM (byte order mark) if it is at the beginning of a buffer */
static parse_buffer *skip_utf8_bom(parse_buffer * const buffer)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    if ((buffer == NULL) || (buffer->content == NULL) || (buffer->offset != 0))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d007      	beq.n	8001812 <skip_utf8_bom+0x1e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <skip_utf8_bom+0x1e>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d001      	beq.n	8001816 <skip_utf8_bom+0x22>
    {
        return NULL;
 8001812:	2300      	movs	r3, #0
 8001814:	e01c      	b.n	8001850 <skip_utf8_bom+0x5c>
    }

    if (can_access_at_index(buffer, 4) && (strncmp((const char*)buffer_at_offset(buffer), "\xEF\xBB\xBF", 3) == 0))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d018      	beq.n	800184e <skip_utf8_bom+0x5a>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	1d1a      	adds	r2, r3, #4
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	429a      	cmp	r2, r3
 8001828:	d211      	bcs.n	800184e <skip_utf8_bom+0x5a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	4413      	add	r3, r2
 8001834:	2203      	movs	r2, #3
 8001836:	4908      	ldr	r1, [pc, #32]	; (8001858 <skip_utf8_bom+0x64>)
 8001838:	4618      	mov	r0, r3
 800183a:	f005 fc70 	bl	800711e <strncmp>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d104      	bne.n	800184e <skip_utf8_bom+0x5a>
    {
        buffer->offset += 3;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	1cda      	adds	r2, r3, #3
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	609a      	str	r2, [r3, #8]
    }

    return buffer;
 800184e:	687b      	ldr	r3, [r7, #4]
}
 8001850:	4618      	mov	r0, r3
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	0800ab1c 	.word	0x0800ab1c

0800185c <cJSON_ParseWithOpts>:

CJSON_PUBLIC(cJSON *) cJSON_ParseWithOpts(const char *value, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	607a      	str	r2, [r7, #4]
    size_t buffer_length;

    if (NULL == value)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d101      	bne.n	8001872 <cJSON_ParseWithOpts+0x16>
    {
        return NULL;
 800186e:	2300      	movs	r3, #0
 8001870:	e00c      	b.n	800188c <cJSON_ParseWithOpts+0x30>
    }

    /* Adding null character size due to require_null_terminated. */
    buffer_length = strlen(value) + sizeof("");
 8001872:	68f8      	ldr	r0, [r7, #12]
 8001874:	f7fe fcb2 	bl	80001dc <strlen>
 8001878:	4603      	mov	r3, r0
 800187a:	3301      	adds	r3, #1
 800187c:	617b      	str	r3, [r7, #20]

    return cJSON_ParseWithLengthOpts(value, buffer_length, return_parse_end, require_null_terminated);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	68ba      	ldr	r2, [r7, #8]
 8001882:	6979      	ldr	r1, [r7, #20]
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	f000 f805 	bl	8001894 <cJSON_ParseWithLengthOpts>
 800188a:	4603      	mov	r3, r0
}
 800188c:	4618      	mov	r0, r3
 800188e:	3718      	adds	r7, #24
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <cJSON_ParseWithLengthOpts>:

/* Parse an object - create a new root, and populate. */
CJSON_PUBLIC(cJSON *) cJSON_ParseWithLengthOpts(const char *value, size_t buffer_length, const char **return_parse_end, cJSON_bool require_null_terminated)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b08e      	sub	sp, #56	; 0x38
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
    parse_buffer buffer = { 0, 0, 0, 0, { 0, 0, 0 } };
 80018a2:	f107 0318 	add.w	r3, r7, #24
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
 80018b0:	611a      	str	r2, [r3, #16]
 80018b2:	615a      	str	r2, [r3, #20]
 80018b4:	619a      	str	r2, [r3, #24]
    cJSON *item = NULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* reset error position */
    global_error.json = NULL;
 80018ba:	4b41      	ldr	r3, [pc, #260]	; (80019c0 <cJSON_ParseWithLengthOpts+0x12c>)
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
    global_error.position = 0;
 80018c0:	4b3f      	ldr	r3, [pc, #252]	; (80019c0 <cJSON_ParseWithLengthOpts+0x12c>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	605a      	str	r2, [r3, #4]

    if (value == NULL || 0 == buffer_length)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d042      	beq.n	8001952 <cJSON_ParseWithLengthOpts+0xbe>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d03f      	beq.n	8001952 <cJSON_ParseWithLengthOpts+0xbe>
    {
        goto fail;
    }

    buffer.content = (const unsigned char*)value;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	61bb      	str	r3, [r7, #24]
    buffer.length = buffer_length; 
 80018d6:	68bb      	ldr	r3, [r7, #8]
 80018d8:	61fb      	str	r3, [r7, #28]
    buffer.offset = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	623b      	str	r3, [r7, #32]
    buffer.hooks = global_hooks;
 80018de:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <cJSON_ParseWithLengthOpts+0x130>)
 80018e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018e4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018e6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

    item = cJSON_New_Item(&global_hooks);
 80018ea:	4836      	ldr	r0, [pc, #216]	; (80019c4 <cJSON_ParseWithLengthOpts+0x130>)
 80018ec:	f7ff fb5a 	bl	8000fa4 <cJSON_New_Item>
 80018f0:	6378      	str	r0, [r7, #52]	; 0x34
    if (item == NULL) /* memory fail */
 80018f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d02e      	beq.n	8001956 <cJSON_ParseWithLengthOpts+0xc2>
    {
        goto fail;
    }

    if (!parse_value(item, buffer_skip_whitespace(skip_utf8_bom(&buffer))))
 80018f8:	f107 0318 	add.w	r3, r7, #24
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7ff ff79 	bl	80017f4 <skip_utf8_bom>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff ff35 	bl	8001774 <buffer_skip_whitespace>
 800190a:	4603      	mov	r3, r0
 800190c:	4619      	mov	r1, r3
 800190e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001910:	f000 f868 	bl	80019e4 <parse_value>
 8001914:	4603      	mov	r3, r0
 8001916:	2b00      	cmp	r3, #0
 8001918:	d01f      	beq.n	800195a <cJSON_ParseWithLengthOpts+0xc6>
        /* parse failure. ep is set. */
        goto fail;
    }

    /* if we require null-terminated JSON without appended garbage, skip and then check for a null terminator */
    if (require_null_terminated)
 800191a:	683b      	ldr	r3, [r7, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d00e      	beq.n	800193e <cJSON_ParseWithLengthOpts+0xaa>
    {
        buffer_skip_whitespace(&buffer);
 8001920:	f107 0318 	add.w	r3, r7, #24
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff ff25 	bl	8001774 <buffer_skip_whitespace>
        if ((buffer.offset >= buffer.length) || buffer_at_offset(&buffer)[0] != '\0')
 800192a:	6a3a      	ldr	r2, [r7, #32]
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	429a      	cmp	r2, r3
 8001930:	d215      	bcs.n	800195e <cJSON_ParseWithLengthOpts+0xca>
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	6a3b      	ldr	r3, [r7, #32]
 8001936:	4413      	add	r3, r2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d10f      	bne.n	800195e <cJSON_ParseWithLengthOpts+0xca>
        {
            goto fail;
        }
    }
    if (return_parse_end)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d004      	beq.n	800194e <cJSON_ParseWithLengthOpts+0xba>
    {
        *return_parse_end = (const char*)buffer_at_offset(&buffer);
 8001944:	69ba      	ldr	r2, [r7, #24]
 8001946:	6a3b      	ldr	r3, [r7, #32]
 8001948:	441a      	add	r2, r3
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	601a      	str	r2, [r3, #0]
    }

    return item;
 800194e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001950:	e031      	b.n	80019b6 <cJSON_ParseWithLengthOpts+0x122>
        goto fail;
 8001952:	bf00      	nop
 8001954:	e004      	b.n	8001960 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 8001956:	bf00      	nop
 8001958:	e002      	b.n	8001960 <cJSON_ParseWithLengthOpts+0xcc>
        goto fail;
 800195a:	bf00      	nop
 800195c:	e000      	b.n	8001960 <cJSON_ParseWithLengthOpts+0xcc>
            goto fail;
 800195e:	bf00      	nop

fail:
    if (item != NULL)
 8001960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001962:	2b00      	cmp	r3, #0
 8001964:	d002      	beq.n	800196c <cJSON_ParseWithLengthOpts+0xd8>
    {
        cJSON_Delete(item);
 8001966:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001968:	f7ff fb32 	bl	8000fd0 <cJSON_Delete>
    }

    if (value != NULL)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d020      	beq.n	80019b4 <cJSON_ParseWithLengthOpts+0x120>
    {
        error local_error;
        local_error.json = (const unsigned char*)value;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	613b      	str	r3, [r7, #16]
        local_error.position = 0;
 8001976:	2300      	movs	r3, #0
 8001978:	617b      	str	r3, [r7, #20]

        if (buffer.offset < buffer.length)
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	429a      	cmp	r2, r3
 8001980:	d202      	bcs.n	8001988 <cJSON_ParseWithLengthOpts+0xf4>
        {
            local_error.position = buffer.offset;
 8001982:	6a3b      	ldr	r3, [r7, #32]
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e005      	b.n	8001994 <cJSON_ParseWithLengthOpts+0x100>
        }
        else if (buffer.length > 0)
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d002      	beq.n	8001994 <cJSON_ParseWithLengthOpts+0x100>
        {
            local_error.position = buffer.length - 1;
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3b01      	subs	r3, #1
 8001992:	617b      	str	r3, [r7, #20]
        }

        if (return_parse_end != NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <cJSON_ParseWithLengthOpts+0x110>
        {
            *return_parse_end = (const char*)local_error.json + local_error.position;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	441a      	add	r2, r3
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	601a      	str	r2, [r3, #0]
        }

        global_error = local_error;
 80019a4:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <cJSON_ParseWithLengthOpts+0x12c>)
 80019a6:	461a      	mov	r2, r3
 80019a8:	f107 0310 	add.w	r3, r7, #16
 80019ac:	e893 0003 	ldmia.w	r3, {r0, r1}
 80019b0:	e882 0003 	stmia.w	r2, {r0, r1}
    }

    return NULL;
 80019b4:	2300      	movs	r3, #0
}
 80019b6:	4618      	mov	r0, r3
 80019b8:	3738      	adds	r7, #56	; 0x38
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	bf00      	nop
 80019c0:	20000224 	.word	0x20000224
 80019c4:	20000000 	.word	0x20000000

080019c8 <cJSON_Parse>:

/* Default options for cJSON_Parse */
CJSON_PUBLIC(cJSON *) cJSON_Parse(const char *value)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
    return cJSON_ParseWithOpts(value, 0, 0);
 80019d0:	2200      	movs	r2, #0
 80019d2:	2100      	movs	r1, #0
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f7ff ff41 	bl	800185c <cJSON_ParseWithOpts>
 80019da:	4603      	mov	r3, r0
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3708      	adds	r7, #8
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <parse_value>:
    return print_value(item, &p);
}

/* Parser core - when encountering text, process appropriately. */
static cJSON_bool parse_value(cJSON * const item, parse_buffer * const input_buffer)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
 80019ec:	6039      	str	r1, [r7, #0]
    if ((input_buffer == NULL) || (input_buffer->content == NULL))
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <parse_value+0x18>
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <parse_value+0x1c>
    {
        return false; /* no input */
 80019fc:	2300      	movs	r3, #0
 80019fe:	e0d2      	b.n	8001ba6 <parse_value+0x1c2>
    }

    /* parse the different types of values */
    /* null */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "null", 4) == 0))
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d01d      	beq.n	8001a42 <parse_value+0x5e>
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	1d1a      	adds	r2, r3, #4
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	429a      	cmp	r2, r3
 8001a12:	d816      	bhi.n	8001a42 <parse_value+0x5e>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4963      	ldr	r1, [pc, #396]	; (8001bb0 <parse_value+0x1cc>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f005 fb7b 	bl	800711e <strncmp>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d109      	bne.n	8001a42 <parse_value+0x5e>
    {
        item->type = cJSON_NULL;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2204      	movs	r2, #4
 8001a32:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 4;
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	1d1a      	adds	r2, r3, #4
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	609a      	str	r2, [r3, #8]
        return true;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0b1      	b.n	8001ba6 <parse_value+0x1c2>
    }
    /* false */
    if (can_read(input_buffer, 5) && (strncmp((const char*)buffer_at_offset(input_buffer), "false", 5) == 0))
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01d      	beq.n	8001a84 <parse_value+0xa0>
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	1d5a      	adds	r2, r3, #5
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d816      	bhi.n	8001a84 <parse_value+0xa0>
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	4413      	add	r3, r2
 8001a60:	2205      	movs	r2, #5
 8001a62:	4954      	ldr	r1, [pc, #336]	; (8001bb4 <parse_value+0x1d0>)
 8001a64:	4618      	mov	r0, r3
 8001a66:	f005 fb5a 	bl	800711e <strncmp>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d109      	bne.n	8001a84 <parse_value+0xa0>
    {
        item->type = cJSON_False;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2201      	movs	r2, #1
 8001a74:	60da      	str	r2, [r3, #12]
        input_buffer->offset += 5;
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	1d5a      	adds	r2, r3, #5
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	609a      	str	r2, [r3, #8]
        return true;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e090      	b.n	8001ba6 <parse_value+0x1c2>
    }
    /* true */
    if (can_read(input_buffer, 4) && (strncmp((const char*)buffer_at_offset(input_buffer), "true", 4) == 0))
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d020      	beq.n	8001acc <parse_value+0xe8>
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	1d1a      	adds	r2, r3, #4
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	685b      	ldr	r3, [r3, #4]
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d819      	bhi.n	8001acc <parse_value+0xe8>
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	681a      	ldr	r2, [r3, #0]
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	4944      	ldr	r1, [pc, #272]	; (8001bb8 <parse_value+0x1d4>)
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f005 fb39 	bl	800711e <strncmp>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d10c      	bne.n	8001acc <parse_value+0xe8>
    {
        item->type = cJSON_True;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2202      	movs	r2, #2
 8001ab6:	60da      	str	r2, [r3, #12]
        item->valueint = 1;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	615a      	str	r2, [r3, #20]
        input_buffer->offset += 4;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	1d1a      	adds	r2, r3, #4
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	609a      	str	r2, [r3, #8]
        return true;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e06c      	b.n	8001ba6 <parse_value+0x1c2>
    }
    /* string */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '\"'))
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d013      	beq.n	8001afa <parse_value+0x116>
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	689a      	ldr	r2, [r3, #8]
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d20d      	bcs.n	8001afa <parse_value+0x116>
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b22      	cmp	r3, #34	; 0x22
 8001aec:	d105      	bne.n	8001afa <parse_value+0x116>
    {
        return parse_string(item, input_buffer);
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff fcf9 	bl	80014e8 <parse_string>
 8001af6:	4603      	mov	r3, r0
 8001af8:	e055      	b.n	8001ba6 <parse_value+0x1c2>
    }
    /* number */
    if (can_access_at_index(input_buffer, 0) && ((buffer_at_offset(input_buffer)[0] == '-') || ((buffer_at_offset(input_buffer)[0] >= '0') && (buffer_at_offset(input_buffer)[0] <= '9'))))
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d023      	beq.n	8001b48 <parse_value+0x164>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d21d      	bcs.n	8001b48 <parse_value+0x164>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b2d      	cmp	r3, #45	; 0x2d
 8001b1a:	d00f      	beq.n	8001b3c <parse_value+0x158>
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	689b      	ldr	r3, [r3, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b2f      	cmp	r3, #47	; 0x2f
 8001b2a:	d90d      	bls.n	8001b48 <parse_value+0x164>
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4413      	add	r3, r2
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b39      	cmp	r3, #57	; 0x39
 8001b3a:	d805      	bhi.n	8001b48 <parse_value+0x164>
    {
        return parse_number(item, input_buffer);
 8001b3c:	6839      	ldr	r1, [r7, #0]
 8001b3e:	6878      	ldr	r0, [r7, #4]
 8001b40:	f7ff fa9a 	bl	8001078 <parse_number>
 8001b44:	4603      	mov	r3, r0
 8001b46:	e02e      	b.n	8001ba6 <parse_value+0x1c2>
    }
    /* array */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '['))
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d013      	beq.n	8001b76 <parse_value+0x192>
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d20d      	bcs.n	8001b76 <parse_value+0x192>
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	4413      	add	r3, r2
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b5b      	cmp	r3, #91	; 0x5b
 8001b68:	d105      	bne.n	8001b76 <parse_value+0x192>
    {
        return parse_array(item, input_buffer);
 8001b6a:	6839      	ldr	r1, [r7, #0]
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	f000 f825 	bl	8001bbc <parse_array>
 8001b72:	4603      	mov	r3, r0
 8001b74:	e017      	b.n	8001ba6 <parse_value+0x1c2>
    }
    /* object */
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '{'))
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d013      	beq.n	8001ba4 <parse_value+0x1c0>
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d20d      	bcs.n	8001ba4 <parse_value+0x1c0>
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	4413      	add	r3, r2
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	2b7b      	cmp	r3, #123	; 0x7b
 8001b96:	d105      	bne.n	8001ba4 <parse_value+0x1c0>
    {
        return parse_object(item, input_buffer);
 8001b98:	6839      	ldr	r1, [r7, #0]
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 f8d2 	bl	8001d44 <parse_object>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	e000      	b.n	8001ba6 <parse_value+0x1c2>
    }

    return false;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3708      	adds	r7, #8
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	0800aaf4 	.word	0x0800aaf4
 8001bb4:	0800ab20 	.word	0x0800ab20
 8001bb8:	0800ab28 	.word	0x0800ab28

08001bbc <parse_array>:
    }
}

/* Build an array from input text. */
static cJSON_bool parse_array(cJSON * const item, parse_buffer * const input_buffer)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* head of the linked list */
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001bd6:	d301      	bcc.n	8001bdc <parse_array+0x20>
    {
        return false; /* to deeply nested */
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e0af      	b.n	8001d3c <parse_array+0x180>
    }
    input_buffer->depth++;
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	1c5a      	adds	r2, r3, #1
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	60da      	str	r2, [r3, #12]

    if (buffer_at_offset(input_buffer)[0] != '[')
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	4413      	add	r3, r2
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	2b5b      	cmp	r3, #91	; 0x5b
 8001bf4:	f040 8094 	bne.w	8001d20 <parse_array+0x164>
    {
        /* not an array */
        goto fail;
    }

    input_buffer->offset++;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001c02:	6838      	ldr	r0, [r7, #0]
 8001c04:	f7ff fdb6 	bl	8001774 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ']'))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00d      	beq.n	8001c2a <parse_array+0x6e>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	689a      	ldr	r2, [r3, #8]
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d207      	bcs.n	8001c2a <parse_array+0x6e>
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	683b      	ldr	r3, [r7, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	4413      	add	r3, r2
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	2b5d      	cmp	r3, #93	; 0x5d
 8001c28:	d061      	beq.n	8001cee <parse_array+0x132>
        /* empty array */
        goto success;
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <parse_array+0x80>
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	689a      	ldr	r2, [r3, #8]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	429a      	cmp	r2, r3
 8001c3a:	d305      	bcc.n	8001c48 <parse_array+0x8c>
    {
        input_buffer->offset--;
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	1e5a      	subs	r2, r3, #1
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	609a      	str	r2, [r3, #8]
        goto fail;
 8001c46:	e072      	b.n	8001d2e <parse_array+0x172>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	1e5a      	subs	r2, r3, #1
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	3310      	adds	r3, #16
 8001c56:	4618      	mov	r0, r3
 8001c58:	f7ff f9a4 	bl	8000fa4 <cJSON_New_Item>
 8001c5c:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d05f      	beq.n	8001d24 <parse_array+0x168>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d104      	bne.n	8001c74 <parse_array+0xb8>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	e007      	b.n	8001c84 <parse_array+0xc8>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	693a      	ldr	r2, [r7, #16]
 8001c7e:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	613b      	str	r3, [r7, #16]
        }

        /* parse next value */
        input_buffer->offset++;
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	1c5a      	adds	r2, r3, #1
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001c8e:	6838      	ldr	r0, [r7, #0]
 8001c90:	f7ff fd70 	bl	8001774 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001c94:	6839      	ldr	r1, [r7, #0]
 8001c96:	6938      	ldr	r0, [r7, #16]
 8001c98:	f7ff fea4 	bl	80019e4 <parse_value>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d042      	beq.n	8001d28 <parse_array+0x16c>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001ca2:	6838      	ldr	r0, [r7, #0]
 8001ca4:	f7ff fd66 	bl	8001774 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00d      	beq.n	8001cca <parse_array+0x10e>
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	689a      	ldr	r2, [r3, #8]
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d207      	bcs.n	8001cca <parse_array+0x10e>
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	781b      	ldrb	r3, [r3, #0]
 8001cc6:	2b2c      	cmp	r3, #44	; 0x2c
 8001cc8:	d0c3      	beq.n	8001c52 <parse_array+0x96>

    if (cannot_access_at_index(input_buffer, 0) || buffer_at_offset(input_buffer)[0] != ']')
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d02d      	beq.n	8001d2c <parse_array+0x170>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	689a      	ldr	r2, [r3, #8]
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d227      	bcs.n	8001d2c <parse_array+0x170>
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b5d      	cmp	r3, #93	; 0x5d
 8001cea:	d11f      	bne.n	8001d2c <parse_array+0x170>
    {
        goto fail; /* expected end of array */
    }

success:
 8001cec:	e000      	b.n	8001cf0 <parse_array+0x134>
        goto success;
 8001cee:	bf00      	nop
    input_buffer->depth--;
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	1e5a      	subs	r2, r3, #1
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d002      	beq.n	8001d06 <parse_array+0x14a>
        head->prev = current_item;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Array;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2220      	movs	r2, #32
 8001d0a:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	697a      	ldr	r2, [r7, #20]
 8001d10:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	1c5a      	adds	r2, r3, #1
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	609a      	str	r2, [r3, #8]

    return true;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e00d      	b.n	8001d3c <parse_array+0x180>
        goto fail;
 8001d20:	bf00      	nop
 8001d22:	e004      	b.n	8001d2e <parse_array+0x172>
            goto fail; /* allocation failure */
 8001d24:	bf00      	nop
 8001d26:	e002      	b.n	8001d2e <parse_array+0x172>
            goto fail; /* failed to parse value */
 8001d28:	bf00      	nop
 8001d2a:	e000      	b.n	8001d2e <parse_array+0x172>
        goto fail; /* expected end of array */
 8001d2c:	bf00      	nop

fail:
    if (head != NULL)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d002      	beq.n	8001d3a <parse_array+0x17e>
    {
        cJSON_Delete(head);
 8001d34:	6978      	ldr	r0, [r7, #20]
 8001d36:	f7ff f94b 	bl	8000fd0 <cJSON_Delete>
    }

    return false;
 8001d3a:	2300      	movs	r3, #0
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	3718      	adds	r7, #24
 8001d40:	46bd      	mov	sp, r7
 8001d42:	bd80      	pop	{r7, pc}

08001d44 <parse_object>:
    return true;
}

/* Build an object from the text. */
static cJSON_bool parse_object(cJSON * const item, parse_buffer * const input_buffer)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b086      	sub	sp, #24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
    cJSON *head = NULL; /* linked list head */
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
    cJSON *current_item = NULL;
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]

    if (input_buffer->depth >= CJSON_NESTING_LIMIT)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d5e:	d301      	bcc.n	8001d64 <parse_object+0x20>
    {
        return false; /* to deeply nested */
 8001d60:	2300      	movs	r3, #0
 8001d62:	e0ea      	b.n	8001f3a <parse_object+0x1f6>
    }
    input_buffer->depth++;
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	60da      	str	r2, [r3, #12]

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '{'))
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	f000 80d0 	beq.w	8001f16 <parse_object+0x1d2>
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	f080 80c9 	bcs.w	8001f16 <parse_object+0x1d2>
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4413      	add	r3, r2
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b7b      	cmp	r3, #123	; 0x7b
 8001d92:	f040 80c0 	bne.w	8001f16 <parse_object+0x1d2>
    {
        goto fail; /* not an object */
    }

    input_buffer->offset++;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	1c5a      	adds	r2, r3, #1
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	609a      	str	r2, [r3, #8]
    buffer_skip_whitespace(input_buffer);
 8001da0:	6838      	ldr	r0, [r7, #0]
 8001da2:	f7ff fce7 	bl	8001774 <buffer_skip_whitespace>
    if (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == '}'))
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <parse_object+0x86>
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d208      	bcs.n	8001dca <parse_object+0x86>
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b7d      	cmp	r3, #125	; 0x7d
 8001dc6:	f000 808d 	beq.w	8001ee4 <parse_object+0x1a0>
    {
        goto success; /* empty object */
    }

    /* check if we skipped to the end of the buffer */
    if (cannot_access_at_index(input_buffer, 0))
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d005      	beq.n	8001ddc <parse_object+0x98>
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	689a      	ldr	r2, [r3, #8]
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d305      	bcc.n	8001de8 <parse_object+0xa4>
    {
        input_buffer->offset--;
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	1e5a      	subs	r2, r3, #1
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	609a      	str	r2, [r3, #8]
        goto fail;
 8001de6:	e0a1      	b.n	8001f2c <parse_object+0x1e8>
    }

    /* step back to character in front of the first element */
    input_buffer->offset--;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	1e5a      	subs	r2, r3, #1
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	609a      	str	r2, [r3, #8]
    /* loop through the comma separated array elements */
    do
    {
        /* allocate next item */
        cJSON *new_item = cJSON_New_Item(&(input_buffer->hooks));
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3310      	adds	r3, #16
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff f8d4 	bl	8000fa4 <cJSON_New_Item>
 8001dfc:	60f8      	str	r0, [r7, #12]
        if (new_item == NULL)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	f000 808a 	beq.w	8001f1a <parse_object+0x1d6>
        {
            goto fail; /* allocation failure */
        }

        /* attach next item to list */
        if (head == NULL)
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d104      	bne.n	8001e16 <parse_object+0xd2>
        {
            /* start the linked list */
            current_item = head = new_item;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	613b      	str	r3, [r7, #16]
 8001e14:	e007      	b.n	8001e26 <parse_object+0xe2>
        }
        else
        {
            /* add to the end and advance */
            current_item->next = new_item;
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	68fa      	ldr	r2, [r7, #12]
 8001e1a:	601a      	str	r2, [r3, #0]
            new_item->prev = current_item;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	605a      	str	r2, [r3, #4]
            current_item = new_item;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	613b      	str	r3, [r7, #16]
        }

        /* parse the name of the child */
        input_buffer->offset++;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	1c5a      	adds	r2, r3, #1
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001e30:	6838      	ldr	r0, [r7, #0]
 8001e32:	f7ff fc9f 	bl	8001774 <buffer_skip_whitespace>
        if (!parse_string(current_item, input_buffer))
 8001e36:	6839      	ldr	r1, [r7, #0]
 8001e38:	6938      	ldr	r0, [r7, #16]
 8001e3a:	f7ff fb55 	bl	80014e8 <parse_string>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d06c      	beq.n	8001f1e <parse_object+0x1da>
        {
            goto fail; /* failed to parse name */
        }
        buffer_skip_whitespace(input_buffer);
 8001e44:	6838      	ldr	r0, [r7, #0]
 8001e46:	f7ff fc95 	bl	8001774 <buffer_skip_whitespace>

        /* swap valuestring and string, because we parsed the name */
        current_item->string = current_item->valuestring;
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	691a      	ldr	r2, [r3, #16]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	621a      	str	r2, [r3, #32]
        current_item->valuestring = NULL;
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]

        if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != ':'))
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d061      	beq.n	8001f22 <parse_object+0x1de>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	689a      	ldr	r2, [r3, #8]
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d25b      	bcs.n	8001f22 <parse_object+0x1de>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	4413      	add	r3, r2
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b3a      	cmp	r3, #58	; 0x3a
 8001e78:	d153      	bne.n	8001f22 <parse_object+0x1de>
        {
            goto fail; /* invalid object */
        }

        /* parse the value */
        input_buffer->offset++;
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	1c5a      	adds	r2, r3, #1
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	609a      	str	r2, [r3, #8]
        buffer_skip_whitespace(input_buffer);
 8001e84:	6838      	ldr	r0, [r7, #0]
 8001e86:	f7ff fc75 	bl	8001774 <buffer_skip_whitespace>
        if (!parse_value(current_item, input_buffer))
 8001e8a:	6839      	ldr	r1, [r7, #0]
 8001e8c:	6938      	ldr	r0, [r7, #16]
 8001e8e:	f7ff fda9 	bl	80019e4 <parse_value>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d046      	beq.n	8001f26 <parse_object+0x1e2>
        {
            goto fail; /* failed to parse value */
        }
        buffer_skip_whitespace(input_buffer);
 8001e98:	6838      	ldr	r0, [r7, #0]
 8001e9a:	f7ff fc6b 	bl	8001774 <buffer_skip_whitespace>
    }
    while (can_access_at_index(input_buffer, 0) && (buffer_at_offset(input_buffer)[0] == ','));
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00d      	beq.n	8001ec0 <parse_object+0x17c>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	689a      	ldr	r2, [r3, #8]
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <parse_object+0x17c>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	4413      	add	r3, r2
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b2c      	cmp	r3, #44	; 0x2c
 8001ebe:	d098      	beq.n	8001df2 <parse_object+0xae>

    if (cannot_access_at_index(input_buffer, 0) || (buffer_at_offset(input_buffer)[0] != '}'))
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d031      	beq.n	8001f2a <parse_object+0x1e6>
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d22b      	bcs.n	8001f2a <parse_object+0x1e6>
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	4413      	add	r3, r2
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b7d      	cmp	r3, #125	; 0x7d
 8001ee0:	d123      	bne.n	8001f2a <parse_object+0x1e6>
    {
        goto fail; /* expected end of object */
    }

success:
 8001ee2:	e000      	b.n	8001ee6 <parse_object+0x1a2>
        goto success; /* empty object */
 8001ee4:	bf00      	nop
    input_buffer->depth--;
 8001ee6:	683b      	ldr	r3, [r7, #0]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	1e5a      	subs	r2, r3, #1
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	60da      	str	r2, [r3, #12]

    if (head != NULL) {
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d002      	beq.n	8001efc <parse_object+0x1b8>
        head->prev = current_item;
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	605a      	str	r2, [r3, #4]
    }

    item->type = cJSON_Object;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2240      	movs	r2, #64	; 0x40
 8001f00:	60da      	str	r2, [r3, #12]
    item->child = head;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	609a      	str	r2, [r3, #8]

    input_buffer->offset++;
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	1c5a      	adds	r2, r3, #1
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	609a      	str	r2, [r3, #8]
    return true;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e011      	b.n	8001f3a <parse_object+0x1f6>
        goto fail; /* not an object */
 8001f16:	bf00      	nop
 8001f18:	e008      	b.n	8001f2c <parse_object+0x1e8>
            goto fail; /* allocation failure */
 8001f1a:	bf00      	nop
 8001f1c:	e006      	b.n	8001f2c <parse_object+0x1e8>
            goto fail; /* failed to parse name */
 8001f1e:	bf00      	nop
 8001f20:	e004      	b.n	8001f2c <parse_object+0x1e8>
            goto fail; /* invalid object */
 8001f22:	bf00      	nop
 8001f24:	e002      	b.n	8001f2c <parse_object+0x1e8>
            goto fail; /* failed to parse value */
 8001f26:	bf00      	nop
 8001f28:	e000      	b.n	8001f2c <parse_object+0x1e8>
        goto fail; /* expected end of object */
 8001f2a:	bf00      	nop

fail:
    if (head != NULL)
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <parse_object+0x1f4>
    {
        cJSON_Delete(head);
 8001f32:	6978      	ldr	r0, [r7, #20]
 8001f34:	f7ff f84c 	bl	8000fd0 <cJSON_Delete>
    }

    return false;
 8001f38:	2300      	movs	r3, #0
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <get_object_item>:

    return get_array_item(array, (size_t)index);
}

static cJSON *get_object_item(const cJSON * const object, const char * const name, const cJSON_bool case_sensitive)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
    cJSON *current_element = NULL;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]

    if ((object == NULL) || (name == NULL))
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d002      	beq.n	8001f5e <get_object_item+0x1c>
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <get_object_item+0x20>
    {
        return NULL;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	e033      	b.n	8001fca <get_object_item+0x88>
    }

    current_element = object->child;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	617b      	str	r3, [r7, #20]
    if (case_sensitive)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d017      	beq.n	8001f9e <get_object_item+0x5c>
    {
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001f6e:	e002      	b.n	8001f76 <get_object_item+0x34>
        {
            current_element = current_element->next;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (current_element->string != NULL) && (strcmp(name, current_element->string) != 0))
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d01c      	beq.n	8001fb6 <get_object_item+0x74>
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	6a1b      	ldr	r3, [r3, #32]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d018      	beq.n	8001fb6 <get_object_item+0x74>
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	6a1b      	ldr	r3, [r3, #32]
 8001f88:	4619      	mov	r1, r3
 8001f8a:	68b8      	ldr	r0, [r7, #8]
 8001f8c:	f7fe f91c 	bl	80001c8 <strcmp>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1ec      	bne.n	8001f70 <get_object_item+0x2e>
 8001f96:	e00e      	b.n	8001fb6 <get_object_item+0x74>
    }
    else
    {
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
        {
            current_element = current_element->next;
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	617b      	str	r3, [r7, #20]
        while ((current_element != NULL) && (case_insensitive_strcmp((const unsigned char*)name, (const unsigned char*)(current_element->string)) != 0))
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <get_object_item+0x74>
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	6a1b      	ldr	r3, [r3, #32]
 8001fa8:	4619      	mov	r1, r3
 8001faa:	68b8      	ldr	r0, [r7, #8]
 8001fac:	f7fe ff8e 	bl	8000ecc <case_insensitive_strcmp>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d1f0      	bne.n	8001f98 <get_object_item+0x56>
        }
    }

    if ((current_element == NULL) || (current_element->string == NULL)) {
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d003      	beq.n	8001fc4 <get_object_item+0x82>
 8001fbc:	697b      	ldr	r3, [r7, #20]
 8001fbe:	6a1b      	ldr	r3, [r3, #32]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d101      	bne.n	8001fc8 <get_object_item+0x86>
        return NULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	e000      	b.n	8001fca <get_object_item+0x88>
    }

    return current_element;
 8001fc8:	697b      	ldr	r3, [r7, #20]
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	3718      	adds	r7, #24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}

08001fd2 <cJSON_GetObjectItem>:

CJSON_PUBLIC(cJSON *) cJSON_GetObjectItem(const cJSON * const object, const char * const string)
{
 8001fd2:	b580      	push	{r7, lr}
 8001fd4:	b082      	sub	sp, #8
 8001fd6:	af00      	add	r7, sp, #0
 8001fd8:	6078      	str	r0, [r7, #4]
 8001fda:	6039      	str	r1, [r7, #0]
    return get_object_item(object, string, false);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	6839      	ldr	r1, [r7, #0]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f7ff ffae 	bl	8001f42 <get_object_item>
 8001fe6:	4603      	mov	r3, r0
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3708      	adds	r7, #8
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <__io_putchar>:
     #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
     #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t *)&ch,1,0xFFFF);
 8001ff8:	1d39      	adds	r1, r7, #4
 8001ffa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ffe:	2201      	movs	r2, #1
 8002000:	4803      	ldr	r0, [pc, #12]	; (8002010 <__io_putchar+0x20>)
 8002002:	f003 fa9d 	bl	8005540 <HAL_UART_Transmit>
	return ch;
 8002006:	687b      	ldr	r3, [r7, #4]
}
 8002008:	4618      	mov	r0, r3
 800200a:	3708      	adds	r7, #8
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200002d0 	.word	0x200002d0

08002014 <SendMQTT>:


// VIET CAC HAM CON

void SendMQTT(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
	while(1)
	{
	if(HAL_GetTick() - last >= 500)
 8002018:	f001 fd34 	bl	8003a84 <HAL_GetTick>
 800201c:	4603      	mov	r3, r0
 800201e:	4a0c      	ldr	r2, [pc, #48]	; (8002050 <SendMQTT+0x3c>)
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	1a9b      	subs	r3, r3, r2
 8002024:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002028:	d3f6      	bcc.n	8002018 <SendMQTT+0x4>
		{
			if(CheckConnect)
 800202a:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <SendMQTT+0x40>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <SendMQTT+0x28>
			{
				SendData( mqtt_pub );
 8002032:	4b09      	ldr	r3, [pc, #36]	; (8002058 <SendMQTT+0x44>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f000 f810 	bl	800205c <SendData>
			}
			last = HAL_GetTick();
 800203c:	f001 fd22 	bl	8003a84 <HAL_GetTick>
 8002040:	4603      	mov	r3, r0
 8002042:	461a      	mov	r2, r3
 8002044:	4b02      	ldr	r3, [pc, #8]	; (8002050 <SendMQTT+0x3c>)
 8002046:	601a      	str	r2, [r3, #0]
			break;
 8002048:	bf00      	nop
		}
	}
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	200007fc 	.word	0x200007fc
 8002054:	2000000c 	.word	0x2000000c
 8002058:	20000024 	.word	0x20000024

0800205c <SendData>:

// GUI DU LIEU KIEU INT SANG CHAR

void SendData(char *pub )
{
 800205c:	b5b0      	push	{r4, r5, r7, lr}
 800205e:	f5ad 7d1c 	sub.w	sp, sp, #624	; 0x270
 8002062:	af02      	add	r7, sp, #8
 8002064:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002068:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800206c:	6018      	str	r0, [r3, #0]
	char Str_FA[100];
	char Str_FB[100];
	char Str_C[100];


	for(int i = 0 ; i < 100; i++)
 800206e:	2300      	movs	r3, #0
 8002070:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 8002074:	e036      	b.n	80020e4 <SendData+0x88>
	{
		MQTTPUBRAW[i] = 0;
 8002076:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 800207a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800207e:	4413      	add	r3, r2
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
		JSON[i] = 0;
 8002084:	f507 72cc 	add.w	r2, r7, #408	; 0x198
 8002088:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800208c:	4413      	add	r3, r2
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
		Length[i] = 0;
 8002092:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002096:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 800209a:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 800209e:	4413      	add	r3, r2
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
		Str_FA[i]=0;
 80020a4:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80020a8:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80020ac:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80020b0:	4413      	add	r3, r2
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
		Str_FB[i]=0;
 80020b6:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80020ba:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80020be:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80020c2:	4413      	add	r3, r2
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
		Str_C[i]=0;
 80020c8:	f507 731a 	add.w	r3, r7, #616	; 0x268
 80020cc:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80020d0:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80020d4:	4413      	add	r3, r2
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 100; i++)
 80020da:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80020de:	3301      	adds	r3, #1
 80020e0:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 80020e4:	f8d7 3264 	ldr.w	r3, [r7, #612]	; 0x264
 80020e8:	2b63      	cmp	r3, #99	; 0x63
 80020ea:	ddc4      	ble.n	8002076 <SendData+0x1a>
	}

	// TAO CHUOI JSON GUI LEN MQTT

	strcat(JSON,"{\"FA\":\"");
 80020ec:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7fe f873 	bl	80001dc <strlen>
 80020f6:	4603      	mov	r3, r0
 80020f8:	461a      	mov	r2, r3
 80020fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80020fe:	4413      	add	r3, r2
 8002100:	497b      	ldr	r1, [pc, #492]	; (80022f0 <SendData+0x294>)
 8002102:	461a      	mov	r2, r3
 8002104:	460b      	mov	r3, r1
 8002106:	cb03      	ldmia	r3!, {r0, r1}
 8002108:	6010      	str	r0, [r2, #0]
 800210a:	6051      	str	r1, [r2, #4]
	strcat(JSON,Str_FA);
 800210c:	f107 02d0 	add.w	r2, r7, #208	; 0xd0
 8002110:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002114:	4611      	mov	r1, r2
 8002116:	4618      	mov	r0, r3
 8002118:	f004 ffe5 	bl	80070e6 <strcat>
	strcat(JSON,"\",");
 800211c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe f85b 	bl	80001dc <strlen>
 8002126:	4603      	mov	r3, r0
 8002128:	461a      	mov	r2, r3
 800212a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800212e:	4413      	add	r3, r2
 8002130:	4a70      	ldr	r2, [pc, #448]	; (80022f4 <SendData+0x298>)
 8002132:	8811      	ldrh	r1, [r2, #0]
 8002134:	7892      	ldrb	r2, [r2, #2]
 8002136:	8019      	strh	r1, [r3, #0]
 8002138:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"FB\":\"");
 800213a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800213e:	4618      	mov	r0, r3
 8002140:	f7fe f84c 	bl	80001dc <strlen>
 8002144:	4603      	mov	r3, r0
 8002146:	461a      	mov	r2, r3
 8002148:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800214c:	4413      	add	r3, r2
 800214e:	4a6a      	ldr	r2, [pc, #424]	; (80022f8 <SendData+0x29c>)
 8002150:	6810      	ldr	r0, [r2, #0]
 8002152:	6018      	str	r0, [r3, #0]
 8002154:	8891      	ldrh	r1, [r2, #4]
 8002156:	7992      	ldrb	r2, [r2, #6]
 8002158:	8099      	strh	r1, [r3, #4]
 800215a:	719a      	strb	r2, [r3, #6]
	strcat(JSON,Str_FB);
 800215c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8002160:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002164:	4611      	mov	r1, r2
 8002166:	4618      	mov	r0, r3
 8002168:	f004 ffbd 	bl	80070e6 <strcat>
	strcat(JSON,"\",");
 800216c:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe f833 	bl	80001dc <strlen>
 8002176:	4603      	mov	r3, r0
 8002178:	461a      	mov	r2, r3
 800217a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800217e:	4413      	add	r3, r2
 8002180:	4a5c      	ldr	r2, [pc, #368]	; (80022f4 <SendData+0x298>)
 8002182:	8811      	ldrh	r1, [r2, #0]
 8002184:	7892      	ldrb	r2, [r2, #2]
 8002186:	8019      	strh	r1, [r3, #0]
 8002188:	709a      	strb	r2, [r3, #2]

	strcat(JSON,"\"C\":\"");
 800218a:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe f824 	bl	80001dc <strlen>
 8002194:	4603      	mov	r3, r0
 8002196:	461a      	mov	r2, r3
 8002198:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800219c:	4413      	add	r3, r2
 800219e:	4a57      	ldr	r2, [pc, #348]	; (80022fc <SendData+0x2a0>)
 80021a0:	6810      	ldr	r0, [r2, #0]
 80021a2:	6018      	str	r0, [r3, #0]
 80021a4:	8892      	ldrh	r2, [r2, #4]
 80021a6:	809a      	strh	r2, [r3, #4]
	strcat(JSON,Str_C);
 80021a8:	f107 0208 	add.w	r2, r7, #8
 80021ac:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f004 ff97 	bl	80070e6 <strcat>
	strcat(JSON,"\"}");
 80021b8:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe f80d 	bl	80001dc <strlen>
 80021c2:	4603      	mov	r3, r0
 80021c4:	461a      	mov	r2, r3
 80021c6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80021ca:	4413      	add	r3, r2
 80021cc:	4a4c      	ldr	r2, [pc, #304]	; (8002300 <SendData+0x2a4>)
 80021ce:	8811      	ldrh	r1, [r2, #0]
 80021d0:	7892      	ldrb	r2, [r2, #2]
 80021d2:	8019      	strh	r1, [r3, #0]
 80021d4:	709a      	strb	r2, [r3, #2]
	strcat(JSON,"\r\n");
 80021d6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fd fffe 	bl	80001dc <strlen>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80021e8:	4413      	add	r3, r2
 80021ea:	4a46      	ldr	r2, [pc, #280]	; (8002304 <SendData+0x2a8>)
 80021ec:	8811      	ldrh	r1, [r2, #0]
 80021ee:	7892      	ldrb	r2, [r2, #2]
 80021f0:	8019      	strh	r1, [r3, #0]
 80021f2:	709a      	strb	r2, [r3, #2]

									//printf("DataJson: %s\n", JSON);
	int len = 0;
 80021f4:	2300      	movs	r3, #0
 80021f6:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	len = strlen(JSON);
 80021fa:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fd ffec 	bl	80001dc <strlen>
 8002204:	4603      	mov	r3, r0
 8002206:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
	sprintf(Length, "%d", len);
 800220a:	f507 739a 	add.w	r3, r7, #308	; 0x134
 800220e:	f8d7 2260 	ldr.w	r2, [r7, #608]	; 0x260
 8002212:	493d      	ldr	r1, [pc, #244]	; (8002308 <SendData+0x2ac>)
 8002214:	4618      	mov	r0, r3
 8002216:	f004 ff03 	bl	8007020 <siprintf>



	//AT+MQTTPUBRAW=0,"nhatnguyen/sub",5,0,1$0D$0A

	strcat(MQTTPUBRAW,"AT+MQTTPUBRAW=0,\"");
 800221a:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800221e:	4618      	mov	r0, r3
 8002220:	f7fd ffdc 	bl	80001dc <strlen>
 8002224:	4603      	mov	r3, r0
 8002226:	461a      	mov	r2, r3
 8002228:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800222c:	4413      	add	r3, r2
 800222e:	4a37      	ldr	r2, [pc, #220]	; (800230c <SendData+0x2b0>)
 8002230:	461d      	mov	r5, r3
 8002232:	4614      	mov	r4, r2
 8002234:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002236:	6028      	str	r0, [r5, #0]
 8002238:	6069      	str	r1, [r5, #4]
 800223a:	60aa      	str	r2, [r5, #8]
 800223c:	60eb      	str	r3, [r5, #12]
 800223e:	8823      	ldrh	r3, [r4, #0]
 8002240:	822b      	strh	r3, [r5, #16]
	strcat(MQTTPUBRAW,pub);
 8002242:	f507 731a 	add.w	r3, r7, #616	; 0x268
 8002246:	f5a3 7319 	sub.w	r3, r3, #612	; 0x264
 800224a:	f507 72fe 	add.w	r2, r7, #508	; 0x1fc
 800224e:	6819      	ldr	r1, [r3, #0]
 8002250:	4610      	mov	r0, r2
 8002252:	f004 ff48 	bl	80070e6 <strcat>
	strcat(MQTTPUBRAW,"\",");
 8002256:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800225a:	4618      	mov	r0, r3
 800225c:	f7fd ffbe 	bl	80001dc <strlen>
 8002260:	4603      	mov	r3, r0
 8002262:	461a      	mov	r2, r3
 8002264:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8002268:	4413      	add	r3, r2
 800226a:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <SendData+0x298>)
 800226c:	8811      	ldrh	r1, [r2, #0]
 800226e:	7892      	ldrb	r2, [r2, #2]
 8002270:	8019      	strh	r1, [r3, #0]
 8002272:	709a      	strb	r2, [r3, #2]
	strcat(MQTTPUBRAW,Length);
 8002274:	f507 729a 	add.w	r2, r7, #308	; 0x134
 8002278:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 800227c:	4611      	mov	r1, r2
 800227e:	4618      	mov	r0, r3
 8002280:	f004 ff31 	bl	80070e6 <strcat>
	strcat(MQTTPUBRAW,",0,1\r\n");
 8002284:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8002288:	4618      	mov	r0, r3
 800228a:	f7fd ffa7 	bl	80001dc <strlen>
 800228e:	4603      	mov	r3, r0
 8002290:	461a      	mov	r2, r3
 8002292:	f507 73fe 	add.w	r3, r7, #508	; 0x1fc
 8002296:	4413      	add	r3, r2
 8002298:	4a1d      	ldr	r2, [pc, #116]	; (8002310 <SendData+0x2b4>)
 800229a:	6810      	ldr	r0, [r2, #0]
 800229c:	6018      	str	r0, [r3, #0]
 800229e:	8891      	ldrh	r1, [r2, #4]
 80022a0:	7992      	ldrb	r2, [r2, #6]
 80022a2:	8099      	strh	r1, [r3, #4]
 80022a4:	719a      	strb	r2, [r3, #6]

	// => {"FA":"","FB":"","C":""}

	// CONTINUE CHECK CONNECT

	Send_AT_Commands_SendMessager(MQTTPUBRAW, "OK\r\n\r\n>" , 5000 , 0 , 3);
 80022a6:	f507 70fe 	add.w	r0, r7, #508	; 0x1fc
 80022aa:	2303      	movs	r3, #3
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022b4:	4917      	ldr	r1, [pc, #92]	; (8002314 <SendData+0x2b8>)
 80022b6:	f000 f9f9 	bl	80026ac <Send_AT_Commands_SendMessager>

	clearbuffer_UART_ESP();
 80022ba:	f000 fdc7 	bl	8002e4c <clearbuffer_UART_ESP>

	if(ErrorCode == 0)
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <SendData+0x2bc>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d10b      	bne.n	80022de <SendData+0x282>
	{
		Send_AT_Commands_SendMessager(JSON, "+MQTTPUB:OK" , 5000 , 0 , 5);
 80022c6:	f507 70cc 	add.w	r0, r7, #408	; 0x198
 80022ca:	2305      	movs	r3, #5
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	2300      	movs	r3, #0
 80022d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022d4:	4911      	ldr	r1, [pc, #68]	; (800231c <SendData+0x2c0>)
 80022d6:	f000 f9e9 	bl	80026ac <Send_AT_Commands_SendMessager>
		clearbuffer_UART_ESP();
 80022da:	f000 fdb7 	bl	8002e4c <clearbuffer_UART_ESP>
	}

	ConfigAT = 1;
 80022de:	4b10      	ldr	r3, [pc, #64]	; (8002320 <SendData+0x2c4>)
 80022e0:	2201      	movs	r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
}
 80022e4:	bf00      	nop
 80022e6:	f507 771a 	add.w	r7, r7, #616	; 0x268
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bdb0      	pop	{r4, r5, r7, pc}
 80022ee:	bf00      	nop
 80022f0:	0800ab88 	.word	0x0800ab88
 80022f4:	0800ab90 	.word	0x0800ab90
 80022f8:	0800ab94 	.word	0x0800ab94
 80022fc:	0800ab9c 	.word	0x0800ab9c
 8002300:	0800aba4 	.word	0x0800aba4
 8002304:	0800aba8 	.word	0x0800aba8
 8002308:	0800abac 	.word	0x0800abac
 800230c:	0800abb0 	.word	0x0800abb0
 8002310:	0800abc4 	.word	0x0800abc4
 8002314:	0800abcc 	.word	0x0800abcc
 8002318:	200007f4 	.word	0x200007f4
 800231c:	0800abd4 	.word	0x0800abd4
 8002320:	200007f8 	.word	0x200007f8

08002324 <ConnectMQTT>:


// CONNECT MQTT

void ConnectMQTT(char *server , char *port , char *user , char *pass , char *sub , char *pub)
{
 8002324:	b5b0      	push	{r4, r5, r7, lr}
 8002326:	f5ad 7d06 	sub.w	sp, sp, #536	; 0x218
 800232a:	af02      	add	r7, sp, #8
 800232c:	f507 7404 	add.w	r4, r7, #528	; 0x210
 8002330:	f5a4 7401 	sub.w	r4, r4, #516	; 0x204
 8002334:	6020      	str	r0, [r4, #0]
 8002336:	f507 7004 	add.w	r0, r7, #528	; 0x210
 800233a:	f5a0 7002 	sub.w	r0, r0, #520	; 0x208
 800233e:	6001      	str	r1, [r0, #0]
 8002340:	f507 7104 	add.w	r1, r7, #528	; 0x210
 8002344:	f5a1 7103 	sub.w	r1, r1, #524	; 0x20c
 8002348:	600a      	str	r2, [r1, #0]
 800234a:	f507 7204 	add.w	r2, r7, #528	; 0x210
 800234e:	f5a2 7204 	sub.w	r2, r2, #528	; 0x210
 8002352:	6013      	str	r3, [r2, #0]
	uint32_t id = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	id = rand()%100;
 800235a:	f004 fdd7 	bl	8006f0c <rand>
 800235e:	4602      	mov	r2, r0
 8002360:	4bc1      	ldr	r3, [pc, #772]	; (8002668 <ConnectMQTT+0x344>)
 8002362:	fb83 1302 	smull	r1, r3, r3, r2
 8002366:	1159      	asrs	r1, r3, #5
 8002368:	17d3      	asrs	r3, r2, #31
 800236a:	1acb      	subs	r3, r1, r3
 800236c:	2164      	movs	r1, #100	; 0x64
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	char MathRandom[100];
	char MQTTUSERCFG[100];
	char MQTTCONN[100];
	char MQTTSUB[100];

	for(int i = 0 ; i < 100; i++)
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 800237e:	e02d      	b.n	80023dc <ConnectMQTT+0xb8>
	{
		clientid[i] = 0;
 8002380:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8002384:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002388:	4413      	add	r3, r2
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]
		MathRandom[i] = 0;
 800238e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002392:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002396:	4413      	add	r3, r2
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
		MQTTUSERCFG[i] = 0;
 800239c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80023a0:	f5a3 729a 	sub.w	r2, r3, #308	; 0x134
 80023a4:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023a8:	4413      	add	r3, r2
 80023aa:	2200      	movs	r2, #0
 80023ac:	701a      	strb	r2, [r3, #0]
		MQTTCONN[i] = 0;
 80023ae:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80023b2:	f5a3 72cc 	sub.w	r2, r3, #408	; 0x198
 80023b6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023ba:	4413      	add	r3, r2
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
		MQTTSUB[i] = 0;
 80023c0:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80023c4:	f5a3 72fe 	sub.w	r2, r3, #508	; 0x1fc
 80023c8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023cc:	4413      	add	r3, r2
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 100; i++)
 80023d2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023d6:	3301      	adds	r3, #1
 80023d8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80023dc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80023e0:	2b63      	cmp	r3, #99	; 0x63
 80023e2:	ddcd      	ble.n	8002380 <ConnectMQTT+0x5c>
	}

	printf(MathRandom, "%d", id);
 80023e4:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80023e8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80023ec:	499f      	ldr	r1, [pc, #636]	; (800266c <ConnectMQTT+0x348>)
 80023ee:	4618      	mov	r0, r3
 80023f0:	f004 fcfe 	bl	8006df0 <iprintf>
	strcat(clientid, "ESP");
 80023f4:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7fd feef 	bl	80001dc <strlen>
 80023fe:	4603      	mov	r3, r0
 8002400:	461a      	mov	r2, r3
 8002402:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8002406:	4413      	add	r3, r2
 8002408:	4a99      	ldr	r2, [pc, #612]	; (8002670 <ConnectMQTT+0x34c>)
 800240a:	6810      	ldr	r0, [r2, #0]
 800240c:	6018      	str	r0, [r3, #0]
	strcat (clientid, MathRandom);
 800240e:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 8002412:	f507 73d2 	add.w	r3, r7, #420	; 0x1a4
 8002416:	4611      	mov	r1, r2
 8002418:	4618      	mov	r0, r3
 800241a:	f004 fe64 	bl	80070e6 <strcat>

	// TAO CHUOI USER AND PASS

	//AT+MQTTUSERCFG=0,1,"ESP8266","nhatnguyenIOT","123456nnn",0,0,""$0D$0A => OK

	strcat(MQTTUSERCFG, "AT+MQTTUSERCFG=0,1,\"");
 800241e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002422:	4618      	mov	r0, r3
 8002424:	f7fd feda 	bl	80001dc <strlen>
 8002428:	4603      	mov	r3, r0
 800242a:	461a      	mov	r2, r3
 800242c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002430:	4413      	add	r3, r2
 8002432:	4a90      	ldr	r2, [pc, #576]	; (8002674 <ConnectMQTT+0x350>)
 8002434:	461d      	mov	r5, r3
 8002436:	4614      	mov	r4, r2
 8002438:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800243a:	6028      	str	r0, [r5, #0]
 800243c:	6069      	str	r1, [r5, #4]
 800243e:	60aa      	str	r2, [r5, #8]
 8002440:	60eb      	str	r3, [r5, #12]
 8002442:	6820      	ldr	r0, [r4, #0]
 8002444:	6128      	str	r0, [r5, #16]
 8002446:	7923      	ldrb	r3, [r4, #4]
 8002448:	752b      	strb	r3, [r5, #20]
	strcat(MQTTUSERCFG,clientid);
 800244a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800244e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002452:	4611      	mov	r1, r2
 8002454:	4618      	mov	r0, r3
 8002456:	f004 fe46 	bl	80070e6 <strcat>
	strcat(MQTTUSERCFG,"\",\"");
 800245a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800245e:	4618      	mov	r0, r3
 8002460:	f7fd febc 	bl	80001dc <strlen>
 8002464:	4603      	mov	r3, r0
 8002466:	461a      	mov	r2, r3
 8002468:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800246c:	4413      	add	r3, r2
 800246e:	4a82      	ldr	r2, [pc, #520]	; (8002678 <ConnectMQTT+0x354>)
 8002470:	6810      	ldr	r0, [r2, #0]
 8002472:	6018      	str	r0, [r3, #0]
	strcat(MQTTUSERCFG,user);
 8002474:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8002478:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800247c:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 8002480:	6819      	ldr	r1, [r3, #0]
 8002482:	4610      	mov	r0, r2
 8002484:	f004 fe2f 	bl	80070e6 <strcat>
	strcat(MQTTUSERCFG,"\",\"");
 8002488:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800248c:	4618      	mov	r0, r3
 800248e:	f7fd fea5 	bl	80001dc <strlen>
 8002492:	4603      	mov	r3, r0
 8002494:	461a      	mov	r2, r3
 8002496:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800249a:	4413      	add	r3, r2
 800249c:	4a76      	ldr	r2, [pc, #472]	; (8002678 <ConnectMQTT+0x354>)
 800249e:	6810      	ldr	r0, [r2, #0]
 80024a0:	6018      	str	r0, [r3, #0]
	strcat(MQTTUSERCFG,pass);
 80024a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80024a6:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80024aa:	f107 02dc 	add.w	r2, r7, #220	; 0xdc
 80024ae:	6819      	ldr	r1, [r3, #0]
 80024b0:	4610      	mov	r0, r2
 80024b2:	f004 fe18 	bl	80070e6 <strcat>
	strcat(MQTTUSERCFG,"\",0,0,");
 80024b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd fe8e 	bl	80001dc <strlen>
 80024c0:	4603      	mov	r3, r0
 80024c2:	461a      	mov	r2, r3
 80024c4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024c8:	4413      	add	r3, r2
 80024ca:	4a6c      	ldr	r2, [pc, #432]	; (800267c <ConnectMQTT+0x358>)
 80024cc:	6810      	ldr	r0, [r2, #0]
 80024ce:	6018      	str	r0, [r3, #0]
 80024d0:	8891      	ldrh	r1, [r2, #4]
 80024d2:	7992      	ldrb	r2, [r2, #6]
 80024d4:	8099      	strh	r1, [r3, #4]
 80024d6:	719a      	strb	r2, [r3, #6]
	strcat(MQTTUSERCFG,"\"\"");
 80024d8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd fe7d 	bl	80001dc <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	461a      	mov	r2, r3
 80024e6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024ea:	4413      	add	r3, r2
 80024ec:	4a64      	ldr	r2, [pc, #400]	; (8002680 <ConnectMQTT+0x35c>)
 80024ee:	8811      	ldrh	r1, [r2, #0]
 80024f0:	7892      	ldrb	r2, [r2, #2]
 80024f2:	8019      	strh	r1, [r3, #0]
 80024f4:	709a      	strb	r2, [r3, #2]
	strcat(MQTTUSERCFG,"\r\n");
 80024f6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fd fe6e 	bl	80001dc <strlen>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002508:	4413      	add	r3, r2
 800250a:	4a5e      	ldr	r2, [pc, #376]	; (8002684 <ConnectMQTT+0x360>)
 800250c:	8811      	ldrh	r1, [r2, #0]
 800250e:	7892      	ldrb	r2, [r2, #2]
 8002510:	8019      	strh	r1, [r3, #0]
 8002512:	709a      	strb	r2, [r3, #2]

	// TAO CHUOI SERVER AND PORT

	//AT+MQTTCONN=0,"ngoinhaiot.com",1111,1$0D$0A

	strcat(MQTTCONN, "AT+MQTTCONN=0,\"");
 8002514:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002518:	4618      	mov	r0, r3
 800251a:	f7fd fe5f 	bl	80001dc <strlen>
 800251e:	4603      	mov	r3, r0
 8002520:	461a      	mov	r2, r3
 8002522:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002526:	4413      	add	r3, r2
 8002528:	4a57      	ldr	r2, [pc, #348]	; (8002688 <ConnectMQTT+0x364>)
 800252a:	461c      	mov	r4, r3
 800252c:	4615      	mov	r5, r2
 800252e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002530:	6020      	str	r0, [r4, #0]
 8002532:	6061      	str	r1, [r4, #4]
 8002534:	60a2      	str	r2, [r4, #8]
 8002536:	60e3      	str	r3, [r4, #12]
	strcat(MQTTCONN, server);
 8002538:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800253c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8002540:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002544:	6819      	ldr	r1, [r3, #0]
 8002546:	4610      	mov	r0, r2
 8002548:	f004 fdcd 	bl	80070e6 <strcat>
	strcat(MQTTCONN, "\",");
 800254c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002550:	4618      	mov	r0, r3
 8002552:	f7fd fe43 	bl	80001dc <strlen>
 8002556:	4603      	mov	r3, r0
 8002558:	461a      	mov	r2, r3
 800255a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800255e:	4413      	add	r3, r2
 8002560:	4a4a      	ldr	r2, [pc, #296]	; (800268c <ConnectMQTT+0x368>)
 8002562:	8811      	ldrh	r1, [r2, #0]
 8002564:	7892      	ldrb	r2, [r2, #2]
 8002566:	8019      	strh	r1, [r3, #0]
 8002568:	709a      	strb	r2, [r3, #2]
	strcat(MQTTCONN, port);
 800256a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800256e:	f5a3 7302 	sub.w	r3, r3, #520	; 0x208
 8002572:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8002576:	6819      	ldr	r1, [r3, #0]
 8002578:	4610      	mov	r0, r2
 800257a:	f004 fdb4 	bl	80070e6 <strcat>
	strcat(MQTTCONN, ",1\r\n");
 800257e:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002582:	4618      	mov	r0, r3
 8002584:	f7fd fe2a 	bl	80001dc <strlen>
 8002588:	4603      	mov	r3, r0
 800258a:	461a      	mov	r2, r3
 800258c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002590:	4413      	add	r3, r2
 8002592:	4a3f      	ldr	r2, [pc, #252]	; (8002690 <ConnectMQTT+0x36c>)
 8002594:	6810      	ldr	r0, [r2, #0]
 8002596:	6018      	str	r0, [r3, #0]
 8002598:	7912      	ldrb	r2, [r2, #4]
 800259a:	711a      	strb	r2, [r3, #4]

	// TAO CHUOI DE NHAN DU LIEU

	//AT+MQTTSUB=0,"nhatnguyen/tr",0$0D$0A => OK

	strcat(MQTTSUB, "AT+MQTTSUB=0,\"");
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fd fe1b 	bl	80001dc <strlen>
 80025a6:	4603      	mov	r3, r0
 80025a8:	461a      	mov	r2, r3
 80025aa:	f107 0314 	add.w	r3, r7, #20
 80025ae:	4413      	add	r3, r2
 80025b0:	4a38      	ldr	r2, [pc, #224]	; (8002694 <ConnectMQTT+0x370>)
 80025b2:	461c      	mov	r4, r3
 80025b4:	4613      	mov	r3, r2
 80025b6:	cb07      	ldmia	r3!, {r0, r1, r2}
 80025b8:	6020      	str	r0, [r4, #0]
 80025ba:	6061      	str	r1, [r4, #4]
 80025bc:	60a2      	str	r2, [r4, #8]
 80025be:	881a      	ldrh	r2, [r3, #0]
 80025c0:	789b      	ldrb	r3, [r3, #2]
 80025c2:	81a2      	strh	r2, [r4, #12]
 80025c4:	73a3      	strb	r3, [r4, #14]
	strcat(MQTTSUB, sub);
 80025c6:	f107 0314 	add.w	r3, r7, #20
 80025ca:	f8d7 1220 	ldr.w	r1, [r7, #544]	; 0x220
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fd89 	bl	80070e6 <strcat>
	strcat(MQTTSUB, "\",0\r\n");
 80025d4:	f107 0314 	add.w	r3, r7, #20
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fd fdff 	bl	80001dc <strlen>
 80025de:	4603      	mov	r3, r0
 80025e0:	461a      	mov	r2, r3
 80025e2:	f107 0314 	add.w	r3, r7, #20
 80025e6:	4413      	add	r3, r2
 80025e8:	4a2b      	ldr	r2, [pc, #172]	; (8002698 <ConnectMQTT+0x374>)
 80025ea:	6810      	ldr	r0, [r2, #0]
 80025ec:	6018      	str	r0, [r3, #0]
 80025ee:	8892      	ldrh	r2, [r2, #4]
 80025f0:	809a      	strh	r2, [r3, #4]


	// GUI LENH QUA ESP8266 DE KET NOI WIFI

	Send_AT_Commands_ConnectMQTT(MQTTUSERCFG, "OK" , 5000 , 0 , 5);
 80025f2:	f107 00dc 	add.w	r0, r7, #220	; 0xdc
 80025f6:	2305      	movs	r3, #5
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002600:	4926      	ldr	r1, [pc, #152]	; (800269c <ConnectMQTT+0x378>)
 8002602:	f000 f90d 	bl	8002820 <Send_AT_Commands_ConnectMQTT>
	HAL_Delay(1000);
 8002606:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800260a:	f001 fa45 	bl	8003a98 <HAL_Delay>
	clearbuffer_UART_ESP();
 800260e:	f000 fc1d 	bl	8002e4c <clearbuffer_UART_ESP>


	Send_AT_Commands_ConnectMQTT(MQTTCONN, "+MQTTCONNECTED" , 5000 , 0 , 5);
 8002612:	f107 0078 	add.w	r0, r7, #120	; 0x78
 8002616:	2305      	movs	r3, #5
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2300      	movs	r3, #0
 800261c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002620:	491f      	ldr	r1, [pc, #124]	; (80026a0 <ConnectMQTT+0x37c>)
 8002622:	f000 f8fd 	bl	8002820 <Send_AT_Commands_ConnectMQTT>
	HAL_Delay(1000);
 8002626:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800262a:	f001 fa35 	bl	8003a98 <HAL_Delay>
	clearbuffer_UART_ESP();
 800262e:	f000 fc0d 	bl	8002e4c <clearbuffer_UART_ESP>


	Send_AT_Commands_ConnectMQTT(MQTTSUB, "OK" , 5000 , 0 , 5);
 8002632:	f107 0014 	add.w	r0, r7, #20
 8002636:	2305      	movs	r3, #5
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	2300      	movs	r3, #0
 800263c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002640:	4916      	ldr	r1, [pc, #88]	; (800269c <ConnectMQTT+0x378>)
 8002642:	f000 f8ed 	bl	8002820 <Send_AT_Commands_ConnectMQTT>
	HAL_Delay(1000);
 8002646:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800264a:	f001 fa25 	bl	8003a98 <HAL_Delay>
	clearbuffer_UART_ESP();
 800264e:	f000 fbfd 	bl	8002e4c <clearbuffer_UART_ESP>

	ConfigAT = 1;
 8002652:	4b14      	ldr	r3, [pc, #80]	; (80026a4 <ConnectMQTT+0x380>)
 8002654:	2201      	movs	r2, #1
 8002656:	601a      	str	r2, [r3, #0]
	ErrorCode = 1;
 8002658:	4b13      	ldr	r3, [pc, #76]	; (80026a8 <ConnectMQTT+0x384>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]

}
 800265e:	bf00      	nop
 8002660:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8002664:	46bd      	mov	sp, r7
 8002666:	bdb0      	pop	{r4, r5, r7, pc}
 8002668:	51eb851f 	.word	0x51eb851f
 800266c:	0800abac 	.word	0x0800abac
 8002670:	0800abe0 	.word	0x0800abe0
 8002674:	0800abe4 	.word	0x0800abe4
 8002678:	0800abfc 	.word	0x0800abfc
 800267c:	0800ac00 	.word	0x0800ac00
 8002680:	0800ac08 	.word	0x0800ac08
 8002684:	0800aba8 	.word	0x0800aba8
 8002688:	0800ac0c 	.word	0x0800ac0c
 800268c:	0800ab90 	.word	0x0800ab90
 8002690:	0800ac1c 	.word	0x0800ac1c
 8002694:	0800ac24 	.word	0x0800ac24
 8002698:	0800ac34 	.word	0x0800ac34
 800269c:	0800ac3c 	.word	0x0800ac3c
 80026a0:	0800ac40 	.word	0x0800ac40
 80026a4:	200007f8 	.word	0x200007f8
 80026a8:	200007f4 	.word	0x200007f4

080026ac <Send_AT_Commands_SendMessager>:

// GUI KET NOI DEN ESP8266

void Send_AT_Commands_SendMessager(char *AT_Commands, char *DataResponse , uint32_t timeout , uint32_t setting , uint32_t count)
{
 80026ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80026b0:	b08b      	sub	sp, #44	; 0x2c
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	60f8      	str	r0, [r7, #12]
 80026b6:	60b9      	str	r1, [r7, #8]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	466b      	mov	r3, sp
 80026be:	461e      	mov	r6, r3
	clearbuffer_UART_ESP();
 80026c0:	f000 fbc4 	bl	8002e4c <clearbuffer_UART_ESP>
	last = HAL_GetTick();
 80026c4:	f001 f9de 	bl	8003a84 <HAL_GetTick>
 80026c8:	4603      	mov	r3, r0
 80026ca:	461a      	mov	r2, r3
 80026cc:	4b4d      	ldr	r3, [pc, #308]	; (8002804 <Send_AT_Commands_SendMessager+0x158>)
 80026ce:	601a      	str	r2, [r3, #0]
	uint32_t Size = 300;
 80026d0:	f44f 7396 	mov.w	r3, #300	; 0x12c
 80026d4:	61fb      	str	r3, [r7, #28]
	uint32_t Count = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	623b      	str	r3, [r7, #32]
	ConfigAT = setting;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	4a4a      	ldr	r2, [pc, #296]	; (8002808 <Send_AT_Commands_SendMessager+0x15c>)
 80026de:	6013      	str	r3, [r2, #0]
	char DataHTTP[Size];
 80026e0:	69f9      	ldr	r1, [r7, #28]
 80026e2:	460b      	mov	r3, r1
 80026e4:	3b01      	subs	r3, #1
 80026e6:	61bb      	str	r3, [r7, #24]
 80026e8:	2300      	movs	r3, #0
 80026ea:	4688      	mov	r8, r1
 80026ec:	4699      	mov	r9, r3
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002702:	2300      	movs	r3, #0
 8002704:	460c      	mov	r4, r1
 8002706:	461d      	mov	r5, r3
 8002708:	f04f 0200 	mov.w	r2, #0
 800270c:	f04f 0300 	mov.w	r3, #0
 8002710:	00eb      	lsls	r3, r5, #3
 8002712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002716:	00e2      	lsls	r2, r4, #3
 8002718:	1dcb      	adds	r3, r1, #7
 800271a:	08db      	lsrs	r3, r3, #3
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	ebad 0d03 	sub.w	sp, sp, r3
 8002722:	466b      	mov	r3, sp
 8002724:	3300      	adds	r3, #0
 8002726:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i < Size; i++)
 8002728:	2300      	movs	r3, #0
 800272a:	627b      	str	r3, [r7, #36]	; 0x24
 800272c:	e007      	b.n	800273e <Send_AT_Commands_SendMessager+0x92>
	{
		DataHTTP[i] = 0;
 800272e:	697a      	ldr	r2, [r7, #20]
 8002730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002732:	4413      	add	r3, r2
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < Size; i++)
 8002738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273a:	3301      	adds	r3, #1
 800273c:	627b      	str	r3, [r7, #36]	; 0x24
 800273e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	429a      	cmp	r2, r3
 8002744:	d8f3      	bhi.n	800272e <Send_AT_Commands_SendMessager+0x82>
	}

	// GUI LENH VAO HTTP

	snprintf(DataHTTP, sizeof(DataHTTP),"%s", AT_Commands);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4a30      	ldr	r2, [pc, #192]	; (800280c <Send_AT_Commands_SendMessager+0x160>)
 800274a:	6978      	ldr	r0, [r7, #20]
 800274c:	f004 fc34 	bl	8006fb8 <sniprintf>

	HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 8002750:	6978      	ldr	r0, [r7, #20]
 8002752:	f7fd fd43 	bl	80001dc <strlen>
 8002756:	4603      	mov	r3, r0
 8002758:	b29a      	uxth	r2, r3
 800275a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800275e:	6979      	ldr	r1, [r7, #20]
 8002760:	482b      	ldr	r0, [pc, #172]	; (8002810 <Send_AT_Commands_SendMessager+0x164>)
 8002762:	f002 feed 	bl	8005540 <HAL_UART_Transmit>

	//printf("Send AT-Commands Data: %s\r\n", DataHTTP);

	last = HAL_GetTick();
 8002766:	f001 f98d 	bl	8003a84 <HAL_GetTick>
 800276a:	4603      	mov	r3, r0
 800276c:	461a      	mov	r2, r3
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <Send_AT_Commands_SendMessager+0x158>)
 8002770:	601a      	str	r2, [r3, #0]
	while(1)
	{

		// CHAY HAM NGAT UART

		if(HAL_GetTick() - last >= timeout)
 8002772:	f001 f987 	bl	8003a84 <HAL_GetTick>
 8002776:	4603      	mov	r3, r0
 8002778:	4a22      	ldr	r2, [pc, #136]	; (8002804 <Send_AT_Commands_SendMessager+0x158>)
 800277a:	6812      	ldr	r2, [r2, #0]
 800277c:	1a9b      	subs	r3, r3, r2
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	d813      	bhi.n	80027ac <Send_AT_Commands_SendMessager+0x100>
		{
			Count++;
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	3301      	adds	r3, #1
 8002788:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 800278a:	6978      	ldr	r0, [r7, #20]
 800278c:	f7fd fd26 	bl	80001dc <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	b29a      	uxth	r2, r3
 8002794:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002798:	6979      	ldr	r1, [r7, #20]
 800279a:	481d      	ldr	r0, [pc, #116]	; (8002810 <Send_AT_Commands_SendMessager+0x164>)
 800279c:	f002 fed0 	bl	8005540 <HAL_UART_Transmit>

			//printf("Send AT-Commands Send Data MQTT: %s\r\n", DataHTTP);

			last = HAL_GetTick();
 80027a0:	f001 f970 	bl	8003a84 <HAL_GetTick>
 80027a4:	4603      	mov	r3, r0
 80027a6:	461a      	mov	r2, r3
 80027a8:	4b16      	ldr	r3, [pc, #88]	; (8002804 <Send_AT_Commands_SendMessager+0x158>)
 80027aa:	601a      	str	r2, [r3, #0]
		}
		if(strstr(rx_buffer1,DataResponse) != NULL)
 80027ac:	68b9      	ldr	r1, [r7, #8]
 80027ae:	4819      	ldr	r0, [pc, #100]	; (8002814 <Send_AT_Commands_SendMessager+0x168>)
 80027b0:	f004 fcc9 	bl	8007146 <strstr>
 80027b4:	4603      	mov	r3, r0
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d00e      	beq.n	80027d8 <Send_AT_Commands_SendMessager+0x12c>
		{

			//printf("SEND MQTT OK\r\n");

			clearbuffer_UART_ESP();
 80027ba:	f000 fb47 	bl	8002e4c <clearbuffer_UART_ESP>
			ErrorCode = 0;
 80027be:	4b16      	ldr	r3, [pc, #88]	; (8002818 <Send_AT_Commands_SendMessager+0x16c>)
 80027c0:	2200      	movs	r2, #0
 80027c2:	701a      	strb	r2, [r3, #0]
			CheckConnect = 1;
 80027c4:	4b15      	ldr	r3, [pc, #84]	; (800281c <Send_AT_Commands_SendMessager+0x170>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
			last = HAL_GetTick();
 80027ca:	f001 f95b 	bl	8003a84 <HAL_GetTick>
 80027ce:	4603      	mov	r3, r0
 80027d0:	461a      	mov	r2, r3
 80027d2:	4b0c      	ldr	r3, [pc, #48]	; (8002804 <Send_AT_Commands_SendMessager+0x158>)
 80027d4:	601a      	str	r2, [r3, #0]
			break;
 80027d6:	e00e      	b.n	80027f6 <Send_AT_Commands_SendMessager+0x14a>
		}
		if(Count >= count)
 80027d8:	6a3a      	ldr	r2, [r7, #32]
 80027da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027dc:	429a      	cmp	r2, r3
 80027de:	d3c8      	bcc.n	8002772 <Send_AT_Commands_SendMessager+0xc6>
		{
			//printf("SEND MQTT ERROR\r\n");

			ErrorCode = 1;
 80027e0:	4b0d      	ldr	r3, [pc, #52]	; (8002818 <Send_AT_Commands_SendMessager+0x16c>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
			clearbuffer_UART_ESP();
 80027e6:	f000 fb31 	bl	8002e4c <clearbuffer_UART_ESP>
			last = HAL_GetTick();
 80027ea:	f001 f94b 	bl	8003a84 <HAL_GetTick>
 80027ee:	4603      	mov	r3, r0
 80027f0:	461a      	mov	r2, r3
 80027f2:	4b04      	ldr	r3, [pc, #16]	; (8002804 <Send_AT_Commands_SendMessager+0x158>)
 80027f4:	601a      	str	r2, [r3, #0]
 80027f6:	46b5      	mov	sp, r6
			break;
		}
	}
}
 80027f8:	bf00      	nop
 80027fa:	372c      	adds	r7, #44	; 0x2c
 80027fc:	46bd      	mov	sp, r7
 80027fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002802:	bf00      	nop
 8002804:	200007fc 	.word	0x200007fc
 8002808:	200007f8 	.word	0x200007f8
 800280c:	0800ac50 	.word	0x0800ac50
 8002810:	20000288 	.word	0x20000288
 8002814:	2000033c 	.word	0x2000033c
 8002818:	200007f4 	.word	0x200007f4
 800281c:	2000000c 	.word	0x2000000c

08002820 <Send_AT_Commands_ConnectMQTT>:

void Send_AT_Commands_ConnectMQTT(char *AT_Commands, char *DataResponse , uint32_t timeout , uint32_t setting , uint32_t count)
{
 8002820:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002824:	b08b      	sub	sp, #44	; 0x2c
 8002826:	af00      	add	r7, sp, #0
 8002828:	60f8      	str	r0, [r7, #12]
 800282a:	60b9      	str	r1, [r7, #8]
 800282c:	607a      	str	r2, [r7, #4]
 800282e:	603b      	str	r3, [r7, #0]
 8002830:	466b      	mov	r3, sp
 8002832:	461e      	mov	r6, r3
	clearbuffer_UART_ESP();
 8002834:	f000 fb0a 	bl	8002e4c <clearbuffer_UART_ESP>
	last = HAL_GetTick();
 8002838:	f001 f924 	bl	8003a84 <HAL_GetTick>
 800283c:	4603      	mov	r3, r0
 800283e:	461a      	mov	r2, r3
 8002840:	4b4e      	ldr	r3, [pc, #312]	; (800297c <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002842:	601a      	str	r2, [r3, #0]
	uint32_t Size = 300;
 8002844:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002848:	61fb      	str	r3, [r7, #28]
	uint32_t Count = 0;
 800284a:	2300      	movs	r3, #0
 800284c:	623b      	str	r3, [r7, #32]
	ConfigAT = setting;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	4a4b      	ldr	r2, [pc, #300]	; (8002980 <Send_AT_Commands_ConnectMQTT+0x160>)
 8002852:	6013      	str	r3, [r2, #0]
	char DataHTTP[Size];
 8002854:	69f9      	ldr	r1, [r7, #28]
 8002856:	460b      	mov	r3, r1
 8002858:	3b01      	subs	r3, #1
 800285a:	61bb      	str	r3, [r7, #24]
 800285c:	2300      	movs	r3, #0
 800285e:	4688      	mov	r8, r1
 8002860:	4699      	mov	r9, r3
 8002862:	f04f 0200 	mov.w	r2, #0
 8002866:	f04f 0300 	mov.w	r3, #0
 800286a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800286e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002872:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002876:	2300      	movs	r3, #0
 8002878:	460c      	mov	r4, r1
 800287a:	461d      	mov	r5, r3
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	00eb      	lsls	r3, r5, #3
 8002886:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800288a:	00e2      	lsls	r2, r4, #3
 800288c:	1dcb      	adds	r3, r1, #7
 800288e:	08db      	lsrs	r3, r3, #3
 8002890:	00db      	lsls	r3, r3, #3
 8002892:	ebad 0d03 	sub.w	sp, sp, r3
 8002896:	466b      	mov	r3, sp
 8002898:	3300      	adds	r3, #0
 800289a:	617b      	str	r3, [r7, #20]
	for(int i = 0 ; i < Size; i++)
 800289c:	2300      	movs	r3, #0
 800289e:	627b      	str	r3, [r7, #36]	; 0x24
 80028a0:	e007      	b.n	80028b2 <Send_AT_Commands_ConnectMQTT+0x92>
	{
		DataHTTP[i] = 0;
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a6:	4413      	add	r3, r2
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < Size; i++)
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	3301      	adds	r3, #1
 80028b0:	627b      	str	r3, [r7, #36]	; 0x24
 80028b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d8f3      	bhi.n	80028a2 <Send_AT_Commands_ConnectMQTT+0x82>
	}

	// GUI LENH VAO HTTP

	snprintf(DataHTTP, sizeof(DataHTTP),"%s", AT_Commands);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	4a31      	ldr	r2, [pc, #196]	; (8002984 <Send_AT_Commands_ConnectMQTT+0x164>)
 80028be:	6978      	ldr	r0, [r7, #20]
 80028c0:	f004 fb7a 	bl	8006fb8 <sniprintf>
	HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 80028c4:	6978      	ldr	r0, [r7, #20]
 80028c6:	f7fd fc89 	bl	80001dc <strlen>
 80028ca:	4603      	mov	r3, r0
 80028cc:	b29a      	uxth	r2, r3
 80028ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80028d2:	6979      	ldr	r1, [r7, #20]
 80028d4:	482c      	ldr	r0, [pc, #176]	; (8002988 <Send_AT_Commands_ConnectMQTT+0x168>)
 80028d6:	f002 fe33 	bl	8005540 <HAL_UART_Transmit>

	//printf("Send AT-Commands Data: %s\r\n", DataHTTP);

	last = HAL_GetTick();
 80028da:	f001 f8d3 	bl	8003a84 <HAL_GetTick>
 80028de:	4603      	mov	r3, r0
 80028e0:	461a      	mov	r2, r3
 80028e2:	4b26      	ldr	r3, [pc, #152]	; (800297c <Send_AT_Commands_ConnectMQTT+0x15c>)
 80028e4:	601a      	str	r2, [r3, #0]
	while(1)
	{
		// CHAY HAM NGAT UART

		if(HAL_GetTick() - last >= timeout)
 80028e6:	f001 f8cd 	bl	8003a84 <HAL_GetTick>
 80028ea:	4603      	mov	r3, r0
 80028ec:	4a23      	ldr	r2, [pc, #140]	; (800297c <Send_AT_Commands_ConnectMQTT+0x15c>)
 80028ee:	6812      	ldr	r2, [r2, #0]
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d813      	bhi.n	8002920 <Send_AT_Commands_ConnectMQTT+0x100>
		{
			Count++;
 80028f8:	6a3b      	ldr	r3, [r7, #32]
 80028fa:	3301      	adds	r3, #1
 80028fc:	623b      	str	r3, [r7, #32]
			HAL_UART_Transmit(&huart1,(uint8_t *)&DataHTTP,strlen(DataHTTP),1000);
 80028fe:	6978      	ldr	r0, [r7, #20]
 8002900:	f7fd fc6c 	bl	80001dc <strlen>
 8002904:	4603      	mov	r3, r0
 8002906:	b29a      	uxth	r2, r3
 8002908:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800290c:	6979      	ldr	r1, [r7, #20]
 800290e:	481e      	ldr	r0, [pc, #120]	; (8002988 <Send_AT_Commands_ConnectMQTT+0x168>)
 8002910:	f002 fe16 	bl	8005540 <HAL_UART_Transmit>

			//printf("Send AT-Commands Data TimeOut: %s\r\n", DataHTTP);
			last = HAL_GetTick();
 8002914:	f001 f8b6 	bl	8003a84 <HAL_GetTick>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	4b17      	ldr	r3, [pc, #92]	; (800297c <Send_AT_Commands_ConnectMQTT+0x15c>)
 800291e:	601a      	str	r2, [r3, #0]

		}
		if(strstr(rx_buffer1,DataResponse) != NULL)
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	481a      	ldr	r0, [pc, #104]	; (800298c <Send_AT_Commands_ConnectMQTT+0x16c>)
 8002924:	f004 fc0f 	bl	8007146 <strstr>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00e      	beq.n	800294c <Send_AT_Commands_ConnectMQTT+0x12c>
		{

			//printf("MQTT Connect OK\r\n");

			clearbuffer_UART_ESP();
 800292e:	f000 fa8d 	bl	8002e4c <clearbuffer_UART_ESP>
			ErrorCode = 1;
 8002932:	4b17      	ldr	r3, [pc, #92]	; (8002990 <Send_AT_Commands_ConnectMQTT+0x170>)
 8002934:	2201      	movs	r2, #1
 8002936:	701a      	strb	r2, [r3, #0]
			CheckConnect = 1;
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <Send_AT_Commands_ConnectMQTT+0x174>)
 800293a:	2201      	movs	r2, #1
 800293c:	701a      	strb	r2, [r3, #0]
			last = HAL_GetTick();
 800293e:	f001 f8a1 	bl	8003a84 <HAL_GetTick>
 8002942:	4603      	mov	r3, r0
 8002944:	461a      	mov	r2, r3
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <Send_AT_Commands_ConnectMQTT+0x15c>)
 8002948:	601a      	str	r2, [r3, #0]

			break;
 800294a:	e011      	b.n	8002970 <Send_AT_Commands_ConnectMQTT+0x150>
		}
		if(Count >= count)
 800294c:	6a3a      	ldr	r2, [r7, #32]
 800294e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002950:	429a      	cmp	r2, r3
 8002952:	d3c8      	bcc.n	80028e6 <Send_AT_Commands_ConnectMQTT+0xc6>

			//GUI LAI LENH SETTING

			//printf("MQTT Connect ERROR\r\n");

			ErrorCode = 0;
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <Send_AT_Commands_ConnectMQTT+0x170>)
 8002956:	2200      	movs	r2, #0
 8002958:	701a      	strb	r2, [r3, #0]
			CheckConnect = 0;
 800295a:	4b0e      	ldr	r3, [pc, #56]	; (8002994 <Send_AT_Commands_ConnectMQTT+0x174>)
 800295c:	2200      	movs	r2, #0
 800295e:	701a      	strb	r2, [r3, #0]
			clearbuffer_UART_ESP();
 8002960:	f000 fa74 	bl	8002e4c <clearbuffer_UART_ESP>
			last = HAL_GetTick();
 8002964:	f001 f88e 	bl	8003a84 <HAL_GetTick>
 8002968:	4603      	mov	r3, r0
 800296a:	461a      	mov	r2, r3
 800296c:	4b03      	ldr	r3, [pc, #12]	; (800297c <Send_AT_Commands_ConnectMQTT+0x15c>)
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	46b5      	mov	sp, r6
			break;
		}
	}
}
 8002972:	bf00      	nop
 8002974:	372c      	adds	r7, #44	; 0x2c
 8002976:	46bd      	mov	sp, r7
 8002978:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800297c:	200007fc 	.word	0x200007fc
 8002980:	200007f8 	.word	0x200007f8
 8002984:	0800ac50 	.word	0x0800ac50
 8002988:	20000288 	.word	0x20000288
 800298c:	2000033c 	.word	0x2000033c
 8002990:	200007f4 	.word	0x200007f4
 8002994:	2000000c 	.word	0x2000000c

08002998 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
	// ConfigAT = 0

	if(ConfigAT == 0)
 80029a0:	4b51      	ldr	r3, [pc, #324]	; (8002ae8 <HAL_UART_RxCpltCallback+0x150>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10c      	bne.n	80029c2 <HAL_UART_RxCpltCallback+0x2a>
	{
		if(huart -> Instance == USART1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a4f      	ldr	r2, [pc, #316]	; (8002aec <HAL_UART_RxCpltCallback+0x154>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d117      	bne.n	80029e2 <HAL_UART_RxCpltCallback+0x4a>
		{
			Received_AT_Commands_ESP();
 80029b2:	f000 f8b3 	bl	8002b1c <Received_AT_Commands_ESP>
			HAL_UART_Receive_IT(&huart1,&rx_data1,1);
 80029b6:	2201      	movs	r2, #1
 80029b8:	494d      	ldr	r1, [pc, #308]	; (8002af0 <HAL_UART_RxCpltCallback+0x158>)
 80029ba:	484e      	ldr	r0, [pc, #312]	; (8002af4 <HAL_UART_RxCpltCallback+0x15c>)
 80029bc:	f002 fe43 	bl	8005646 <HAL_UART_Receive_IT>
 80029c0:	e00f      	b.n	80029e2 <HAL_UART_RxCpltCallback+0x4a>
		}
	}
	// ConfigAT = 1

	else if(ConfigAT == 1)
 80029c2:	4b49      	ldr	r3, [pc, #292]	; (8002ae8 <HAL_UART_RxCpltCallback+0x150>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d10b      	bne.n	80029e2 <HAL_UART_RxCpltCallback+0x4a>
	{
		if(huart -> Instance == USART1)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_UART_RxCpltCallback+0x154>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d106      	bne.n	80029e2 <HAL_UART_RxCpltCallback+0x4a>
		{
			Received_AT_Commands_ESP_MessagerMQTT();
 80029d4:	f000 f8ba 	bl	8002b4c <Received_AT_Commands_ESP_MessagerMQTT>
			HAL_UART_Receive_IT(&huart1,&rx_data1,1);
 80029d8:	2201      	movs	r2, #1
 80029da:	4945      	ldr	r1, [pc, #276]	; (8002af0 <HAL_UART_RxCpltCallback+0x158>)
 80029dc:	4845      	ldr	r0, [pc, #276]	; (8002af4 <HAL_UART_RxCpltCallback+0x15c>)
 80029de:	f002 fe32 	bl	8005646 <HAL_UART_Receive_IT>
		}
	}

	uint8_t i;
	if (huart->Instance == USART2)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a44      	ldr	r2, [pc, #272]	; (8002af8 <HAL_UART_RxCpltCallback+0x160>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d178      	bne.n	8002ade <HAL_UART_RxCpltCallback+0x146>
	{

		if(rx_index2==0)
 80029ec:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_UART_RxCpltCallback+0x164>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10c      	bne.n	8002a0e <HAL_UART_RxCpltCallback+0x76>
		{
			for (i=0;i<50;i++) rx_buffer2[i] = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	73fb      	strb	r3, [r7, #15]
 80029f8:	e006      	b.n	8002a08 <HAL_UART_RxCpltCallback+0x70>
 80029fa:	7bfb      	ldrb	r3, [r7, #15]
 80029fc:	4a40      	ldr	r2, [pc, #256]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 80029fe:	2100      	movs	r1, #0
 8002a00:	54d1      	strb	r1, [r2, r3]
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	3301      	adds	r3, #1
 8002a06:	73fb      	strb	r3, [r7, #15]
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
 8002a0a:	2b31      	cmp	r3, #49	; 0x31
 8002a0c:	d9f5      	bls.n	80029fa <HAL_UART_RxCpltCallback+0x62>
		}
		if(rx_data2[0] != 13)
 8002a0e:	4b3d      	ldr	r3, [pc, #244]	; (8002b04 <HAL_UART_RxCpltCallback+0x16c>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b0d      	cmp	r3, #13
 8002a14:	d00a      	beq.n	8002a2c <HAL_UART_RxCpltCallback+0x94>
		{
			rx_buffer2[rx_index2++] = rx_data2[0];
 8002a16:	4b39      	ldr	r3, [pc, #228]	; (8002afc <HAL_UART_RxCpltCallback+0x164>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	1c5a      	adds	r2, r3, #1
 8002a1c:	b2d1      	uxtb	r1, r2
 8002a1e:	4a37      	ldr	r2, [pc, #220]	; (8002afc <HAL_UART_RxCpltCallback+0x164>)
 8002a20:	7011      	strb	r1, [r2, #0]
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b37      	ldr	r3, [pc, #220]	; (8002b04 <HAL_UART_RxCpltCallback+0x16c>)
 8002a26:	7819      	ldrb	r1, [r3, #0]
 8002a28:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002a2a:	5499      	strb	r1, [r3, r2]
		}
		switch(rx_data2[0])
 8002a2c:	4b35      	ldr	r3, [pc, #212]	; (8002b04 <HAL_UART_RxCpltCallback+0x16c>)
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	2b63      	cmp	r3, #99	; 0x63
 8002a32:	d038      	beq.n	8002aa6 <HAL_UART_RxCpltCallback+0x10e>
 8002a34:	2b63      	cmp	r3, #99	; 0x63
 8002a36:	dc4c      	bgt.n	8002ad2 <HAL_UART_RxCpltCallback+0x13a>
 8002a38:	2b61      	cmp	r3, #97	; 0x61
 8002a3a:	d002      	beq.n	8002a42 <HAL_UART_RxCpltCallback+0xaa>
 8002a3c:	2b62      	cmp	r3, #98	; 0x62
 8002a3e:	d01c      	beq.n	8002a7a <HAL_UART_RxCpltCallback+0xe2>
			break;

			//

			default:
			break;
 8002a40:	e047      	b.n	8002ad2 <HAL_UART_RxCpltCallback+0x13a>
				Str_FA = atof(rx_buffer2);
 8002a42:	482f      	ldr	r0, [pc, #188]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002a44:	f003 fc40 	bl	80062c8 <atof>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	f7fe f860 	bl	8000b14 <__aeabi_d2uiz>
 8002a54:	4603      	mov	r3, r0
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b2b      	ldr	r3, [pc, #172]	; (8002b08 <HAL_UART_RxCpltCallback+0x170>)
 8002a5a:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8002a5c:	2264      	movs	r2, #100	; 0x64
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4827      	ldr	r0, [pc, #156]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002a62:	f003 fc81 	bl	8006368 <memset>
				rx_index2 = 0;
 8002a66:	4b25      	ldr	r3, [pc, #148]	; (8002afc <HAL_UART_RxCpltCallback+0x164>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	701a      	strb	r2, [r3, #0]
				printf("%f",Str_FA);
 8002a6c:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <HAL_UART_RxCpltCallback+0x170>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	4619      	mov	r1, r3
 8002a72:	4826      	ldr	r0, [pc, #152]	; (8002b0c <HAL_UART_RxCpltCallback+0x174>)
 8002a74:	f004 f9bc 	bl	8006df0 <iprintf>
			break;
 8002a78:	e02c      	b.n	8002ad4 <HAL_UART_RxCpltCallback+0x13c>
				Str_FB = atof(rx_buffer2);
 8002a7a:	4821      	ldr	r0, [pc, #132]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002a7c:	f003 fc24 	bl	80062c8 <atof>
 8002a80:	4602      	mov	r2, r0
 8002a82:	460b      	mov	r3, r1
 8002a84:	4610      	mov	r0, r2
 8002a86:	4619      	mov	r1, r3
 8002a88:	f7fe f844 	bl	8000b14 <__aeabi_d2uiz>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <HAL_UART_RxCpltCallback+0x178>)
 8002a92:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8002a94:	2264      	movs	r2, #100	; 0x64
 8002a96:	2100      	movs	r1, #0
 8002a98:	4819      	ldr	r0, [pc, #100]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002a9a:	f003 fc65 	bl	8006368 <memset>
				rx_index2 = 0;
 8002a9e:	4b17      	ldr	r3, [pc, #92]	; (8002afc <HAL_UART_RxCpltCallback+0x164>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
			break;
 8002aa4:	e016      	b.n	8002ad4 <HAL_UART_RxCpltCallback+0x13c>
				Str_C = atof(rx_buffer2);
 8002aa6:	4816      	ldr	r0, [pc, #88]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002aa8:	f003 fc0e 	bl	80062c8 <atof>
 8002aac:	4602      	mov	r2, r0
 8002aae:	460b      	mov	r3, r1
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f7fe f82e 	bl	8000b14 <__aeabi_d2uiz>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	b2da      	uxtb	r2, r3
 8002abc:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_UART_RxCpltCallback+0x17c>)
 8002abe:	701a      	strb	r2, [r3, #0]
				memset(rx_buffer2, 0, sizeof(rx_buffer2));
 8002ac0:	2264      	movs	r2, #100	; 0x64
 8002ac2:	2100      	movs	r1, #0
 8002ac4:	480e      	ldr	r0, [pc, #56]	; (8002b00 <HAL_UART_RxCpltCallback+0x168>)
 8002ac6:	f003 fc4f 	bl	8006368 <memset>
				rx_index2 = 0;
 8002aca:	4b0c      	ldr	r3, [pc, #48]	; (8002afc <HAL_UART_RxCpltCallback+0x164>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	701a      	strb	r2, [r3, #0]
			break;
 8002ad0:	e000      	b.n	8002ad4 <HAL_UART_RxCpltCallback+0x13c>
			break;
 8002ad2:	bf00      	nop
		}
				HAL_UART_Receive_IT(&huart2,(uint8_t*)rx_data2,1);
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	490b      	ldr	r1, [pc, #44]	; (8002b04 <HAL_UART_RxCpltCallback+0x16c>)
 8002ad8:	480f      	ldr	r0, [pc, #60]	; (8002b18 <HAL_UART_RxCpltCallback+0x180>)
 8002ada:	f002 fdb4 	bl	8005646 <HAL_UART_Receive_IT>
	}
}
 8002ade:	bf00      	nop
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200007f8 	.word	0x200007f8
 8002aec:	40011000 	.word	0x40011000
 8002af0:	20000338 	.word	0x20000338
 8002af4:	20000288 	.word	0x20000288
 8002af8:	40004400 	.word	0x40004400
 8002afc:	20000724 	.word	0x20000724
 8002b00:	2000078c 	.word	0x2000078c
 8002b04:	20000728 	.word	0x20000728
 8002b08:	20000334 	.word	0x20000334
 8002b0c:	0800ac54 	.word	0x0800ac54
 8002b10:	20000335 	.word	0x20000335
 8002b14:	20000336 	.word	0x20000336
 8002b18:	200002d0 	.word	0x200002d0

08002b1c <Received_AT_Commands_ESP>:

void Received_AT_Commands_ESP(void)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	af00      	add	r7, sp, #0
	rx_buffer1[rx_index1++] = rx_data1;
 8002b20:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <Received_AT_Commands_ESP+0x24>)
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	b2d1      	uxtb	r1, r2
 8002b28:	4a05      	ldr	r2, [pc, #20]	; (8002b40 <Received_AT_Commands_ESP+0x24>)
 8002b2a:	7011      	strb	r1, [r2, #0]
 8002b2c:	461a      	mov	r2, r3
 8002b2e:	4b05      	ldr	r3, [pc, #20]	; (8002b44 <Received_AT_Commands_ESP+0x28>)
 8002b30:	7819      	ldrb	r1, [r3, #0]
 8002b32:	4b05      	ldr	r3, [pc, #20]	; (8002b48 <Received_AT_Commands_ESP+0x2c>)
 8002b34:	5499      	strb	r1, [r3, r2]
}
 8002b36:	bf00      	nop
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bc80      	pop	{r7}
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	20000337 	.word	0x20000337
 8002b44:	20000338 	.word	0x20000338
 8002b48:	2000033c 	.word	0x2000033c

08002b4c <Received_AT_Commands_ESP_MessagerMQTT>:

void Received_AT_Commands_ESP_MessagerMQTT(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0

		if(rx_data1 != '\n')
 8002b52:	4b36      	ldr	r3, [pc, #216]	; (8002c2c <Received_AT_Commands_ESP_MessagerMQTT+0xe0>)
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	2b0a      	cmp	r3, #10
 8002b58:	d009      	beq.n	8002b6e <Received_AT_Commands_ESP_MessagerMQTT+0x22>
		{
			ResponseRX[rx_indexResponse++] = rx_data1;
 8002b5a:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	1c5a      	adds	r2, r3, #1
 8002b60:	4933      	ldr	r1, [pc, #204]	; (8002c30 <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8002b62:	600a      	str	r2, [r1, #0]
 8002b64:	4a31      	ldr	r2, [pc, #196]	; (8002c2c <Received_AT_Commands_ESP_MessagerMQTT+0xe0>)
 8002b66:	7811      	ldrb	r1, [r2, #0]
 8002b68:	4a32      	ldr	r2, [pc, #200]	; (8002c34 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8002b6a:	54d1      	strb	r1, [r2, r3]
				last = HAL_GetTick();
			}
			last = HAL_GetTick();
			clearResponse();
		}
}
 8002b6c:	e059      	b.n	8002c22 <Received_AT_Commands_ESP_MessagerMQTT+0xd6>
			ResponseRX[rx_indexResponse++] = rx_data1;
 8002b6e:	4b30      	ldr	r3, [pc, #192]	; (8002c30 <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	1c5a      	adds	r2, r3, #1
 8002b74:	492e      	ldr	r1, [pc, #184]	; (8002c30 <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8002b76:	600a      	str	r2, [r1, #0]
 8002b78:	4a2c      	ldr	r2, [pc, #176]	; (8002c2c <Received_AT_Commands_ESP_MessagerMQTT+0xe0>)
 8002b7a:	7811      	ldrb	r1, [r2, #0]
 8002b7c:	4a2d      	ldr	r2, [pc, #180]	; (8002c34 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8002b7e:	54d1      	strb	r1, [r2, r3]
			rx_indexResponse = 0;
 8002b80:	4b2b      	ldr	r3, [pc, #172]	; (8002c30 <Received_AT_Commands_ESP_MessagerMQTT+0xe4>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	601a      	str	r2, [r3, #0]
			if(strstr(ResponseRX,"MQTTCONNECTED") != NULL)
 8002b86:	492c      	ldr	r1, [pc, #176]	; (8002c38 <Received_AT_Commands_ESP_MessagerMQTT+0xec>)
 8002b88:	482a      	ldr	r0, [pc, #168]	; (8002c34 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8002b8a:	f004 fadc 	bl	8007146 <strstr>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d009      	beq.n	8002ba8 <Received_AT_Commands_ESP_MessagerMQTT+0x5c>
				CheckConnect = 1;
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <Received_AT_Commands_ESP_MessagerMQTT+0xf0>)
 8002b96:	2201      	movs	r2, #1
 8002b98:	701a      	strb	r2, [r3, #0]
				last = HAL_GetTick();
 8002b9a:	f000 ff73 	bl	8003a84 <HAL_GetTick>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4b27      	ldr	r3, [pc, #156]	; (8002c40 <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 8002ba4:	601a      	str	r2, [r3, #0]
 8002ba6:	e034      	b.n	8002c12 <Received_AT_Commands_ESP_MessagerMQTT+0xc6>
			else if(strstr(ResponseRX,"MQTTDISCONNECTED") != NULL)
 8002ba8:	4926      	ldr	r1, [pc, #152]	; (8002c44 <Received_AT_Commands_ESP_MessagerMQTT+0xf8>)
 8002baa:	4822      	ldr	r0, [pc, #136]	; (8002c34 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8002bac:	f004 facb 	bl	8007146 <strstr>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d009      	beq.n	8002bca <Received_AT_Commands_ESP_MessagerMQTT+0x7e>
				CheckConnect = 0;
 8002bb6:	4b21      	ldr	r3, [pc, #132]	; (8002c3c <Received_AT_Commands_ESP_MessagerMQTT+0xf0>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	701a      	strb	r2, [r3, #0]
				last = HAL_GetTick();
 8002bbc:	f000 ff62 	bl	8003a84 <HAL_GetTick>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	461a      	mov	r2, r3
 8002bc4:	4b1e      	ldr	r3, [pc, #120]	; (8002c40 <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 8002bc6:	601a      	str	r2, [r3, #0]
 8002bc8:	e023      	b.n	8002c12 <Received_AT_Commands_ESP_MessagerMQTT+0xc6>
			else if(strstr(ResponseRX,"+MQTTSUBRECV") != NULL)
 8002bca:	491f      	ldr	r1, [pc, #124]	; (8002c48 <Received_AT_Commands_ESP_MessagerMQTT+0xfc>)
 8002bcc:	4819      	ldr	r0, [pc, #100]	; (8002c34 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8002bce:	f004 faba 	bl	8007146 <strstr>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d01c      	beq.n	8002c12 <Received_AT_Commands_ESP_MessagerMQTT+0xc6>
				DataMQTT = strtok(ResponseRX,",");
 8002bd8:	491c      	ldr	r1, [pc, #112]	; (8002c4c <Received_AT_Commands_ESP_MessagerMQTT+0x100>)
 8002bda:	4816      	ldr	r0, [pc, #88]	; (8002c34 <Received_AT_Commands_ESP_MessagerMQTT+0xe8>)
 8002bdc:	f005 f8e0 	bl	8007da0 <strtok>
 8002be0:	6078      	str	r0, [r7, #4]
				DataMQTT = strtok(NULL,",");
 8002be2:	491a      	ldr	r1, [pc, #104]	; (8002c4c <Received_AT_Commands_ESP_MessagerMQTT+0x100>)
 8002be4:	2000      	movs	r0, #0
 8002be6:	f005 f8db 	bl	8007da0 <strtok>
 8002bea:	6078      	str	r0, [r7, #4]
				DataMQTT = strtok(NULL,",");
 8002bec:	4917      	ldr	r1, [pc, #92]	; (8002c4c <Received_AT_Commands_ESP_MessagerMQTT+0x100>)
 8002bee:	2000      	movs	r0, #0
 8002bf0:	f005 f8d6 	bl	8007da0 <strtok>
 8002bf4:	6078      	str	r0, [r7, #4]
				DataMQTT = strtok(NULL,"\n");
 8002bf6:	4916      	ldr	r1, [pc, #88]	; (8002c50 <Received_AT_Commands_ESP_MessagerMQTT+0x104>)
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	f005 f8d1 	bl	8007da0 <strtok>
 8002bfe:	6078      	str	r0, [r7, #4]
				ParseJson(DataMQTT);
 8002c00:	6878      	ldr	r0, [r7, #4]
 8002c02:	f000 f827 	bl	8002c54 <ParseJson>
				last = HAL_GetTick();
 8002c06:	f000 ff3d 	bl	8003a84 <HAL_GetTick>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	4b0c      	ldr	r3, [pc, #48]	; (8002c40 <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 8002c10:	601a      	str	r2, [r3, #0]
			last = HAL_GetTick();
 8002c12:	f000 ff37 	bl	8003a84 <HAL_GetTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b09      	ldr	r3, [pc, #36]	; (8002c40 <Received_AT_Commands_ESP_MessagerMQTT+0xf4>)
 8002c1c:	601a      	str	r2, [r3, #0]
			clearResponse();
 8002c1e:	f000 f933 	bl	8002e88 <clearResponse>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000338 	.word	0x20000338
 8002c30:	200007f0 	.word	0x200007f0
 8002c34:	20000530 	.word	0x20000530
 8002c38:	0800ac58 	.word	0x0800ac58
 8002c3c:	2000000c 	.word	0x2000000c
 8002c40:	200007fc 	.word	0x200007fc
 8002c44:	0800ac68 	.word	0x0800ac68
 8002c48:	0800ac7c 	.word	0x0800ac7c
 8002c4c:	0800ac8c 	.word	0x0800ac8c
 8002c50:	0800ac90 	.word	0x0800ac90

08002c54 <ParseJson>:

void ParseJson(char *DataMQTT)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
	str_json = cJSON_Parse(DataMQTT);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7fe feb3 	bl	80019c8 <cJSON_Parse>
 8002c62:	4603      	mov	r3, r0
 8002c64:	4a63      	ldr	r2, [pc, #396]	; (8002df4 <ParseJson+0x1a0>)
 8002c66:	6013      	str	r3, [r2, #0]
	if (!str_json)
 8002c68:	4b62      	ldr	r3, [pc, #392]	; (8002df4 <ParseJson+0x1a0>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 80bc 	beq.w	8002dea <ParseJson+0x196>
		return;
	}
	else
	{
		// JSON OK
		if(ON==1)
 8002c72:	4b61      	ldr	r3, [pc, #388]	; (8002df8 <ParseJson+0x1a4>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d163      	bne.n	8002d42 <ParseJson+0xee>
		{
			str_SetFA = cJSON_GetObjectItem(str_json, "SetFA");
 8002c7a:	4b5e      	ldr	r3, [pc, #376]	; (8002df4 <ParseJson+0x1a0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	495f      	ldr	r1, [pc, #380]	; (8002dfc <ParseJson+0x1a8>)
 8002c80:	4618      	mov	r0, r3
 8002c82:	f7ff f9a6 	bl	8001fd2 <cJSON_GetObjectItem>
 8002c86:	4603      	mov	r3, r0
 8002c88:	4a5d      	ldr	r2, [pc, #372]	; (8002e00 <ParseJson+0x1ac>)
 8002c8a:	6013      	str	r3, [r2, #0]
	        if (str_SetFA != NULL)
 8002c8c:	4b5c      	ldr	r3, [pc, #368]	; (8002e00 <ParseJson+0x1ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d006      	beq.n	8002ca2 <ParseJson+0x4e>
	        {
	            printf("%s""a\r", str_SetFA->valuestring);
 8002c94:	4b5a      	ldr	r3, [pc, #360]	; (8002e00 <ParseJson+0x1ac>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	4859      	ldr	r0, [pc, #356]	; (8002e04 <ParseJson+0x1b0>)
 8002c9e:	f004 f8a7 	bl	8006df0 <iprintf>
	        }
			str_SetFB = cJSON_GetObjectItem(str_json, "SetFB");
 8002ca2:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <ParseJson+0x1a0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4958      	ldr	r1, [pc, #352]	; (8002e08 <ParseJson+0x1b4>)
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff f992 	bl	8001fd2 <cJSON_GetObjectItem>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4a56      	ldr	r2, [pc, #344]	; (8002e0c <ParseJson+0x1b8>)
 8002cb2:	6013      	str	r3, [r2, #0]
	        if (str_SetFB != NULL)
 8002cb4:	4b55      	ldr	r3, [pc, #340]	; (8002e0c <ParseJson+0x1b8>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d006      	beq.n	8002cca <ParseJson+0x76>
	        {
	            printf("%s""b\r", str_SetFB->valuestring);
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <ParseJson+0x1b8>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4852      	ldr	r0, [pc, #328]	; (8002e10 <ParseJson+0x1bc>)
 8002cc6:	f004 f893 	bl	8006df0 <iprintf>
	        }
			str_SetairA = cJSON_GetObjectItem(str_json, "SetairA");
 8002cca:	4b4a      	ldr	r3, [pc, #296]	; (8002df4 <ParseJson+0x1a0>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4951      	ldr	r1, [pc, #324]	; (8002e14 <ParseJson+0x1c0>)
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7ff f97e 	bl	8001fd2 <cJSON_GetObjectItem>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <ParseJson+0x1c4>)
 8002cda:	6013      	str	r3, [r2, #0]
	        if (str_SetairA != NULL)
 8002cdc:	4b4e      	ldr	r3, [pc, #312]	; (8002e18 <ParseJson+0x1c4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d006      	beq.n	8002cf2 <ParseJson+0x9e>
	        {
	            printf("%s""c\r", str_SetairA->valuestring);
 8002ce4:	4b4c      	ldr	r3, [pc, #304]	; (8002e18 <ParseJson+0x1c4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	4619      	mov	r1, r3
 8002cec:	484b      	ldr	r0, [pc, #300]	; (8002e1c <ParseJson+0x1c8>)
 8002cee:	f004 f87f 	bl	8006df0 <iprintf>
	        }
			str_SetairB = cJSON_GetObjectItem(str_json, "SetairB");
 8002cf2:	4b40      	ldr	r3, [pc, #256]	; (8002df4 <ParseJson+0x1a0>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	494a      	ldr	r1, [pc, #296]	; (8002e20 <ParseJson+0x1cc>)
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff f96a 	bl	8001fd2 <cJSON_GetObjectItem>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	4a48      	ldr	r2, [pc, #288]	; (8002e24 <ParseJson+0x1d0>)
 8002d02:	6013      	str	r3, [r2, #0]
	        if (str_SetairB != NULL)
 8002d04:	4b47      	ldr	r3, [pc, #284]	; (8002e24 <ParseJson+0x1d0>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d006      	beq.n	8002d1a <ParseJson+0xc6>
	        {
	            printf("%s""d\r\n", str_SetairB->valuestring);
 8002d0c:	4b45      	ldr	r3, [pc, #276]	; (8002e24 <ParseJson+0x1d0>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	691b      	ldr	r3, [r3, #16]
 8002d12:	4619      	mov	r1, r3
 8002d14:	4844      	ldr	r0, [pc, #272]	; (8002e28 <ParseJson+0x1d4>)
 8002d16:	f004 f86b 	bl	8006df0 <iprintf>
	        }
			str_SetC = cJSON_GetObjectItem(str_json, "SetC");
 8002d1a:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <ParseJson+0x1a0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4943      	ldr	r1, [pc, #268]	; (8002e2c <ParseJson+0x1d8>)
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff f956 	bl	8001fd2 <cJSON_GetObjectItem>
 8002d26:	4603      	mov	r3, r0
 8002d28:	4a41      	ldr	r2, [pc, #260]	; (8002e30 <ParseJson+0x1dc>)
 8002d2a:	6013      	str	r3, [r2, #0]
	        if (str_SetC != NULL)
 8002d2c:	4b40      	ldr	r3, [pc, #256]	; (8002e30 <ParseJson+0x1dc>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d006      	beq.n	8002d42 <ParseJson+0xee>
	        {
	            printf("%s""f\r\n", str_SetC->valuestring);
 8002d34:	4b3e      	ldr	r3, [pc, #248]	; (8002e30 <ParseJson+0x1dc>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	483d      	ldr	r0, [pc, #244]	; (8002e34 <ParseJson+0x1e0>)
 8002d3e:	f004 f857 	bl	8006df0 <iprintf>
	        }
		}
		str_ON = cJSON_GetObjectItem(str_json, "ON");
 8002d42:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <ParseJson+0x1a0>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	493c      	ldr	r1, [pc, #240]	; (8002e38 <ParseJson+0x1e4>)
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff f942 	bl	8001fd2 <cJSON_GetObjectItem>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <ParseJson+0x1e8>)
 8002d52:	6013      	str	r3, [r2, #0]

		if (str_ON->type == cJSON_String)
 8002d54:	4b39      	ldr	r3, [pc, #228]	; (8002e3c <ParseJson+0x1e8>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d13f      	bne.n	8002dde <ParseJson+0x18a>
		{

			if(strstr(str_ON->valuestring,"1") != NULL)
 8002d5e:	4b37      	ldr	r3, [pc, #220]	; (8002e3c <ParseJson+0x1e8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	691b      	ldr	r3, [r3, #16]
 8002d64:	2131      	movs	r1, #49	; 0x31
 8002d66:	4618      	mov	r0, r3
 8002d68:	f004 f9cc 	bl	8007104 <strchr>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d015      	beq.n	8002d9e <ParseJson+0x14a>
			{

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_RESET);
 8002d72:	2200      	movs	r2, #0
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	4832      	ldr	r0, [pc, #200]	; (8002e40 <ParseJson+0x1ec>)
 8002d78:	f001 fd36 	bl	80047e8 <HAL_GPIO_WritePin>
				ON = atoi(str_ON->valuestring);
 8002d7c:	4b2f      	ldr	r3, [pc, #188]	; (8002e3c <ParseJson+0x1e8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	691b      	ldr	r3, [r3, #16]
 8002d82:	4618      	mov	r0, r3
 8002d84:	f003 faa3 	bl	80062ce <atoi>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4b1a      	ldr	r3, [pc, #104]	; (8002df8 <ParseJson+0x1a4>)
 8002d8e:	601a      	str	r2, [r3, #0]
				if(ON==1)
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <ParseJson+0x1a4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	d102      	bne.n	8002d9e <ParseJson+0x14a>
				{
					printf("r\r\n");
 8002d98:	482a      	ldr	r0, [pc, #168]	; (8002e44 <ParseJson+0x1f0>)
 8002d9a:	f004 f8af 	bl	8006efc <puts>
				}
			}

			if(strstr(str_ON->valuestring,"0") != NULL)
 8002d9e:	4b27      	ldr	r3, [pc, #156]	; (8002e3c <ParseJson+0x1e8>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	2130      	movs	r1, #48	; 0x30
 8002da6:	4618      	mov	r0, r3
 8002da8:	f004 f9ac 	bl	8007104 <strchr>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d015      	beq.n	8002dde <ParseJson+0x18a>
			{

				HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7, GPIO_PIN_SET);
 8002db2:	2201      	movs	r2, #1
 8002db4:	2180      	movs	r1, #128	; 0x80
 8002db6:	4822      	ldr	r0, [pc, #136]	; (8002e40 <ParseJson+0x1ec>)
 8002db8:	f001 fd16 	bl	80047e8 <HAL_GPIO_WritePin>
				ON = atoi(str_ON->valuestring);
 8002dbc:	4b1f      	ldr	r3, [pc, #124]	; (8002e3c <ParseJson+0x1e8>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 fa83 	bl	80062ce <atoi>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	461a      	mov	r2, r3
 8002dcc:	4b0a      	ldr	r3, [pc, #40]	; (8002df8 <ParseJson+0x1a4>)
 8002dce:	601a      	str	r2, [r3, #0]
				if(ON==0)
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <ParseJson+0x1a4>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d102      	bne.n	8002dde <ParseJson+0x18a>
				{
					printf("e\r\n");
 8002dd8:	481b      	ldr	r0, [pc, #108]	; (8002e48 <ParseJson+0x1f4>)
 8002dda:	f004 f88f 	bl	8006efc <puts>
				}
			}
		}

			cJSON_Delete(str_json);
 8002dde:	4b05      	ldr	r3, [pc, #20]	; (8002df4 <ParseJson+0x1a0>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7fe f8f4 	bl	8000fd0 <cJSON_Delete>
 8002de8:	e000      	b.n	8002dec <ParseJson+0x198>
		return;
 8002dea:	bf00      	nop
	}
}
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000318 	.word	0x20000318
 8002df8:	20000800 	.word	0x20000800
 8002dfc:	0800ac94 	.word	0x0800ac94
 8002e00:	20000320 	.word	0x20000320
 8002e04:	0800ac9c 	.word	0x0800ac9c
 8002e08:	0800aca4 	.word	0x0800aca4
 8002e0c:	20000328 	.word	0x20000328
 8002e10:	0800acac 	.word	0x0800acac
 8002e14:	0800acb4 	.word	0x0800acb4
 8002e18:	20000324 	.word	0x20000324
 8002e1c:	0800acbc 	.word	0x0800acbc
 8002e20:	0800acc4 	.word	0x0800acc4
 8002e24:	2000032c 	.word	0x2000032c
 8002e28:	0800accc 	.word	0x0800accc
 8002e2c:	0800acd4 	.word	0x0800acd4
 8002e30:	20000330 	.word	0x20000330
 8002e34:	0800acdc 	.word	0x0800acdc
 8002e38:	0800ace4 	.word	0x0800ace4
 8002e3c:	2000031c 	.word	0x2000031c
 8002e40:	40021000 	.word	0x40021000
 8002e44:	0800ace8 	.word	0x0800ace8
 8002e48:	0800acec 	.word	0x0800acec

08002e4c <clearbuffer_UART_ESP>:


void clearbuffer_UART_ESP(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 500 ; i++)
 8002e52:	2300      	movs	r3, #0
 8002e54:	607b      	str	r3, [r7, #4]
 8002e56:	e007      	b.n	8002e68 <clearbuffer_UART_ESP+0x1c>
	{
		rx_buffer1[i] = 0;
 8002e58:	4a09      	ldr	r2, [pc, #36]	; (8002e80 <clearbuffer_UART_ESP+0x34>)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4413      	add	r3, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 500 ; i++)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3301      	adds	r3, #1
 8002e66:	607b      	str	r3, [r7, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e6e:	dbf3      	blt.n	8002e58 <clearbuffer_UART_ESP+0xc>
	}
	rx_index1 = 0;
 8002e70:	4b04      	ldr	r3, [pc, #16]	; (8002e84 <clearbuffer_UART_ESP+0x38>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]
}
 8002e76:	bf00      	nop
 8002e78:	370c      	adds	r7, #12
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	2000033c 	.word	0x2000033c
 8002e84:	20000337 	.word	0x20000337

08002e88 <clearResponse>:


void clearResponse(void)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
	for(int i = 0 ; i < 500; i++)
 8002e8e:	2300      	movs	r3, #0
 8002e90:	607b      	str	r3, [r7, #4]
 8002e92:	e007      	b.n	8002ea4 <clearResponse+0x1c>
	{
		ResponseRX[i] = 0;
 8002e94:	4a09      	ldr	r2, [pc, #36]	; (8002ebc <clearResponse+0x34>)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4413      	add	r3, r2
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 500; i++)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	607b      	str	r3, [r7, #4]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002eaa:	dbf3      	blt.n	8002e94 <clearResponse+0xc>
	}
	rx_indexResponse = 0;
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <clearResponse+0x38>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr
 8002ebc:	20000530 	.word	0x20000530
 8002ec0:	200007f0 	.word	0x200007f0

08002ec4 <Send_AT_Commands_Setting>:


void Send_AT_Commands_Setting(char *AT_Commands, char *DataResponse, uint32_t timesend , uint32_t setting)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b092      	sub	sp, #72	; 0x48
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
 8002ed0:	603b      	str	r3, [r7, #0]
	last = HAL_GetTick();
 8002ed2:	f000 fdd7 	bl	8003a84 <HAL_GetTick>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	461a      	mov	r2, r3
 8002eda:	4b2d      	ldr	r3, [pc, #180]	; (8002f90 <Send_AT_Commands_Setting+0xcc>)
 8002edc:	601a      	str	r2, [r3, #0]
	ConfigAT = setting;
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	4a2c      	ldr	r2, [pc, #176]	; (8002f94 <Send_AT_Commands_Setting+0xd0>)
 8002ee2:	6013      	str	r3, [r2, #0]
	char DataSendAT[50];
	for(int i = 0 ; i < 50; i++)
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	647b      	str	r3, [r7, #68]	; 0x44
 8002ee8:	e008      	b.n	8002efc <Send_AT_Commands_Setting+0x38>
	{
		DataSendAT[i] = 0;
 8002eea:	f107 0210 	add.w	r2, r7, #16
 8002eee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef0:	4413      	add	r3, r2
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	701a      	strb	r2, [r3, #0]
	for(int i = 0 ; i < 50; i++)
 8002ef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ef8:	3301      	adds	r3, #1
 8002efa:	647b      	str	r3, [r7, #68]	; 0x44
 8002efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002efe:	2b31      	cmp	r3, #49	; 0x31
 8002f00:	ddf3      	ble.n	8002eea <Send_AT_Commands_Setting+0x26>
	}

	snprintf(DataSendAT, sizeof(DataSendAT),"%s\r\n", AT_Commands);
 8002f02:	f107 0010 	add.w	r0, r7, #16
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4a23      	ldr	r2, [pc, #140]	; (8002f98 <Send_AT_Commands_Setting+0xd4>)
 8002f0a:	2132      	movs	r1, #50	; 0x32
 8002f0c:	f004 f854 	bl	8006fb8 <sniprintf>

	// GUI DU LIEU TU ESP8266 QUA CONG COM 1 UART1

	HAL_UART_Transmit(&huart1,(uint8_t *)&DataSendAT,strlen(DataSendAT),1000);
 8002f10:	f107 0310 	add.w	r3, r7, #16
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fd f961 	bl	80001dc <strlen>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	b29a      	uxth	r2, r3
 8002f1e:	f107 0110 	add.w	r1, r7, #16
 8002f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f26:	481d      	ldr	r0, [pc, #116]	; (8002f9c <Send_AT_Commands_Setting+0xd8>)
 8002f28:	f002 fb0a 	bl	8005540 <HAL_UART_Transmit>

	//printf("Send AT-Commands Setting: %s\r\n", DataSendAT);

	// DUNG DOI PHAN HOI, DOI LAU QUA THI HOI TIEP(THONG QUA HAM NGAT UART)

	last = HAL_GetTick();
 8002f2c:	f000 fdaa 	bl	8003a84 <HAL_GetTick>
 8002f30:	4603      	mov	r3, r0
 8002f32:	461a      	mov	r2, r3
 8002f34:	4b16      	ldr	r3, [pc, #88]	; (8002f90 <Send_AT_Commands_Setting+0xcc>)
 8002f36:	601a      	str	r2, [r3, #0]
	while(1)
	{

		// QUA 5S THI GUI LAI LENH CU, OK THI THOI

		if(HAL_GetTick() - last >= timesend)
 8002f38:	f000 fda4 	bl	8003a84 <HAL_GetTick>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	4a14      	ldr	r2, [pc, #80]	; (8002f90 <Send_AT_Commands_Setting+0xcc>)
 8002f40:	6812      	ldr	r2, [r2, #0]
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d813      	bhi.n	8002f72 <Send_AT_Commands_Setting+0xae>
		{
			HAL_UART_Transmit(&huart1,(uint8_t *)&DataSendAT,strlen(DataSendAT),1000);
 8002f4a:	f107 0310 	add.w	r3, r7, #16
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fd f944 	bl	80001dc <strlen>
 8002f54:	4603      	mov	r3, r0
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	f107 0110 	add.w	r1, r7, #16
 8002f5c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f60:	480e      	ldr	r0, [pc, #56]	; (8002f9c <Send_AT_Commands_Setting+0xd8>)
 8002f62:	f002 faed 	bl	8005540 <HAL_UART_Transmit>

			//printf("Send AT-Commands Setting TimeSend: %s\r\n", DataSendAT);
			last = HAL_GetTick();
 8002f66:	f000 fd8d 	bl	8003a84 <HAL_GetTick>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	4b08      	ldr	r3, [pc, #32]	; (8002f90 <Send_AT_Commands_Setting+0xcc>)
 8002f70:	601a      	str	r2, [r3, #0]
		}
		if(strstr(rx_buffer1,DataResponse) != NULL)
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	480a      	ldr	r0, [pc, #40]	; (8002fa0 <Send_AT_Commands_Setting+0xdc>)
 8002f76:	f004 f8e6 	bl	8007146 <strstr>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0db      	beq.n	8002f38 <Send_AT_Commands_Setting+0x74>
		{

			//printf("Reponse Setting: %s\r\n",DataResponse);

			clearbuffer_UART_ESP();
 8002f80:	f7ff ff64 	bl	8002e4c <clearbuffer_UART_ESP>
			break;
 8002f84:	bf00      	nop
		}
	}
}
 8002f86:	bf00      	nop
 8002f88:	3748      	adds	r7, #72	; 0x48
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200007fc 	.word	0x200007fc
 8002f94:	200007f8 	.word	0x200007f8
 8002f98:	0800acf0 	.word	0x0800acf0
 8002f9c:	20000288 	.word	0x20000288
 8002fa0:	2000033c 	.word	0x2000033c

08002fa4 <SettingESP>:


// HAM SETTING DATA

void SettingESP(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0

	// RESET ESP8266

	Send_AT_Commands_Setting("AT+RST\r\n", "OK", 10000 , 0);
 8002fa8:	2300      	movs	r3, #0
 8002faa:	f242 7210 	movw	r2, #10000	; 0x2710
 8002fae:	4922      	ldr	r1, [pc, #136]	; (8003038 <SettingESP+0x94>)
 8002fb0:	4822      	ldr	r0, [pc, #136]	; (800303c <SettingESP+0x98>)
 8002fb2:	f7ff ff87 	bl	8002ec4 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 8002fb6:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fba:	f000 fd6d 	bl	8003a98 <HAL_Delay>
	//Send_AT_Commands_Setting("AT+CWQAP\r\n", "WIFI DISCONNECT\r\n\r\nOK" , 2000, 0);
	//HAL_Delay(3000);

	// ESP CO HOAT DONG KHONG

	Send_AT_Commands_Setting("AT\r\n", "OK", 300, 0);
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002fc4:	491c      	ldr	r1, [pc, #112]	; (8003038 <SettingESP+0x94>)
 8002fc6:	481e      	ldr	r0, [pc, #120]	; (8003040 <SettingESP+0x9c>)
 8002fc8:	f7ff ff7c 	bl	8002ec4 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 8002fcc:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fd0:	f000 fd62 	bl	8003a98 <HAL_Delay>

	// TAT KH CAN PHAN HOI

	Send_AT_Commands_Setting("ATE0\r\n", "OK" , 2000, 0);
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002fda:	4917      	ldr	r1, [pc, #92]	; (8003038 <SettingESP+0x94>)
 8002fdc:	4819      	ldr	r0, [pc, #100]	; (8003044 <SettingESP+0xa0>)
 8002fde:	f7ff ff71 	bl	8002ec4 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 8002fe2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002fe6:	f000 fd57 	bl	8003a98 <HAL_Delay>

	// CAI DAT CHE DO HOAT DONG 1,1

	Send_AT_Commands_Setting("AT+CWMODE=1,1\r\n", "OK", 2000, 0);
 8002fea:	2300      	movs	r3, #0
 8002fec:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8002ff0:	4911      	ldr	r1, [pc, #68]	; (8003038 <SettingESP+0x94>)
 8002ff2:	4815      	ldr	r0, [pc, #84]	; (8003048 <SettingESP+0xa4>)
 8002ff4:	f7ff ff66 	bl	8002ec4 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 8002ff8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002ffc:	f000 fd4c 	bl	8003a98 <HAL_Delay>

	// WIFI CAN KET NOI

	Send_AT_Commands_Setting("AT+CWJAP=\"HOPELESS\",\"nhatnguyeniot\"\r\n", "WIFI CONNECTED", 10000, 0);
 8003000:	2300      	movs	r3, #0
 8003002:	f242 7210 	movw	r2, #10000	; 0x2710
 8003006:	4911      	ldr	r1, [pc, #68]	; (800304c <SettingESP+0xa8>)
 8003008:	4811      	ldr	r0, [pc, #68]	; (8003050 <SettingESP+0xac>)
 800300a:	f7ff ff5b 	bl	8002ec4 <Send_AT_Commands_Setting>

	// \"user name\",\"pass"   ( \"HOPELESS\",\"nhatnguyeniot\")

	HAL_Delay(3000);
 800300e:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003012:	f000 fd41 	bl	8003a98 <HAL_Delay>
	Send_AT_Commands_Setting("AT+CIPMUX=0\r\n", "OK", 2000 , 0);
 8003016:	2300      	movs	r3, #0
 8003018:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800301c:	4906      	ldr	r1, [pc, #24]	; (8003038 <SettingESP+0x94>)
 800301e:	480d      	ldr	r0, [pc, #52]	; (8003054 <SettingESP+0xb0>)
 8003020:	f7ff ff50 	bl	8002ec4 <Send_AT_Commands_Setting>
	HAL_Delay(3000);
 8003024:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8003028:	f000 fd36 	bl	8003a98 <HAL_Delay>
	ErrorCode = 0;
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <SettingESP+0xb4>)
 800302e:	2200      	movs	r2, #0
 8003030:	701a      	strb	r2, [r3, #0]
}
 8003032:	bf00      	nop
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	0800ac3c 	.word	0x0800ac3c
 800303c:	0800acf8 	.word	0x0800acf8
 8003040:	0800ad04 	.word	0x0800ad04
 8003044:	0800ad0c 	.word	0x0800ad0c
 8003048:	0800ad14 	.word	0x0800ad14
 800304c:	0800ad24 	.word	0x0800ad24
 8003050:	0800ad34 	.word	0x0800ad34
 8003054:	0800ad5c 	.word	0x0800ad5c
 8003058:	200007f4 	.word	0x200007f4

0800305c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800305c:	b5b0      	push	{r4, r5, r7, lr}
 800305e:	b082      	sub	sp, #8
 8003060:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

	HAL_Init();
 8003062:	f000 fcab 	bl	80039bc <HAL_Init>
	SystemClock_Config();
 8003066:	f000 f859 	bl	800311c <SystemClock_Config>
	MX_GPIO_Init();
 800306a:	f000 f951 	bl	8003310 <MX_GPIO_Init>
	MX_UART4_Init();
 800306e:	f000 f8d1 	bl	8003214 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8003072:	f000 f8f9 	bl	8003268 <MX_USART1_UART_Init>
	MX_USART2_UART_Init();
 8003076:	f000 f921 	bl	80032bc <MX_USART2_UART_Init>
	MX_DAC_Init();
 800307a:	f000 f897 	bl	80031ac <MX_DAC_Init>
	HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 800307e:	2100      	movs	r1, #0
 8003080:	481a      	ldr	r0, [pc, #104]	; (80030ec <main+0x90>)
 8003082:	f000 fe99 	bl	8003db8 <HAL_DAC_Start>
	HAL_Delay(1200);
 8003086:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800308a:	f000 fd05 	bl	8003a98 <HAL_Delay>
	HAL_UART_Receive_IT(&huart1, &rx_data1, 1);
 800308e:	2201      	movs	r2, #1
 8003090:	4917      	ldr	r1, [pc, #92]	; (80030f0 <main+0x94>)
 8003092:	4818      	ldr	r0, [pc, #96]	; (80030f4 <main+0x98>)
 8003094:	f002 fad7 	bl	8005646 <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart2, &rx_data2, 1);
 8003098:	2201      	movs	r2, #1
 800309a:	4917      	ldr	r1, [pc, #92]	; (80030f8 <main+0x9c>)
 800309c:	4817      	ldr	r0, [pc, #92]	; (80030fc <main+0xa0>)
 800309e:	f002 fad2 	bl	8005646 <HAL_UART_Receive_IT>
	HAL_Delay(3000);
 80030a2:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030a6:	f000 fcf7 	bl	8003a98 <HAL_Delay>
	SettingESP();
 80030aa:	f7ff ff7b 	bl	8002fa4 <SettingESP>
	HAL_Delay(3000);
 80030ae:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80030b2:	f000 fcf1 	bl	8003a98 <HAL_Delay>
	ConnectMQTT(mqtt_server , mqtt_port , mqtt_user , mqtt_pass, mqtt_sub , mqtt_pub);
 80030b6:	4b12      	ldr	r3, [pc, #72]	; (8003100 <main+0xa4>)
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	4b12      	ldr	r3, [pc, #72]	; (8003104 <main+0xa8>)
 80030bc:	6819      	ldr	r1, [r3, #0]
 80030be:	4b12      	ldr	r3, [pc, #72]	; (8003108 <main+0xac>)
 80030c0:	681c      	ldr	r4, [r3, #0]
 80030c2:	4b12      	ldr	r3, [pc, #72]	; (800310c <main+0xb0>)
 80030c4:	681d      	ldr	r5, [r3, #0]
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <main+0xb4>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a12      	ldr	r2, [pc, #72]	; (8003114 <main+0xb8>)
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	9201      	str	r2, [sp, #4]
 80030d0:	9300      	str	r3, [sp, #0]
 80030d2:	462b      	mov	r3, r5
 80030d4:	4622      	mov	r2, r4
 80030d6:	f7ff f925 	bl	8002324 <ConnectMQTT>
	last = HAL_GetTick();
 80030da:	f000 fcd3 	bl	8003a84 <HAL_GetTick>
 80030de:	4603      	mov	r3, r0
 80030e0:	461a      	mov	r2, r3
 80030e2:	4b0d      	ldr	r3, [pc, #52]	; (8003118 <main+0xbc>)
 80030e4:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  SendMQTT();
 80030e6:	f7fe ff95 	bl	8002014 <SendMQTT>
 80030ea:	e7fc      	b.n	80030e6 <main+0x8a>
 80030ec:	2000022c 	.word	0x2000022c
 80030f0:	20000338 	.word	0x20000338
 80030f4:	20000288 	.word	0x20000288
 80030f8:	20000728 	.word	0x20000728
 80030fc:	200002d0 	.word	0x200002d0
 8003100:	20000010 	.word	0x20000010
 8003104:	20000014 	.word	0x20000014
 8003108:	20000018 	.word	0x20000018
 800310c:	2000001c 	.word	0x2000001c
 8003110:	20000020 	.word	0x20000020
 8003114:	20000024 	.word	0x20000024
 8003118:	200007fc 	.word	0x200007fc

0800311c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b092      	sub	sp, #72	; 0x48
 8003120:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003122:	f107 0318 	add.w	r3, r7, #24
 8003126:	2230      	movs	r2, #48	; 0x30
 8003128:	2100      	movs	r1, #0
 800312a:	4618      	mov	r0, r3
 800312c:	f003 f91c 	bl	8006368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]
 8003136:	605a      	str	r2, [r3, #4]
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800313e:	2302      	movs	r3, #2
 8003140:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003142:	2301      	movs	r3, #1
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003146:	2310      	movs	r3, #16
 8003148:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800314a:	2302      	movs	r3, #2
 800314c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800314e:	2300      	movs	r3, #0
 8003150:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLM = 13;
 8003152:	230d      	movs	r3, #13
 8003154:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 195;
 8003156:	23c3      	movs	r3, #195	; 0xc3
 8003158:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800315a:	2302      	movs	r3, #2
 800315c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800315e:	2304      	movs	r3, #4
 8003160:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003162:	f107 0318 	add.w	r3, r7, #24
 8003166:	4618      	mov	r0, r3
 8003168:	f001 fb70 	bl	800484c <HAL_RCC_OscConfig>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 8003172:	f000 f999 	bl	80034a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003176:	230f      	movs	r3, #15
 8003178:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800317a:	2302      	movs	r3, #2
 800317c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003182:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003188:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800318c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800318e:	1d3b      	adds	r3, r7, #4
 8003190:	2103      	movs	r1, #3
 8003192:	4618      	mov	r0, r3
 8003194:	f001 fe5c 	bl	8004e50 <HAL_RCC_ClockConfig>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d001      	beq.n	80031a2 <SystemClock_Config+0x86>
  {
    Error_Handler();
 800319e:	f000 f983 	bl	80034a8 <Error_Handler>
  }
}
 80031a2:	bf00      	nop
 80031a4:	3748      	adds	r7, #72	; 0x48
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}
	...

080031ac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b082      	sub	sp, #8
 80031b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80031b2:	463b      	mov	r3, r7
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
 80031b8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80031ba:	4b14      	ldr	r3, [pc, #80]	; (800320c <MX_DAC_Init+0x60>)
 80031bc:	4a14      	ldr	r2, [pc, #80]	; (8003210 <MX_DAC_Init+0x64>)
 80031be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80031c0:	4812      	ldr	r0, [pc, #72]	; (800320c <MX_DAC_Init+0x60>)
 80031c2:	f000 fdc9 	bl	8003d58 <HAL_DAC_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80031cc:	f000 f96c 	bl	80034a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80031d0:	2300      	movs	r3, #0
 80031d2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80031d4:	2300      	movs	r3, #0
 80031d6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80031d8:	463b      	mov	r3, r7
 80031da:	2200      	movs	r2, #0
 80031dc:	4619      	mov	r1, r3
 80031de:	480b      	ldr	r0, [pc, #44]	; (800320c <MX_DAC_Init+0x60>)
 80031e0:	f000 feac 	bl	8003f3c <HAL_DAC_ConfigChannel>
 80031e4:	4603      	mov	r3, r0
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d001      	beq.n	80031ee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80031ea:	f000 f95d 	bl	80034a8 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80031ee:	463b      	mov	r3, r7
 80031f0:	2210      	movs	r2, #16
 80031f2:	4619      	mov	r1, r3
 80031f4:	4805      	ldr	r0, [pc, #20]	; (800320c <MX_DAC_Init+0x60>)
 80031f6:	f000 fea1 	bl	8003f3c <HAL_DAC_ConfigChannel>
 80031fa:	4603      	mov	r3, r0
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d001      	beq.n	8003204 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8003200:	f000 f952 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}
 800320c:	2000022c 	.word	0x2000022c
 8003210:	40007400 	.word	0x40007400

08003214 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003218:	4b11      	ldr	r3, [pc, #68]	; (8003260 <MX_UART4_Init+0x4c>)
 800321a:	4a12      	ldr	r2, [pc, #72]	; (8003264 <MX_UART4_Init+0x50>)
 800321c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800321e:	4b10      	ldr	r3, [pc, #64]	; (8003260 <MX_UART4_Init+0x4c>)
 8003220:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003224:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003226:	4b0e      	ldr	r3, [pc, #56]	; (8003260 <MX_UART4_Init+0x4c>)
 8003228:	2200      	movs	r2, #0
 800322a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800322c:	4b0c      	ldr	r3, [pc, #48]	; (8003260 <MX_UART4_Init+0x4c>)
 800322e:	2200      	movs	r2, #0
 8003230:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003232:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <MX_UART4_Init+0x4c>)
 8003234:	2200      	movs	r2, #0
 8003236:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003238:	4b09      	ldr	r3, [pc, #36]	; (8003260 <MX_UART4_Init+0x4c>)
 800323a:	220c      	movs	r2, #12
 800323c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800323e:	4b08      	ldr	r3, [pc, #32]	; (8003260 <MX_UART4_Init+0x4c>)
 8003240:	2200      	movs	r2, #0
 8003242:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003244:	4b06      	ldr	r3, [pc, #24]	; (8003260 <MX_UART4_Init+0x4c>)
 8003246:	2200      	movs	r2, #0
 8003248:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800324a:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_UART4_Init+0x4c>)
 800324c:	f002 f8a4 	bl	8005398 <HAL_UART_Init>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d001      	beq.n	800325a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8003256:	f000 f927 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800325a:	bf00      	nop
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	20000240 	.word	0x20000240
 8003264:	40004c00 	.word	0x40004c00

08003268 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800326c:	4b11      	ldr	r3, [pc, #68]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 800326e:	4a12      	ldr	r2, [pc, #72]	; (80032b8 <MX_USART1_UART_Init+0x50>)
 8003270:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003272:	4b10      	ldr	r3, [pc, #64]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 8003274:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003278:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800327a:	4b0e      	ldr	r3, [pc, #56]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 800327c:	2200      	movs	r2, #0
 800327e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003280:	4b0c      	ldr	r3, [pc, #48]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 8003282:	2200      	movs	r2, #0
 8003284:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003286:	4b0b      	ldr	r3, [pc, #44]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 8003288:	2200      	movs	r2, #0
 800328a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800328c:	4b09      	ldr	r3, [pc, #36]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 800328e:	220c      	movs	r2, #12
 8003290:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 8003294:	2200      	movs	r2, #0
 8003296:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003298:	4b06      	ldr	r3, [pc, #24]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 800329a:	2200      	movs	r2, #0
 800329c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800329e:	4805      	ldr	r0, [pc, #20]	; (80032b4 <MX_USART1_UART_Init+0x4c>)
 80032a0:	f002 f87a 	bl	8005398 <HAL_UART_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80032aa:	f000 f8fd 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80032ae:	bf00      	nop
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000288 	.word	0x20000288
 80032b8:	40011000 	.word	0x40011000

080032bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032c0:	4b11      	ldr	r3, [pc, #68]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032c2:	4a12      	ldr	r2, [pc, #72]	; (800330c <MX_USART2_UART_Init+0x50>)
 80032c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032c6:	4b10      	ldr	r3, [pc, #64]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032ce:	4b0e      	ldr	r3, [pc, #56]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032d4:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032d6:	2200      	movs	r2, #0
 80032d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032da:	4b0b      	ldr	r3, [pc, #44]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032dc:	2200      	movs	r2, #0
 80032de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032e0:	4b09      	ldr	r3, [pc, #36]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032e2:	220c      	movs	r2, #12
 80032e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032e6:	4b08      	ldr	r3, [pc, #32]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032ee:	2200      	movs	r2, #0
 80032f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032f2:	4805      	ldr	r0, [pc, #20]	; (8003308 <MX_USART2_UART_Init+0x4c>)
 80032f4:	f002 f850 	bl	8005398 <HAL_UART_Init>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d001      	beq.n	8003302 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80032fe:	f000 f8d3 	bl	80034a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003302:	bf00      	nop
 8003304:	bd80      	pop	{r7, pc}
 8003306:	bf00      	nop
 8003308:	200002d0 	.word	0x200002d0
 800330c:	40004400 	.word	0x40004400

08003310 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b08c      	sub	sp, #48	; 0x30
 8003314:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003316:	f107 031c 	add.w	r3, r7, #28
 800331a:	2200      	movs	r2, #0
 800331c:	601a      	str	r2, [r3, #0]
 800331e:	605a      	str	r2, [r3, #4]
 8003320:	609a      	str	r2, [r3, #8]
 8003322:	60da      	str	r2, [r3, #12]
 8003324:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003326:	2300      	movs	r3, #0
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	4b59      	ldr	r3, [pc, #356]	; (8003490 <MX_GPIO_Init+0x180>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	4a58      	ldr	r2, [pc, #352]	; (8003490 <MX_GPIO_Init+0x180>)
 8003330:	f043 0310 	orr.w	r3, r3, #16
 8003334:	6313      	str	r3, [r2, #48]	; 0x30
 8003336:	4b56      	ldr	r3, [pc, #344]	; (8003490 <MX_GPIO_Init+0x180>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	f003 0310 	and.w	r3, r3, #16
 800333e:	61bb      	str	r3, [r7, #24]
 8003340:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003342:	2300      	movs	r3, #0
 8003344:	617b      	str	r3, [r7, #20]
 8003346:	4b52      	ldr	r3, [pc, #328]	; (8003490 <MX_GPIO_Init+0x180>)
 8003348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800334a:	4a51      	ldr	r2, [pc, #324]	; (8003490 <MX_GPIO_Init+0x180>)
 800334c:	f043 0304 	orr.w	r3, r3, #4
 8003350:	6313      	str	r3, [r2, #48]	; 0x30
 8003352:	4b4f      	ldr	r3, [pc, #316]	; (8003490 <MX_GPIO_Init+0x180>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	f003 0304 	and.w	r3, r3, #4
 800335a:	617b      	str	r3, [r7, #20]
 800335c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800335e:	2300      	movs	r3, #0
 8003360:	613b      	str	r3, [r7, #16]
 8003362:	4b4b      	ldr	r3, [pc, #300]	; (8003490 <MX_GPIO_Init+0x180>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	4a4a      	ldr	r2, [pc, #296]	; (8003490 <MX_GPIO_Init+0x180>)
 8003368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800336c:	6313      	str	r3, [r2, #48]	; 0x30
 800336e:	4b48      	ldr	r3, [pc, #288]	; (8003490 <MX_GPIO_Init+0x180>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	4b44      	ldr	r3, [pc, #272]	; (8003490 <MX_GPIO_Init+0x180>)
 8003380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003382:	4a43      	ldr	r2, [pc, #268]	; (8003490 <MX_GPIO_Init+0x180>)
 8003384:	f043 0301 	orr.w	r3, r3, #1
 8003388:	6313      	str	r3, [r2, #48]	; 0x30
 800338a:	4b41      	ldr	r3, [pc, #260]	; (8003490 <MX_GPIO_Init+0x180>)
 800338c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338e:	f003 0301 	and.w	r3, r3, #1
 8003392:	60fb      	str	r3, [r7, #12]
 8003394:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003396:	2300      	movs	r3, #0
 8003398:	60bb      	str	r3, [r7, #8]
 800339a:	4b3d      	ldr	r3, [pc, #244]	; (8003490 <MX_GPIO_Init+0x180>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	4a3c      	ldr	r2, [pc, #240]	; (8003490 <MX_GPIO_Init+0x180>)
 80033a0:	f043 0302 	orr.w	r3, r3, #2
 80033a4:	6313      	str	r3, [r2, #48]	; 0x30
 80033a6:	4b3a      	ldr	r3, [pc, #232]	; (8003490 <MX_GPIO_Init+0x180>)
 80033a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	60bb      	str	r3, [r7, #8]
 80033b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80033b2:	2300      	movs	r3, #0
 80033b4:	607b      	str	r3, [r7, #4]
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <MX_GPIO_Init+0x180>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a35      	ldr	r2, [pc, #212]	; (8003490 <MX_GPIO_Init+0x180>)
 80033bc:	f043 0308 	orr.w	r3, r3, #8
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b33      	ldr	r3, [pc, #204]	; (8003490 <MX_GPIO_Init+0x180>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0308 	and.w	r3, r3, #8
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_SET);
 80033ce:	2201      	movs	r2, #1
 80033d0:	f44f 61f0 	mov.w	r1, #1920	; 0x780
 80033d4:	482f      	ldr	r0, [pc, #188]	; (8003494 <MX_GPIO_Init+0x184>)
 80033d6:	f001 fa07 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_11, GPIO_PIN_RESET);
 80033da:	2200      	movs	r2, #0
 80033dc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80033e0:	482c      	ldr	r0, [pc, #176]	; (8003494 <MX_GPIO_Init+0x184>)
 80033e2:	f001 fa01 	bl	80047e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5
                           PE6 PE12 PE13 PE14
                           PE15 PE0 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
 80033e6:	f24f 037f 	movw	r3, #61567	; 0xf07f
 80033ea:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80033ec:	2303      	movs	r3, #3
 80033ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80033f4:	f107 031c 	add.w	r3, r7, #28
 80033f8:	4619      	mov	r1, r3
 80033fa:	4826      	ldr	r0, [pc, #152]	; (8003494 <MX_GPIO_Init+0x184>)
 80033fc:	f000 fed2 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC8 PC9 PC10
                           PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003400:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8003404:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003406:	2303      	movs	r3, #3
 8003408:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340a:	2300      	movs	r3, #0
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800340e:	f107 031c 	add.w	r3, r7, #28
 8003412:	4619      	mov	r1, r3
 8003414:	4820      	ldr	r0, [pc, #128]	; (8003498 <MX_GPIO_Init+0x188>)
 8003416:	f000 fec5 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA8 PA11
                           PA12 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11
 800341a:	f649 13c0 	movw	r3, #39360	; 0x99c0
 800341e:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003420:	2303      	movs	r3, #3
 8003422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003424:	2300      	movs	r3, #0
 8003426:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003428:	f107 031c 	add.w	r3, r7, #28
 800342c:	4619      	mov	r1, r3
 800342e:	481b      	ldr	r0, [pc, #108]	; (800349c <MX_GPIO_Init+0x18c>)
 8003430:	f000 feb8 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8003434:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003438:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800343a:	2303      	movs	r3, #3
 800343c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343e:	2300      	movs	r3, #0
 8003440:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003442:	f107 031c 	add.w	r3, r7, #28
 8003446:	4619      	mov	r1, r3
 8003448:	4815      	ldr	r0, [pc, #84]	; (80034a0 <MX_GPIO_Init+0x190>)
 800344a:	f000 feab 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800344e:	f44f 6378 	mov.w	r3, #3968	; 0xf80
 8003452:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003454:	2301      	movs	r3, #1
 8003456:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003458:	2300      	movs	r3, #0
 800345a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800345c:	2300      	movs	r3, #0
 800345e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003460:	f107 031c 	add.w	r3, r7, #28
 8003464:	4619      	mov	r1, r3
 8003466:	480b      	ldr	r0, [pc, #44]	; (8003494 <MX_GPIO_Init+0x184>)
 8003468:	f000 fe9c 	bl	80041a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD10 PD11
                           PD12 PD13 PD14 PD15
                           PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800346c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003470:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003472:	2303      	movs	r3, #3
 8003474:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800347a:	f107 031c 	add.w	r3, r7, #28
 800347e:	4619      	mov	r1, r3
 8003480:	4808      	ldr	r0, [pc, #32]	; (80034a4 <MX_GPIO_Init+0x194>)
 8003482:	f000 fe8f 	bl	80041a4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003486:	bf00      	nop
 8003488:	3730      	adds	r7, #48	; 0x30
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	40023800 	.word	0x40023800
 8003494:	40021000 	.word	0x40021000
 8003498:	40020800 	.word	0x40020800
 800349c:	40020000 	.word	0x40020000
 80034a0:	40020400 	.word	0x40020400
 80034a4:	40020c00 	.word	0x40020c00

080034a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034ac:	b672      	cpsid	i
}
 80034ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034b0:	e7fe      	b.n	80034b0 <Error_Handler+0x8>

080034b2 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80034b2:	b480      	push	{r7}
 80034b4:	b083      	sub	sp, #12
 80034b6:	af00      	add	r7, sp, #0
 80034b8:	6078      	str	r0, [r7, #4]
 80034ba:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
	...

080034c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	607b      	str	r3, [r7, #4]
 80034d2:	4b0f      	ldr	r3, [pc, #60]	; (8003510 <HAL_MspInit+0x48>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	4a0e      	ldr	r2, [pc, #56]	; (8003510 <HAL_MspInit+0x48>)
 80034d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034dc:	6453      	str	r3, [r2, #68]	; 0x44
 80034de:	4b0c      	ldr	r3, [pc, #48]	; (8003510 <HAL_MspInit+0x48>)
 80034e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4b08      	ldr	r3, [pc, #32]	; (8003510 <HAL_MspInit+0x48>)
 80034f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f2:	4a07      	ldr	r2, [pc, #28]	; (8003510 <HAL_MspInit+0x48>)
 80034f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034f8:	6413      	str	r3, [r2, #64]	; 0x40
 80034fa:	4b05      	ldr	r3, [pc, #20]	; (8003510 <HAL_MspInit+0x48>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	603b      	str	r3, [r7, #0]
 8003504:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003506:	bf00      	nop
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40023800 	.word	0x40023800

08003514 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b08a      	sub	sp, #40	; 0x28
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800351c:	f107 0314 	add.w	r3, r7, #20
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]
 8003524:	605a      	str	r2, [r3, #4]
 8003526:	609a      	str	r2, [r3, #8]
 8003528:	60da      	str	r2, [r3, #12]
 800352a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a1b      	ldr	r2, [pc, #108]	; (80035a0 <HAL_DAC_MspInit+0x8c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d12f      	bne.n	8003596 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003536:	2300      	movs	r3, #0
 8003538:	613b      	str	r3, [r7, #16]
 800353a:	4b1a      	ldr	r3, [pc, #104]	; (80035a4 <HAL_DAC_MspInit+0x90>)
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	4a19      	ldr	r2, [pc, #100]	; (80035a4 <HAL_DAC_MspInit+0x90>)
 8003540:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003544:	6413      	str	r3, [r2, #64]	; 0x40
 8003546:	4b17      	ldr	r3, [pc, #92]	; (80035a4 <HAL_DAC_MspInit+0x90>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800354e:	613b      	str	r3, [r7, #16]
 8003550:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003552:	2300      	movs	r3, #0
 8003554:	60fb      	str	r3, [r7, #12]
 8003556:	4b13      	ldr	r3, [pc, #76]	; (80035a4 <HAL_DAC_MspInit+0x90>)
 8003558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800355a:	4a12      	ldr	r2, [pc, #72]	; (80035a4 <HAL_DAC_MspInit+0x90>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6313      	str	r3, [r2, #48]	; 0x30
 8003562:	4b10      	ldr	r3, [pc, #64]	; (80035a4 <HAL_DAC_MspInit+0x90>)
 8003564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	60fb      	str	r3, [r7, #12]
 800356c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800356e:	2330      	movs	r3, #48	; 0x30
 8003570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003572:	2303      	movs	r3, #3
 8003574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800357a:	f107 0314 	add.w	r3, r7, #20
 800357e:	4619      	mov	r1, r3
 8003580:	4809      	ldr	r0, [pc, #36]	; (80035a8 <HAL_DAC_MspInit+0x94>)
 8003582:	f000 fe0f 	bl	80041a4 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003586:	2200      	movs	r2, #0
 8003588:	2100      	movs	r1, #0
 800358a:	2036      	movs	r0, #54	; 0x36
 800358c:	f000 fb94 	bl	8003cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003590:	2036      	movs	r0, #54	; 0x36
 8003592:	f000 fbbd 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003596:	bf00      	nop
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	40007400 	.word	0x40007400
 80035a4:	40023800 	.word	0x40023800
 80035a8:	40020000 	.word	0x40020000

080035ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b08e      	sub	sp, #56	; 0x38
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
 80035bc:	605a      	str	r2, [r3, #4]
 80035be:	609a      	str	r2, [r3, #8]
 80035c0:	60da      	str	r2, [r3, #12]
 80035c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a57      	ldr	r2, [pc, #348]	; (8003728 <HAL_UART_MspInit+0x17c>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d134      	bne.n	8003638 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80035ce:	2300      	movs	r3, #0
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	4b56      	ldr	r3, [pc, #344]	; (800372c <HAL_UART_MspInit+0x180>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	4a55      	ldr	r2, [pc, #340]	; (800372c <HAL_UART_MspInit+0x180>)
 80035d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80035dc:	6413      	str	r3, [r2, #64]	; 0x40
 80035de:	4b53      	ldr	r3, [pc, #332]	; (800372c <HAL_UART_MspInit+0x180>)
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035e6:	623b      	str	r3, [r7, #32]
 80035e8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	4b4f      	ldr	r3, [pc, #316]	; (800372c <HAL_UART_MspInit+0x180>)
 80035f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f2:	4a4e      	ldr	r2, [pc, #312]	; (800372c <HAL_UART_MspInit+0x180>)
 80035f4:	f043 0301 	orr.w	r3, r3, #1
 80035f8:	6313      	str	r3, [r2, #48]	; 0x30
 80035fa:	4b4c      	ldr	r3, [pc, #304]	; (800372c <HAL_UART_MspInit+0x180>)
 80035fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003606:	2303      	movs	r3, #3
 8003608:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800360a:	2302      	movs	r3, #2
 800360c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800360e:	2301      	movs	r3, #1
 8003610:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003612:	2303      	movs	r3, #3
 8003614:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003616:	2308      	movs	r3, #8
 8003618:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800361a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800361e:	4619      	mov	r1, r3
 8003620:	4843      	ldr	r0, [pc, #268]	; (8003730 <HAL_UART_MspInit+0x184>)
 8003622:	f000 fdbf 	bl	80041a4 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003626:	2200      	movs	r2, #0
 8003628:	2100      	movs	r1, #0
 800362a:	2034      	movs	r0, #52	; 0x34
 800362c:	f000 fb44 	bl	8003cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003630:	2034      	movs	r0, #52	; 0x34
 8003632:	f000 fb6d 	bl	8003d10 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003636:	e073      	b.n	8003720 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a3d      	ldr	r2, [pc, #244]	; (8003734 <HAL_UART_MspInit+0x188>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d135      	bne.n	80036ae <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	4b39      	ldr	r3, [pc, #228]	; (800372c <HAL_UART_MspInit+0x180>)
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	4a38      	ldr	r2, [pc, #224]	; (800372c <HAL_UART_MspInit+0x180>)
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	6453      	str	r3, [r2, #68]	; 0x44
 8003652:	4b36      	ldr	r3, [pc, #216]	; (800372c <HAL_UART_MspInit+0x180>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	f003 0310 	and.w	r3, r3, #16
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800365e:	2300      	movs	r3, #0
 8003660:	617b      	str	r3, [r7, #20]
 8003662:	4b32      	ldr	r3, [pc, #200]	; (800372c <HAL_UART_MspInit+0x180>)
 8003664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003666:	4a31      	ldr	r2, [pc, #196]	; (800372c <HAL_UART_MspInit+0x180>)
 8003668:	f043 0301 	orr.w	r3, r3, #1
 800366c:	6313      	str	r3, [r2, #48]	; 0x30
 800366e:	4b2f      	ldr	r3, [pc, #188]	; (800372c <HAL_UART_MspInit+0x180>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	617b      	str	r3, [r7, #20]
 8003678:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800367a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800367e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003684:	2300      	movs	r3, #0
 8003686:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003688:	2303      	movs	r3, #3
 800368a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800368c:	2307      	movs	r3, #7
 800368e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003694:	4619      	mov	r1, r3
 8003696:	4826      	ldr	r0, [pc, #152]	; (8003730 <HAL_UART_MspInit+0x184>)
 8003698:	f000 fd84 	bl	80041a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800369c:	2200      	movs	r2, #0
 800369e:	2100      	movs	r1, #0
 80036a0:	2025      	movs	r0, #37	; 0x25
 80036a2:	f000 fb09 	bl	8003cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036a6:	2025      	movs	r0, #37	; 0x25
 80036a8:	f000 fb32 	bl	8003d10 <HAL_NVIC_EnableIRQ>
}
 80036ac:	e038      	b.n	8003720 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART2)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a21      	ldr	r2, [pc, #132]	; (8003738 <HAL_UART_MspInit+0x18c>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d133      	bne.n	8003720 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036b8:	2300      	movs	r3, #0
 80036ba:	613b      	str	r3, [r7, #16]
 80036bc:	4b1b      	ldr	r3, [pc, #108]	; (800372c <HAL_UART_MspInit+0x180>)
 80036be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c0:	4a1a      	ldr	r2, [pc, #104]	; (800372c <HAL_UART_MspInit+0x180>)
 80036c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c6:	6413      	str	r3, [r2, #64]	; 0x40
 80036c8:	4b18      	ldr	r3, [pc, #96]	; (800372c <HAL_UART_MspInit+0x180>)
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80036d4:	2300      	movs	r3, #0
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	4b14      	ldr	r3, [pc, #80]	; (800372c <HAL_UART_MspInit+0x180>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	4a13      	ldr	r2, [pc, #76]	; (800372c <HAL_UART_MspInit+0x180>)
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	6313      	str	r3, [r2, #48]	; 0x30
 80036e4:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_UART_MspInit+0x180>)
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80036f0:	230c      	movs	r3, #12
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036f4:	2302      	movs	r3, #2
 80036f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036f8:	2300      	movs	r3, #0
 80036fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80036fc:	2303      	movs	r3, #3
 80036fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003700:	2307      	movs	r3, #7
 8003702:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003704:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003708:	4619      	mov	r1, r3
 800370a:	4809      	ldr	r0, [pc, #36]	; (8003730 <HAL_UART_MspInit+0x184>)
 800370c:	f000 fd4a 	bl	80041a4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003710:	2200      	movs	r2, #0
 8003712:	2100      	movs	r1, #0
 8003714:	2026      	movs	r0, #38	; 0x26
 8003716:	f000 facf 	bl	8003cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800371a:	2026      	movs	r0, #38	; 0x26
 800371c:	f000 faf8 	bl	8003d10 <HAL_NVIC_EnableIRQ>
}
 8003720:	bf00      	nop
 8003722:	3738      	adds	r7, #56	; 0x38
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	40004c00 	.word	0x40004c00
 800372c:	40023800 	.word	0x40023800
 8003730:	40020000 	.word	0x40020000
 8003734:	40011000 	.word	0x40011000
 8003738:	40004400 	.word	0x40004400

0800373c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003740:	e7fe      	b.n	8003740 <NMI_Handler+0x4>

08003742 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003742:	b480      	push	{r7}
 8003744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003746:	e7fe      	b.n	8003746 <HardFault_Handler+0x4>

08003748 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800374c:	e7fe      	b.n	800374c <MemManage_Handler+0x4>

0800374e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800374e:	b480      	push	{r7}
 8003750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003752:	e7fe      	b.n	8003752 <BusFault_Handler+0x4>

08003754 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003754:	b480      	push	{r7}
 8003756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003758:	e7fe      	b.n	8003758 <UsageFault_Handler+0x4>

0800375a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800375a:	b480      	push	{r7}
 800375c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800375e:	bf00      	nop
 8003760:	46bd      	mov	sp, r7
 8003762:	bc80      	pop	{r7}
 8003764:	4770      	bx	lr

08003766 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003766:	b480      	push	{r7}
 8003768:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800376a:	bf00      	nop
 800376c:	46bd      	mov	sp, r7
 800376e:	bc80      	pop	{r7}
 8003770:	4770      	bx	lr

08003772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003772:	b480      	push	{r7}
 8003774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	46bd      	mov	sp, r7
 800377a:	bc80      	pop	{r7}
 800377c:	4770      	bx	lr

0800377e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800377e:	b580      	push	{r7, lr}
 8003780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003782:	f000 f96d 	bl	8003a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
	...

0800378c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003790:	4802      	ldr	r0, [pc, #8]	; (800379c <USART1_IRQHandler+0x10>)
 8003792:	f001 ff7d 	bl	8005690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003796:	bf00      	nop
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	20000288 	.word	0x20000288

080037a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80037a4:	4802      	ldr	r0, [pc, #8]	; (80037b0 <USART2_IRQHandler+0x10>)
 80037a6:	f001 ff73 	bl	8005690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80037aa:	bf00      	nop
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	200002d0 	.word	0x200002d0

080037b4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80037b8:	4802      	ldr	r0, [pc, #8]	; (80037c4 <UART4_IRQHandler+0x10>)
 80037ba:	f001 ff69 	bl	8005690 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80037be:	bf00      	nop
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	20000240 	.word	0x20000240

080037c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80037cc:	4802      	ldr	r0, [pc, #8]	; (80037d8 <TIM6_DAC_IRQHandler+0x10>)
 80037ce:	f000 fb55 	bl	8003e7c <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80037d2:	bf00      	nop
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	2000022c 	.word	0x2000022c

080037dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80037dc:	b480      	push	{r7}
 80037de:	af00      	add	r7, sp, #0
	return 1;
 80037e0:	2301      	movs	r3, #1
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bc80      	pop	{r7}
 80037e8:	4770      	bx	lr

080037ea <_kill>:

int _kill(int pid, int sig)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
 80037f2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80037f4:	f002 fd70 	bl	80062d8 <__errno>
 80037f8:	4603      	mov	r3, r0
 80037fa:	2216      	movs	r2, #22
 80037fc:	601a      	str	r2, [r3, #0]
	return -1;
 80037fe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <_exit>:

void _exit (int status)
{
 800380a:	b580      	push	{r7, lr}
 800380c:	b082      	sub	sp, #8
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003812:	f04f 31ff 	mov.w	r1, #4294967295
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff ffe7 	bl	80037ea <_kill>
	while (1) {}		/* Make sure we hang here */
 800381c:	e7fe      	b.n	800381c <_exit+0x12>

0800381e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800381e:	b580      	push	{r7, lr}
 8003820:	b086      	sub	sp, #24
 8003822:	af00      	add	r7, sp, #0
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800382a:	2300      	movs	r3, #0
 800382c:	617b      	str	r3, [r7, #20]
 800382e:	e00a      	b.n	8003846 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003830:	f3af 8000 	nop.w
 8003834:	4601      	mov	r1, r0
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	1c5a      	adds	r2, r3, #1
 800383a:	60ba      	str	r2, [r7, #8]
 800383c:	b2ca      	uxtb	r2, r1
 800383e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	3301      	adds	r3, #1
 8003844:	617b      	str	r3, [r7, #20]
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	429a      	cmp	r2, r3
 800384c:	dbf0      	blt.n	8003830 <_read+0x12>
	}

return len;
 800384e:	687b      	ldr	r3, [r7, #4]
}
 8003850:	4618      	mov	r0, r3
 8003852:	3718      	adds	r7, #24
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}

08003858 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e009      	b.n	800387e <_write+0x26>
	{
		__io_putchar(*ptr++);
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	1c5a      	adds	r2, r3, #1
 800386e:	60ba      	str	r2, [r7, #8]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	4618      	mov	r0, r3
 8003874:	f7fe fbbc 	bl	8001ff0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	3301      	adds	r3, #1
 800387c:	617b      	str	r3, [r7, #20]
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	429a      	cmp	r2, r3
 8003884:	dbf1      	blt.n	800386a <_write+0x12>
	}
	return len;
 8003886:	687b      	ldr	r3, [r7, #4]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <_close>:

int _close(int file)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
	return -1;
 8003898:	f04f 33ff 	mov.w	r3, #4294967295
}
 800389c:	4618      	mov	r0, r3
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bc80      	pop	{r7}
 80038a4:	4770      	bx	lr

080038a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80038a6:	b480      	push	{r7}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80038b6:	605a      	str	r2, [r3, #4]
	return 0;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	bc80      	pop	{r7}
 80038c2:	4770      	bx	lr

080038c4 <_isatty>:

int _isatty(int file)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
	return 1;
 80038cc:	2301      	movs	r3, #1
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	370c      	adds	r7, #12
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bc80      	pop	{r7}
 80038d6:	4770      	bx	lr

080038d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80038d8:	b480      	push	{r7}
 80038da:	b085      	sub	sp, #20
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
	return 0;
 80038e4:	2300      	movs	r3, #0
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3714      	adds	r7, #20
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bc80      	pop	{r7}
 80038ee:	4770      	bx	lr

080038f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b086      	sub	sp, #24
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038f8:	4a14      	ldr	r2, [pc, #80]	; (800394c <_sbrk+0x5c>)
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <_sbrk+0x60>)
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003904:	4b13      	ldr	r3, [pc, #76]	; (8003954 <_sbrk+0x64>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d102      	bne.n	8003912 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800390c:	4b11      	ldr	r3, [pc, #68]	; (8003954 <_sbrk+0x64>)
 800390e:	4a12      	ldr	r2, [pc, #72]	; (8003958 <_sbrk+0x68>)
 8003910:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003912:	4b10      	ldr	r3, [pc, #64]	; (8003954 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	429a      	cmp	r2, r3
 800391e:	d207      	bcs.n	8003930 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003920:	f002 fcda 	bl	80062d8 <__errno>
 8003924:	4603      	mov	r3, r0
 8003926:	220c      	movs	r2, #12
 8003928:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800392a:	f04f 33ff 	mov.w	r3, #4294967295
 800392e:	e009      	b.n	8003944 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003930:	4b08      	ldr	r3, [pc, #32]	; (8003954 <_sbrk+0x64>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <_sbrk+0x64>)
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4413      	add	r3, r2
 800393e:	4a05      	ldr	r2, [pc, #20]	; (8003954 <_sbrk+0x64>)
 8003940:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003942:	68fb      	ldr	r3, [r7, #12]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	20014000 	.word	0x20014000
 8003950:	00000400 	.word	0x00000400
 8003954:	20000804 	.word	0x20000804
 8003958:	20000820 	.word	0x20000820

0800395c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003960:	bf00      	nop
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003968:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039a0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 800396c:	f7ff fff6 	bl	800395c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003970:	480c      	ldr	r0, [pc, #48]	; (80039a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003972:	490d      	ldr	r1, [pc, #52]	; (80039a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003978:	e002      	b.n	8003980 <LoopCopyDataInit>

0800397a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800397a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800397c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800397e:	3304      	adds	r3, #4

08003980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003984:	d3f9      	bcc.n	800397a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003986:	4a0a      	ldr	r2, [pc, #40]	; (80039b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003988:	4c0a      	ldr	r4, [pc, #40]	; (80039b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800398c:	e001      	b.n	8003992 <LoopFillZerobss>

0800398e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800398e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003990:	3204      	adds	r2, #4

08003992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003994:	d3fb      	bcc.n	800398e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8003996:	f002 fca5 	bl	80062e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800399a:	f7ff fb5f 	bl	800305c <main>
  bx  lr    
 800399e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039a0:	20014000 	.word	0x20014000
  ldr r0, =_sdata
 80039a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039a8:	20000208 	.word	0x20000208
  ldr r2, =_sidata
 80039ac:	0800b418 	.word	0x0800b418
  ldr r2, =_sbss
 80039b0:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 80039b4:	2000081c 	.word	0x2000081c

080039b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039b8:	e7fe      	b.n	80039b8 <ADC_IRQHandler>
	...

080039bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039c0:	4b0e      	ldr	r3, [pc, #56]	; (80039fc <HAL_Init+0x40>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0d      	ldr	r2, [pc, #52]	; (80039fc <HAL_Init+0x40>)
 80039c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a0a      	ldr	r2, [pc, #40]	; (80039fc <HAL_Init+0x40>)
 80039d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d8:	4b08      	ldr	r3, [pc, #32]	; (80039fc <HAL_Init+0x40>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a07      	ldr	r2, [pc, #28]	; (80039fc <HAL_Init+0x40>)
 80039de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e4:	2003      	movs	r0, #3
 80039e6:	f000 f947 	bl	8003c78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039ea:	2000      	movs	r0, #0
 80039ec:	f000 f808 	bl	8003a00 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80039f0:	f7ff fd6a 	bl	80034c8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40023c00 	.word	0x40023c00

08003a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_InitTick+0x54>)
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <HAL_InitTick+0x58>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	4619      	mov	r1, r3
 8003a12:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f000 f98e 	bl	8003d40 <HAL_SYSTICK_Config>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d001      	beq.n	8003a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e00e      	b.n	8003a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2b0f      	cmp	r3, #15
 8003a32:	d80a      	bhi.n	8003a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a34:	2200      	movs	r2, #0
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	f04f 30ff 	mov.w	r0, #4294967295
 8003a3c:	f000 f93c 	bl	8003cb8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a40:	4a06      	ldr	r2, [pc, #24]	; (8003a5c <HAL_InitTick+0x5c>)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	e000      	b.n	8003a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	20000028 	.word	0x20000028
 8003a58:	20000030 	.word	0x20000030
 8003a5c:	2000002c 	.word	0x2000002c

08003a60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a60:	b480      	push	{r7}
 8003a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_IncTick+0x1c>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	461a      	mov	r2, r3
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <HAL_IncTick+0x20>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4413      	add	r3, r2
 8003a70:	4a03      	ldr	r2, [pc, #12]	; (8003a80 <HAL_IncTick+0x20>)
 8003a72:	6013      	str	r3, [r2, #0]
}
 8003a74:	bf00      	nop
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bc80      	pop	{r7}
 8003a7a:	4770      	bx	lr
 8003a7c:	20000030 	.word	0x20000030
 8003a80:	20000808 	.word	0x20000808

08003a84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  return uwTick;
 8003a88:	4b02      	ldr	r3, [pc, #8]	; (8003a94 <HAL_GetTick+0x10>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bc80      	pop	{r7}
 8003a92:	4770      	bx	lr
 8003a94:	20000808 	.word	0x20000808

08003a98 <HAL_Delay>:
  *       implementations in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003aa0:	f7ff fff0 	bl	8003a84 <HAL_GetTick>
 8003aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ab0:	d005      	beq.n	8003abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <HAL_Delay+0x44>)
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	4413      	add	r3, r2
 8003abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003abe:	bf00      	nop
 8003ac0:	f7ff ffe0 	bl	8003a84 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d8f7      	bhi.n	8003ac0 <HAL_Delay+0x28>
  {
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3710      	adds	r7, #16
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop
 8003adc:	20000030 	.word	0x20000030

08003ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003afc:	4013      	ands	r3, r2
 8003afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b04:	68bb      	ldr	r3, [r7, #8]
 8003b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b12:	4a04      	ldr	r2, [pc, #16]	; (8003b24 <__NVIC_SetPriorityGrouping+0x44>)
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	60d3      	str	r3, [r2, #12]
}
 8003b18:	bf00      	nop
 8003b1a:	3714      	adds	r7, #20
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bc80      	pop	{r7}
 8003b20:	4770      	bx	lr
 8003b22:	bf00      	nop
 8003b24:	e000ed00 	.word	0xe000ed00

08003b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b2c:	4b04      	ldr	r3, [pc, #16]	; (8003b40 <__NVIC_GetPriorityGrouping+0x18>)
 8003b2e:	68db      	ldr	r3, [r3, #12]
 8003b30:	0a1b      	lsrs	r3, r3, #8
 8003b32:	f003 0307 	and.w	r3, r3, #7
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bc80      	pop	{r7}
 8003b3c:	4770      	bx	lr
 8003b3e:	bf00      	nop
 8003b40:	e000ed00 	.word	0xe000ed00

08003b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	db0b      	blt.n	8003b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b56:	79fb      	ldrb	r3, [r7, #7]
 8003b58:	f003 021f 	and.w	r2, r3, #31
 8003b5c:	4906      	ldr	r1, [pc, #24]	; (8003b78 <__NVIC_EnableIRQ+0x34>)
 8003b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	2001      	movs	r0, #1
 8003b66:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6e:	bf00      	nop
 8003b70:	370c      	adds	r7, #12
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bc80      	pop	{r7}
 8003b76:	4770      	bx	lr
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	6039      	str	r1, [r7, #0]
 8003b86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	db0a      	blt.n	8003ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	b2da      	uxtb	r2, r3
 8003b94:	490c      	ldr	r1, [pc, #48]	; (8003bc8 <__NVIC_SetPriority+0x4c>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	0112      	lsls	r2, r2, #4
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ba4:	e00a      	b.n	8003bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	b2da      	uxtb	r2, r3
 8003baa:	4908      	ldr	r1, [pc, #32]	; (8003bcc <__NVIC_SetPriority+0x50>)
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	3b04      	subs	r3, #4
 8003bb4:	0112      	lsls	r2, r2, #4
 8003bb6:	b2d2      	uxtb	r2, r2
 8003bb8:	440b      	add	r3, r1
 8003bba:	761a      	strb	r2, [r3, #24]
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bc80      	pop	{r7}
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	e000e100 	.word	0xe000e100
 8003bcc:	e000ed00 	.word	0xe000ed00

08003bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b089      	sub	sp, #36	; 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f003 0307 	and.w	r3, r3, #7
 8003be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003be4:	69fb      	ldr	r3, [r7, #28]
 8003be6:	f1c3 0307 	rsb	r3, r3, #7
 8003bea:	2b04      	cmp	r3, #4
 8003bec:	bf28      	it	cs
 8003bee:	2304      	movcs	r3, #4
 8003bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	3304      	adds	r3, #4
 8003bf6:	2b06      	cmp	r3, #6
 8003bf8:	d902      	bls.n	8003c00 <NVIC_EncodePriority+0x30>
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3b03      	subs	r3, #3
 8003bfe:	e000      	b.n	8003c02 <NVIC_EncodePriority+0x32>
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c04:	f04f 32ff 	mov.w	r2, #4294967295
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0e:	43da      	mvns	r2, r3
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	401a      	ands	r2, r3
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c18:	f04f 31ff 	mov.w	r1, #4294967295
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c22:	43d9      	mvns	r1, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c28:	4313      	orrs	r3, r2
         );
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bc80      	pop	{r7}
 8003c32:	4770      	bx	lr

08003c34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	3b01      	subs	r3, #1
 8003c40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c44:	d301      	bcc.n	8003c4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c46:	2301      	movs	r3, #1
 8003c48:	e00f      	b.n	8003c6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c4a:	4a0a      	ldr	r2, [pc, #40]	; (8003c74 <SysTick_Config+0x40>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	3b01      	subs	r3, #1
 8003c50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c52:	210f      	movs	r1, #15
 8003c54:	f04f 30ff 	mov.w	r0, #4294967295
 8003c58:	f7ff ff90 	bl	8003b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c5c:	4b05      	ldr	r3, [pc, #20]	; (8003c74 <SysTick_Config+0x40>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c62:	4b04      	ldr	r3, [pc, #16]	; (8003c74 <SysTick_Config+0x40>)
 8003c64:	2207      	movs	r2, #7
 8003c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3708      	adds	r7, #8
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	e000e010 	.word	0xe000e010

08003c78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b07      	cmp	r3, #7
 8003c84:	d00f      	beq.n	8003ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	2b06      	cmp	r3, #6
 8003c8a:	d00c      	beq.n	8003ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2b05      	cmp	r3, #5
 8003c90:	d009      	beq.n	8003ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b04      	cmp	r3, #4
 8003c96:	d006      	beq.n	8003ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b03      	cmp	r3, #3
 8003c9c:	d003      	beq.n	8003ca6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c9e:	2191      	movs	r1, #145	; 0x91
 8003ca0:	4804      	ldr	r0, [pc, #16]	; (8003cb4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003ca2:	f7ff fc06 	bl	80034b2 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ca6:	6878      	ldr	r0, [r7, #4]
 8003ca8:	f7ff ff1a 	bl	8003ae0 <__NVIC_SetPriorityGrouping>
}
 8003cac:	bf00      	nop
 8003cae:	3708      	adds	r7, #8
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}
 8003cb4:	0800ad6c 	.word	0x0800ad6c

08003cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2b0f      	cmp	r3, #15
 8003cce:	d903      	bls.n	8003cd8 <HAL_NVIC_SetPriority+0x20>
 8003cd0:	21a9      	movs	r1, #169	; 0xa9
 8003cd2:	480e      	ldr	r0, [pc, #56]	; (8003d0c <HAL_NVIC_SetPriority+0x54>)
 8003cd4:	f7ff fbed 	bl	80034b2 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	2b0f      	cmp	r3, #15
 8003cdc:	d903      	bls.n	8003ce6 <HAL_NVIC_SetPriority+0x2e>
 8003cde:	21aa      	movs	r1, #170	; 0xaa
 8003ce0:	480a      	ldr	r0, [pc, #40]	; (8003d0c <HAL_NVIC_SetPriority+0x54>)
 8003ce2:	f7ff fbe6 	bl	80034b2 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ce6:	f7ff ff1f 	bl	8003b28 <__NVIC_GetPriorityGrouping>
 8003cea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	68b9      	ldr	r1, [r7, #8]
 8003cf0:	6978      	ldr	r0, [r7, #20]
 8003cf2:	f7ff ff6d 	bl	8003bd0 <NVIC_EncodePriority>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff3c 	bl	8003b7c <__NVIC_SetPriority>
}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	0800ad6c 	.word	0x0800ad6c

08003d10 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f2xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	4603      	mov	r3, r0
 8003d18:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	da03      	bge.n	8003d2a <HAL_NVIC_EnableIRQ+0x1a>
 8003d22:	21bd      	movs	r1, #189	; 0xbd
 8003d24:	4805      	ldr	r0, [pc, #20]	; (8003d3c <HAL_NVIC_EnableIRQ+0x2c>)
 8003d26:	f7ff fbc4 	bl	80034b2 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f7ff ff08 	bl	8003b44 <__NVIC_EnableIRQ>
}
 8003d34:	bf00      	nop
 8003d36:	3708      	adds	r7, #8
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	0800ad6c 	.word	0x0800ad6c

08003d40 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff ff73 	bl	8003c34 <SysTick_Config>
 8003d4e:	4603      	mov	r3, r0
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3708      	adds	r7, #8
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b082      	sub	sp, #8
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d101      	bne.n	8003d6a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003d66:	2301      	movs	r3, #1
 8003d68:	e01e      	b.n	8003da8 <HAL_DAC_Init+0x50>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a10      	ldr	r2, [pc, #64]	; (8003db0 <HAL_DAC_Init+0x58>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <HAL_DAC_Init+0x26>
 8003d74:	f44f 7192 	mov.w	r1, #292	; 0x124
 8003d78:	480e      	ldr	r0, [pc, #56]	; (8003db4 <HAL_DAC_Init+0x5c>)
 8003d7a:	f7ff fb9a 	bl	80034b2 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	791b      	ldrb	r3, [r3, #4]
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d105      	bne.n	8003d94 <HAL_DAC_Init+0x3c>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7ff fbc0 	bl	8003514 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2202      	movs	r2, #2
 8003d98:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3708      	adds	r7, #8
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}
 8003db0:	40007400 	.word	0x40007400
 8003db4:	0800ada8 	.word	0x0800ada8

08003db8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d101      	bne.n	8003dcc <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e051      	b.n	8003e70 <HAL_DAC_Start+0xb8>
  }

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <HAL_DAC_Start+0x2a>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d004      	beq.n	8003de2 <HAL_DAC_Start+0x2a>
 8003dd8:	f240 11c9 	movw	r1, #457	; 0x1c9
 8003ddc:	4826      	ldr	r0, [pc, #152]	; (8003e78 <HAL_DAC_Start+0xc0>)
 8003dde:	f7ff fb68 	bl	80034b2 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	795b      	ldrb	r3, [r3, #5]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d101      	bne.n	8003dee <HAL_DAC_Start+0x36>
 8003dea:	2302      	movs	r3, #2
 8003dec:	e040      	b.n	8003e70 <HAL_DAC_Start+0xb8>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2201      	movs	r2, #1
 8003df2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2202      	movs	r2, #2
 8003df8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6819      	ldr	r1, [r3, #0]
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	f003 0310 	and.w	r3, r3, #16
 8003e06:	2201      	movs	r2, #1
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10f      	bne.n	8003e38 <HAL_DAC_Start+0x80>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003e22:	2b3c      	cmp	r3, #60	; 0x3c
 8003e24:	d11d      	bne.n	8003e62 <HAL_DAC_Start+0xaa>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	685a      	ldr	r2, [r3, #4]
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f042 0201 	orr.w	r2, r2, #1
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	e014      	b.n	8003e62 <HAL_DAC_Start+0xaa>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	f003 0310 	and.w	r3, r3, #16
 8003e48:	213c      	movs	r1, #60	; 0x3c
 8003e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d107      	bne.n	8003e62 <HAL_DAC_Start+0xaa>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f042 0202 	orr.w	r2, r2, #2
 8003e60:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2201      	movs	r2, #1
 8003e66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	0800ada8 	.word	0x0800ada8

08003e7c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b084      	sub	sp, #16
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e92:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01d      	beq.n	8003eda <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d018      	beq.n	8003eda <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2204      	movs	r2, #4
 8003eac:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	f043 0201 	orr.w	r2, r3, #1
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003ec2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003ed2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f827 	bl	8003f28 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d01d      	beq.n	8003f20 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d018      	beq.n	8003f20 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2204      	movs	r2, #4
 8003ef2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	f043 0202 	orr.w	r2, r3, #2
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003f08:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f8a8 	bl	8004070 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8003f20:	bf00      	nop
 8003f22:	3710      	adds	r7, #16
 8003f24:	46bd      	mov	sp, r7
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8003f30:	bf00      	nop
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bc80      	pop	{r7}
 8003f38:	4770      	bx	lr
	...

08003f3c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	60b9      	str	r1, [r7, #8]
 8003f46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d002      	beq.n	8003f58 <HAL_DAC_ConfigChannel+0x1c>
 8003f52:	68bb      	ldr	r3, [r7, #8]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d101      	bne.n	8003f5c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003f58:	2301      	movs	r3, #1
 8003f5a:	e083      	b.n	8004064 <HAL_DAC_ConfigChannel+0x128>
  }

  /* Check the DAC parameters */
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d024      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2b24      	cmp	r3, #36	; 0x24
 8003f6a:	d020      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b0c      	cmp	r3, #12
 8003f72:	d01c      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	2b14      	cmp	r3, #20
 8003f7a:	d018      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2b1c      	cmp	r3, #28
 8003f82:	d014      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d010      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b2c      	cmp	r3, #44	; 0x2c
 8003f92:	d00c      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	2b34      	cmp	r3, #52	; 0x34
 8003f9a:	d008      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2b3c      	cmp	r3, #60	; 0x3c
 8003fa2:	d004      	beq.n	8003fae <HAL_DAC_ConfigChannel+0x72>
 8003fa4:	f44f 7177 	mov.w	r1, #988	; 0x3dc
 8003fa8:	4830      	ldr	r0, [pc, #192]	; (800406c <HAL_DAC_ConfigChannel+0x130>)
 8003faa:	f7ff fa82 	bl	80034b2 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_DAC_ConfigChannel+0x8c>
 8003fb6:	68bb      	ldr	r3, [r7, #8]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	2b02      	cmp	r3, #2
 8003fbc:	d004      	beq.n	8003fc8 <HAL_DAC_ConfigChannel+0x8c>
 8003fbe:	f240 31dd 	movw	r1, #989	; 0x3dd
 8003fc2:	482a      	ldr	r0, [pc, #168]	; (800406c <HAL_DAC_ConfigChannel+0x130>)
 8003fc4:	f7ff fa75 	bl	80034b2 <assert_failed>
  assert_param(IS_DAC_CHANNEL(Channel));
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d007      	beq.n	8003fde <HAL_DAC_ConfigChannel+0xa2>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b10      	cmp	r3, #16
 8003fd2:	d004      	beq.n	8003fde <HAL_DAC_ConfigChannel+0xa2>
 8003fd4:	f240 31de 	movw	r1, #990	; 0x3de
 8003fd8:	4824      	ldr	r0, [pc, #144]	; (800406c <HAL_DAC_ConfigChannel+0x130>)
 8003fda:	f7ff fa6a 	bl	80034b2 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	795b      	ldrb	r3, [r3, #5]
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d101      	bne.n	8003fea <HAL_DAC_ConfigChannel+0xae>
 8003fe6:	2302      	movs	r3, #2
 8003fe8:	e03c      	b.n	8004064 <HAL_DAC_ConfigChannel+0x128>
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2201      	movs	r2, #1
 8003fee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2202      	movs	r2, #2
 8003ff4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	f003 0310 	and.w	r3, r3, #16
 8004004:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004008:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800400c:	43db      	mvns	r3, r3
 800400e:	69ba      	ldr	r2, [r7, #24]
 8004010:	4013      	ands	r3, r2
 8004012:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f003 0310 	and.w	r3, r3, #16
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	fa02 f303 	lsl.w	r3, r2, r3
 800402c:	69ba      	ldr	r2, [r7, #24]
 800402e:	4313      	orrs	r3, r2
 8004030:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69ba      	ldr	r2, [r7, #24]
 8004038:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6819      	ldr	r1, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f003 0310 	and.w	r3, r3, #16
 8004046:	22c0      	movs	r2, #192	; 0xc0
 8004048:	fa02 f303 	lsl.w	r3, r2, r3
 800404c:	43da      	mvns	r2, r3
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	400a      	ands	r2, r1
 8004054:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	2201      	movs	r2, #1
 800405a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2200      	movs	r2, #0
 8004060:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004062:	7ffb      	ldrb	r3, [r7, #31]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3720      	adds	r7, #32
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}
 800406c:	0800ada8 	.word	0x0800ada8

08004070 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004082:	b580      	push	{r7, lr}
 8004084:	b084      	sub	sp, #16
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004090:	f7ff fcf8 	bl	8003a84 <HAL_GetTick>
 8004094:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d008      	beq.n	80040b4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	2280      	movs	r2, #128	; 0x80
 80040a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80040b0:	2301      	movs	r3, #1
 80040b2:	e052      	b.n	800415a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f022 0216 	bic.w	r2, r2, #22
 80040c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695a      	ldr	r2, [r3, #20]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80040d2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <HAL_DMA_Abort+0x62>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0208 	bic.w	r2, r2, #8
 80040f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f022 0201 	bic.w	r2, r2, #1
 8004102:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004104:	e013      	b.n	800412e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004106:	f7ff fcbd 	bl	8003a84 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	2b05      	cmp	r3, #5
 8004112:	d90c      	bls.n	800412e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2220      	movs	r2, #32
 8004118:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2203      	movs	r2, #3
 800411e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2200      	movs	r2, #0
 8004126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e015      	b.n	800415a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0301 	and.w	r3, r3, #1
 8004138:	2b00      	cmp	r3, #0
 800413a:	d1e4      	bne.n	8004106 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004140:	223f      	movs	r2, #63	; 0x3f
 8004142:	409a      	lsls	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004162:	b480      	push	{r7}
 8004164:	b083      	sub	sp, #12
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d004      	beq.n	8004180 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2280      	movs	r2, #128	; 0x80
 800417a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e00c      	b.n	800419a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2205      	movs	r2, #5
 8004184:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0201 	bic.w	r2, r2, #1
 8004196:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	370c      	adds	r7, #12
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr

080041a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b086      	sub	sp, #24
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	4a3e      	ldr	r2, [pc, #248]	; (80042b0 <HAL_GPIO_Init+0x10c>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d023      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a3d      	ldr	r2, [pc, #244]	; (80042b4 <HAL_GPIO_Init+0x110>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d01f      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4a3c      	ldr	r2, [pc, #240]	; (80042b8 <HAL_GPIO_Init+0x114>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d01b      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a3b      	ldr	r2, [pc, #236]	; (80042bc <HAL_GPIO_Init+0x118>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d017      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a3a      	ldr	r2, [pc, #232]	; (80042c0 <HAL_GPIO_Init+0x11c>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d013      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a39      	ldr	r2, [pc, #228]	; (80042c4 <HAL_GPIO_Init+0x120>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d00f      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a38      	ldr	r2, [pc, #224]	; (80042c8 <HAL_GPIO_Init+0x124>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d00b      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	4a37      	ldr	r2, [pc, #220]	; (80042cc <HAL_GPIO_Init+0x128>)
 80041ee:	4293      	cmp	r3, r2
 80041f0:	d007      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	4a36      	ldr	r2, [pc, #216]	; (80042d0 <HAL_GPIO_Init+0x12c>)
 80041f6:	4293      	cmp	r3, r2
 80041f8:	d003      	beq.n	8004202 <HAL_GPIO_Init+0x5e>
 80041fa:	21b0      	movs	r1, #176	; 0xb0
 80041fc:	4835      	ldr	r0, [pc, #212]	; (80042d4 <HAL_GPIO_Init+0x130>)
 80041fe:	f7ff f958 	bl	80034b2 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	b29b      	uxth	r3, r3
 8004208:	2b00      	cmp	r3, #0
 800420a:	d005      	beq.n	8004218 <HAL_GPIO_Init+0x74>
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	0c1b      	lsrs	r3, r3, #16
 8004212:	041b      	lsls	r3, r3, #16
 8004214:	2b00      	cmp	r3, #0
 8004216:	d003      	beq.n	8004220 <HAL_GPIO_Init+0x7c>
 8004218:	21b1      	movs	r1, #177	; 0xb1
 800421a:	482e      	ldr	r0, [pc, #184]	; (80042d4 <HAL_GPIO_Init+0x130>)
 800421c:	f7ff f949 	bl	80034b2 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	f000 82b8 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	2b01      	cmp	r3, #1
 8004230:	f000 82b3 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	2b11      	cmp	r3, #17
 800423a:	f000 82ae 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b02      	cmp	r3, #2
 8004244:	f000 82a9 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	2b12      	cmp	r3, #18
 800424e:	f000 82a4 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	f5b3 1f88 	cmp.w	r3, #1114112	; 0x110000
 800425a:	f000 829e 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8004266:	f000 8298 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 800426a:	683b      	ldr	r3, [r7, #0]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f5b3 1f44 	cmp.w	r3, #3211264	; 0x310000
 8004272:	f000 8292 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 1f90 	cmp.w	r3, #1179648	; 0x120000
 800427e:	f000 828c 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685b      	ldr	r3, [r3, #4]
 8004286:	f5b3 1f08 	cmp.w	r3, #2228224	; 0x220000
 800428a:	f000 8286 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	685b      	ldr	r3, [r3, #4]
 8004292:	f5b3 1f48 	cmp.w	r3, #3276800	; 0x320000
 8004296:	f000 8280 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	2b03      	cmp	r3, #3
 80042a0:	f000 827b 	beq.w	800479a <HAL_GPIO_Init+0x5f6>
 80042a4:	21b2      	movs	r1, #178	; 0xb2
 80042a6:	480b      	ldr	r0, [pc, #44]	; (80042d4 <HAL_GPIO_Init+0x130>)
 80042a8:	f7ff f903 	bl	80034b2 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80042ac:	e275      	b.n	800479a <HAL_GPIO_Init+0x5f6>
 80042ae:	bf00      	nop
 80042b0:	40020000 	.word	0x40020000
 80042b4:	40020400 	.word	0x40020400
 80042b8:	40020800 	.word	0x40020800
 80042bc:	40020c00 	.word	0x40020c00
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40021400 	.word	0x40021400
 80042c8:	40021800 	.word	0x40021800
 80042cc:	40021c00 	.word	0x40021c00
 80042d0:	40022000 	.word	0x40022000
 80042d4:	0800ade0 	.word	0x0800ade0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	2101      	movs	r1, #1
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	fa01 f303 	lsl.w	r3, r1, r3
 80042e4:	4013      	ands	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8252 	beq.w	8004794 <HAL_GPIO_Init+0x5f0>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	f003 0303 	and.w	r3, r3, #3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d005      	beq.n	8004308 <HAL_GPIO_Init+0x164>
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f003 0303 	and.w	r3, r3, #3
 8004304:	2b02      	cmp	r3, #2
 8004306:	d144      	bne.n	8004392 <HAL_GPIO_Init+0x1ee>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d00f      	beq.n	8004330 <HAL_GPIO_Init+0x18c>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d00b      	beq.n	8004330 <HAL_GPIO_Init+0x18c>
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	2b02      	cmp	r3, #2
 800431e:	d007      	beq.n	8004330 <HAL_GPIO_Init+0x18c>
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d003      	beq.n	8004330 <HAL_GPIO_Init+0x18c>
 8004328:	21c0      	movs	r1, #192	; 0xc0
 800432a:	4849      	ldr	r0, [pc, #292]	; (8004450 <HAL_GPIO_Init+0x2ac>)
 800432c:	f7ff f8c1 	bl	80034b2 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	2203      	movs	r2, #3
 800433c:	fa02 f303 	lsl.w	r3, r2, r3
 8004340:	43db      	mvns	r3, r3
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	4013      	ands	r3, r2
 8004346:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68da      	ldr	r2, [r3, #12]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	fa02 f303 	lsl.w	r3, r2, r3
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004366:	2201      	movs	r2, #1
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	fa02 f303 	lsl.w	r3, r2, r3
 800436e:	43db      	mvns	r3, r3
 8004370:	693a      	ldr	r2, [r7, #16]
 8004372:	4013      	ands	r3, r2
 8004374:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	685b      	ldr	r3, [r3, #4]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f003 0201 	and.w	r2, r3, #1
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	fa02 f303 	lsl.w	r3, r2, r3
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4313      	orrs	r3, r2
 800438a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 0303 	and.w	r3, r3, #3
 800439a:	2b03      	cmp	r3, #3
 800439c:	d027      	beq.n	80043ee <HAL_GPIO_Init+0x24a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d00b      	beq.n	80043be <HAL_GPIO_Init+0x21a>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d007      	beq.n	80043be <HAL_GPIO_Init+0x21a>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d003      	beq.n	80043be <HAL_GPIO_Init+0x21a>
 80043b6:	21d0      	movs	r1, #208	; 0xd0
 80043b8:	4825      	ldr	r0, [pc, #148]	; (8004450 <HAL_GPIO_Init+0x2ac>)
 80043ba:	f7ff f87a 	bl	80034b2 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4013      	ands	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	693a      	ldr	r2, [r7, #16]
 80043ec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	f040 80f0 	bne.w	80045dc <HAL_GPIO_Init+0x438>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	4a15      	ldr	r2, [pc, #84]	; (8004454 <HAL_GPIO_Init+0x2b0>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d039      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	4a14      	ldr	r2, [pc, #80]	; (8004458 <HAL_GPIO_Init+0x2b4>)
 8004408:	4293      	cmp	r3, r2
 800440a:	d035      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a13      	ldr	r2, [pc, #76]	; (800445c <HAL_GPIO_Init+0x2b8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d031      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a12      	ldr	r2, [pc, #72]	; (8004460 <HAL_GPIO_Init+0x2bc>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d02d      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	4a11      	ldr	r2, [pc, #68]	; (8004464 <HAL_GPIO_Init+0x2c0>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d029      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a10      	ldr	r2, [pc, #64]	; (8004468 <HAL_GPIO_Init+0x2c4>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d025      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0f      	ldr	r2, [pc, #60]	; (800446c <HAL_GPIO_Init+0x2c8>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d021      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a0e      	ldr	r2, [pc, #56]	; (8004470 <HAL_GPIO_Init+0x2cc>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d01d      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a0d      	ldr	r2, [pc, #52]	; (8004474 <HAL_GPIO_Init+0x2d0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d019      	beq.n	8004478 <HAL_GPIO_Init+0x2d4>
 8004444:	21de      	movs	r1, #222	; 0xde
 8004446:	4802      	ldr	r0, [pc, #8]	; (8004450 <HAL_GPIO_Init+0x2ac>)
 8004448:	f7ff f833 	bl	80034b2 <assert_failed>
 800444c:	e014      	b.n	8004478 <HAL_GPIO_Init+0x2d4>
 800444e:	bf00      	nop
 8004450:	0800ade0 	.word	0x0800ade0
 8004454:	40020000 	.word	0x40020000
 8004458:	40020400 	.word	0x40020400
 800445c:	40020800 	.word	0x40020800
 8004460:	40020c00 	.word	0x40020c00
 8004464:	40021000 	.word	0x40021000
 8004468:	40021400 	.word	0x40021400
 800446c:	40021800 	.word	0x40021800
 8004470:	40021c00 	.word	0x40021c00
 8004474:	40022000 	.word	0x40022000
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8089 	beq.w	8004594 <HAL_GPIO_Init+0x3f0>
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	2b09      	cmp	r3, #9
 8004488:	f000 8084 	beq.w	8004594 <HAL_GPIO_Init+0x3f0>
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	691b      	ldr	r3, [r3, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d07f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	691b      	ldr	r3, [r3, #16]
 8004498:	2b00      	cmp	r3, #0
 800449a:	d07b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	691b      	ldr	r3, [r3, #16]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d077      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d073      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d06f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d06b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	2b02      	cmp	r3, #2
 80044c2:	d067      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d063      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d05f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	691b      	ldr	r3, [r3, #16]
 80044d8:	2b03      	cmp	r3, #3
 80044da:	d05b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d057      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b04      	cmp	r3, #4
 80044ea:	d053      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	2b04      	cmp	r3, #4
 80044f2:	d04f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	2b05      	cmp	r3, #5
 80044fa:	d04b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	691b      	ldr	r3, [r3, #16]
 8004500:	2b05      	cmp	r3, #5
 8004502:	d047      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	691b      	ldr	r3, [r3, #16]
 8004508:	2b09      	cmp	r3, #9
 800450a:	d043      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	2b06      	cmp	r3, #6
 8004512:	d03f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691b      	ldr	r3, [r3, #16]
 8004518:	2b09      	cmp	r3, #9
 800451a:	d03b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	2b07      	cmp	r3, #7
 8004522:	d037      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	2b07      	cmp	r3, #7
 800452a:	d033      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	691b      	ldr	r3, [r3, #16]
 8004530:	2b07      	cmp	r3, #7
 8004532:	d02f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	691b      	ldr	r3, [r3, #16]
 8004538:	2b08      	cmp	r3, #8
 800453a:	d02b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	691b      	ldr	r3, [r3, #16]
 8004540:	2b08      	cmp	r3, #8
 8004542:	d027      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	691b      	ldr	r3, [r3, #16]
 8004548:	2b08      	cmp	r3, #8
 800454a:	d023      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	2b09      	cmp	r3, #9
 8004552:	d01f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	2b09      	cmp	r3, #9
 800455a:	d01b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	691b      	ldr	r3, [r3, #16]
 8004560:	2b0a      	cmp	r3, #10
 8004562:	d017      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	2b0a      	cmp	r3, #10
 800456a:	d013      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	2b0c      	cmp	r3, #12
 8004572:	d00f      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	2b0c      	cmp	r3, #12
 800457a:	d00b      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	2b0c      	cmp	r3, #12
 8004582:	d007      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b0f      	cmp	r3, #15
 800458a:	d003      	beq.n	8004594 <HAL_GPIO_Init+0x3f0>
 800458c:	21df      	movs	r1, #223	; 0xdf
 800458e:	4889      	ldr	r0, [pc, #548]	; (80047b4 <HAL_GPIO_Init+0x610>)
 8004590:	f7fe ff8f 	bl	80034b2 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	08da      	lsrs	r2, r3, #3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	3208      	adds	r2, #8
 800459c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	f003 0307 	and.w	r3, r3, #7
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	220f      	movs	r2, #15
 80045ac:	fa02 f303 	lsl.w	r3, r2, r3
 80045b0:	43db      	mvns	r3, r3
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	4013      	ands	r3, r2
 80045b6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	691a      	ldr	r2, [r3, #16]
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f003 0307 	and.w	r3, r3, #7
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	fa02 f303 	lsl.w	r3, r2, r3
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	08da      	lsrs	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	3208      	adds	r2, #8
 80045d6:	6939      	ldr	r1, [r7, #16]
 80045d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	2203      	movs	r2, #3
 80045e8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ec:	43db      	mvns	r3, r3
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	4013      	ands	r3, r2
 80045f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	f003 0203 	and.w	r2, r3, #3
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	005b      	lsls	r3, r3, #1
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	693a      	ldr	r2, [r7, #16]
 8004606:	4313      	orrs	r3, r2
 8004608:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004618:	2b00      	cmp	r3, #0
 800461a:	f000 80bb 	beq.w	8004794 <HAL_GPIO_Init+0x5f0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b65      	ldr	r3, [pc, #404]	; (80047b8 <HAL_GPIO_Init+0x614>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	4a64      	ldr	r2, [pc, #400]	; (80047b8 <HAL_GPIO_Init+0x614>)
 8004628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800462c:	6453      	str	r3, [r2, #68]	; 0x44
 800462e:	4b62      	ldr	r3, [pc, #392]	; (80047b8 <HAL_GPIO_Init+0x614>)
 8004630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800463a:	4a60      	ldr	r2, [pc, #384]	; (80047bc <HAL_GPIO_Init+0x618>)
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	089b      	lsrs	r3, r3, #2
 8004640:	3302      	adds	r3, #2
 8004642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004646:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	f003 0303 	and.w	r3, r3, #3
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	220f      	movs	r2, #15
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	43db      	mvns	r3, r3
 8004658:	693a      	ldr	r2, [r7, #16]
 800465a:	4013      	ands	r3, r2
 800465c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	4a57      	ldr	r2, [pc, #348]	; (80047c0 <HAL_GPIO_Init+0x61c>)
 8004662:	4293      	cmp	r3, r2
 8004664:	d031      	beq.n	80046ca <HAL_GPIO_Init+0x526>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	4a56      	ldr	r2, [pc, #344]	; (80047c4 <HAL_GPIO_Init+0x620>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d02b      	beq.n	80046c6 <HAL_GPIO_Init+0x522>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a55      	ldr	r2, [pc, #340]	; (80047c8 <HAL_GPIO_Init+0x624>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d025      	beq.n	80046c2 <HAL_GPIO_Init+0x51e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a54      	ldr	r2, [pc, #336]	; (80047cc <HAL_GPIO_Init+0x628>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01f      	beq.n	80046be <HAL_GPIO_Init+0x51a>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a53      	ldr	r2, [pc, #332]	; (80047d0 <HAL_GPIO_Init+0x62c>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d019      	beq.n	80046ba <HAL_GPIO_Init+0x516>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	4a52      	ldr	r2, [pc, #328]	; (80047d4 <HAL_GPIO_Init+0x630>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d013      	beq.n	80046b6 <HAL_GPIO_Init+0x512>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_GPIO_Init+0x634>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d00d      	beq.n	80046b2 <HAL_GPIO_Init+0x50e>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a50      	ldr	r2, [pc, #320]	; (80047dc <HAL_GPIO_Init+0x638>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d007      	beq.n	80046ae <HAL_GPIO_Init+0x50a>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4a4f      	ldr	r2, [pc, #316]	; (80047e0 <HAL_GPIO_Init+0x63c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d101      	bne.n	80046aa <HAL_GPIO_Init+0x506>
 80046a6:	2308      	movs	r3, #8
 80046a8:	e010      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046aa:	2309      	movs	r3, #9
 80046ac:	e00e      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046ae:	2307      	movs	r3, #7
 80046b0:	e00c      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046b2:	2306      	movs	r3, #6
 80046b4:	e00a      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046b6:	2305      	movs	r3, #5
 80046b8:	e008      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046ba:	2304      	movs	r3, #4
 80046bc:	e006      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046be:	2303      	movs	r3, #3
 80046c0:	e004      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046c2:	2302      	movs	r3, #2
 80046c4:	e002      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046c6:	2301      	movs	r3, #1
 80046c8:	e000      	b.n	80046cc <HAL_GPIO_Init+0x528>
 80046ca:	2300      	movs	r3, #0
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	f002 0203 	and.w	r2, r2, #3
 80046d2:	0092      	lsls	r2, r2, #2
 80046d4:	4093      	lsls	r3, r2
 80046d6:	461a      	mov	r2, r3
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4313      	orrs	r3, r2
 80046dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80046de:	4937      	ldr	r1, [pc, #220]	; (80047bc <HAL_GPIO_Init+0x618>)
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	089b      	lsrs	r3, r3, #2
 80046e4:	3302      	adds	r3, #2
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046ec:	4b3d      	ldr	r3, [pc, #244]	; (80047e4 <HAL_GPIO_Init+0x640>)
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	693a      	ldr	r2, [r7, #16]
 80046f8:	4013      	ands	r3, r2
 80046fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x56c>
        {
          temp |= iocurrent;
 8004708:	693a      	ldr	r2, [r7, #16]
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	4313      	orrs	r3, r2
 800470e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004710:	4a34      	ldr	r2, [pc, #208]	; (80047e4 <HAL_GPIO_Init+0x640>)
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004716:	4b33      	ldr	r3, [pc, #204]	; (80047e4 <HAL_GPIO_Init+0x640>)
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <HAL_GPIO_Init+0x596>
        {
          temp |= iocurrent;
 8004732:	693a      	ldr	r2, [r7, #16]
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4313      	orrs	r3, r2
 8004738:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800473a:	4a2a      	ldr	r2, [pc, #168]	; (80047e4 <HAL_GPIO_Init+0x640>)
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004740:	4b28      	ldr	r3, [pc, #160]	; (80047e4 <HAL_GPIO_Init+0x640>)
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	43db      	mvns	r3, r3
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	4013      	ands	r3, r2
 800474e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	685b      	ldr	r3, [r3, #4]
 8004754:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d003      	beq.n	8004764 <HAL_GPIO_Init+0x5c0>
        {
          temp |= iocurrent;
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	4313      	orrs	r3, r2
 8004762:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8004764:	4a1f      	ldr	r2, [pc, #124]	; (80047e4 <HAL_GPIO_Init+0x640>)
 8004766:	693b      	ldr	r3, [r7, #16]
 8004768:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800476a:	4b1e      	ldr	r3, [pc, #120]	; (80047e4 <HAL_GPIO_Init+0x640>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	43db      	mvns	r3, r3
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4013      	ands	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d003      	beq.n	800478e <HAL_GPIO_Init+0x5ea>
        {
          temp |= iocurrent;
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	4313      	orrs	r3, r2
 800478c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800478e:	4a15      	ldr	r2, [pc, #84]	; (80047e4 <HAL_GPIO_Init+0x640>)
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	3301      	adds	r3, #1
 8004798:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	fa22 f303 	lsr.w	r3, r2, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f ad97 	bne.w	80042d8 <HAL_GPIO_Init+0x134>
  }
}
 80047aa:	bf00      	nop
 80047ac:	bf00      	nop
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	0800ade0 	.word	0x0800ade0
 80047b8:	40023800 	.word	0x40023800
 80047bc:	40013800 	.word	0x40013800
 80047c0:	40020000 	.word	0x40020000
 80047c4:	40020400 	.word	0x40020400
 80047c8:	40020800 	.word	0x40020800
 80047cc:	40020c00 	.word	0x40020c00
 80047d0:	40021000 	.word	0x40021000
 80047d4:	40021400 	.word	0x40021400
 80047d8:	40021800 	.word	0x40021800
 80047dc:	40021c00 	.word	0x40021c00
 80047e0:	40022000 	.word	0x40022000
 80047e4:	40013c00 	.word	0x40013c00

080047e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	460b      	mov	r3, r1
 80047f2:	807b      	strh	r3, [r7, #2]
 80047f4:	4613      	mov	r3, r2
 80047f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80047f8:	887b      	ldrh	r3, [r7, #2]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d004      	beq.n	8004808 <HAL_GPIO_WritePin+0x20>
 80047fe:	887b      	ldrh	r3, [r7, #2]
 8004800:	0c1b      	lsrs	r3, r3, #16
 8004802:	041b      	lsls	r3, r3, #16
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_GPIO_WritePin+0x2a>
 8004808:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
 800480c:	480e      	ldr	r0, [pc, #56]	; (8004848 <HAL_GPIO_WritePin+0x60>)
 800480e:	f7fe fe50 	bl	80034b2 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004812:	787b      	ldrb	r3, [r7, #1]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d007      	beq.n	8004828 <HAL_GPIO_WritePin+0x40>
 8004818:	787b      	ldrb	r3, [r7, #1]
 800481a:	2b01      	cmp	r3, #1
 800481c:	d004      	beq.n	8004828 <HAL_GPIO_WritePin+0x40>
 800481e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8004822:	4809      	ldr	r0, [pc, #36]	; (8004848 <HAL_GPIO_WritePin+0x60>)
 8004824:	f7fe fe45 	bl	80034b2 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004828:	787b      	ldrb	r3, [r7, #1]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800482e:	887a      	ldrh	r2, [r7, #2]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004834:	e003      	b.n	800483e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004836:	887b      	ldrh	r3, [r7, #2]
 8004838:	041a      	lsls	r2, r3, #16
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	619a      	str	r2, [r3, #24]
}
 800483e:	bf00      	nop
 8004840:	3708      	adds	r7, #8
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}
 8004846:	bf00      	nop
 8004848:	0800ade0 	.word	0x0800ade0

0800484c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b08a      	sub	sp, #40	; 0x28
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
 800485c:	e2f0      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2b0f      	cmp	r3, #15
 8004864:	d904      	bls.n	8004870 <HAL_RCC_OscConfig+0x24>
 8004866:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800486a:	489a      	ldr	r0, [pc, #616]	; (8004ad4 <HAL_RCC_OscConfig+0x288>)
 800486c:	f7fe fe21 	bl	80034b2 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0301 	and.w	r3, r3, #1
 8004878:	2b00      	cmp	r3, #0
 800487a:	d061      	beq.n	8004940 <HAL_RCC_OscConfig+0xf4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00c      	beq.n	800489e <HAL_RCC_OscConfig+0x52>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d008      	beq.n	800489e <HAL_RCC_OscConfig+0x52>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	2b05      	cmp	r3, #5
 8004892:	d004      	beq.n	800489e <HAL_RCC_OscConfig+0x52>
 8004894:	f240 1167 	movw	r1, #359	; 0x167
 8004898:	488e      	ldr	r0, [pc, #568]	; (8004ad4 <HAL_RCC_OscConfig+0x288>)
 800489a:	f7fe fe0a 	bl	80034b2 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800489e:	4b8e      	ldr	r3, [pc, #568]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f003 030c 	and.w	r3, r3, #12
 80048a6:	2b04      	cmp	r3, #4
 80048a8:	d00c      	beq.n	80048c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048aa:	4b8b      	ldr	r3, [pc, #556]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048b2:	2b08      	cmp	r3, #8
 80048b4:	d112      	bne.n	80048dc <HAL_RCC_OscConfig+0x90>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048b6:	4b88      	ldr	r3, [pc, #544]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048c2:	d10b      	bne.n	80048dc <HAL_RCC_OscConfig+0x90>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048c4:	4b84      	ldr	r3, [pc, #528]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d036      	beq.n	800493e <HAL_RCC_OscConfig+0xf2>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d132      	bne.n	800493e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e2b1      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	685a      	ldr	r2, [r3, #4]
 80048e0:	4b7e      	ldr	r3, [pc, #504]	; (8004adc <HAL_RCC_OscConfig+0x290>)
 80048e2:	b2d2      	uxtb	r2, r2
 80048e4:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d013      	beq.n	8004916 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ee:	f7ff f8c9 	bl	8003a84 <HAL_GetTick>
 80048f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048f4:	e008      	b.n	8004908 <HAL_RCC_OscConfig+0xbc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f6:	f7ff f8c5 	bl	8003a84 <HAL_GetTick>
 80048fa:	4602      	mov	r2, r0
 80048fc:	6a3b      	ldr	r3, [r7, #32]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b64      	cmp	r3, #100	; 0x64
 8004902:	d901      	bls.n	8004908 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8004904:	2303      	movs	r3, #3
 8004906:	e29b      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004908:	4b73      	ldr	r3, [pc, #460]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004910:	2b00      	cmp	r3, #0
 8004912:	d0f0      	beq.n	80048f6 <HAL_RCC_OscConfig+0xaa>
 8004914:	e014      	b.n	8004940 <HAL_RCC_OscConfig+0xf4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004916:	f7ff f8b5 	bl	8003a84 <HAL_GetTick>
 800491a:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800491c:	e008      	b.n	8004930 <HAL_RCC_OscConfig+0xe4>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800491e:	f7ff f8b1 	bl	8003a84 <HAL_GetTick>
 8004922:	4602      	mov	r2, r0
 8004924:	6a3b      	ldr	r3, [r7, #32]
 8004926:	1ad3      	subs	r3, r2, r3
 8004928:	2b64      	cmp	r3, #100	; 0x64
 800492a:	d901      	bls.n	8004930 <HAL_RCC_OscConfig+0xe4>
          {
            return HAL_TIMEOUT;
 800492c:	2303      	movs	r3, #3
 800492e:	e287      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004930:	4b69      	ldr	r3, [pc, #420]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004938:	2b00      	cmp	r3, #0
 800493a:	d1f0      	bne.n	800491e <HAL_RCC_OscConfig+0xd2>
 800493c:	e000      	b.n	8004940 <HAL_RCC_OscConfig+0xf4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800493e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 808e 	beq.w	8004a6a <HAL_RCC_OscConfig+0x21e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d008      	beq.n	8004968 <HAL_RCC_OscConfig+0x11c>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	2b01      	cmp	r3, #1
 800495c:	d004      	beq.n	8004968 <HAL_RCC_OscConfig+0x11c>
 800495e:	f240 1199 	movw	r1, #409	; 0x199
 8004962:	485c      	ldr	r0, [pc, #368]	; (8004ad4 <HAL_RCC_OscConfig+0x288>)
 8004964:	f7fe fda5 	bl	80034b2 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	2b1f      	cmp	r3, #31
 800496e:	d904      	bls.n	800497a <HAL_RCC_OscConfig+0x12e>
 8004970:	f44f 71cd 	mov.w	r1, #410	; 0x19a
 8004974:	4857      	ldr	r0, [pc, #348]	; (8004ad4 <HAL_RCC_OscConfig+0x288>)
 8004976:	f7fe fd9c 	bl	80034b2 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800497a:	4b57      	ldr	r3, [pc, #348]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	f003 030c 	and.w	r3, r3, #12
 8004982:	2b00      	cmp	r3, #0
 8004984:	d00b      	beq.n	800499e <HAL_RCC_OscConfig+0x152>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004986:	4b54      	ldr	r3, [pc, #336]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800498e:	2b08      	cmp	r3, #8
 8004990:	d126      	bne.n	80049e0 <HAL_RCC_OscConfig+0x194>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004992:	4b51      	ldr	r3, [pc, #324]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004994:	685b      	ldr	r3, [r3, #4]
 8004996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d120      	bne.n	80049e0 <HAL_RCC_OscConfig+0x194>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800499e:	4b4e      	ldr	r3, [pc, #312]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0302 	and.w	r3, r3, #2
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x16a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d001      	beq.n	80049b6 <HAL_RCC_OscConfig+0x16a>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e244      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049b6:	4b48      	ldr	r3, [pc, #288]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	21f8      	movs	r1, #248	; 0xf8
 80049c4:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	69b9      	ldr	r1, [r7, #24]
 80049c8:	fa91 f1a1 	rbit	r1, r1
 80049cc:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80049ce:	6979      	ldr	r1, [r7, #20]
 80049d0:	fab1 f181 	clz	r1, r1
 80049d4:	b2c9      	uxtb	r1, r1
 80049d6:	408b      	lsls	r3, r1
 80049d8:	493f      	ldr	r1, [pc, #252]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 80049da:	4313      	orrs	r3, r2
 80049dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049de:	e044      	b.n	8004a6a <HAL_RCC_OscConfig+0x21e>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	68db      	ldr	r3, [r3, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d02a      	beq.n	8004a3e <HAL_RCC_OscConfig+0x1f2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049e8:	4b3d      	ldr	r3, [pc, #244]	; (8004ae0 <HAL_RCC_OscConfig+0x294>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049ee:	f7ff f849 	bl	8003a84 <HAL_GetTick>
 80049f2:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049f4:	e008      	b.n	8004a08 <HAL_RCC_OscConfig+0x1bc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049f6:	f7ff f845 	bl	8003a84 <HAL_GetTick>
 80049fa:	4602      	mov	r2, r0
 80049fc:	6a3b      	ldr	r3, [r7, #32]
 80049fe:	1ad3      	subs	r3, r2, r3
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	d901      	bls.n	8004a08 <HAL_RCC_OscConfig+0x1bc>
          {
            return HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	e21b      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a08:	4b33      	ldr	r3, [pc, #204]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 0302 	and.w	r3, r3, #2
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d0f0      	beq.n	80049f6 <HAL_RCC_OscConfig+0x1aa>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a14:	4b30      	ldr	r3, [pc, #192]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	21f8      	movs	r1, #248	; 0xf8
 8004a22:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a24:	6939      	ldr	r1, [r7, #16]
 8004a26:	fa91 f1a1 	rbit	r1, r1
 8004a2a:	60f9      	str	r1, [r7, #12]
  return result;
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	fab1 f181 	clz	r1, r1
 8004a32:	b2c9      	uxtb	r1, r1
 8004a34:	408b      	lsls	r3, r1
 8004a36:	4928      	ldr	r1, [pc, #160]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	600b      	str	r3, [r1, #0]
 8004a3c:	e015      	b.n	8004a6a <HAL_RCC_OscConfig+0x21e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a3e:	4b28      	ldr	r3, [pc, #160]	; (8004ae0 <HAL_RCC_OscConfig+0x294>)
 8004a40:	2200      	movs	r2, #0
 8004a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a44:	f7ff f81e 	bl	8003a84 <HAL_GetTick>
 8004a48:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a4a:	e008      	b.n	8004a5e <HAL_RCC_OscConfig+0x212>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a4c:	f7ff f81a 	bl	8003a84 <HAL_GetTick>
 8004a50:	4602      	mov	r2, r0
 8004a52:	6a3b      	ldr	r3, [r7, #32]
 8004a54:	1ad3      	subs	r3, r2, r3
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d901      	bls.n	8004a5e <HAL_RCC_OscConfig+0x212>
          {
            return HAL_TIMEOUT;
 8004a5a:	2303      	movs	r3, #3
 8004a5c:	e1f0      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5e:	4b1e      	ldr	r3, [pc, #120]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f003 0302 	and.w	r3, r3, #2
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d1f0      	bne.n	8004a4c <HAL_RCC_OscConfig+0x200>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0308 	and.w	r3, r3, #8
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d047      	beq.n	8004b06 <HAL_RCC_OscConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d008      	beq.n	8004a90 <HAL_RCC_OscConfig+0x244>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	695b      	ldr	r3, [r3, #20]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d004      	beq.n	8004a90 <HAL_RCC_OscConfig+0x244>
 8004a86:	f44f 71ed 	mov.w	r1, #474	; 0x1da
 8004a8a:	4812      	ldr	r0, [pc, #72]	; (8004ad4 <HAL_RCC_OscConfig+0x288>)
 8004a8c:	f7fe fd11 	bl	80034b2 <assert_failed>

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d016      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x27a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a98:	4b12      	ldr	r3, [pc, #72]	; (8004ae4 <HAL_RCC_OscConfig+0x298>)
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a9e:	f7fe fff1 	bl	8003a84 <HAL_GetTick>
 8004aa2:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa4:	e008      	b.n	8004ab8 <HAL_RCC_OscConfig+0x26c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004aa6:	f7fe ffed 	bl	8003a84 <HAL_GetTick>
 8004aaa:	4602      	mov	r2, r0
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	1ad3      	subs	r3, r2, r3
 8004ab0:	2b02      	cmp	r3, #2
 8004ab2:	d901      	bls.n	8004ab8 <HAL_RCC_OscConfig+0x26c>
        {
          return HAL_TIMEOUT;
 8004ab4:	2303      	movs	r3, #3
 8004ab6:	e1c3      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab8:	4b07      	ldr	r3, [pc, #28]	; (8004ad8 <HAL_RCC_OscConfig+0x28c>)
 8004aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abc:	f003 0302 	and.w	r3, r3, #2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d0f0      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x25a>
 8004ac4:	e01f      	b.n	8004b06 <HAL_RCC_OscConfig+0x2ba>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac6:	4b07      	ldr	r3, [pc, #28]	; (8004ae4 <HAL_RCC_OscConfig+0x298>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004acc:	f7fe ffda 	bl	8003a84 <HAL_GetTick>
 8004ad0:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad2:	e012      	b.n	8004afa <HAL_RCC_OscConfig+0x2ae>
 8004ad4:	0800ae1c 	.word	0x0800ae1c
 8004ad8:	40023800 	.word	0x40023800
 8004adc:	40023802 	.word	0x40023802
 8004ae0:	42470000 	.word	0x42470000
 8004ae4:	42470e80 	.word	0x42470e80
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ae8:	f7fe ffcc 	bl	8003a84 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x2ae>
        {
          return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e1a2      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afa:	4b9d      	ldr	r3, [pc, #628]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x29c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0304 	and.w	r3, r3, #4
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	f000 808e 	beq.w	8004c30 <HAL_RCC_OscConfig+0x3e4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b14:	2300      	movs	r3, #0
 8004b16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d00c      	beq.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d008      	beq.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d004      	beq.n	8004b3c <HAL_RCC_OscConfig+0x2f0>
 8004b32:	f240 2106 	movw	r1, #518	; 0x206
 8004b36:	488f      	ldr	r0, [pc, #572]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004b38:	f7fe fcbb 	bl	80034b2 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b3c:	4b8c      	ldr	r3, [pc, #560]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d110      	bne.n	8004b6a <HAL_RCC_OscConfig+0x31e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b48:	2300      	movs	r3, #0
 8004b4a:	60bb      	str	r3, [r7, #8]
 8004b4c:	4b88      	ldr	r3, [pc, #544]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b50:	4a87      	ldr	r2, [pc, #540]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b56:	6413      	str	r3, [r2, #64]	; 0x40
 8004b58:	4b85      	ldr	r3, [pc, #532]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b64:	2301      	movs	r3, #1
 8004b66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004b6a:	4b83      	ldr	r3, [pc, #524]	; (8004d78 <HAL_RCC_OscConfig+0x52c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a82      	ldr	r2, [pc, #520]	; (8004d78 <HAL_RCC_OscConfig+0x52c>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b74:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b76:	4b80      	ldr	r3, [pc, #512]	; (8004d78 <HAL_RCC_OscConfig+0x52c>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d118      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x368>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b82:	4b7d      	ldr	r3, [pc, #500]	; (8004d78 <HAL_RCC_OscConfig+0x52c>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a7c      	ldr	r2, [pc, #496]	; (8004d78 <HAL_RCC_OscConfig+0x52c>)
 8004b88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b8e:	f7fe ff79 	bl	8003a84 <HAL_GetTick>
 8004b92:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b94:	e008      	b.n	8004ba8 <HAL_RCC_OscConfig+0x35c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b96:	f7fe ff75 	bl	8003a84 <HAL_GetTick>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	6a3b      	ldr	r3, [r7, #32]
 8004b9e:	1ad3      	subs	r3, r2, r3
 8004ba0:	2b02      	cmp	r3, #2
 8004ba2:	d901      	bls.n	8004ba8 <HAL_RCC_OscConfig+0x35c>
        {
          return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e14b      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba8:	4b73      	ldr	r3, [pc, #460]	; (8004d78 <HAL_RCC_OscConfig+0x52c>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d0f0      	beq.n	8004b96 <HAL_RCC_OscConfig+0x34a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	689a      	ldr	r2, [r3, #8]
 8004bb8:	4b70      	ldr	r3, [pc, #448]	; (8004d7c <HAL_RCC_OscConfig+0x530>)
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	689b      	ldr	r3, [r3, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d015      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x3a6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bc6:	f7fe ff5d 	bl	8003a84 <HAL_GetTick>
 8004bca:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bcc:	e00a      	b.n	8004be4 <HAL_RCC_OscConfig+0x398>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bce:	f7fe ff59 	bl	8003a84 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bdc:	4293      	cmp	r3, r2
 8004bde:	d901      	bls.n	8004be4 <HAL_RCC_OscConfig+0x398>
        {
          return HAL_TIMEOUT;
 8004be0:	2303      	movs	r3, #3
 8004be2:	e12d      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be4:	4b62      	ldr	r3, [pc, #392]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f003 0302 	and.w	r3, r3, #2
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0ee      	beq.n	8004bce <HAL_RCC_OscConfig+0x382>
 8004bf0:	e014      	b.n	8004c1c <HAL_RCC_OscConfig+0x3d0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bf2:	f7fe ff47 	bl	8003a84 <HAL_GetTick>
 8004bf6:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x3c4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fe ff43 	bl	8003a84 <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x3c4>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e117      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c10:	4b57      	ldr	r3, [pc, #348]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ee      	bne.n	8004bfa <HAL_RCC_OscConfig+0x3ae>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c1c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d105      	bne.n	8004c30 <HAL_RCC_OscConfig+0x3e4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c24:	4b52      	ldr	r3, [pc, #328]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	4a51      	ldr	r2, [pc, #324]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c2e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	699b      	ldr	r3, [r3, #24]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00c      	beq.n	8004c52 <HAL_RCC_OscConfig+0x406>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	699b      	ldr	r3, [r3, #24]
 8004c3c:	2b01      	cmp	r3, #1
 8004c3e:	d008      	beq.n	8004c52 <HAL_RCC_OscConfig+0x406>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	699b      	ldr	r3, [r3, #24]
 8004c44:	2b02      	cmp	r3, #2
 8004c46:	d004      	beq.n	8004c52 <HAL_RCC_OscConfig+0x406>
 8004c48:	f44f 7113 	mov.w	r1, #588	; 0x24c
 8004c4c:	4849      	ldr	r0, [pc, #292]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004c4e:	f7fe fc30 	bl	80034b2 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	699b      	ldr	r3, [r3, #24]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 80f1 	beq.w	8004e3e <HAL_RCC_OscConfig+0x5f2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5c:	4b44      	ldr	r3, [pc, #272]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	2b08      	cmp	r3, #8
 8004c66:	f000 80b6 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x58a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	f040 809a 	bne.w	8004da8 <HAL_RCC_OscConfig+0x55c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	69db      	ldr	r3, [r3, #28]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d009      	beq.n	8004c90 <HAL_RCC_OscConfig+0x444>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	69db      	ldr	r3, [r3, #28]
 8004c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c84:	d004      	beq.n	8004c90 <HAL_RCC_OscConfig+0x444>
 8004c86:	f240 2155 	movw	r1, #597	; 0x255
 8004c8a:	483a      	ldr	r0, [pc, #232]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004c8c:	f7fe fc11 	bl	80034b2 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a1b      	ldr	r3, [r3, #32]
 8004c94:	2b3f      	cmp	r3, #63	; 0x3f
 8004c96:	d904      	bls.n	8004ca2 <HAL_RCC_OscConfig+0x456>
 8004c98:	f240 2156 	movw	r1, #598	; 0x256
 8004c9c:	4835      	ldr	r0, [pc, #212]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004c9e:	f7fe fc08 	bl	80034b2 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca6:	2bbf      	cmp	r3, #191	; 0xbf
 8004ca8:	d904      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x468>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cae:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 8004cb2:	d904      	bls.n	8004cbe <HAL_RCC_OscConfig+0x472>
 8004cb4:	f240 2157 	movw	r1, #599	; 0x257
 8004cb8:	482e      	ldr	r0, [pc, #184]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004cba:	f7fe fbfa 	bl	80034b2 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d010      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x49c>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cca:	2b04      	cmp	r3, #4
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x49c>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d008      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x49c>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cda:	2b08      	cmp	r3, #8
 8004cdc:	d004      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x49c>
 8004cde:	f44f 7116 	mov.w	r1, #600	; 0x258
 8004ce2:	4824      	ldr	r0, [pc, #144]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004ce4:	f7fe fbe5 	bl	80034b2 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d903      	bls.n	8004cf8 <HAL_RCC_OscConfig+0x4ac>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	2b0f      	cmp	r3, #15
 8004cf6:	d904      	bls.n	8004d02 <HAL_RCC_OscConfig+0x4b6>
 8004cf8:	f240 2159 	movw	r1, #601	; 0x259
 8004cfc:	481d      	ldr	r0, [pc, #116]	; (8004d74 <HAL_RCC_OscConfig+0x528>)
 8004cfe:	f7fe fbd8 	bl	80034b2 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d02:	4b1f      	ldr	r3, [pc, #124]	; (8004d80 <HAL_RCC_OscConfig+0x534>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d08:	f7fe febc 	bl	8003a84 <HAL_GetTick>
 8004d0c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x4d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d10:	f7fe feb8 	bl	8003a84 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6a3b      	ldr	r3, [r7, #32]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b64      	cmp	r3, #100	; 0x64
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x4d6>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e08e      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x4c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	4b14      	ldr	r3, [pc, #80]	; (8004d84 <HAL_RCC_OscConfig+0x538>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	69d1      	ldr	r1, [r2, #28]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6a12      	ldr	r2, [r2, #32]
 8004d3e:	4311      	orrs	r1, r2
 8004d40:	687a      	ldr	r2, [r7, #4]
 8004d42:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d44:	0192      	lsls	r2, r2, #6
 8004d46:	4311      	orrs	r1, r2
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004d4c:	0612      	lsls	r2, r2, #24
 8004d4e:	4311      	orrs	r1, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004d54:	0852      	lsrs	r2, r2, #1
 8004d56:	3a01      	subs	r2, #1
 8004d58:	0412      	lsls	r2, r2, #16
 8004d5a:	430a      	orrs	r2, r1
 8004d5c:	4904      	ldr	r1, [pc, #16]	; (8004d70 <HAL_RCC_OscConfig+0x524>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <HAL_RCC_OscConfig+0x534>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d68:	f7fe fe8c 	bl	8003a84 <HAL_GetTick>
 8004d6c:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6e:	e014      	b.n	8004d9a <HAL_RCC_OscConfig+0x54e>
 8004d70:	40023800 	.word	0x40023800
 8004d74:	0800ae1c 	.word	0x0800ae1c
 8004d78:	40007000 	.word	0x40007000
 8004d7c:	40023870 	.word	0x40023870
 8004d80:	42470060 	.word	0x42470060
 8004d84:	f0bc8000 	.word	0xf0bc8000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d88:	f7fe fe7c 	bl	8003a84 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x54e>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e052      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d9a:	4b2b      	ldr	r3, [pc, #172]	; (8004e48 <HAL_RCC_OscConfig+0x5fc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x53c>
 8004da6:	e04a      	b.n	8004e3e <HAL_RCC_OscConfig+0x5f2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da8:	4b28      	ldr	r3, [pc, #160]	; (8004e4c <HAL_RCC_OscConfig+0x600>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dae:	f7fe fe69 	bl	8003a84 <HAL_GetTick>
 8004db2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x57c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004db6:	f7fe fe65 	bl	8003a84 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b64      	cmp	r3, #100	; 0x64
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e03b      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc8:	4b1f      	ldr	r3, [pc, #124]	; (8004e48 <HAL_RCC_OscConfig+0x5fc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f0      	bne.n	8004db6 <HAL_RCC_OscConfig+0x56a>
 8004dd4:	e033      	b.n	8004e3e <HAL_RCC_OscConfig+0x5f2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	2b01      	cmp	r3, #1
 8004ddc:	d101      	bne.n	8004de2 <HAL_RCC_OscConfig+0x596>
      {
        return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e02e      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8004de2:	4b19      	ldr	r3, [pc, #100]	; (8004e48 <HAL_RCC_OscConfig+0x5fc>)
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d121      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d11a      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e04:	69fa      	ldr	r2, [r7, #28]
 8004e06:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e0a:	4013      	ands	r3, r2
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e10:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e12:	4293      	cmp	r3, r2
 8004e14:	d111      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e20:	085b      	lsrs	r3, r3, #1
 8004e22:	3b01      	subs	r3, #1
 8004e24:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d107      	bne.n	8004e3a <HAL_RCC_OscConfig+0x5ee>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e34:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d001      	beq.n	8004e3e <HAL_RCC_OscConfig+0x5f2>
        {
          return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e000      	b.n	8004e40 <HAL_RCC_OscConfig+0x5f4>
        }
      }
    }
  }
  return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3728      	adds	r7, #40	; 0x28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	42470060 	.word	0x42470060

08004e50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e176      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d003      	beq.n	8004e74 <HAL_RCC_ClockConfig+0x24>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2b0f      	cmp	r3, #15
 8004e72:	d904      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x2e>
 8004e74:	f44f 7134 	mov.w	r1, #720	; 0x2d0
 8004e78:	4877      	ldr	r0, [pc, #476]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004e7a:	f7fe fb1a 	bl	80034b2 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d019      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d016      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b03      	cmp	r3, #3
 8004e94:	d010      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b04      	cmp	r3, #4
 8004e9a:	d00d      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004e9c:	683b      	ldr	r3, [r7, #0]
 8004e9e:	2b05      	cmp	r3, #5
 8004ea0:	d00a      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	2b06      	cmp	r3, #6
 8004ea6:	d007      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b07      	cmp	r3, #7
 8004eac:	d004      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x68>
 8004eae:	f240 21d1 	movw	r1, #721	; 0x2d1
 8004eb2:	4869      	ldr	r0, [pc, #420]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004eb4:	f7fe fafd 	bl	80034b2 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb8:	4b68      	ldr	r3, [pc, #416]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 030f 	and.w	r3, r3, #15
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d90c      	bls.n	8004ee0 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ec6:	4b65      	ldr	r3, [pc, #404]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	b2d2      	uxtb	r2, r2
 8004ecc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ece:	4b63      	ldr	r3, [pc, #396]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f003 030f 	and.w	r3, r3, #15
 8004ed6:	683a      	ldr	r2, [r7, #0]
 8004ed8:	429a      	cmp	r2, r3
 8004eda:	d001      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e138      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0302 	and.w	r3, r3, #2
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d049      	beq.n	8004f80 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 0304 	and.w	r3, r3, #4
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d005      	beq.n	8004f04 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef8:	4b59      	ldr	r3, [pc, #356]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	4a58      	ldr	r2, [pc, #352]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004efe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0308 	and.w	r3, r3, #8
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d005      	beq.n	8004f1c <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	4a52      	ldr	r2, [pc, #328]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004f16:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f1a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d024      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d020      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	2b90      	cmp	r3, #144	; 0x90
 8004f32:	d01c      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	2ba0      	cmp	r3, #160	; 0xa0
 8004f3a:	d018      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	2bb0      	cmp	r3, #176	; 0xb0
 8004f42:	d014      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	2bc0      	cmp	r3, #192	; 0xc0
 8004f4a:	d010      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	2bd0      	cmp	r3, #208	; 0xd0
 8004f52:	d00c      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2be0      	cmp	r3, #224	; 0xe0
 8004f5a:	d008      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	2bf0      	cmp	r3, #240	; 0xf0
 8004f62:	d004      	beq.n	8004f6e <HAL_RCC_ClockConfig+0x11e>
 8004f64:	f240 21f5 	movw	r1, #757	; 0x2f5
 8004f68:	483b      	ldr	r0, [pc, #236]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004f6a:	f7fe faa2 	bl	80034b2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f6e:	4b3c      	ldr	r3, [pc, #240]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	689b      	ldr	r3, [r3, #8]
 8004f7a:	4939      	ldr	r1, [pc, #228]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d051      	beq.n	8005030 <HAL_RCC_ClockConfig+0x1e0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00c      	beq.n	8004fae <HAL_RCC_ClockConfig+0x15e>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b01      	cmp	r3, #1
 8004f9a:	d008      	beq.n	8004fae <HAL_RCC_ClockConfig+0x15e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	2b02      	cmp	r3, #2
 8004fa2:	d004      	beq.n	8004fae <HAL_RCC_ClockConfig+0x15e>
 8004fa4:	f44f 713f 	mov.w	r1, #764	; 0x2fc
 8004fa8:	482b      	ldr	r0, [pc, #172]	; (8005058 <HAL_RCC_ClockConfig+0x208>)
 8004faa:	f7fe fa82 	bl	80034b2 <assert_failed>

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	2b01      	cmp	r3, #1
 8004fb4:	d107      	bne.n	8004fc6 <HAL_RCC_ClockConfig+0x176>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb6:	4b2a      	ldr	r3, [pc, #168]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d115      	bne.n	8004fee <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	e0c5      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	2b02      	cmp	r3, #2
 8004fcc:	d107      	bne.n	8004fde <HAL_RCC_ClockConfig+0x18e>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d109      	bne.n	8004fee <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e0b9      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fde:	4b20      	ldr	r3, [pc, #128]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d101      	bne.n	8004fee <HAL_RCC_ClockConfig+0x19e>
      {
        return HAL_ERROR;
 8004fea:	2301      	movs	r3, #1
 8004fec:	e0b1      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fee:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f023 0203 	bic.w	r2, r3, #3
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	4919      	ldr	r1, [pc, #100]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005000:	f7fe fd40 	bl	8003a84 <HAL_GetTick>
 8005004:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005006:	e00a      	b.n	800501e <HAL_RCC_ClockConfig+0x1ce>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005008:	f7fe fd3c 	bl	8003a84 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	f241 3288 	movw	r2, #5000	; 0x1388
 8005016:	4293      	cmp	r3, r2
 8005018:	d901      	bls.n	800501e <HAL_RCC_ClockConfig+0x1ce>
      {
        return HAL_TIMEOUT;
 800501a:	2303      	movs	r3, #3
 800501c:	e099      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_RCC_ClockConfig+0x210>)
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 020c 	and.w	r2, r3, #12
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	429a      	cmp	r2, r3
 800502e:	d1eb      	bne.n	8005008 <HAL_RCC_ClockConfig+0x1b8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005030:	4b0a      	ldr	r3, [pc, #40]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 030f 	and.w	r3, r3, #15
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	429a      	cmp	r2, r3
 800503c:	d212      	bcs.n	8005064 <HAL_RCC_ClockConfig+0x214>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503e:	4b07      	ldr	r3, [pc, #28]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8005040:	683a      	ldr	r2, [r7, #0]
 8005042:	b2d2      	uxtb	r2, r2
 8005044:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005046:	4b05      	ldr	r3, [pc, #20]	; (800505c <HAL_RCC_ClockConfig+0x20c>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 030f 	and.w	r3, r3, #15
 800504e:	683a      	ldr	r2, [r7, #0]
 8005050:	429a      	cmp	r2, r3
 8005052:	d007      	beq.n	8005064 <HAL_RCC_ClockConfig+0x214>
    {
      return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e07c      	b.n	8005152 <HAL_RCC_ClockConfig+0x302>
 8005058:	0800ae1c 	.word	0x0800ae1c
 800505c:	40023c00 	.word	0x40023c00
 8005060:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0304 	and.w	r3, r3, #4
 800506c:	2b00      	cmp	r3, #0
 800506e:	d025      	beq.n	80050bc <HAL_RCC_ClockConfig+0x26c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d018      	beq.n	80050aa <HAL_RCC_ClockConfig+0x25a>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005080:	d013      	beq.n	80050aa <HAL_RCC_ClockConfig+0x25a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800508a:	d00e      	beq.n	80050aa <HAL_RCC_ClockConfig+0x25a>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8005094:	d009      	beq.n	80050aa <HAL_RCC_ClockConfig+0x25a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 800509e:	d004      	beq.n	80050aa <HAL_RCC_ClockConfig+0x25a>
 80050a0:	f240 3139 	movw	r1, #825	; 0x339
 80050a4:	482d      	ldr	r0, [pc, #180]	; (800515c <HAL_RCC_ClockConfig+0x30c>)
 80050a6:	f7fe fa04 	bl	80034b2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050aa:	4b2d      	ldr	r3, [pc, #180]	; (8005160 <HAL_RCC_ClockConfig+0x310>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	492a      	ldr	r1, [pc, #168]	; (8005160 <HAL_RCC_ClockConfig+0x310>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0308 	and.w	r3, r3, #8
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d026      	beq.n	8005116 <HAL_RCC_ClockConfig+0x2c6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	691b      	ldr	r3, [r3, #16]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d018      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2b2>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050d8:	d013      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2b2>
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80050e2:	d00e      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2b2>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80050ec:	d009      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2b2>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f5b3 5fe0 	cmp.w	r3, #7168	; 0x1c00
 80050f6:	d004      	beq.n	8005102 <HAL_RCC_ClockConfig+0x2b2>
 80050f8:	f44f 7150 	mov.w	r1, #832	; 0x340
 80050fc:	4817      	ldr	r0, [pc, #92]	; (800515c <HAL_RCC_ClockConfig+0x30c>)
 80050fe:	f7fe f9d8 	bl	80034b2 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005102:	4b17      	ldr	r3, [pc, #92]	; (8005160 <HAL_RCC_ClockConfig+0x310>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	00db      	lsls	r3, r3, #3
 8005110:	4913      	ldr	r1, [pc, #76]	; (8005160 <HAL_RCC_ClockConfig+0x310>)
 8005112:	4313      	orrs	r3, r2
 8005114:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 8005116:	f000 f82b 	bl	8005170 <HAL_RCC_GetSysClockFreq>
 800511a:	4601      	mov	r1, r0
 800511c:	4b10      	ldr	r3, [pc, #64]	; (8005160 <HAL_RCC_ClockConfig+0x310>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005124:	22f0      	movs	r2, #240	; 0xf0
 8005126:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	fa92 f2a2 	rbit	r2, r2
 800512e:	60fa      	str	r2, [r7, #12]
  return result;
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	fab2 f282 	clz	r2, r2
 8005136:	b2d2      	uxtb	r2, r2
 8005138:	40d3      	lsrs	r3, r2
 800513a:	4a0a      	ldr	r2, [pc, #40]	; (8005164 <HAL_RCC_ClockConfig+0x314>)
 800513c:	5cd3      	ldrb	r3, [r2, r3]
 800513e:	fa21 f303 	lsr.w	r3, r1, r3
 8005142:	4a09      	ldr	r2, [pc, #36]	; (8005168 <HAL_RCC_ClockConfig+0x318>)
 8005144:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005146:	4b09      	ldr	r3, [pc, #36]	; (800516c <HAL_RCC_ClockConfig+0x31c>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fc58 	bl	8003a00 <HAL_InitTick>

  return HAL_OK;
 8005150:	2300      	movs	r3, #0
}
 8005152:	4618      	mov	r0, r3
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	0800ae1c 	.word	0x0800ae1c
 8005160:	40023800 	.word	0x40023800
 8005164:	0800ae90 	.word	0x0800ae90
 8005168:	20000028 	.word	0x20000028
 800516c:	2000002c 	.word	0x2000002c

08005170 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005174:	b090      	sub	sp, #64	; 0x40
 8005176:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005178:	2300      	movs	r3, #0
 800517a:	637b      	str	r3, [r7, #52]	; 0x34
 800517c:	2300      	movs	r3, #0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	2300      	movs	r3, #0
 8005182:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005184:	2300      	movs	r3, #0
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005188:	4b59      	ldr	r3, [pc, #356]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800518a:	689b      	ldr	r3, [r3, #8]
 800518c:	f003 030c 	and.w	r3, r3, #12
 8005190:	2b08      	cmp	r3, #8
 8005192:	d00d      	beq.n	80051b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005194:	2b08      	cmp	r3, #8
 8005196:	f200 80a2 	bhi.w	80052de <HAL_RCC_GetSysClockFreq+0x16e>
 800519a:	2b00      	cmp	r3, #0
 800519c:	d002      	beq.n	80051a4 <HAL_RCC_GetSysClockFreq+0x34>
 800519e:	2b04      	cmp	r3, #4
 80051a0:	d003      	beq.n	80051aa <HAL_RCC_GetSysClockFreq+0x3a>
 80051a2:	e09c      	b.n	80052de <HAL_RCC_GetSysClockFreq+0x16e>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051a4:	4b53      	ldr	r3, [pc, #332]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80051a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051a8:	e09c      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051aa:	4b53      	ldr	r3, [pc, #332]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051ae:	e099      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051b0:	4b4f      	ldr	r3, [pc, #316]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051ba:	4b4d      	ldr	r3, [pc, #308]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d027      	beq.n	8005216 <HAL_RCC_GetSysClockFreq+0xa6>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	099b      	lsrs	r3, r3, #6
 80051cc:	2200      	movs	r2, #0
 80051ce:	623b      	str	r3, [r7, #32]
 80051d0:	627a      	str	r2, [r7, #36]	; 0x24
 80051d2:	6a3b      	ldr	r3, [r7, #32]
 80051d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80051d8:	2100      	movs	r1, #0
 80051da:	4b47      	ldr	r3, [pc, #284]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051dc:	fb03 f201 	mul.w	r2, r3, r1
 80051e0:	2300      	movs	r3, #0
 80051e2:	fb00 f303 	mul.w	r3, r0, r3
 80051e6:	4413      	add	r3, r2
 80051e8:	4a43      	ldr	r2, [pc, #268]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80051ea:	fba0 2102 	umull	r2, r1, r0, r2
 80051ee:	62f9      	str	r1, [r7, #44]	; 0x2c
 80051f0:	62ba      	str	r2, [r7, #40]	; 0x28
 80051f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80051f4:	4413      	add	r3, r2
 80051f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80051f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fa:	2200      	movs	r2, #0
 80051fc:	61bb      	str	r3, [r7, #24]
 80051fe:	61fa      	str	r2, [r7, #28]
 8005200:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005204:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005208:	f7fb fca4 	bl	8000b54 <__aeabi_uldivmod>
 800520c:	4602      	mov	r2, r0
 800520e:	460b      	mov	r3, r1
 8005210:	4613      	mov	r3, r2
 8005212:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005214:	e055      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x152>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b36      	ldr	r3, [pc, #216]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	2200      	movs	r2, #0
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	617a      	str	r2, [r7, #20]
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005228:	f04f 0b00 	mov.w	fp, #0
 800522c:	4652      	mov	r2, sl
 800522e:	465b      	mov	r3, fp
 8005230:	f04f 0000 	mov.w	r0, #0
 8005234:	f04f 0100 	mov.w	r1, #0
 8005238:	0159      	lsls	r1, r3, #5
 800523a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800523e:	0150      	lsls	r0, r2, #5
 8005240:	4602      	mov	r2, r0
 8005242:	460b      	mov	r3, r1
 8005244:	ebb2 080a 	subs.w	r8, r2, sl
 8005248:	eb63 090b 	sbc.w	r9, r3, fp
 800524c:	f04f 0200 	mov.w	r2, #0
 8005250:	f04f 0300 	mov.w	r3, #0
 8005254:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005258:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800525c:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005260:	ebb2 0408 	subs.w	r4, r2, r8
 8005264:	eb63 0509 	sbc.w	r5, r3, r9
 8005268:	f04f 0200 	mov.w	r2, #0
 800526c:	f04f 0300 	mov.w	r3, #0
 8005270:	00eb      	lsls	r3, r5, #3
 8005272:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005276:	00e2      	lsls	r2, r4, #3
 8005278:	4614      	mov	r4, r2
 800527a:	461d      	mov	r5, r3
 800527c:	eb14 030a 	adds.w	r3, r4, sl
 8005280:	603b      	str	r3, [r7, #0]
 8005282:	eb45 030b 	adc.w	r3, r5, fp
 8005286:	607b      	str	r3, [r7, #4]
 8005288:	f04f 0200 	mov.w	r2, #0
 800528c:	f04f 0300 	mov.w	r3, #0
 8005290:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005294:	4629      	mov	r1, r5
 8005296:	028b      	lsls	r3, r1, #10
 8005298:	4620      	mov	r0, r4
 800529a:	4629      	mov	r1, r5
 800529c:	4604      	mov	r4, r0
 800529e:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80052a2:	4601      	mov	r1, r0
 80052a4:	028a      	lsls	r2, r1, #10
 80052a6:	4610      	mov	r0, r2
 80052a8:	4619      	mov	r1, r3
 80052aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ac:	2200      	movs	r2, #0
 80052ae:	60bb      	str	r3, [r7, #8]
 80052b0:	60fa      	str	r2, [r7, #12]
 80052b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052b6:	f7fb fc4d 	bl	8000b54 <__aeabi_uldivmod>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	4613      	mov	r3, r2
 80052c0:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	0c1b      	lsrs	r3, r3, #16
 80052c8:	f003 0303 	and.w	r3, r3, #3
 80052cc:	3301      	adds	r3, #1
 80052ce:	005b      	lsls	r3, r3, #1
 80052d0:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80052d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052dc:	e002      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x174>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80052e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80052e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3740      	adds	r7, #64	; 0x40
 80052ea:	46bd      	mov	sp, r7
 80052ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052f0:	40023800 	.word	0x40023800
 80052f4:	00f42400 	.word	0x00f42400
 80052f8:	017d7840 	.word	0x017d7840

080052fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052fc:	b480      	push	{r7}
 80052fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005300:	4b02      	ldr	r3, [pc, #8]	; (800530c <HAL_RCC_GetHCLKFreq+0x10>)
 8005302:	681b      	ldr	r3, [r3, #0]
}
 8005304:	4618      	mov	r0, r3
 8005306:	46bd      	mov	sp, r7
 8005308:	bc80      	pop	{r7}
 800530a:	4770      	bx	lr
 800530c:	20000028 	.word	0x20000028

08005310 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b082      	sub	sp, #8
 8005314:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
 8005316:	f7ff fff1 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800531a:	4601      	mov	r1, r0
 800531c:	4b0b      	ldr	r3, [pc, #44]	; (800534c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8005324:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8005328:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	fa92 f2a2 	rbit	r2, r2
 8005330:	603a      	str	r2, [r7, #0]
  return result;
 8005332:	683a      	ldr	r2, [r7, #0]
 8005334:	fab2 f282 	clz	r2, r2
 8005338:	b2d2      	uxtb	r2, r2
 800533a:	40d3      	lsrs	r3, r2
 800533c:	4a04      	ldr	r2, [pc, #16]	; (8005350 <HAL_RCC_GetPCLK1Freq+0x40>)
 800533e:	5cd3      	ldrb	r3, [r2, r3]
 8005340:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005344:	4618      	mov	r0, r3
 8005346:	3708      	adds	r7, #8
 8005348:	46bd      	mov	sp, r7
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	0800aea0 	.word	0x0800aea0

08005354 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
 800535a:	f7ff ffcf 	bl	80052fc <HAL_RCC_GetHCLKFreq>
 800535e:	4601      	mov	r1, r0
 8005360:	4b0b      	ldr	r3, [pc, #44]	; (8005390 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8005368:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800536c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	fa92 f2a2 	rbit	r2, r2
 8005374:	603a      	str	r2, [r7, #0]
  return result;
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	fab2 f282 	clz	r2, r2
 800537c:	b2d2      	uxtb	r2, r2
 800537e:	40d3      	lsrs	r3, r2
 8005380:	4a04      	ldr	r2, [pc, #16]	; (8005394 <HAL_RCC_GetPCLK2Freq+0x40>)
 8005382:	5cd3      	ldrb	r3, [r2, r3]
 8005384:	fa21 f303 	lsr.w	r3, r1, r3
}
 8005388:	4618      	mov	r0, r3
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}
 8005390:	40023800 	.word	0x40023800
 8005394:	0800aea0 	.word	0x0800aea0

08005398 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d101      	bne.n	80053aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e0b7      	b.n	800551a <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d031      	beq.n	8005416 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a5b      	ldr	r2, [pc, #364]	; (8005524 <HAL_UART_Init+0x18c>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d013      	beq.n	80053e4 <HAL_UART_Init+0x4c>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a59      	ldr	r2, [pc, #356]	; (8005528 <HAL_UART_Init+0x190>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d00e      	beq.n	80053e4 <HAL_UART_Init+0x4c>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a58      	ldr	r2, [pc, #352]	; (800552c <HAL_UART_Init+0x194>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d009      	beq.n	80053e4 <HAL_UART_Init+0x4c>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a56      	ldr	r2, [pc, #344]	; (8005530 <HAL_UART_Init+0x198>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_UART_Init+0x4c>
 80053da:	f240 116d 	movw	r1, #365	; 0x16d
 80053de:	4855      	ldr	r0, [pc, #340]	; (8005534 <HAL_UART_Init+0x19c>)
 80053e0:	f7fe f867 	bl	80034b2 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	699b      	ldr	r3, [r3, #24]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d037      	beq.n	800545c <HAL_UART_Init+0xc4>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80053f4:	d032      	beq.n	800545c <HAL_UART_Init+0xc4>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80053fe:	d02d      	beq.n	800545c <HAL_UART_Init+0xc4>
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005408:	d028      	beq.n	800545c <HAL_UART_Init+0xc4>
 800540a:	f44f 71b7 	mov.w	r1, #366	; 0x16e
 800540e:	4849      	ldr	r0, [pc, #292]	; (8005534 <HAL_UART_Init+0x19c>)
 8005410:	f7fe f84f 	bl	80034b2 <assert_failed>
 8005414:	e022      	b.n	800545c <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a42      	ldr	r2, [pc, #264]	; (8005524 <HAL_UART_Init+0x18c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d01d      	beq.n	800545c <HAL_UART_Init+0xc4>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a40      	ldr	r2, [pc, #256]	; (8005528 <HAL_UART_Init+0x190>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d018      	beq.n	800545c <HAL_UART_Init+0xc4>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a3f      	ldr	r2, [pc, #252]	; (800552c <HAL_UART_Init+0x194>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d013      	beq.n	800545c <HAL_UART_Init+0xc4>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a3f      	ldr	r2, [pc, #252]	; (8005538 <HAL_UART_Init+0x1a0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d00e      	beq.n	800545c <HAL_UART_Init+0xc4>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a3e      	ldr	r2, [pc, #248]	; (800553c <HAL_UART_Init+0x1a4>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d009      	beq.n	800545c <HAL_UART_Init+0xc4>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a38      	ldr	r2, [pc, #224]	; (8005530 <HAL_UART_Init+0x198>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d004      	beq.n	800545c <HAL_UART_Init+0xc4>
 8005452:	f44f 71b9 	mov.w	r1, #370	; 0x172
 8005456:	4837      	ldr	r0, [pc, #220]	; (8005534 <HAL_UART_Init+0x19c>)
 8005458:	f7fe f82b 	bl	80034b2 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d009      	beq.n	8005478 <HAL_UART_Init+0xe0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d004      	beq.n	8005478 <HAL_UART_Init+0xe0>
 800546e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8005472:	4830      	ldr	r0, [pc, #192]	; (8005534 <HAL_UART_Init+0x19c>)
 8005474:	f7fe f81d 	bl	80034b2 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	69db      	ldr	r3, [r3, #28]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d009      	beq.n	8005494 <HAL_UART_Init+0xfc>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005488:	d004      	beq.n	8005494 <HAL_UART_Init+0xfc>
 800548a:	f240 1175 	movw	r1, #373	; 0x175
 800548e:	4829      	ldr	r0, [pc, #164]	; (8005534 <HAL_UART_Init+0x19c>)
 8005490:	f7fe f80f 	bl	80034b2 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800549a:	b2db      	uxtb	r3, r3
 800549c:	2b00      	cmp	r3, #0
 800549e:	d106      	bne.n	80054ae <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f7fe f87f 	bl	80035ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2224      	movs	r2, #36	; 0x24
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	68da      	ldr	r2, [r3, #12]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054c4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f000 fdd4 	bl	8006074 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691a      	ldr	r2, [r3, #16]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80054da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	695a      	ldr	r2, [r3, #20]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80054ea:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68da      	ldr	r2, [r3, #12]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054fa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2220      	movs	r2, #32
 800550e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40011000 	.word	0x40011000
 8005528:	40004400 	.word	0x40004400
 800552c:	40004800 	.word	0x40004800
 8005530:	40011400 	.word	0x40011400
 8005534:	0800ae54 	.word	0x0800ae54
 8005538:	40004c00 	.word	0x40004c00
 800553c:	40005000 	.word	0x40005000

08005540 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b08a      	sub	sp, #40	; 0x28
 8005544:	af02      	add	r7, sp, #8
 8005546:	60f8      	str	r0, [r7, #12]
 8005548:	60b9      	str	r1, [r7, #8]
 800554a:	603b      	str	r3, [r7, #0]
 800554c:	4613      	mov	r3, r2
 800554e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005550:	2300      	movs	r3, #0
 8005552:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b20      	cmp	r3, #32
 800555e:	d16d      	bne.n	800563c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d002      	beq.n	800556c <HAL_UART_Transmit+0x2c>
 8005566:	88fb      	ldrh	r3, [r7, #6]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800556c:	2301      	movs	r3, #1
 800556e:	e066      	b.n	800563e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2221      	movs	r2, #33	; 0x21
 800557a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800557e:	f7fe fa81 	bl	8003a84 <HAL_GetTick>
 8005582:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	88fa      	ldrh	r2, [r7, #6]
 8005588:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	88fa      	ldrh	r2, [r7, #6]
 800558e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d108      	bne.n	80055ac <HAL_UART_Transmit+0x6c>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d104      	bne.n	80055ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055a2:	2300      	movs	r3, #0
 80055a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	61bb      	str	r3, [r7, #24]
 80055aa:	e003      	b.n	80055b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055b4:	e02a      	b.n	800560c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	9300      	str	r3, [sp, #0]
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	2200      	movs	r2, #0
 80055be:	2180      	movs	r1, #128	; 0x80
 80055c0:	68f8      	ldr	r0, [r7, #12]
 80055c2:	f000 fb14 	bl	8005bee <UART_WaitOnFlagUntilTimeout>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d001      	beq.n	80055d0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e036      	b.n	800563e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10b      	bne.n	80055ee <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80055d6:	69bb      	ldr	r3, [r7, #24]
 80055d8:	881b      	ldrh	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80055e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	3302      	adds	r3, #2
 80055ea:	61bb      	str	r3, [r7, #24]
 80055ec:	e007      	b.n	80055fe <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80055ee:	69fb      	ldr	r3, [r7, #28]
 80055f0:	781a      	ldrb	r2, [r3, #0]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	3301      	adds	r3, #1
 80055fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005602:	b29b      	uxth	r3, r3
 8005604:	3b01      	subs	r3, #1
 8005606:	b29a      	uxth	r2, r3
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005610:	b29b      	uxth	r3, r3
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1cf      	bne.n	80055b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	9300      	str	r3, [sp, #0]
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	2200      	movs	r2, #0
 800561e:	2140      	movs	r1, #64	; 0x40
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 fae4 	bl	8005bee <UART_WaitOnFlagUntilTimeout>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	d001      	beq.n	8005630 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e006      	b.n	800563e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	2220      	movs	r2, #32
 8005634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005638:	2300      	movs	r3, #0
 800563a:	e000      	b.n	800563e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800563c:	2302      	movs	r3, #2
  }
}
 800563e:	4618      	mov	r0, r3
 8005640:	3720      	adds	r7, #32
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}

08005646 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005646:	b580      	push	{r7, lr}
 8005648:	b084      	sub	sp, #16
 800564a:	af00      	add	r7, sp, #0
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	60b9      	str	r1, [r7, #8]
 8005650:	4613      	mov	r3, r2
 8005652:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800565a:	b2db      	uxtb	r3, r3
 800565c:	2b20      	cmp	r3, #32
 800565e:	d112      	bne.n	8005686 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005660:	68bb      	ldr	r3, [r7, #8]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <HAL_UART_Receive_IT+0x26>
 8005666:	88fb      	ldrh	r3, [r7, #6]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e00b      	b.n	8005688 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2200      	movs	r2, #0
 8005674:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005676:	88fb      	ldrh	r3, [r7, #6]
 8005678:	461a      	mov	r2, r3
 800567a:	68b9      	ldr	r1, [r7, #8]
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f000 fb24 	bl	8005cca <UART_Start_Receive_IT>
 8005682:	4603      	mov	r3, r0
 8005684:	e000      	b.n	8005688 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005686:	2302      	movs	r3, #2
  }
}
 8005688:	4618      	mov	r0, r3
 800568a:	3710      	adds	r7, #16
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b0ba      	sub	sp, #232	; 0xe8
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	695b      	ldr	r3, [r3, #20]
 80056b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056b6:	2300      	movs	r3, #0
 80056b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056bc:	2300      	movs	r3, #0
 80056be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c6:	f003 030f 	and.w	r3, r3, #15
 80056ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80056ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d10f      	bne.n	80056f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056da:	f003 0320 	and.w	r3, r3, #32
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d009      	beq.n	80056f6 <HAL_UART_IRQHandler+0x66>
 80056e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056e6:	f003 0320 	and.w	r3, r3, #32
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d003      	beq.n	80056f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f000 fc01 	bl	8005ef6 <UART_Receive_IT>
      return;
 80056f4:	e25b      	b.n	8005bae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80056f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	f000 80de 	beq.w	80058bc <HAL_UART_IRQHandler+0x22c>
 8005700:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005704:	f003 0301 	and.w	r3, r3, #1
 8005708:	2b00      	cmp	r3, #0
 800570a:	d106      	bne.n	800571a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800570c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005710:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80d1 	beq.w	80058bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800571a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800571e:	f003 0301 	and.w	r3, r3, #1
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <HAL_UART_IRQHandler+0xae>
 8005726:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800572a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800572e:	2b00      	cmp	r3, #0
 8005730:	d005      	beq.n	800573e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005736:	f043 0201 	orr.w	r2, r3, #1
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800573e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005742:	f003 0304 	and.w	r3, r3, #4
 8005746:	2b00      	cmp	r3, #0
 8005748:	d00b      	beq.n	8005762 <HAL_UART_IRQHandler+0xd2>
 800574a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800574e:	f003 0301 	and.w	r3, r3, #1
 8005752:	2b00      	cmp	r3, #0
 8005754:	d005      	beq.n	8005762 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800575a:	f043 0202 	orr.w	r2, r3, #2
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005766:	f003 0302 	and.w	r3, r3, #2
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00b      	beq.n	8005786 <HAL_UART_IRQHandler+0xf6>
 800576e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005772:	f003 0301 	and.w	r3, r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	d005      	beq.n	8005786 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800577e:	f043 0204 	orr.w	r2, r3, #4
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d011      	beq.n	80057b6 <HAL_UART_IRQHandler+0x126>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f003 0320 	and.w	r3, r3, #32
 800579a:	2b00      	cmp	r3, #0
 800579c:	d105      	bne.n	80057aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800579e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a2:	f003 0301 	and.w	r3, r3, #1
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d005      	beq.n	80057b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ae:	f043 0208 	orr.w	r2, r3, #8
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	f000 81f2 	beq.w	8005ba4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d008      	beq.n	80057de <HAL_UART_IRQHandler+0x14e>
 80057cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d0:	f003 0320 	and.w	r3, r3, #32
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 fb8c 	bl	8005ef6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	695b      	ldr	r3, [r3, #20]
 80057e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e8:	2b40      	cmp	r3, #64	; 0x40
 80057ea:	bf0c      	ite	eq
 80057ec:	2301      	moveq	r3, #1
 80057ee:	2300      	movne	r3, #0
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057fa:	f003 0308 	and.w	r3, r3, #8
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d103      	bne.n	800580a <HAL_UART_IRQHandler+0x17a>
 8005802:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005806:	2b00      	cmp	r3, #0
 8005808:	d04f      	beq.n	80058aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580a:	6878      	ldr	r0, [r7, #4]
 800580c:	f000 fa96 	bl	8005d3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581a:	2b40      	cmp	r3, #64	; 0x40
 800581c:	d141      	bne.n	80058a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	3314      	adds	r3, #20
 8005824:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005828:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005834:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800583c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	3314      	adds	r3, #20
 8005846:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800584a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800584e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005852:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005856:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005862:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1d9      	bne.n	800581e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586e:	2b00      	cmp	r3, #0
 8005870:	d013      	beq.n	800589a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005876:	4a7e      	ldr	r2, [pc, #504]	; (8005a70 <HAL_UART_IRQHandler+0x3e0>)
 8005878:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587e:	4618      	mov	r0, r3
 8005880:	f7fe fc6f 	bl	8004162 <HAL_DMA_Abort_IT>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d016      	beq.n	80058b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800588e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005894:	4610      	mov	r0, r2
 8005896:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005898:	e00e      	b.n	80058b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f000 f993 	bl	8005bc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a0:	e00a      	b.n	80058b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f98f 	bl	8005bc6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058a8:	e006      	b.n	80058b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f98b 	bl	8005bc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2200      	movs	r2, #0
 80058b4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80058b6:	e175      	b.n	8005ba4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b8:	bf00      	nop
    return;
 80058ba:	e173      	b.n	8005ba4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	f040 814f 	bne.w	8005b64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058ca:	f003 0310 	and.w	r3, r3, #16
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	f000 8148 	beq.w	8005b64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80058d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058d8:	f003 0310 	and.w	r3, r3, #16
 80058dc:	2b00      	cmp	r3, #0
 80058de:	f000 8141 	beq.w	8005b64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80058e2:	2300      	movs	r3, #0
 80058e4:	60bb      	str	r3, [r7, #8]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	60bb      	str	r3, [r7, #8]
 80058f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b40      	cmp	r3, #64	; 0x40
 8005904:	f040 80b6 	bne.w	8005a74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	685b      	ldr	r3, [r3, #4]
 8005910:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005914:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 8145 	beq.w	8005ba8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005926:	429a      	cmp	r2, r3
 8005928:	f080 813e 	bcs.w	8005ba8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005932:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005938:	69db      	ldr	r3, [r3, #28]
 800593a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800593e:	f000 8088 	beq.w	8005a52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	330c      	adds	r3, #12
 8005948:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005958:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800595c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005960:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	330c      	adds	r3, #12
 800596a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800596e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005972:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005976:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800597a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800597e:	e841 2300 	strex	r3, r2, [r1]
 8005982:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005986:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d1d9      	bne.n	8005942 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	3314      	adds	r3, #20
 8005994:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005996:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005998:	e853 3f00 	ldrex	r3, [r3]
 800599c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800599e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059a0:	f023 0301 	bic.w	r3, r3, #1
 80059a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	3314      	adds	r3, #20
 80059ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059be:	e841 2300 	strex	r3, r2, [r1]
 80059c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d1e1      	bne.n	800598e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	3314      	adds	r3, #20
 80059d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80059d4:	e853 3f00 	ldrex	r3, [r3]
 80059d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80059da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80059dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	3314      	adds	r3, #20
 80059ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80059ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80059f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80059f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80059f6:	e841 2300 	strex	r3, r2, [r1]
 80059fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80059fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d1e3      	bne.n	80059ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2220      	movs	r2, #32
 8005a06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	330c      	adds	r3, #12
 8005a16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a1a:	e853 3f00 	ldrex	r3, [r3]
 8005a1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a22:	f023 0310 	bic.w	r3, r3, #16
 8005a26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	330c      	adds	r3, #12
 8005a30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a34:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a3c:	e841 2300 	strex	r3, r2, [r1]
 8005a40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e3      	bne.n	8005a10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	f7fe fb18 	bl	8004082 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2202      	movs	r2, #2
 8005a56:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a60:	b29b      	uxth	r3, r3
 8005a62:	1ad3      	subs	r3, r2, r3
 8005a64:	b29b      	uxth	r3, r3
 8005a66:	4619      	mov	r1, r3
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 f8b5 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a6e:	e09b      	b.n	8005ba8 <HAL_UART_IRQHandler+0x518>
 8005a70:	08005e01 	.word	0x08005e01
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a7c:	b29b      	uxth	r3, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	f000 808e 	beq.w	8005bac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005a90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f000 8089 	beq.w	8005bac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	e853 3f00 	ldrex	r3, [r3]
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ab0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	330c      	adds	r3, #12
 8005aba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005abe:	647a      	str	r2, [r7, #68]	; 0x44
 8005ac0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ac4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ac6:	e841 2300 	strex	r3, r2, [r1]
 8005aca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005acc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d1e3      	bne.n	8005a9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3314      	adds	r3, #20
 8005ad8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	f023 0301 	bic.w	r3, r3, #1
 8005ae8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	3314      	adds	r3, #20
 8005af2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005af6:	633a      	str	r2, [r7, #48]	; 0x30
 8005af8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	330c      	adds	r3, #12
 8005b1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b20:	693b      	ldr	r3, [r7, #16]
 8005b22:	e853 3f00 	ldrex	r3, [r3]
 8005b26:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f023 0310 	bic.w	r3, r3, #16
 8005b2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	330c      	adds	r3, #12
 8005b38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b3c:	61fa      	str	r2, [r7, #28]
 8005b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b40:	69b9      	ldr	r1, [r7, #24]
 8005b42:	69fa      	ldr	r2, [r7, #28]
 8005b44:	e841 2300 	strex	r3, r2, [r1]
 8005b48:	617b      	str	r3, [r7, #20]
   return(result);
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d1e3      	bne.n	8005b18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2202      	movs	r2, #2
 8005b54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b5a:	4619      	mov	r1, r3
 8005b5c:	6878      	ldr	r0, [r7, #4]
 8005b5e:	f000 f83b 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b62:	e023      	b.n	8005bac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d009      	beq.n	8005b84 <HAL_UART_IRQHandler+0x4f4>
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d003      	beq.n	8005b84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f953 	bl	8005e28 <UART_Transmit_IT>
    return;
 8005b82:	e014      	b.n	8005bae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005b84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d00e      	beq.n	8005bae <HAL_UART_IRQHandler+0x51e>
 8005b90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d008      	beq.n	8005bae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 f992 	bl	8005ec6 <UART_EndTransmit_IT>
    return;
 8005ba2:	e004      	b.n	8005bae <HAL_UART_IRQHandler+0x51e>
    return;
 8005ba4:	bf00      	nop
 8005ba6:	e002      	b.n	8005bae <HAL_UART_IRQHandler+0x51e>
      return;
 8005ba8:	bf00      	nop
 8005baa:	e000      	b.n	8005bae <HAL_UART_IRQHandler+0x51e>
      return;
 8005bac:	bf00      	nop
  }
}
 8005bae:	37e8      	adds	r7, #232	; 0xe8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bbc:	bf00      	nop
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bc80      	pop	{r7}
 8005bc4:	4770      	bx	lr

08005bc6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b083      	sub	sp, #12
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bc80      	pop	{r7}
 8005bd6:	4770      	bx	lr

08005bd8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	460b      	mov	r3, r1
 8005be2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005be4:	bf00      	nop
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bc80      	pop	{r7}
 8005bec:	4770      	bx	lr

08005bee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b090      	sub	sp, #64	; 0x40
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	60f8      	str	r0, [r7, #12]
 8005bf6:	60b9      	str	r1, [r7, #8]
 8005bf8:	603b      	str	r3, [r7, #0]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bfe:	e050      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c06:	d04c      	beq.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d007      	beq.n	8005c1e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c0e:	f7fd ff39 	bl	8003a84 <HAL_GetTick>
 8005c12:	4602      	mov	r2, r0
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	1ad3      	subs	r3, r2, r3
 8005c18:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d241      	bcs.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c30:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	330c      	adds	r3, #12
 8005c3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c3e:	637a      	str	r2, [r7, #52]	; 0x34
 8005c40:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	e853 3f00 	ldrex	r3, [r3]
 8005c60:	613b      	str	r3, [r7, #16]
   return(result);
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	f023 0301 	bic.w	r3, r3, #1
 8005c68:	63bb      	str	r3, [r7, #56]	; 0x38
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	3314      	adds	r3, #20
 8005c70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c72:	623a      	str	r2, [r7, #32]
 8005c74:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c76:	69f9      	ldr	r1, [r7, #28]
 8005c78:	6a3a      	ldr	r2, [r7, #32]
 8005c7a:	e841 2300 	strex	r3, r2, [r1]
 8005c7e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1e5      	bne.n	8005c52 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	2220      	movs	r2, #32
 8005c8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	2220      	movs	r2, #32
 8005c92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e00f      	b.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681a      	ldr	r2, [r3, #0]
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	4013      	ands	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	429a      	cmp	r2, r3
 8005cb0:	bf0c      	ite	eq
 8005cb2:	2301      	moveq	r3, #1
 8005cb4:	2300      	movne	r3, #0
 8005cb6:	b2db      	uxtb	r3, r3
 8005cb8:	461a      	mov	r2, r3
 8005cba:	79fb      	ldrb	r3, [r7, #7]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d09f      	beq.n	8005c00 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3740      	adds	r7, #64	; 0x40
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}

08005cca <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005cca:	b480      	push	{r7}
 8005ccc:	b085      	sub	sp, #20
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	60f8      	str	r0, [r7, #12]
 8005cd2:	60b9      	str	r1, [r7, #8]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	68ba      	ldr	r2, [r7, #8]
 8005cdc:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	88fa      	ldrh	r2, [r7, #6]
 8005ce2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	88fa      	ldrh	r2, [r7, #6]
 8005ce8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	2200      	movs	r2, #0
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2222      	movs	r2, #34	; 0x22
 8005cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d007      	beq.n	8005d10 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d0e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f042 0201 	orr.w	r2, r2, #1
 8005d1e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68da      	ldr	r2, [r3, #12]
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0220 	orr.w	r2, r2, #32
 8005d2e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3714      	adds	r7, #20
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bc80      	pop	{r7}
 8005d3a:	4770      	bx	lr

08005d3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b095      	sub	sp, #84	; 0x54
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	330c      	adds	r3, #12
 8005d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d4e:	e853 3f00 	ldrex	r3, [r3]
 8005d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	330c      	adds	r3, #12
 8005d62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d64:	643a      	str	r2, [r7, #64]	; 0x40
 8005d66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d6c:	e841 2300 	strex	r3, r2, [r1]
 8005d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1e5      	bne.n	8005d44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3314      	adds	r3, #20
 8005d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d80:	6a3b      	ldr	r3, [r7, #32]
 8005d82:	e853 3f00 	ldrex	r3, [r3]
 8005d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d88:	69fb      	ldr	r3, [r7, #28]
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3314      	adds	r3, #20
 8005d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e5      	bne.n	8005d78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d119      	bne.n	8005de8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	330c      	adds	r3, #12
 8005dba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	e853 3f00 	ldrex	r3, [r3]
 8005dc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f023 0310 	bic.w	r3, r3, #16
 8005dca:	647b      	str	r3, [r7, #68]	; 0x44
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	330c      	adds	r3, #12
 8005dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dd4:	61ba      	str	r2, [r7, #24]
 8005dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	6979      	ldr	r1, [r7, #20]
 8005dda:	69ba      	ldr	r2, [r7, #24]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	613b      	str	r3, [r7, #16]
   return(result);
 8005de2:	693b      	ldr	r3, [r7, #16]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e5      	bne.n	8005db4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2220      	movs	r2, #32
 8005dec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005df6:	bf00      	nop
 8005df8:	3754      	adds	r7, #84	; 0x54
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bc80      	pop	{r7}
 8005dfe:	4770      	bx	lr

08005e00 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b084      	sub	sp, #16
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fed3 	bl	8005bc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	2b21      	cmp	r3, #33	; 0x21
 8005e3a:	d13e      	bne.n	8005eba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e44:	d114      	bne.n	8005e70 <UART_Transmit_IT+0x48>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d110      	bne.n	8005e70 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	881b      	ldrh	r3, [r3, #0]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e62:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6a1b      	ldr	r3, [r3, #32]
 8005e68:	1c9a      	adds	r2, r3, #2
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	621a      	str	r2, [r3, #32]
 8005e6e:	e008      	b.n	8005e82 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	6a1b      	ldr	r3, [r3, #32]
 8005e74:	1c59      	adds	r1, r3, #1
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	6211      	str	r1, [r2, #32]
 8005e7a:	781a      	ldrb	r2, [r3, #0]
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	3b01      	subs	r3, #1
 8005e8a:	b29b      	uxth	r3, r3
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10f      	bne.n	8005eb6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	68da      	ldr	r2, [r3, #12]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68da      	ldr	r2, [r3, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eb4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e000      	b.n	8005ebc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bc80      	pop	{r7}
 8005ec4:	4770      	bx	lr

08005ec6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005edc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f7ff fe64 	bl	8005bb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005eec:	2300      	movs	r3, #0
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3708      	adds	r7, #8
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}

08005ef6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005ef6:	b580      	push	{r7, lr}
 8005ef8:	b08c      	sub	sp, #48	; 0x30
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	2b22      	cmp	r3, #34	; 0x22
 8005f08:	f040 80ae 	bne.w	8006068 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	689b      	ldr	r3, [r3, #8]
 8005f10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f14:	d117      	bne.n	8005f46 <UART_Receive_IT+0x50>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d113      	bne.n	8005f46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	b29b      	uxth	r3, r3
 8005f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f34:	b29a      	uxth	r2, r3
 8005f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f3e:	1c9a      	adds	r2, r3, #2
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	629a      	str	r2, [r3, #40]	; 0x28
 8005f44:	e026      	b.n	8005f94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f58:	d007      	beq.n	8005f6a <UART_Receive_IT+0x74>
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <UART_Receive_IT+0x82>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d106      	bne.n	8005f78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f74:	701a      	strb	r2, [r3, #0]
 8005f76:	e008      	b.n	8005f8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685b      	ldr	r3, [r3, #4]
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f84:	b2da      	uxtb	r2, r3
 8005f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f8e:	1c5a      	adds	r2, r3, #1
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f98:	b29b      	uxth	r3, r3
 8005f9a:	3b01      	subs	r3, #1
 8005f9c:	b29b      	uxth	r3, r3
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d15d      	bne.n	8006064 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0220 	bic.w	r2, r2, #32
 8005fb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2220      	movs	r2, #32
 8005fdc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fea:	2b01      	cmp	r3, #1
 8005fec:	d135      	bne.n	800605a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	330c      	adds	r3, #12
 8005ffa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	e853 3f00 	ldrex	r3, [r3]
 8006002:	613b      	str	r3, [r7, #16]
   return(result);
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	f023 0310 	bic.w	r3, r3, #16
 800600a:	627b      	str	r3, [r7, #36]	; 0x24
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	330c      	adds	r3, #12
 8006012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006014:	623a      	str	r2, [r7, #32]
 8006016:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	69f9      	ldr	r1, [r7, #28]
 800601a:	6a3a      	ldr	r2, [r7, #32]
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	61bb      	str	r3, [r7, #24]
   return(result);
 8006022:	69bb      	ldr	r3, [r7, #24]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e5      	bne.n	8005ff4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0310 	and.w	r3, r3, #16
 8006032:	2b10      	cmp	r3, #16
 8006034:	d10a      	bne.n	800604c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006036:	2300      	movs	r3, #0
 8006038:	60fb      	str	r3, [r7, #12]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	60fb      	str	r3, [r7, #12]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	60fb      	str	r3, [r7, #12]
 800604a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006050:	4619      	mov	r1, r3
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f7ff fdc0 	bl	8005bd8 <HAL_UARTEx_RxEventCallback>
 8006058:	e002      	b.n	8006060 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7fc fc9c 	bl	8002998 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006060:	2300      	movs	r3, #0
 8006062:	e002      	b.n	800606a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006064:	2300      	movs	r3, #0
 8006066:	e000      	b.n	800606a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006068:	2302      	movs	r3, #2
  }
}
 800606a:	4618      	mov	r0, r3
 800606c:	3730      	adds	r7, #48	; 0x30
 800606e:	46bd      	mov	sp, r7
 8006070:	bd80      	pop	{r7, pc}
	...

08006074 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	4a8c      	ldr	r2, [pc, #560]	; (80062b4 <UART_SetConfig+0x240>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d904      	bls.n	8006090 <UART_SetConfig+0x1c>
 8006086:	f640 615d 	movw	r1, #3677	; 0xe5d
 800608a:	488b      	ldr	r0, [pc, #556]	; (80062b8 <UART_SetConfig+0x244>)
 800608c:	f7fd fa11 	bl	80034b2 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d009      	beq.n	80060ac <UART_SetConfig+0x38>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060a0:	d004      	beq.n	80060ac <UART_SetConfig+0x38>
 80060a2:	f640 615e 	movw	r1, #3678	; 0xe5e
 80060a6:	4884      	ldr	r0, [pc, #528]	; (80062b8 <UART_SetConfig+0x244>)
 80060a8:	f7fd fa03 	bl	80034b2 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	691b      	ldr	r3, [r3, #16]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d00e      	beq.n	80060d2 <UART_SetConfig+0x5e>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060bc:	d009      	beq.n	80060d2 <UART_SetConfig+0x5e>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80060c6:	d004      	beq.n	80060d2 <UART_SetConfig+0x5e>
 80060c8:	f640 615f 	movw	r1, #3679	; 0xe5f
 80060cc:	487a      	ldr	r0, [pc, #488]	; (80062b8 <UART_SetConfig+0x244>)
 80060ce:	f7fd f9f0 	bl	80034b2 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	695a      	ldr	r2, [r3, #20]
 80060d6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80060da:	4013      	ands	r3, r2
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d103      	bne.n	80060e8 <UART_SetConfig+0x74>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	695b      	ldr	r3, [r3, #20]
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d104      	bne.n	80060f2 <UART_SetConfig+0x7e>
 80060e8:	f44f 6166 	mov.w	r1, #3680	; 0xe60
 80060ec:	4872      	ldr	r0, [pc, #456]	; (80062b8 <UART_SetConfig+0x244>)
 80060ee:	f7fd f9e0 	bl	80034b2 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	689a      	ldr	r2, [r3, #8]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	691b      	ldr	r3, [r3, #16]
 8006110:	431a      	orrs	r2, r3
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	695b      	ldr	r3, [r3, #20]
 8006116:	431a      	orrs	r2, r3
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	69db      	ldr	r3, [r3, #28]
 800611c:	4313      	orrs	r3, r2
 800611e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800612a:	f023 030c 	bic.w	r3, r3, #12
 800612e:	687a      	ldr	r2, [r7, #4]
 8006130:	6812      	ldr	r2, [r2, #0]
 8006132:	68b9      	ldr	r1, [r7, #8]
 8006134:	430b      	orrs	r3, r1
 8006136:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	699a      	ldr	r2, [r3, #24]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1) || (huart->Instance == USART6))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a5a      	ldr	r2, [pc, #360]	; (80062bc <UART_SetConfig+0x248>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d004      	beq.n	8006162 <UART_SetConfig+0xee>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a58      	ldr	r2, [pc, #352]	; (80062c0 <UART_SetConfig+0x24c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d103      	bne.n	800616a <UART_SetConfig+0xf6>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006162:	f7ff f8f7 	bl	8005354 <HAL_RCC_GetPCLK2Freq>
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	e002      	b.n	8006170 <UART_SetConfig+0xfc>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800616a:	f7ff f8d1 	bl	8005310 <HAL_RCC_GetPCLK1Freq>
 800616e:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	69db      	ldr	r3, [r3, #28]
 8006174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006178:	d14c      	bne.n	8006214 <UART_SetConfig+0x1a0>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009a      	lsls	r2, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	005b      	lsls	r3, r3, #1
 800618c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006190:	4a4c      	ldr	r2, [pc, #304]	; (80062c4 <UART_SetConfig+0x250>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	0119      	lsls	r1, r3, #4
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	4613      	mov	r3, r2
 800619e:	009b      	lsls	r3, r3, #2
 80061a0:	4413      	add	r3, r2
 80061a2:	009a      	lsls	r2, r3, #2
 80061a4:	441a      	add	r2, r3
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	005b      	lsls	r3, r3, #1
 80061ac:	fbb2 f2f3 	udiv	r2, r2, r3
 80061b0:	4b44      	ldr	r3, [pc, #272]	; (80062c4 <UART_SetConfig+0x250>)
 80061b2:	fba3 0302 	umull	r0, r3, r3, r2
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	2064      	movs	r0, #100	; 0x64
 80061ba:	fb00 f303 	mul.w	r3, r0, r3
 80061be:	1ad3      	subs	r3, r2, r3
 80061c0:	00db      	lsls	r3, r3, #3
 80061c2:	3332      	adds	r3, #50	; 0x32
 80061c4:	4a3f      	ldr	r2, [pc, #252]	; (80062c4 <UART_SetConfig+0x250>)
 80061c6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	005b      	lsls	r3, r3, #1
 80061ce:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061d2:	4419      	add	r1, r3
 80061d4:	68fa      	ldr	r2, [r7, #12]
 80061d6:	4613      	mov	r3, r2
 80061d8:	009b      	lsls	r3, r3, #2
 80061da:	4413      	add	r3, r2
 80061dc:	009a      	lsls	r2, r3, #2
 80061de:	441a      	add	r2, r3
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80061ea:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <UART_SetConfig+0x250>)
 80061ec:	fba3 0302 	umull	r0, r3, r3, r2
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	2064      	movs	r0, #100	; 0x64
 80061f4:	fb00 f303 	mul.w	r3, r0, r3
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	3332      	adds	r3, #50	; 0x32
 80061fe:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <UART_SetConfig+0x250>)
 8006200:	fba2 2303 	umull	r2, r3, r2, r3
 8006204:	095b      	lsrs	r3, r3, #5
 8006206:	f003 0207 	and.w	r2, r3, #7
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	440a      	add	r2, r1
 8006210:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006212:	e04a      	b.n	80062aa <UART_SetConfig+0x236>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	4613      	mov	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4413      	add	r3, r2
 800621c:	009a      	lsls	r2, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	fbb2 f3f3 	udiv	r3, r2, r3
 800622a:	4a26      	ldr	r2, [pc, #152]	; (80062c4 <UART_SetConfig+0x250>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	095b      	lsrs	r3, r3, #5
 8006232:	0119      	lsls	r1, r3, #4
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4613      	mov	r3, r2
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	4413      	add	r3, r2
 800623c:	009a      	lsls	r2, r3, #2
 800623e:	441a      	add	r2, r3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	fbb2 f2f3 	udiv	r2, r2, r3
 800624a:	4b1e      	ldr	r3, [pc, #120]	; (80062c4 <UART_SetConfig+0x250>)
 800624c:	fba3 0302 	umull	r0, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2064      	movs	r0, #100	; 0x64
 8006254:	fb00 f303 	mul.w	r3, r0, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	3332      	adds	r3, #50	; 0x32
 800625e:	4a19      	ldr	r2, [pc, #100]	; (80062c4 <UART_SetConfig+0x250>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800626a:	4419      	add	r1, r3
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4613      	mov	r3, r2
 8006270:	009b      	lsls	r3, r3, #2
 8006272:	4413      	add	r3, r2
 8006274:	009a      	lsls	r2, r3, #2
 8006276:	441a      	add	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	685b      	ldr	r3, [r3, #4]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	fbb2 f2f3 	udiv	r2, r2, r3
 8006282:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <UART_SetConfig+0x250>)
 8006284:	fba3 0302 	umull	r0, r3, r3, r2
 8006288:	095b      	lsrs	r3, r3, #5
 800628a:	2064      	movs	r0, #100	; 0x64
 800628c:	fb00 f303 	mul.w	r3, r0, r3
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	011b      	lsls	r3, r3, #4
 8006294:	3332      	adds	r3, #50	; 0x32
 8006296:	4a0b      	ldr	r2, [pc, #44]	; (80062c4 <UART_SetConfig+0x250>)
 8006298:	fba2 2303 	umull	r2, r3, r2, r3
 800629c:	095b      	lsrs	r3, r3, #5
 800629e:	f003 020f 	and.w	r2, r3, #15
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	440a      	add	r2, r1
 80062a8:	609a      	str	r2, [r3, #8]
}
 80062aa:	bf00      	nop
 80062ac:	3710      	adds	r7, #16
 80062ae:	46bd      	mov	sp, r7
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	00a037a0 	.word	0x00a037a0
 80062b8:	0800ae54 	.word	0x0800ae54
 80062bc:	40011000 	.word	0x40011000
 80062c0:	40011400 	.word	0x40011400
 80062c4:	51eb851f 	.word	0x51eb851f

080062c8 <atof>:
 80062c8:	2100      	movs	r1, #0
 80062ca:	f001 bd5d 	b.w	8007d88 <strtod>

080062ce <atoi>:
 80062ce:	220a      	movs	r2, #10
 80062d0:	2100      	movs	r1, #0
 80062d2:	f001 be3d 	b.w	8007f50 <strtol>
	...

080062d8 <__errno>:
 80062d8:	4b01      	ldr	r3, [pc, #4]	; (80062e0 <__errno+0x8>)
 80062da:	6818      	ldr	r0, [r3, #0]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000034 	.word	0x20000034

080062e4 <__libc_init_array>:
 80062e4:	b570      	push	{r4, r5, r6, lr}
 80062e6:	2600      	movs	r6, #0
 80062e8:	4d0c      	ldr	r5, [pc, #48]	; (800631c <__libc_init_array+0x38>)
 80062ea:	4c0d      	ldr	r4, [pc, #52]	; (8006320 <__libc_init_array+0x3c>)
 80062ec:	1b64      	subs	r4, r4, r5
 80062ee:	10a4      	asrs	r4, r4, #2
 80062f0:	42a6      	cmp	r6, r4
 80062f2:	d109      	bne.n	8006308 <__libc_init_array+0x24>
 80062f4:	f004 fbec 	bl	800aad0 <_init>
 80062f8:	2600      	movs	r6, #0
 80062fa:	4d0a      	ldr	r5, [pc, #40]	; (8006324 <__libc_init_array+0x40>)
 80062fc:	4c0a      	ldr	r4, [pc, #40]	; (8006328 <__libc_init_array+0x44>)
 80062fe:	1b64      	subs	r4, r4, r5
 8006300:	10a4      	asrs	r4, r4, #2
 8006302:	42a6      	cmp	r6, r4
 8006304:	d105      	bne.n	8006312 <__libc_init_array+0x2e>
 8006306:	bd70      	pop	{r4, r5, r6, pc}
 8006308:	f855 3b04 	ldr.w	r3, [r5], #4
 800630c:	4798      	blx	r3
 800630e:	3601      	adds	r6, #1
 8006310:	e7ee      	b.n	80062f0 <__libc_init_array+0xc>
 8006312:	f855 3b04 	ldr.w	r3, [r5], #4
 8006316:	4798      	blx	r3
 8006318:	3601      	adds	r6, #1
 800631a:	e7f2      	b.n	8006302 <__libc_init_array+0x1e>
 800631c:	0800b410 	.word	0x0800b410
 8006320:	0800b410 	.word	0x0800b410
 8006324:	0800b410 	.word	0x0800b410
 8006328:	0800b414 	.word	0x0800b414

0800632c <malloc>:
 800632c:	4b02      	ldr	r3, [pc, #8]	; (8006338 <malloc+0xc>)
 800632e:	4601      	mov	r1, r0
 8006330:	6818      	ldr	r0, [r3, #0]
 8006332:	f000 b889 	b.w	8006448 <_malloc_r>
 8006336:	bf00      	nop
 8006338:	20000034 	.word	0x20000034

0800633c <free>:
 800633c:	4b02      	ldr	r3, [pc, #8]	; (8006348 <free+0xc>)
 800633e:	4601      	mov	r1, r0
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	f000 b819 	b.w	8006378 <_free_r>
 8006346:	bf00      	nop
 8006348:	20000034 	.word	0x20000034

0800634c <memcpy>:
 800634c:	440a      	add	r2, r1
 800634e:	4291      	cmp	r1, r2
 8006350:	f100 33ff 	add.w	r3, r0, #4294967295
 8006354:	d100      	bne.n	8006358 <memcpy+0xc>
 8006356:	4770      	bx	lr
 8006358:	b510      	push	{r4, lr}
 800635a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800635e:	4291      	cmp	r1, r2
 8006360:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006364:	d1f9      	bne.n	800635a <memcpy+0xe>
 8006366:	bd10      	pop	{r4, pc}

08006368 <memset>:
 8006368:	4603      	mov	r3, r0
 800636a:	4402      	add	r2, r0
 800636c:	4293      	cmp	r3, r2
 800636e:	d100      	bne.n	8006372 <memset+0xa>
 8006370:	4770      	bx	lr
 8006372:	f803 1b01 	strb.w	r1, [r3], #1
 8006376:	e7f9      	b.n	800636c <memset+0x4>

08006378 <_free_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	2900      	cmp	r1, #0
 800637e:	d040      	beq.n	8006402 <_free_r+0x8a>
 8006380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006384:	1f0c      	subs	r4, r1, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb8      	it	lt
 800638a:	18e4      	addlt	r4, r4, r3
 800638c:	f003 fb32 	bl	80099f4 <__malloc_lock>
 8006390:	4a1c      	ldr	r2, [pc, #112]	; (8006404 <_free_r+0x8c>)
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	b933      	cbnz	r3, 80063a4 <_free_r+0x2c>
 8006396:	6063      	str	r3, [r4, #4]
 8006398:	6014      	str	r4, [r2, #0]
 800639a:	4628      	mov	r0, r5
 800639c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a0:	f003 bb2e 	b.w	8009a00 <__malloc_unlock>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d908      	bls.n	80063ba <_free_r+0x42>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	bf01      	itttt	eq
 80063b0:	6819      	ldreq	r1, [r3, #0]
 80063b2:	685b      	ldreq	r3, [r3, #4]
 80063b4:	1809      	addeq	r1, r1, r0
 80063b6:	6021      	streq	r1, [r4, #0]
 80063b8:	e7ed      	b.n	8006396 <_free_r+0x1e>
 80063ba:	461a      	mov	r2, r3
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b10b      	cbz	r3, 80063c4 <_free_r+0x4c>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d9fa      	bls.n	80063ba <_free_r+0x42>
 80063c4:	6811      	ldr	r1, [r2, #0]
 80063c6:	1850      	adds	r0, r2, r1
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d10b      	bne.n	80063e4 <_free_r+0x6c>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	4401      	add	r1, r0
 80063d0:	1850      	adds	r0, r2, r1
 80063d2:	4283      	cmp	r3, r0
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	d1e0      	bne.n	800639a <_free_r+0x22>
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	4401      	add	r1, r0
 80063de:	6011      	str	r1, [r2, #0]
 80063e0:	6053      	str	r3, [r2, #4]
 80063e2:	e7da      	b.n	800639a <_free_r+0x22>
 80063e4:	d902      	bls.n	80063ec <_free_r+0x74>
 80063e6:	230c      	movs	r3, #12
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	e7d6      	b.n	800639a <_free_r+0x22>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	1821      	adds	r1, r4, r0
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf01      	itttt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	1809      	addeq	r1, r1, r0
 80063fa:	6021      	streq	r1, [r4, #0]
 80063fc:	6063      	str	r3, [r4, #4]
 80063fe:	6054      	str	r4, [r2, #4]
 8006400:	e7cb      	b.n	800639a <_free_r+0x22>
 8006402:	bd38      	pop	{r3, r4, r5, pc}
 8006404:	2000080c 	.word	0x2000080c

08006408 <sbrk_aligned>:
 8006408:	b570      	push	{r4, r5, r6, lr}
 800640a:	4e0e      	ldr	r6, [pc, #56]	; (8006444 <sbrk_aligned+0x3c>)
 800640c:	460c      	mov	r4, r1
 800640e:	6831      	ldr	r1, [r6, #0]
 8006410:	4605      	mov	r5, r0
 8006412:	b911      	cbnz	r1, 800641a <sbrk_aligned+0x12>
 8006414:	f000 fdc0 	bl	8006f98 <_sbrk_r>
 8006418:	6030      	str	r0, [r6, #0]
 800641a:	4621      	mov	r1, r4
 800641c:	4628      	mov	r0, r5
 800641e:	f000 fdbb 	bl	8006f98 <_sbrk_r>
 8006422:	1c43      	adds	r3, r0, #1
 8006424:	d00a      	beq.n	800643c <sbrk_aligned+0x34>
 8006426:	1cc4      	adds	r4, r0, #3
 8006428:	f024 0403 	bic.w	r4, r4, #3
 800642c:	42a0      	cmp	r0, r4
 800642e:	d007      	beq.n	8006440 <sbrk_aligned+0x38>
 8006430:	1a21      	subs	r1, r4, r0
 8006432:	4628      	mov	r0, r5
 8006434:	f000 fdb0 	bl	8006f98 <_sbrk_r>
 8006438:	3001      	adds	r0, #1
 800643a:	d101      	bne.n	8006440 <sbrk_aligned+0x38>
 800643c:	f04f 34ff 	mov.w	r4, #4294967295
 8006440:	4620      	mov	r0, r4
 8006442:	bd70      	pop	{r4, r5, r6, pc}
 8006444:	20000810 	.word	0x20000810

08006448 <_malloc_r>:
 8006448:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644c:	1ccd      	adds	r5, r1, #3
 800644e:	f025 0503 	bic.w	r5, r5, #3
 8006452:	3508      	adds	r5, #8
 8006454:	2d0c      	cmp	r5, #12
 8006456:	bf38      	it	cc
 8006458:	250c      	movcc	r5, #12
 800645a:	2d00      	cmp	r5, #0
 800645c:	4607      	mov	r7, r0
 800645e:	db01      	blt.n	8006464 <_malloc_r+0x1c>
 8006460:	42a9      	cmp	r1, r5
 8006462:	d905      	bls.n	8006470 <_malloc_r+0x28>
 8006464:	230c      	movs	r3, #12
 8006466:	2600      	movs	r6, #0
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	4630      	mov	r0, r6
 800646c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006470:	4e2e      	ldr	r6, [pc, #184]	; (800652c <_malloc_r+0xe4>)
 8006472:	f003 fabf 	bl	80099f4 <__malloc_lock>
 8006476:	6833      	ldr	r3, [r6, #0]
 8006478:	461c      	mov	r4, r3
 800647a:	bb34      	cbnz	r4, 80064ca <_malloc_r+0x82>
 800647c:	4629      	mov	r1, r5
 800647e:	4638      	mov	r0, r7
 8006480:	f7ff ffc2 	bl	8006408 <sbrk_aligned>
 8006484:	1c43      	adds	r3, r0, #1
 8006486:	4604      	mov	r4, r0
 8006488:	d14d      	bne.n	8006526 <_malloc_r+0xde>
 800648a:	6834      	ldr	r4, [r6, #0]
 800648c:	4626      	mov	r6, r4
 800648e:	2e00      	cmp	r6, #0
 8006490:	d140      	bne.n	8006514 <_malloc_r+0xcc>
 8006492:	6823      	ldr	r3, [r4, #0]
 8006494:	4631      	mov	r1, r6
 8006496:	4638      	mov	r0, r7
 8006498:	eb04 0803 	add.w	r8, r4, r3
 800649c:	f000 fd7c 	bl	8006f98 <_sbrk_r>
 80064a0:	4580      	cmp	r8, r0
 80064a2:	d13a      	bne.n	800651a <_malloc_r+0xd2>
 80064a4:	6821      	ldr	r1, [r4, #0]
 80064a6:	3503      	adds	r5, #3
 80064a8:	1a6d      	subs	r5, r5, r1
 80064aa:	f025 0503 	bic.w	r5, r5, #3
 80064ae:	3508      	adds	r5, #8
 80064b0:	2d0c      	cmp	r5, #12
 80064b2:	bf38      	it	cc
 80064b4:	250c      	movcc	r5, #12
 80064b6:	4638      	mov	r0, r7
 80064b8:	4629      	mov	r1, r5
 80064ba:	f7ff ffa5 	bl	8006408 <sbrk_aligned>
 80064be:	3001      	adds	r0, #1
 80064c0:	d02b      	beq.n	800651a <_malloc_r+0xd2>
 80064c2:	6823      	ldr	r3, [r4, #0]
 80064c4:	442b      	add	r3, r5
 80064c6:	6023      	str	r3, [r4, #0]
 80064c8:	e00e      	b.n	80064e8 <_malloc_r+0xa0>
 80064ca:	6822      	ldr	r2, [r4, #0]
 80064cc:	1b52      	subs	r2, r2, r5
 80064ce:	d41e      	bmi.n	800650e <_malloc_r+0xc6>
 80064d0:	2a0b      	cmp	r2, #11
 80064d2:	d916      	bls.n	8006502 <_malloc_r+0xba>
 80064d4:	1961      	adds	r1, r4, r5
 80064d6:	42a3      	cmp	r3, r4
 80064d8:	6025      	str	r5, [r4, #0]
 80064da:	bf18      	it	ne
 80064dc:	6059      	strne	r1, [r3, #4]
 80064de:	6863      	ldr	r3, [r4, #4]
 80064e0:	bf08      	it	eq
 80064e2:	6031      	streq	r1, [r6, #0]
 80064e4:	5162      	str	r2, [r4, r5]
 80064e6:	604b      	str	r3, [r1, #4]
 80064e8:	4638      	mov	r0, r7
 80064ea:	f104 060b 	add.w	r6, r4, #11
 80064ee:	f003 fa87 	bl	8009a00 <__malloc_unlock>
 80064f2:	f026 0607 	bic.w	r6, r6, #7
 80064f6:	1d23      	adds	r3, r4, #4
 80064f8:	1af2      	subs	r2, r6, r3
 80064fa:	d0b6      	beq.n	800646a <_malloc_r+0x22>
 80064fc:	1b9b      	subs	r3, r3, r6
 80064fe:	50a3      	str	r3, [r4, r2]
 8006500:	e7b3      	b.n	800646a <_malloc_r+0x22>
 8006502:	6862      	ldr	r2, [r4, #4]
 8006504:	42a3      	cmp	r3, r4
 8006506:	bf0c      	ite	eq
 8006508:	6032      	streq	r2, [r6, #0]
 800650a:	605a      	strne	r2, [r3, #4]
 800650c:	e7ec      	b.n	80064e8 <_malloc_r+0xa0>
 800650e:	4623      	mov	r3, r4
 8006510:	6864      	ldr	r4, [r4, #4]
 8006512:	e7b2      	b.n	800647a <_malloc_r+0x32>
 8006514:	4634      	mov	r4, r6
 8006516:	6876      	ldr	r6, [r6, #4]
 8006518:	e7b9      	b.n	800648e <_malloc_r+0x46>
 800651a:	230c      	movs	r3, #12
 800651c:	4638      	mov	r0, r7
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	f003 fa6e 	bl	8009a00 <__malloc_unlock>
 8006524:	e7a1      	b.n	800646a <_malloc_r+0x22>
 8006526:	6025      	str	r5, [r4, #0]
 8006528:	e7de      	b.n	80064e8 <_malloc_r+0xa0>
 800652a:	bf00      	nop
 800652c:	2000080c 	.word	0x2000080c

08006530 <__cvt>:
 8006530:	2b00      	cmp	r3, #0
 8006532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006536:	461f      	mov	r7, r3
 8006538:	bfbb      	ittet	lt
 800653a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800653e:	461f      	movlt	r7, r3
 8006540:	2300      	movge	r3, #0
 8006542:	232d      	movlt	r3, #45	; 0x2d
 8006544:	b088      	sub	sp, #32
 8006546:	4614      	mov	r4, r2
 8006548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800654a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800654c:	7013      	strb	r3, [r2, #0]
 800654e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006550:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8006554:	f023 0820 	bic.w	r8, r3, #32
 8006558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800655c:	d005      	beq.n	800656a <__cvt+0x3a>
 800655e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006562:	d100      	bne.n	8006566 <__cvt+0x36>
 8006564:	3501      	adds	r5, #1
 8006566:	2302      	movs	r3, #2
 8006568:	e000      	b.n	800656c <__cvt+0x3c>
 800656a:	2303      	movs	r3, #3
 800656c:	aa07      	add	r2, sp, #28
 800656e:	9204      	str	r2, [sp, #16]
 8006570:	aa06      	add	r2, sp, #24
 8006572:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006576:	e9cd 3500 	strd	r3, r5, [sp]
 800657a:	4622      	mov	r2, r4
 800657c:	463b      	mov	r3, r7
 800657e:	f001 fe7f 	bl	8008280 <_dtoa_r>
 8006582:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006586:	4606      	mov	r6, r0
 8006588:	d102      	bne.n	8006590 <__cvt+0x60>
 800658a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800658c:	07db      	lsls	r3, r3, #31
 800658e:	d522      	bpl.n	80065d6 <__cvt+0xa6>
 8006590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006594:	eb06 0905 	add.w	r9, r6, r5
 8006598:	d110      	bne.n	80065bc <__cvt+0x8c>
 800659a:	7833      	ldrb	r3, [r6, #0]
 800659c:	2b30      	cmp	r3, #48	; 0x30
 800659e:	d10a      	bne.n	80065b6 <__cvt+0x86>
 80065a0:	2200      	movs	r2, #0
 80065a2:	2300      	movs	r3, #0
 80065a4:	4620      	mov	r0, r4
 80065a6:	4639      	mov	r1, r7
 80065a8:	f7fa fa44 	bl	8000a34 <__aeabi_dcmpeq>
 80065ac:	b918      	cbnz	r0, 80065b6 <__cvt+0x86>
 80065ae:	f1c5 0501 	rsb	r5, r5, #1
 80065b2:	f8ca 5000 	str.w	r5, [sl]
 80065b6:	f8da 3000 	ldr.w	r3, [sl]
 80065ba:	4499      	add	r9, r3
 80065bc:	2200      	movs	r2, #0
 80065be:	2300      	movs	r3, #0
 80065c0:	4620      	mov	r0, r4
 80065c2:	4639      	mov	r1, r7
 80065c4:	f7fa fa36 	bl	8000a34 <__aeabi_dcmpeq>
 80065c8:	b108      	cbz	r0, 80065ce <__cvt+0x9e>
 80065ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80065ce:	2230      	movs	r2, #48	; 0x30
 80065d0:	9b07      	ldr	r3, [sp, #28]
 80065d2:	454b      	cmp	r3, r9
 80065d4:	d307      	bcc.n	80065e6 <__cvt+0xb6>
 80065d6:	4630      	mov	r0, r6
 80065d8:	9b07      	ldr	r3, [sp, #28]
 80065da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80065dc:	1b9b      	subs	r3, r3, r6
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	b008      	add	sp, #32
 80065e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e6:	1c59      	adds	r1, r3, #1
 80065e8:	9107      	str	r1, [sp, #28]
 80065ea:	701a      	strb	r2, [r3, #0]
 80065ec:	e7f0      	b.n	80065d0 <__cvt+0xa0>

080065ee <__exponent>:
 80065ee:	4603      	mov	r3, r0
 80065f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065f2:	2900      	cmp	r1, #0
 80065f4:	f803 2b02 	strb.w	r2, [r3], #2
 80065f8:	bfb6      	itet	lt
 80065fa:	222d      	movlt	r2, #45	; 0x2d
 80065fc:	222b      	movge	r2, #43	; 0x2b
 80065fe:	4249      	neglt	r1, r1
 8006600:	2909      	cmp	r1, #9
 8006602:	7042      	strb	r2, [r0, #1]
 8006604:	dd2b      	ble.n	800665e <__exponent+0x70>
 8006606:	f10d 0407 	add.w	r4, sp, #7
 800660a:	46a4      	mov	ip, r4
 800660c:	270a      	movs	r7, #10
 800660e:	fb91 f6f7 	sdiv	r6, r1, r7
 8006612:	460a      	mov	r2, r1
 8006614:	46a6      	mov	lr, r4
 8006616:	fb07 1516 	mls	r5, r7, r6, r1
 800661a:	2a63      	cmp	r2, #99	; 0x63
 800661c:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8006620:	4631      	mov	r1, r6
 8006622:	f104 34ff 	add.w	r4, r4, #4294967295
 8006626:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800662a:	dcf0      	bgt.n	800660e <__exponent+0x20>
 800662c:	3130      	adds	r1, #48	; 0x30
 800662e:	f1ae 0502 	sub.w	r5, lr, #2
 8006632:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006636:	4629      	mov	r1, r5
 8006638:	1c44      	adds	r4, r0, #1
 800663a:	4561      	cmp	r1, ip
 800663c:	d30a      	bcc.n	8006654 <__exponent+0x66>
 800663e:	f10d 0209 	add.w	r2, sp, #9
 8006642:	eba2 020e 	sub.w	r2, r2, lr
 8006646:	4565      	cmp	r5, ip
 8006648:	bf88      	it	hi
 800664a:	2200      	movhi	r2, #0
 800664c:	4413      	add	r3, r2
 800664e:	1a18      	subs	r0, r3, r0
 8006650:	b003      	add	sp, #12
 8006652:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006654:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006658:	f804 2f01 	strb.w	r2, [r4, #1]!
 800665c:	e7ed      	b.n	800663a <__exponent+0x4c>
 800665e:	2330      	movs	r3, #48	; 0x30
 8006660:	3130      	adds	r1, #48	; 0x30
 8006662:	7083      	strb	r3, [r0, #2]
 8006664:	70c1      	strb	r1, [r0, #3]
 8006666:	1d03      	adds	r3, r0, #4
 8006668:	e7f1      	b.n	800664e <__exponent+0x60>
	...

0800666c <_printf_float>:
 800666c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006670:	b091      	sub	sp, #68	; 0x44
 8006672:	460c      	mov	r4, r1
 8006674:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8006678:	4616      	mov	r6, r2
 800667a:	461f      	mov	r7, r3
 800667c:	4605      	mov	r5, r0
 800667e:	f003 f919 	bl	80098b4 <_localeconv_r>
 8006682:	6803      	ldr	r3, [r0, #0]
 8006684:	4618      	mov	r0, r3
 8006686:	9309      	str	r3, [sp, #36]	; 0x24
 8006688:	f7f9 fda8 	bl	80001dc <strlen>
 800668c:	2300      	movs	r3, #0
 800668e:	930e      	str	r3, [sp, #56]	; 0x38
 8006690:	f8d8 3000 	ldr.w	r3, [r8]
 8006694:	900a      	str	r0, [sp, #40]	; 0x28
 8006696:	3307      	adds	r3, #7
 8006698:	f023 0307 	bic.w	r3, r3, #7
 800669c:	f103 0208 	add.w	r2, r3, #8
 80066a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066a4:	f8d4 b000 	ldr.w	fp, [r4]
 80066a8:	f8c8 2000 	str.w	r2, [r8]
 80066ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80066b4:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80066b8:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80066bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80066be:	f04f 32ff 	mov.w	r2, #4294967295
 80066c2:	4640      	mov	r0, r8
 80066c4:	4b9c      	ldr	r3, [pc, #624]	; (8006938 <_printf_float+0x2cc>)
 80066c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066c8:	f7fa f9e6 	bl	8000a98 <__aeabi_dcmpun>
 80066cc:	bb70      	cbnz	r0, 800672c <_printf_float+0xc0>
 80066ce:	f04f 32ff 	mov.w	r2, #4294967295
 80066d2:	4640      	mov	r0, r8
 80066d4:	4b98      	ldr	r3, [pc, #608]	; (8006938 <_printf_float+0x2cc>)
 80066d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80066d8:	f7fa f9c0 	bl	8000a5c <__aeabi_dcmple>
 80066dc:	bb30      	cbnz	r0, 800672c <_printf_float+0xc0>
 80066de:	2200      	movs	r2, #0
 80066e0:	2300      	movs	r3, #0
 80066e2:	4640      	mov	r0, r8
 80066e4:	4651      	mov	r1, sl
 80066e6:	f7fa f9af 	bl	8000a48 <__aeabi_dcmplt>
 80066ea:	b110      	cbz	r0, 80066f2 <_printf_float+0x86>
 80066ec:	232d      	movs	r3, #45	; 0x2d
 80066ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066f2:	4b92      	ldr	r3, [pc, #584]	; (800693c <_printf_float+0x2d0>)
 80066f4:	4892      	ldr	r0, [pc, #584]	; (8006940 <_printf_float+0x2d4>)
 80066f6:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066fa:	bf94      	ite	ls
 80066fc:	4698      	movls	r8, r3
 80066fe:	4680      	movhi	r8, r0
 8006700:	2303      	movs	r3, #3
 8006702:	f04f 0a00 	mov.w	sl, #0
 8006706:	6123      	str	r3, [r4, #16]
 8006708:	f02b 0304 	bic.w	r3, fp, #4
 800670c:	6023      	str	r3, [r4, #0]
 800670e:	4633      	mov	r3, r6
 8006710:	4621      	mov	r1, r4
 8006712:	4628      	mov	r0, r5
 8006714:	9700      	str	r7, [sp, #0]
 8006716:	aa0f      	add	r2, sp, #60	; 0x3c
 8006718:	f000 f9d4 	bl	8006ac4 <_printf_common>
 800671c:	3001      	adds	r0, #1
 800671e:	f040 8090 	bne.w	8006842 <_printf_float+0x1d6>
 8006722:	f04f 30ff 	mov.w	r0, #4294967295
 8006726:	b011      	add	sp, #68	; 0x44
 8006728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800672c:	4642      	mov	r2, r8
 800672e:	4653      	mov	r3, sl
 8006730:	4640      	mov	r0, r8
 8006732:	4651      	mov	r1, sl
 8006734:	f7fa f9b0 	bl	8000a98 <__aeabi_dcmpun>
 8006738:	b148      	cbz	r0, 800674e <_printf_float+0xe2>
 800673a:	f1ba 0f00 	cmp.w	sl, #0
 800673e:	bfb8      	it	lt
 8006740:	232d      	movlt	r3, #45	; 0x2d
 8006742:	4880      	ldr	r0, [pc, #512]	; (8006944 <_printf_float+0x2d8>)
 8006744:	bfb8      	it	lt
 8006746:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800674a:	4b7f      	ldr	r3, [pc, #508]	; (8006948 <_printf_float+0x2dc>)
 800674c:	e7d3      	b.n	80066f6 <_printf_float+0x8a>
 800674e:	6863      	ldr	r3, [r4, #4]
 8006750:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006754:	1c5a      	adds	r2, r3, #1
 8006756:	d142      	bne.n	80067de <_printf_float+0x172>
 8006758:	2306      	movs	r3, #6
 800675a:	6063      	str	r3, [r4, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	9206      	str	r2, [sp, #24]
 8006760:	aa0e      	add	r2, sp, #56	; 0x38
 8006762:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006766:	aa0d      	add	r2, sp, #52	; 0x34
 8006768:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 800676c:	9203      	str	r2, [sp, #12]
 800676e:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 8006772:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	4642      	mov	r2, r8
 800677c:	9300      	str	r3, [sp, #0]
 800677e:	4628      	mov	r0, r5
 8006780:	4653      	mov	r3, sl
 8006782:	910b      	str	r1, [sp, #44]	; 0x2c
 8006784:	f7ff fed4 	bl	8006530 <__cvt>
 8006788:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800678a:	4680      	mov	r8, r0
 800678c:	2947      	cmp	r1, #71	; 0x47
 800678e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8006790:	d108      	bne.n	80067a4 <_printf_float+0x138>
 8006792:	1cc8      	adds	r0, r1, #3
 8006794:	db02      	blt.n	800679c <_printf_float+0x130>
 8006796:	6863      	ldr	r3, [r4, #4]
 8006798:	4299      	cmp	r1, r3
 800679a:	dd40      	ble.n	800681e <_printf_float+0x1b2>
 800679c:	f1a9 0902 	sub.w	r9, r9, #2
 80067a0:	fa5f f989 	uxtb.w	r9, r9
 80067a4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80067a8:	d81f      	bhi.n	80067ea <_printf_float+0x17e>
 80067aa:	464a      	mov	r2, r9
 80067ac:	3901      	subs	r1, #1
 80067ae:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80067b2:	910d      	str	r1, [sp, #52]	; 0x34
 80067b4:	f7ff ff1b 	bl	80065ee <__exponent>
 80067b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80067ba:	4682      	mov	sl, r0
 80067bc:	1813      	adds	r3, r2, r0
 80067be:	2a01      	cmp	r2, #1
 80067c0:	6123      	str	r3, [r4, #16]
 80067c2:	dc02      	bgt.n	80067ca <_printf_float+0x15e>
 80067c4:	6822      	ldr	r2, [r4, #0]
 80067c6:	07d2      	lsls	r2, r2, #31
 80067c8:	d501      	bpl.n	80067ce <_printf_float+0x162>
 80067ca:	3301      	adds	r3, #1
 80067cc:	6123      	str	r3, [r4, #16]
 80067ce:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d09b      	beq.n	800670e <_printf_float+0xa2>
 80067d6:	232d      	movs	r3, #45	; 0x2d
 80067d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067dc:	e797      	b.n	800670e <_printf_float+0xa2>
 80067de:	2947      	cmp	r1, #71	; 0x47
 80067e0:	d1bc      	bne.n	800675c <_printf_float+0xf0>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1ba      	bne.n	800675c <_printf_float+0xf0>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7b7      	b.n	800675a <_printf_float+0xee>
 80067ea:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067ee:	d118      	bne.n	8006822 <_printf_float+0x1b6>
 80067f0:	2900      	cmp	r1, #0
 80067f2:	6863      	ldr	r3, [r4, #4]
 80067f4:	dd0b      	ble.n	800680e <_printf_float+0x1a2>
 80067f6:	6121      	str	r1, [r4, #16]
 80067f8:	b913      	cbnz	r3, 8006800 <_printf_float+0x194>
 80067fa:	6822      	ldr	r2, [r4, #0]
 80067fc:	07d0      	lsls	r0, r2, #31
 80067fe:	d502      	bpl.n	8006806 <_printf_float+0x19a>
 8006800:	3301      	adds	r3, #1
 8006802:	440b      	add	r3, r1
 8006804:	6123      	str	r3, [r4, #16]
 8006806:	f04f 0a00 	mov.w	sl, #0
 800680a:	65a1      	str	r1, [r4, #88]	; 0x58
 800680c:	e7df      	b.n	80067ce <_printf_float+0x162>
 800680e:	b913      	cbnz	r3, 8006816 <_printf_float+0x1aa>
 8006810:	6822      	ldr	r2, [r4, #0]
 8006812:	07d2      	lsls	r2, r2, #31
 8006814:	d501      	bpl.n	800681a <_printf_float+0x1ae>
 8006816:	3302      	adds	r3, #2
 8006818:	e7f4      	b.n	8006804 <_printf_float+0x198>
 800681a:	2301      	movs	r3, #1
 800681c:	e7f2      	b.n	8006804 <_printf_float+0x198>
 800681e:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006824:	4299      	cmp	r1, r3
 8006826:	db05      	blt.n	8006834 <_printf_float+0x1c8>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	6121      	str	r1, [r4, #16]
 800682c:	07d8      	lsls	r0, r3, #31
 800682e:	d5ea      	bpl.n	8006806 <_printf_float+0x19a>
 8006830:	1c4b      	adds	r3, r1, #1
 8006832:	e7e7      	b.n	8006804 <_printf_float+0x198>
 8006834:	2900      	cmp	r1, #0
 8006836:	bfcc      	ite	gt
 8006838:	2201      	movgt	r2, #1
 800683a:	f1c1 0202 	rsble	r2, r1, #2
 800683e:	4413      	add	r3, r2
 8006840:	e7e0      	b.n	8006804 <_printf_float+0x198>
 8006842:	6823      	ldr	r3, [r4, #0]
 8006844:	055a      	lsls	r2, r3, #21
 8006846:	d407      	bmi.n	8006858 <_printf_float+0x1ec>
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	4642      	mov	r2, r8
 800684c:	4631      	mov	r1, r6
 800684e:	4628      	mov	r0, r5
 8006850:	47b8      	blx	r7
 8006852:	3001      	adds	r0, #1
 8006854:	d12b      	bne.n	80068ae <_printf_float+0x242>
 8006856:	e764      	b.n	8006722 <_printf_float+0xb6>
 8006858:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800685c:	f240 80dd 	bls.w	8006a1a <_printf_float+0x3ae>
 8006860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f8e4 	bl	8000a34 <__aeabi_dcmpeq>
 800686c:	2800      	cmp	r0, #0
 800686e:	d033      	beq.n	80068d8 <_printf_float+0x26c>
 8006870:	2301      	movs	r3, #1
 8006872:	4631      	mov	r1, r6
 8006874:	4628      	mov	r0, r5
 8006876:	4a35      	ldr	r2, [pc, #212]	; (800694c <_printf_float+0x2e0>)
 8006878:	47b8      	blx	r7
 800687a:	3001      	adds	r0, #1
 800687c:	f43f af51 	beq.w	8006722 <_printf_float+0xb6>
 8006880:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006884:	429a      	cmp	r2, r3
 8006886:	db02      	blt.n	800688e <_printf_float+0x222>
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	07d8      	lsls	r0, r3, #31
 800688c:	d50f      	bpl.n	80068ae <_printf_float+0x242>
 800688e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f af42 	beq.w	8006722 <_printf_float+0xb6>
 800689e:	f04f 0800 	mov.w	r8, #0
 80068a2:	f104 091a 	add.w	r9, r4, #26
 80068a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80068a8:	3b01      	subs	r3, #1
 80068aa:	4543      	cmp	r3, r8
 80068ac:	dc09      	bgt.n	80068c2 <_printf_float+0x256>
 80068ae:	6823      	ldr	r3, [r4, #0]
 80068b0:	079b      	lsls	r3, r3, #30
 80068b2:	f100 8102 	bmi.w	8006aba <_printf_float+0x44e>
 80068b6:	68e0      	ldr	r0, [r4, #12]
 80068b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80068ba:	4298      	cmp	r0, r3
 80068bc:	bfb8      	it	lt
 80068be:	4618      	movlt	r0, r3
 80068c0:	e731      	b.n	8006726 <_printf_float+0xba>
 80068c2:	2301      	movs	r3, #1
 80068c4:	464a      	mov	r2, r9
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f af28 	beq.w	8006722 <_printf_float+0xb6>
 80068d2:	f108 0801 	add.w	r8, r8, #1
 80068d6:	e7e6      	b.n	80068a6 <_printf_float+0x23a>
 80068d8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80068da:	2b00      	cmp	r3, #0
 80068dc:	dc38      	bgt.n	8006950 <_printf_float+0x2e4>
 80068de:	2301      	movs	r3, #1
 80068e0:	4631      	mov	r1, r6
 80068e2:	4628      	mov	r0, r5
 80068e4:	4a19      	ldr	r2, [pc, #100]	; (800694c <_printf_float+0x2e0>)
 80068e6:	47b8      	blx	r7
 80068e8:	3001      	adds	r0, #1
 80068ea:	f43f af1a 	beq.w	8006722 <_printf_float+0xb6>
 80068ee:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80068f2:	4313      	orrs	r3, r2
 80068f4:	d102      	bne.n	80068fc <_printf_float+0x290>
 80068f6:	6823      	ldr	r3, [r4, #0]
 80068f8:	07d9      	lsls	r1, r3, #31
 80068fa:	d5d8      	bpl.n	80068ae <_printf_float+0x242>
 80068fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af0b 	beq.w	8006722 <_printf_float+0xb6>
 800690c:	f04f 0900 	mov.w	r9, #0
 8006910:	f104 0a1a 	add.w	sl, r4, #26
 8006914:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006916:	425b      	negs	r3, r3
 8006918:	454b      	cmp	r3, r9
 800691a:	dc01      	bgt.n	8006920 <_printf_float+0x2b4>
 800691c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800691e:	e794      	b.n	800684a <_printf_float+0x1de>
 8006920:	2301      	movs	r3, #1
 8006922:	4652      	mov	r2, sl
 8006924:	4631      	mov	r1, r6
 8006926:	4628      	mov	r0, r5
 8006928:	47b8      	blx	r7
 800692a:	3001      	adds	r0, #1
 800692c:	f43f aef9 	beq.w	8006722 <_printf_float+0xb6>
 8006930:	f109 0901 	add.w	r9, r9, #1
 8006934:	e7ee      	b.n	8006914 <_printf_float+0x2a8>
 8006936:	bf00      	nop
 8006938:	7fefffff 	.word	0x7fefffff
 800693c:	0800afb0 	.word	0x0800afb0
 8006940:	0800afb4 	.word	0x0800afb4
 8006944:	0800afbc 	.word	0x0800afbc
 8006948:	0800afb8 	.word	0x0800afb8
 800694c:	0800afc0 	.word	0x0800afc0
 8006950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006952:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006954:	429a      	cmp	r2, r3
 8006956:	bfa8      	it	ge
 8006958:	461a      	movge	r2, r3
 800695a:	2a00      	cmp	r2, #0
 800695c:	4691      	mov	r9, r2
 800695e:	dc37      	bgt.n	80069d0 <_printf_float+0x364>
 8006960:	f04f 0b00 	mov.w	fp, #0
 8006964:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006968:	f104 021a 	add.w	r2, r4, #26
 800696c:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8006970:	ebaa 0309 	sub.w	r3, sl, r9
 8006974:	455b      	cmp	r3, fp
 8006976:	dc33      	bgt.n	80069e0 <_printf_float+0x374>
 8006978:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800697c:	429a      	cmp	r2, r3
 800697e:	db3b      	blt.n	80069f8 <_printf_float+0x38c>
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	07da      	lsls	r2, r3, #31
 8006984:	d438      	bmi.n	80069f8 <_printf_float+0x38c>
 8006986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006988:	990d      	ldr	r1, [sp, #52]	; 0x34
 800698a:	eba3 020a 	sub.w	r2, r3, sl
 800698e:	eba3 0901 	sub.w	r9, r3, r1
 8006992:	4591      	cmp	r9, r2
 8006994:	bfa8      	it	ge
 8006996:	4691      	movge	r9, r2
 8006998:	f1b9 0f00 	cmp.w	r9, #0
 800699c:	dc34      	bgt.n	8006a08 <_printf_float+0x39c>
 800699e:	f04f 0800 	mov.w	r8, #0
 80069a2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069a6:	f104 0a1a 	add.w	sl, r4, #26
 80069aa:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80069ae:	1a9b      	subs	r3, r3, r2
 80069b0:	eba3 0309 	sub.w	r3, r3, r9
 80069b4:	4543      	cmp	r3, r8
 80069b6:	f77f af7a 	ble.w	80068ae <_printf_float+0x242>
 80069ba:	2301      	movs	r3, #1
 80069bc:	4652      	mov	r2, sl
 80069be:	4631      	mov	r1, r6
 80069c0:	4628      	mov	r0, r5
 80069c2:	47b8      	blx	r7
 80069c4:	3001      	adds	r0, #1
 80069c6:	f43f aeac 	beq.w	8006722 <_printf_float+0xb6>
 80069ca:	f108 0801 	add.w	r8, r8, #1
 80069ce:	e7ec      	b.n	80069aa <_printf_float+0x33e>
 80069d0:	4613      	mov	r3, r2
 80069d2:	4631      	mov	r1, r6
 80069d4:	4642      	mov	r2, r8
 80069d6:	4628      	mov	r0, r5
 80069d8:	47b8      	blx	r7
 80069da:	3001      	adds	r0, #1
 80069dc:	d1c0      	bne.n	8006960 <_printf_float+0x2f4>
 80069de:	e6a0      	b.n	8006722 <_printf_float+0xb6>
 80069e0:	2301      	movs	r3, #1
 80069e2:	4631      	mov	r1, r6
 80069e4:	4628      	mov	r0, r5
 80069e6:	920b      	str	r2, [sp, #44]	; 0x2c
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f ae99 	beq.w	8006722 <_printf_float+0xb6>
 80069f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069f2:	f10b 0b01 	add.w	fp, fp, #1
 80069f6:	e7b9      	b.n	800696c <_printf_float+0x300>
 80069f8:	4631      	mov	r1, r6
 80069fa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80069fe:	4628      	mov	r0, r5
 8006a00:	47b8      	blx	r7
 8006a02:	3001      	adds	r0, #1
 8006a04:	d1bf      	bne.n	8006986 <_printf_float+0x31a>
 8006a06:	e68c      	b.n	8006722 <_printf_float+0xb6>
 8006a08:	464b      	mov	r3, r9
 8006a0a:	4631      	mov	r1, r6
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	eb08 020a 	add.w	r2, r8, sl
 8006a12:	47b8      	blx	r7
 8006a14:	3001      	adds	r0, #1
 8006a16:	d1c2      	bne.n	800699e <_printf_float+0x332>
 8006a18:	e683      	b.n	8006722 <_printf_float+0xb6>
 8006a1a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006a1c:	2a01      	cmp	r2, #1
 8006a1e:	dc01      	bgt.n	8006a24 <_printf_float+0x3b8>
 8006a20:	07db      	lsls	r3, r3, #31
 8006a22:	d537      	bpl.n	8006a94 <_printf_float+0x428>
 8006a24:	2301      	movs	r3, #1
 8006a26:	4642      	mov	r2, r8
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae77 	beq.w	8006722 <_printf_float+0xb6>
 8006a34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006a38:	4631      	mov	r1, r6
 8006a3a:	4628      	mov	r0, r5
 8006a3c:	47b8      	blx	r7
 8006a3e:	3001      	adds	r0, #1
 8006a40:	f43f ae6f 	beq.w	8006722 <_printf_float+0xb6>
 8006a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	f7f9 fff2 	bl	8000a34 <__aeabi_dcmpeq>
 8006a50:	b9d8      	cbnz	r0, 8006a8a <_printf_float+0x41e>
 8006a52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a54:	f108 0201 	add.w	r2, r8, #1
 8006a58:	3b01      	subs	r3, #1
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	d10e      	bne.n	8006a82 <_printf_float+0x416>
 8006a64:	e65d      	b.n	8006722 <_printf_float+0xb6>
 8006a66:	2301      	movs	r3, #1
 8006a68:	464a      	mov	r2, r9
 8006a6a:	4631      	mov	r1, r6
 8006a6c:	4628      	mov	r0, r5
 8006a6e:	47b8      	blx	r7
 8006a70:	3001      	adds	r0, #1
 8006a72:	f43f ae56 	beq.w	8006722 <_printf_float+0xb6>
 8006a76:	f108 0801 	add.w	r8, r8, #1
 8006a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	4543      	cmp	r3, r8
 8006a80:	dcf1      	bgt.n	8006a66 <_printf_float+0x3fa>
 8006a82:	4653      	mov	r3, sl
 8006a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a88:	e6e0      	b.n	800684c <_printf_float+0x1e0>
 8006a8a:	f04f 0800 	mov.w	r8, #0
 8006a8e:	f104 091a 	add.w	r9, r4, #26
 8006a92:	e7f2      	b.n	8006a7a <_printf_float+0x40e>
 8006a94:	2301      	movs	r3, #1
 8006a96:	4642      	mov	r2, r8
 8006a98:	e7df      	b.n	8006a5a <_printf_float+0x3ee>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	464a      	mov	r2, r9
 8006a9e:	4631      	mov	r1, r6
 8006aa0:	4628      	mov	r0, r5
 8006aa2:	47b8      	blx	r7
 8006aa4:	3001      	adds	r0, #1
 8006aa6:	f43f ae3c 	beq.w	8006722 <_printf_float+0xb6>
 8006aaa:	f108 0801 	add.w	r8, r8, #1
 8006aae:	68e3      	ldr	r3, [r4, #12]
 8006ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006ab2:	1a5b      	subs	r3, r3, r1
 8006ab4:	4543      	cmp	r3, r8
 8006ab6:	dcf0      	bgt.n	8006a9a <_printf_float+0x42e>
 8006ab8:	e6fd      	b.n	80068b6 <_printf_float+0x24a>
 8006aba:	f04f 0800 	mov.w	r8, #0
 8006abe:	f104 0919 	add.w	r9, r4, #25
 8006ac2:	e7f4      	b.n	8006aae <_printf_float+0x442>

08006ac4 <_printf_common>:
 8006ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac8:	4616      	mov	r6, r2
 8006aca:	4699      	mov	r9, r3
 8006acc:	688a      	ldr	r2, [r1, #8]
 8006ace:	690b      	ldr	r3, [r1, #16]
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfb8      	it	lt
 8006ad6:	4613      	movlt	r3, r2
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ade:	460c      	mov	r4, r1
 8006ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae4:	b10a      	cbz	r2, 8006aea <_printf_common+0x26>
 8006ae6:	3301      	adds	r3, #1
 8006ae8:	6033      	str	r3, [r6, #0]
 8006aea:	6823      	ldr	r3, [r4, #0]
 8006aec:	0699      	lsls	r1, r3, #26
 8006aee:	bf42      	ittt	mi
 8006af0:	6833      	ldrmi	r3, [r6, #0]
 8006af2:	3302      	addmi	r3, #2
 8006af4:	6033      	strmi	r3, [r6, #0]
 8006af6:	6825      	ldr	r5, [r4, #0]
 8006af8:	f015 0506 	ands.w	r5, r5, #6
 8006afc:	d106      	bne.n	8006b0c <_printf_common+0x48>
 8006afe:	f104 0a19 	add.w	sl, r4, #25
 8006b02:	68e3      	ldr	r3, [r4, #12]
 8006b04:	6832      	ldr	r2, [r6, #0]
 8006b06:	1a9b      	subs	r3, r3, r2
 8006b08:	42ab      	cmp	r3, r5
 8006b0a:	dc28      	bgt.n	8006b5e <_printf_common+0x9a>
 8006b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b10:	1e13      	subs	r3, r2, #0
 8006b12:	6822      	ldr	r2, [r4, #0]
 8006b14:	bf18      	it	ne
 8006b16:	2301      	movne	r3, #1
 8006b18:	0692      	lsls	r2, r2, #26
 8006b1a:	d42d      	bmi.n	8006b78 <_printf_common+0xb4>
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b24:	47c0      	blx	r8
 8006b26:	3001      	adds	r0, #1
 8006b28:	d020      	beq.n	8006b6c <_printf_common+0xa8>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	68e5      	ldr	r5, [r4, #12]
 8006b2e:	f003 0306 	and.w	r3, r3, #6
 8006b32:	2b04      	cmp	r3, #4
 8006b34:	bf18      	it	ne
 8006b36:	2500      	movne	r5, #0
 8006b38:	6832      	ldr	r2, [r6, #0]
 8006b3a:	f04f 0600 	mov.w	r6, #0
 8006b3e:	68a3      	ldr	r3, [r4, #8]
 8006b40:	bf08      	it	eq
 8006b42:	1aad      	subeq	r5, r5, r2
 8006b44:	6922      	ldr	r2, [r4, #16]
 8006b46:	bf08      	it	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	bfc4      	itt	gt
 8006b50:	1a9b      	subgt	r3, r3, r2
 8006b52:	18ed      	addgt	r5, r5, r3
 8006b54:	341a      	adds	r4, #26
 8006b56:	42b5      	cmp	r5, r6
 8006b58:	d11a      	bne.n	8006b90 <_printf_common+0xcc>
 8006b5a:	2000      	movs	r0, #0
 8006b5c:	e008      	b.n	8006b70 <_printf_common+0xac>
 8006b5e:	2301      	movs	r3, #1
 8006b60:	4652      	mov	r2, sl
 8006b62:	4649      	mov	r1, r9
 8006b64:	4638      	mov	r0, r7
 8006b66:	47c0      	blx	r8
 8006b68:	3001      	adds	r0, #1
 8006b6a:	d103      	bne.n	8006b74 <_printf_common+0xb0>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b74:	3501      	adds	r5, #1
 8006b76:	e7c4      	b.n	8006b02 <_printf_common+0x3e>
 8006b78:	2030      	movs	r0, #48	; 0x30
 8006b7a:	18e1      	adds	r1, r4, r3
 8006b7c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b86:	4422      	add	r2, r4
 8006b88:	3302      	adds	r3, #2
 8006b8a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b8e:	e7c5      	b.n	8006b1c <_printf_common+0x58>
 8006b90:	2301      	movs	r3, #1
 8006b92:	4622      	mov	r2, r4
 8006b94:	4649      	mov	r1, r9
 8006b96:	4638      	mov	r0, r7
 8006b98:	47c0      	blx	r8
 8006b9a:	3001      	adds	r0, #1
 8006b9c:	d0e6      	beq.n	8006b6c <_printf_common+0xa8>
 8006b9e:	3601      	adds	r6, #1
 8006ba0:	e7d9      	b.n	8006b56 <_printf_common+0x92>
	...

08006ba4 <_printf_i>:
 8006ba4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	7e0f      	ldrb	r7, [r1, #24]
 8006baa:	4691      	mov	r9, r2
 8006bac:	2f78      	cmp	r7, #120	; 0x78
 8006bae:	4680      	mov	r8, r0
 8006bb0:	460c      	mov	r4, r1
 8006bb2:	469a      	mov	sl, r3
 8006bb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bba:	d807      	bhi.n	8006bcc <_printf_i+0x28>
 8006bbc:	2f62      	cmp	r7, #98	; 0x62
 8006bbe:	d80a      	bhi.n	8006bd6 <_printf_i+0x32>
 8006bc0:	2f00      	cmp	r7, #0
 8006bc2:	f000 80d9 	beq.w	8006d78 <_printf_i+0x1d4>
 8006bc6:	2f58      	cmp	r7, #88	; 0x58
 8006bc8:	f000 80a4 	beq.w	8006d14 <_printf_i+0x170>
 8006bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bd0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bd4:	e03a      	b.n	8006c4c <_printf_i+0xa8>
 8006bd6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bda:	2b15      	cmp	r3, #21
 8006bdc:	d8f6      	bhi.n	8006bcc <_printf_i+0x28>
 8006bde:	a101      	add	r1, pc, #4	; (adr r1, 8006be4 <_printf_i+0x40>)
 8006be0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006be4:	08006c3d 	.word	0x08006c3d
 8006be8:	08006c51 	.word	0x08006c51
 8006bec:	08006bcd 	.word	0x08006bcd
 8006bf0:	08006bcd 	.word	0x08006bcd
 8006bf4:	08006bcd 	.word	0x08006bcd
 8006bf8:	08006bcd 	.word	0x08006bcd
 8006bfc:	08006c51 	.word	0x08006c51
 8006c00:	08006bcd 	.word	0x08006bcd
 8006c04:	08006bcd 	.word	0x08006bcd
 8006c08:	08006bcd 	.word	0x08006bcd
 8006c0c:	08006bcd 	.word	0x08006bcd
 8006c10:	08006d5f 	.word	0x08006d5f
 8006c14:	08006c81 	.word	0x08006c81
 8006c18:	08006d41 	.word	0x08006d41
 8006c1c:	08006bcd 	.word	0x08006bcd
 8006c20:	08006bcd 	.word	0x08006bcd
 8006c24:	08006d81 	.word	0x08006d81
 8006c28:	08006bcd 	.word	0x08006bcd
 8006c2c:	08006c81 	.word	0x08006c81
 8006c30:	08006bcd 	.word	0x08006bcd
 8006c34:	08006bcd 	.word	0x08006bcd
 8006c38:	08006d49 	.word	0x08006d49
 8006c3c:	682b      	ldr	r3, [r5, #0]
 8006c3e:	1d1a      	adds	r2, r3, #4
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	602a      	str	r2, [r5, #0]
 8006c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e0a4      	b.n	8006d9a <_printf_i+0x1f6>
 8006c50:	6820      	ldr	r0, [r4, #0]
 8006c52:	6829      	ldr	r1, [r5, #0]
 8006c54:	0606      	lsls	r6, r0, #24
 8006c56:	f101 0304 	add.w	r3, r1, #4
 8006c5a:	d50a      	bpl.n	8006c72 <_printf_i+0xce>
 8006c5c:	680e      	ldr	r6, [r1, #0]
 8006c5e:	602b      	str	r3, [r5, #0]
 8006c60:	2e00      	cmp	r6, #0
 8006c62:	da03      	bge.n	8006c6c <_printf_i+0xc8>
 8006c64:	232d      	movs	r3, #45	; 0x2d
 8006c66:	4276      	negs	r6, r6
 8006c68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c6c:	230a      	movs	r3, #10
 8006c6e:	485e      	ldr	r0, [pc, #376]	; (8006de8 <_printf_i+0x244>)
 8006c70:	e019      	b.n	8006ca6 <_printf_i+0x102>
 8006c72:	680e      	ldr	r6, [r1, #0]
 8006c74:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c78:	602b      	str	r3, [r5, #0]
 8006c7a:	bf18      	it	ne
 8006c7c:	b236      	sxthne	r6, r6
 8006c7e:	e7ef      	b.n	8006c60 <_printf_i+0xbc>
 8006c80:	682b      	ldr	r3, [r5, #0]
 8006c82:	6820      	ldr	r0, [r4, #0]
 8006c84:	1d19      	adds	r1, r3, #4
 8006c86:	6029      	str	r1, [r5, #0]
 8006c88:	0601      	lsls	r1, r0, #24
 8006c8a:	d501      	bpl.n	8006c90 <_printf_i+0xec>
 8006c8c:	681e      	ldr	r6, [r3, #0]
 8006c8e:	e002      	b.n	8006c96 <_printf_i+0xf2>
 8006c90:	0646      	lsls	r6, r0, #25
 8006c92:	d5fb      	bpl.n	8006c8c <_printf_i+0xe8>
 8006c94:	881e      	ldrh	r6, [r3, #0]
 8006c96:	2f6f      	cmp	r7, #111	; 0x6f
 8006c98:	bf0c      	ite	eq
 8006c9a:	2308      	moveq	r3, #8
 8006c9c:	230a      	movne	r3, #10
 8006c9e:	4852      	ldr	r0, [pc, #328]	; (8006de8 <_printf_i+0x244>)
 8006ca0:	2100      	movs	r1, #0
 8006ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ca6:	6865      	ldr	r5, [r4, #4]
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	bfa8      	it	ge
 8006cac:	6821      	ldrge	r1, [r4, #0]
 8006cae:	60a5      	str	r5, [r4, #8]
 8006cb0:	bfa4      	itt	ge
 8006cb2:	f021 0104 	bicge.w	r1, r1, #4
 8006cb6:	6021      	strge	r1, [r4, #0]
 8006cb8:	b90e      	cbnz	r6, 8006cbe <_printf_i+0x11a>
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	d04d      	beq.n	8006d5a <_printf_i+0x1b6>
 8006cbe:	4615      	mov	r5, r2
 8006cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8006cc8:	5dc7      	ldrb	r7, [r0, r7]
 8006cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cce:	4637      	mov	r7, r6
 8006cd0:	42bb      	cmp	r3, r7
 8006cd2:	460e      	mov	r6, r1
 8006cd4:	d9f4      	bls.n	8006cc0 <_printf_i+0x11c>
 8006cd6:	2b08      	cmp	r3, #8
 8006cd8:	d10b      	bne.n	8006cf2 <_printf_i+0x14e>
 8006cda:	6823      	ldr	r3, [r4, #0]
 8006cdc:	07de      	lsls	r6, r3, #31
 8006cde:	d508      	bpl.n	8006cf2 <_printf_i+0x14e>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	6861      	ldr	r1, [r4, #4]
 8006ce4:	4299      	cmp	r1, r3
 8006ce6:	bfde      	ittt	le
 8006ce8:	2330      	movle	r3, #48	; 0x30
 8006cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cf2:	1b52      	subs	r2, r2, r5
 8006cf4:	6122      	str	r2, [r4, #16]
 8006cf6:	464b      	mov	r3, r9
 8006cf8:	4621      	mov	r1, r4
 8006cfa:	4640      	mov	r0, r8
 8006cfc:	f8cd a000 	str.w	sl, [sp]
 8006d00:	aa03      	add	r2, sp, #12
 8006d02:	f7ff fedf 	bl	8006ac4 <_printf_common>
 8006d06:	3001      	adds	r0, #1
 8006d08:	d14c      	bne.n	8006da4 <_printf_i+0x200>
 8006d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d0e:	b004      	add	sp, #16
 8006d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d14:	4834      	ldr	r0, [pc, #208]	; (8006de8 <_printf_i+0x244>)
 8006d16:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d1a:	6829      	ldr	r1, [r5, #0]
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d22:	6029      	str	r1, [r5, #0]
 8006d24:	061d      	lsls	r5, r3, #24
 8006d26:	d514      	bpl.n	8006d52 <_printf_i+0x1ae>
 8006d28:	07df      	lsls	r7, r3, #31
 8006d2a:	bf44      	itt	mi
 8006d2c:	f043 0320 	orrmi.w	r3, r3, #32
 8006d30:	6023      	strmi	r3, [r4, #0]
 8006d32:	b91e      	cbnz	r6, 8006d3c <_printf_i+0x198>
 8006d34:	6823      	ldr	r3, [r4, #0]
 8006d36:	f023 0320 	bic.w	r3, r3, #32
 8006d3a:	6023      	str	r3, [r4, #0]
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	e7af      	b.n	8006ca0 <_printf_i+0xfc>
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	f043 0320 	orr.w	r3, r3, #32
 8006d46:	6023      	str	r3, [r4, #0]
 8006d48:	2378      	movs	r3, #120	; 0x78
 8006d4a:	4828      	ldr	r0, [pc, #160]	; (8006dec <_printf_i+0x248>)
 8006d4c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d50:	e7e3      	b.n	8006d1a <_printf_i+0x176>
 8006d52:	0659      	lsls	r1, r3, #25
 8006d54:	bf48      	it	mi
 8006d56:	b2b6      	uxthmi	r6, r6
 8006d58:	e7e6      	b.n	8006d28 <_printf_i+0x184>
 8006d5a:	4615      	mov	r5, r2
 8006d5c:	e7bb      	b.n	8006cd6 <_printf_i+0x132>
 8006d5e:	682b      	ldr	r3, [r5, #0]
 8006d60:	6826      	ldr	r6, [r4, #0]
 8006d62:	1d18      	adds	r0, r3, #4
 8006d64:	6961      	ldr	r1, [r4, #20]
 8006d66:	6028      	str	r0, [r5, #0]
 8006d68:	0635      	lsls	r5, r6, #24
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	d501      	bpl.n	8006d72 <_printf_i+0x1ce>
 8006d6e:	6019      	str	r1, [r3, #0]
 8006d70:	e002      	b.n	8006d78 <_printf_i+0x1d4>
 8006d72:	0670      	lsls	r0, r6, #25
 8006d74:	d5fb      	bpl.n	8006d6e <_printf_i+0x1ca>
 8006d76:	8019      	strh	r1, [r3, #0]
 8006d78:	2300      	movs	r3, #0
 8006d7a:	4615      	mov	r5, r2
 8006d7c:	6123      	str	r3, [r4, #16]
 8006d7e:	e7ba      	b.n	8006cf6 <_printf_i+0x152>
 8006d80:	682b      	ldr	r3, [r5, #0]
 8006d82:	2100      	movs	r1, #0
 8006d84:	1d1a      	adds	r2, r3, #4
 8006d86:	602a      	str	r2, [r5, #0]
 8006d88:	681d      	ldr	r5, [r3, #0]
 8006d8a:	6862      	ldr	r2, [r4, #4]
 8006d8c:	4628      	mov	r0, r5
 8006d8e:	f002 fe23 	bl	80099d8 <memchr>
 8006d92:	b108      	cbz	r0, 8006d98 <_printf_i+0x1f4>
 8006d94:	1b40      	subs	r0, r0, r5
 8006d96:	6060      	str	r0, [r4, #4]
 8006d98:	6863      	ldr	r3, [r4, #4]
 8006d9a:	6123      	str	r3, [r4, #16]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006da2:	e7a8      	b.n	8006cf6 <_printf_i+0x152>
 8006da4:	462a      	mov	r2, r5
 8006da6:	4649      	mov	r1, r9
 8006da8:	4640      	mov	r0, r8
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	47d0      	blx	sl
 8006dae:	3001      	adds	r0, #1
 8006db0:	d0ab      	beq.n	8006d0a <_printf_i+0x166>
 8006db2:	6823      	ldr	r3, [r4, #0]
 8006db4:	079b      	lsls	r3, r3, #30
 8006db6:	d413      	bmi.n	8006de0 <_printf_i+0x23c>
 8006db8:	68e0      	ldr	r0, [r4, #12]
 8006dba:	9b03      	ldr	r3, [sp, #12]
 8006dbc:	4298      	cmp	r0, r3
 8006dbe:	bfb8      	it	lt
 8006dc0:	4618      	movlt	r0, r3
 8006dc2:	e7a4      	b.n	8006d0e <_printf_i+0x16a>
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	4632      	mov	r2, r6
 8006dc8:	4649      	mov	r1, r9
 8006dca:	4640      	mov	r0, r8
 8006dcc:	47d0      	blx	sl
 8006dce:	3001      	adds	r0, #1
 8006dd0:	d09b      	beq.n	8006d0a <_printf_i+0x166>
 8006dd2:	3501      	adds	r5, #1
 8006dd4:	68e3      	ldr	r3, [r4, #12]
 8006dd6:	9903      	ldr	r1, [sp, #12]
 8006dd8:	1a5b      	subs	r3, r3, r1
 8006dda:	42ab      	cmp	r3, r5
 8006ddc:	dcf2      	bgt.n	8006dc4 <_printf_i+0x220>
 8006dde:	e7eb      	b.n	8006db8 <_printf_i+0x214>
 8006de0:	2500      	movs	r5, #0
 8006de2:	f104 0619 	add.w	r6, r4, #25
 8006de6:	e7f5      	b.n	8006dd4 <_printf_i+0x230>
 8006de8:	0800afc2 	.word	0x0800afc2
 8006dec:	0800afd3 	.word	0x0800afd3

08006df0 <iprintf>:
 8006df0:	b40f      	push	{r0, r1, r2, r3}
 8006df2:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <iprintf+0x2c>)
 8006df4:	b513      	push	{r0, r1, r4, lr}
 8006df6:	681c      	ldr	r4, [r3, #0]
 8006df8:	b124      	cbz	r4, 8006e04 <iprintf+0x14>
 8006dfa:	69a3      	ldr	r3, [r4, #24]
 8006dfc:	b913      	cbnz	r3, 8006e04 <iprintf+0x14>
 8006dfe:	4620      	mov	r0, r4
 8006e00:	f002 f942 	bl	8009088 <__sinit>
 8006e04:	ab05      	add	r3, sp, #20
 8006e06:	4620      	mov	r0, r4
 8006e08:	9a04      	ldr	r2, [sp, #16]
 8006e0a:	68a1      	ldr	r1, [r4, #8]
 8006e0c:	9301      	str	r3, [sp, #4]
 8006e0e:	f003 fc7b 	bl	800a708 <_vfiprintf_r>
 8006e12:	b002      	add	sp, #8
 8006e14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e18:	b004      	add	sp, #16
 8006e1a:	4770      	bx	lr
 8006e1c:	20000034 	.word	0x20000034

08006e20 <_puts_r>:
 8006e20:	b570      	push	{r4, r5, r6, lr}
 8006e22:	460e      	mov	r6, r1
 8006e24:	4605      	mov	r5, r0
 8006e26:	b118      	cbz	r0, 8006e30 <_puts_r+0x10>
 8006e28:	6983      	ldr	r3, [r0, #24]
 8006e2a:	b90b      	cbnz	r3, 8006e30 <_puts_r+0x10>
 8006e2c:	f002 f92c 	bl	8009088 <__sinit>
 8006e30:	69ab      	ldr	r3, [r5, #24]
 8006e32:	68ac      	ldr	r4, [r5, #8]
 8006e34:	b913      	cbnz	r3, 8006e3c <_puts_r+0x1c>
 8006e36:	4628      	mov	r0, r5
 8006e38:	f002 f926 	bl	8009088 <__sinit>
 8006e3c:	4b2c      	ldr	r3, [pc, #176]	; (8006ef0 <_puts_r+0xd0>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	d120      	bne.n	8006e84 <_puts_r+0x64>
 8006e42:	686c      	ldr	r4, [r5, #4]
 8006e44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006e46:	07db      	lsls	r3, r3, #31
 8006e48:	d405      	bmi.n	8006e56 <_puts_r+0x36>
 8006e4a:	89a3      	ldrh	r3, [r4, #12]
 8006e4c:	0598      	lsls	r0, r3, #22
 8006e4e:	d402      	bmi.n	8006e56 <_puts_r+0x36>
 8006e50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006e52:	f002 fd34 	bl	80098be <__retarget_lock_acquire_recursive>
 8006e56:	89a3      	ldrh	r3, [r4, #12]
 8006e58:	0719      	lsls	r1, r3, #28
 8006e5a:	d51d      	bpl.n	8006e98 <_puts_r+0x78>
 8006e5c:	6923      	ldr	r3, [r4, #16]
 8006e5e:	b1db      	cbz	r3, 8006e98 <_puts_r+0x78>
 8006e60:	3e01      	subs	r6, #1
 8006e62:	68a3      	ldr	r3, [r4, #8]
 8006e64:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	60a3      	str	r3, [r4, #8]
 8006e6c:	bb39      	cbnz	r1, 8006ebe <_puts_r+0x9e>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	da38      	bge.n	8006ee4 <_puts_r+0xc4>
 8006e72:	4622      	mov	r2, r4
 8006e74:	210a      	movs	r1, #10
 8006e76:	4628      	mov	r0, r5
 8006e78:	f001 f874 	bl	8007f64 <__swbuf_r>
 8006e7c:	3001      	adds	r0, #1
 8006e7e:	d011      	beq.n	8006ea4 <_puts_r+0x84>
 8006e80:	250a      	movs	r5, #10
 8006e82:	e011      	b.n	8006ea8 <_puts_r+0x88>
 8006e84:	4b1b      	ldr	r3, [pc, #108]	; (8006ef4 <_puts_r+0xd4>)
 8006e86:	429c      	cmp	r4, r3
 8006e88:	d101      	bne.n	8006e8e <_puts_r+0x6e>
 8006e8a:	68ac      	ldr	r4, [r5, #8]
 8006e8c:	e7da      	b.n	8006e44 <_puts_r+0x24>
 8006e8e:	4b1a      	ldr	r3, [pc, #104]	; (8006ef8 <_puts_r+0xd8>)
 8006e90:	429c      	cmp	r4, r3
 8006e92:	bf08      	it	eq
 8006e94:	68ec      	ldreq	r4, [r5, #12]
 8006e96:	e7d5      	b.n	8006e44 <_puts_r+0x24>
 8006e98:	4621      	mov	r1, r4
 8006e9a:	4628      	mov	r0, r5
 8006e9c:	f001 f8c6 	bl	800802c <__swsetup_r>
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d0dd      	beq.n	8006e60 <_puts_r+0x40>
 8006ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8006ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006eaa:	07da      	lsls	r2, r3, #31
 8006eac:	d405      	bmi.n	8006eba <_puts_r+0x9a>
 8006eae:	89a3      	ldrh	r3, [r4, #12]
 8006eb0:	059b      	lsls	r3, r3, #22
 8006eb2:	d402      	bmi.n	8006eba <_puts_r+0x9a>
 8006eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006eb6:	f002 fd03 	bl	80098c0 <__retarget_lock_release_recursive>
 8006eba:	4628      	mov	r0, r5
 8006ebc:	bd70      	pop	{r4, r5, r6, pc}
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	da04      	bge.n	8006ecc <_puts_r+0xac>
 8006ec2:	69a2      	ldr	r2, [r4, #24]
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	dc06      	bgt.n	8006ed6 <_puts_r+0xb6>
 8006ec8:	290a      	cmp	r1, #10
 8006eca:	d004      	beq.n	8006ed6 <_puts_r+0xb6>
 8006ecc:	6823      	ldr	r3, [r4, #0]
 8006ece:	1c5a      	adds	r2, r3, #1
 8006ed0:	6022      	str	r2, [r4, #0]
 8006ed2:	7019      	strb	r1, [r3, #0]
 8006ed4:	e7c5      	b.n	8006e62 <_puts_r+0x42>
 8006ed6:	4622      	mov	r2, r4
 8006ed8:	4628      	mov	r0, r5
 8006eda:	f001 f843 	bl	8007f64 <__swbuf_r>
 8006ede:	3001      	adds	r0, #1
 8006ee0:	d1bf      	bne.n	8006e62 <_puts_r+0x42>
 8006ee2:	e7df      	b.n	8006ea4 <_puts_r+0x84>
 8006ee4:	250a      	movs	r5, #10
 8006ee6:	6823      	ldr	r3, [r4, #0]
 8006ee8:	1c5a      	adds	r2, r3, #1
 8006eea:	6022      	str	r2, [r4, #0]
 8006eec:	701d      	strb	r5, [r3, #0]
 8006eee:	e7db      	b.n	8006ea8 <_puts_r+0x88>
 8006ef0:	0800b1dc 	.word	0x0800b1dc
 8006ef4:	0800b1fc 	.word	0x0800b1fc
 8006ef8:	0800b1bc 	.word	0x0800b1bc

08006efc <puts>:
 8006efc:	4b02      	ldr	r3, [pc, #8]	; (8006f08 <puts+0xc>)
 8006efe:	4601      	mov	r1, r0
 8006f00:	6818      	ldr	r0, [r3, #0]
 8006f02:	f7ff bf8d 	b.w	8006e20 <_puts_r>
 8006f06:	bf00      	nop
 8006f08:	20000034 	.word	0x20000034

08006f0c <rand>:
 8006f0c:	4b16      	ldr	r3, [pc, #88]	; (8006f68 <rand+0x5c>)
 8006f0e:	b510      	push	{r4, lr}
 8006f10:	681c      	ldr	r4, [r3, #0]
 8006f12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f14:	b9b3      	cbnz	r3, 8006f44 <rand+0x38>
 8006f16:	2018      	movs	r0, #24
 8006f18:	f7ff fa08 	bl	800632c <malloc>
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	63a0      	str	r0, [r4, #56]	; 0x38
 8006f20:	b920      	cbnz	r0, 8006f2c <rand+0x20>
 8006f22:	214e      	movs	r1, #78	; 0x4e
 8006f24:	4b11      	ldr	r3, [pc, #68]	; (8006f6c <rand+0x60>)
 8006f26:	4812      	ldr	r0, [pc, #72]	; (8006f70 <rand+0x64>)
 8006f28:	f001 f8ee 	bl	8008108 <__assert_func>
 8006f2c:	4911      	ldr	r1, [pc, #68]	; (8006f74 <rand+0x68>)
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <rand+0x6c>)
 8006f30:	e9c0 1300 	strd	r1, r3, [r0]
 8006f34:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <rand+0x70>)
 8006f36:	2100      	movs	r1, #0
 8006f38:	6083      	str	r3, [r0, #8]
 8006f3a:	230b      	movs	r3, #11
 8006f3c:	8183      	strh	r3, [r0, #12]
 8006f3e:	2001      	movs	r0, #1
 8006f40:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006f44:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006f46:	4a0e      	ldr	r2, [pc, #56]	; (8006f80 <rand+0x74>)
 8006f48:	6920      	ldr	r0, [r4, #16]
 8006f4a:	6963      	ldr	r3, [r4, #20]
 8006f4c:	4342      	muls	r2, r0
 8006f4e:	490d      	ldr	r1, [pc, #52]	; (8006f84 <rand+0x78>)
 8006f50:	fb01 2203 	mla	r2, r1, r3, r2
 8006f54:	fba0 0101 	umull	r0, r1, r0, r1
 8006f58:	1c43      	adds	r3, r0, #1
 8006f5a:	eb42 0001 	adc.w	r0, r2, r1
 8006f5e:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8006f62:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006f66:	bd10      	pop	{r4, pc}
 8006f68:	20000034 	.word	0x20000034
 8006f6c:	0800afe4 	.word	0x0800afe4
 8006f70:	0800affb 	.word	0x0800affb
 8006f74:	abcd330e 	.word	0xabcd330e
 8006f78:	e66d1234 	.word	0xe66d1234
 8006f7c:	0005deec 	.word	0x0005deec
 8006f80:	5851f42d 	.word	0x5851f42d
 8006f84:	4c957f2d 	.word	0x4c957f2d

08006f88 <realloc>:
 8006f88:	4b02      	ldr	r3, [pc, #8]	; (8006f94 <realloc+0xc>)
 8006f8a:	460a      	mov	r2, r1
 8006f8c:	4601      	mov	r1, r0
 8006f8e:	6818      	ldr	r0, [r3, #0]
 8006f90:	f003 ba08 	b.w	800a3a4 <_realloc_r>
 8006f94:	20000034 	.word	0x20000034

08006f98 <_sbrk_r>:
 8006f98:	b538      	push	{r3, r4, r5, lr}
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	4d05      	ldr	r5, [pc, #20]	; (8006fb4 <_sbrk_r+0x1c>)
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	4608      	mov	r0, r1
 8006fa2:	602b      	str	r3, [r5, #0]
 8006fa4:	f7fc fca4 	bl	80038f0 <_sbrk>
 8006fa8:	1c43      	adds	r3, r0, #1
 8006faa:	d102      	bne.n	8006fb2 <_sbrk_r+0x1a>
 8006fac:	682b      	ldr	r3, [r5, #0]
 8006fae:	b103      	cbz	r3, 8006fb2 <_sbrk_r+0x1a>
 8006fb0:	6023      	str	r3, [r4, #0]
 8006fb2:	bd38      	pop	{r3, r4, r5, pc}
 8006fb4:	20000818 	.word	0x20000818

08006fb8 <sniprintf>:
 8006fb8:	b40c      	push	{r2, r3}
 8006fba:	b530      	push	{r4, r5, lr}
 8006fbc:	4b17      	ldr	r3, [pc, #92]	; (800701c <sniprintf+0x64>)
 8006fbe:	1e0c      	subs	r4, r1, #0
 8006fc0:	681d      	ldr	r5, [r3, #0]
 8006fc2:	b09d      	sub	sp, #116	; 0x74
 8006fc4:	da08      	bge.n	8006fd8 <sniprintf+0x20>
 8006fc6:	238b      	movs	r3, #139	; 0x8b
 8006fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006fcc:	602b      	str	r3, [r5, #0]
 8006fce:	b01d      	add	sp, #116	; 0x74
 8006fd0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006fd4:	b002      	add	sp, #8
 8006fd6:	4770      	bx	lr
 8006fd8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006fdc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006fe0:	bf0c      	ite	eq
 8006fe2:	4623      	moveq	r3, r4
 8006fe4:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006fe8:	9304      	str	r3, [sp, #16]
 8006fea:	9307      	str	r3, [sp, #28]
 8006fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006ff0:	9002      	str	r0, [sp, #8]
 8006ff2:	9006      	str	r0, [sp, #24]
 8006ff4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	ab21      	add	r3, sp, #132	; 0x84
 8006ffc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006ffe:	a902      	add	r1, sp, #8
 8007000:	9301      	str	r3, [sp, #4]
 8007002:	f003 fa59 	bl	800a4b8 <_svfiprintf_r>
 8007006:	1c43      	adds	r3, r0, #1
 8007008:	bfbc      	itt	lt
 800700a:	238b      	movlt	r3, #139	; 0x8b
 800700c:	602b      	strlt	r3, [r5, #0]
 800700e:	2c00      	cmp	r4, #0
 8007010:	d0dd      	beq.n	8006fce <sniprintf+0x16>
 8007012:	2200      	movs	r2, #0
 8007014:	9b02      	ldr	r3, [sp, #8]
 8007016:	701a      	strb	r2, [r3, #0]
 8007018:	e7d9      	b.n	8006fce <sniprintf+0x16>
 800701a:	bf00      	nop
 800701c:	20000034 	.word	0x20000034

08007020 <siprintf>:
 8007020:	b40e      	push	{r1, r2, r3}
 8007022:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007026:	b500      	push	{lr}
 8007028:	b09c      	sub	sp, #112	; 0x70
 800702a:	ab1d      	add	r3, sp, #116	; 0x74
 800702c:	9002      	str	r0, [sp, #8]
 800702e:	9006      	str	r0, [sp, #24]
 8007030:	9107      	str	r1, [sp, #28]
 8007032:	9104      	str	r1, [sp, #16]
 8007034:	4808      	ldr	r0, [pc, #32]	; (8007058 <siprintf+0x38>)
 8007036:	4909      	ldr	r1, [pc, #36]	; (800705c <siprintf+0x3c>)
 8007038:	f853 2b04 	ldr.w	r2, [r3], #4
 800703c:	9105      	str	r1, [sp, #20]
 800703e:	6800      	ldr	r0, [r0, #0]
 8007040:	a902      	add	r1, sp, #8
 8007042:	9301      	str	r3, [sp, #4]
 8007044:	f003 fa38 	bl	800a4b8 <_svfiprintf_r>
 8007048:	2200      	movs	r2, #0
 800704a:	9b02      	ldr	r3, [sp, #8]
 800704c:	701a      	strb	r2, [r3, #0]
 800704e:	b01c      	add	sp, #112	; 0x70
 8007050:	f85d eb04 	ldr.w	lr, [sp], #4
 8007054:	b003      	add	sp, #12
 8007056:	4770      	bx	lr
 8007058:	20000034 	.word	0x20000034
 800705c:	ffff0208 	.word	0xffff0208

08007060 <__sread>:
 8007060:	b510      	push	{r4, lr}
 8007062:	460c      	mov	r4, r1
 8007064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007068:	f003 fc7e 	bl	800a968 <_read_r>
 800706c:	2800      	cmp	r0, #0
 800706e:	bfab      	itete	ge
 8007070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007072:	89a3      	ldrhlt	r3, [r4, #12]
 8007074:	181b      	addge	r3, r3, r0
 8007076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800707a:	bfac      	ite	ge
 800707c:	6563      	strge	r3, [r4, #84]	; 0x54
 800707e:	81a3      	strhlt	r3, [r4, #12]
 8007080:	bd10      	pop	{r4, pc}

08007082 <__swrite>:
 8007082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007086:	461f      	mov	r7, r3
 8007088:	898b      	ldrh	r3, [r1, #12]
 800708a:	4605      	mov	r5, r0
 800708c:	05db      	lsls	r3, r3, #23
 800708e:	460c      	mov	r4, r1
 8007090:	4616      	mov	r6, r2
 8007092:	d505      	bpl.n	80070a0 <__swrite+0x1e>
 8007094:	2302      	movs	r3, #2
 8007096:	2200      	movs	r2, #0
 8007098:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709c:	f002 fc12 	bl	80098c4 <_lseek_r>
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	4632      	mov	r2, r6
 80070a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070a8:	81a3      	strh	r3, [r4, #12]
 80070aa:	4628      	mov	r0, r5
 80070ac:	463b      	mov	r3, r7
 80070ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070b6:	f000 bfa7 	b.w	8008008 <_write_r>

080070ba <__sseek>:
 80070ba:	b510      	push	{r4, lr}
 80070bc:	460c      	mov	r4, r1
 80070be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070c2:	f002 fbff 	bl	80098c4 <_lseek_r>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	89a3      	ldrh	r3, [r4, #12]
 80070ca:	bf15      	itete	ne
 80070cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070d6:	81a3      	strheq	r3, [r4, #12]
 80070d8:	bf18      	it	ne
 80070da:	81a3      	strhne	r3, [r4, #12]
 80070dc:	bd10      	pop	{r4, pc}

080070de <__sclose>:
 80070de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e2:	f001 b82f 	b.w	8008144 <_close_r>

080070e6 <strcat>:
 80070e6:	4602      	mov	r2, r0
 80070e8:	b510      	push	{r4, lr}
 80070ea:	7814      	ldrb	r4, [r2, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	3201      	adds	r2, #1
 80070f0:	2c00      	cmp	r4, #0
 80070f2:	d1fa      	bne.n	80070ea <strcat+0x4>
 80070f4:	3b01      	subs	r3, #1
 80070f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070fe:	2a00      	cmp	r2, #0
 8007100:	d1f9      	bne.n	80070f6 <strcat+0x10>
 8007102:	bd10      	pop	{r4, pc}

08007104 <strchr>:
 8007104:	4603      	mov	r3, r0
 8007106:	b2c9      	uxtb	r1, r1
 8007108:	4618      	mov	r0, r3
 800710a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800710e:	b112      	cbz	r2, 8007116 <strchr+0x12>
 8007110:	428a      	cmp	r2, r1
 8007112:	d1f9      	bne.n	8007108 <strchr+0x4>
 8007114:	4770      	bx	lr
 8007116:	2900      	cmp	r1, #0
 8007118:	bf18      	it	ne
 800711a:	2000      	movne	r0, #0
 800711c:	4770      	bx	lr

0800711e <strncmp>:
 800711e:	4603      	mov	r3, r0
 8007120:	b510      	push	{r4, lr}
 8007122:	b172      	cbz	r2, 8007142 <strncmp+0x24>
 8007124:	3901      	subs	r1, #1
 8007126:	1884      	adds	r4, r0, r2
 8007128:	f813 0b01 	ldrb.w	r0, [r3], #1
 800712c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007130:	4290      	cmp	r0, r2
 8007132:	d101      	bne.n	8007138 <strncmp+0x1a>
 8007134:	42a3      	cmp	r3, r4
 8007136:	d101      	bne.n	800713c <strncmp+0x1e>
 8007138:	1a80      	subs	r0, r0, r2
 800713a:	bd10      	pop	{r4, pc}
 800713c:	2800      	cmp	r0, #0
 800713e:	d1f3      	bne.n	8007128 <strncmp+0xa>
 8007140:	e7fa      	b.n	8007138 <strncmp+0x1a>
 8007142:	4610      	mov	r0, r2
 8007144:	e7f9      	b.n	800713a <strncmp+0x1c>

08007146 <strstr>:
 8007146:	780a      	ldrb	r2, [r1, #0]
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	b96a      	cbnz	r2, 8007168 <strstr+0x22>
 800714c:	bd70      	pop	{r4, r5, r6, pc}
 800714e:	429a      	cmp	r2, r3
 8007150:	d109      	bne.n	8007166 <strstr+0x20>
 8007152:	460c      	mov	r4, r1
 8007154:	4605      	mov	r5, r0
 8007156:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800715a:	2b00      	cmp	r3, #0
 800715c:	d0f6      	beq.n	800714c <strstr+0x6>
 800715e:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007162:	429e      	cmp	r6, r3
 8007164:	d0f7      	beq.n	8007156 <strstr+0x10>
 8007166:	3001      	adds	r0, #1
 8007168:	7803      	ldrb	r3, [r0, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d1ef      	bne.n	800714e <strstr+0x8>
 800716e:	4618      	mov	r0, r3
 8007170:	e7ec      	b.n	800714c <strstr+0x6>

08007172 <sulp>:
 8007172:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007176:	460f      	mov	r7, r1
 8007178:	4690      	mov	r8, r2
 800717a:	f002 ffb7 	bl	800a0ec <__ulp>
 800717e:	4604      	mov	r4, r0
 8007180:	460d      	mov	r5, r1
 8007182:	f1b8 0f00 	cmp.w	r8, #0
 8007186:	d011      	beq.n	80071ac <sulp+0x3a>
 8007188:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800718c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007190:	2b00      	cmp	r3, #0
 8007192:	dd0b      	ble.n	80071ac <sulp+0x3a>
 8007194:	2400      	movs	r4, #0
 8007196:	051b      	lsls	r3, r3, #20
 8007198:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800719c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80071a0:	4622      	mov	r2, r4
 80071a2:	462b      	mov	r3, r5
 80071a4:	f7f9 f9de 	bl	8000564 <__aeabi_dmul>
 80071a8:	4604      	mov	r4, r0
 80071aa:	460d      	mov	r5, r1
 80071ac:	4620      	mov	r0, r4
 80071ae:	4629      	mov	r1, r5
 80071b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071b4:	0000      	movs	r0, r0
	...

080071b8 <_strtod_l>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	469b      	mov	fp, r3
 80071be:	2300      	movs	r3, #0
 80071c0:	b09f      	sub	sp, #124	; 0x7c
 80071c2:	931a      	str	r3, [sp, #104]	; 0x68
 80071c4:	4b9e      	ldr	r3, [pc, #632]	; (8007440 <_strtod_l+0x288>)
 80071c6:	4682      	mov	sl, r0
 80071c8:	681f      	ldr	r7, [r3, #0]
 80071ca:	460e      	mov	r6, r1
 80071cc:	4638      	mov	r0, r7
 80071ce:	9215      	str	r2, [sp, #84]	; 0x54
 80071d0:	f7f9 f804 	bl	80001dc <strlen>
 80071d4:	f04f 0800 	mov.w	r8, #0
 80071d8:	4604      	mov	r4, r0
 80071da:	f04f 0900 	mov.w	r9, #0
 80071de:	9619      	str	r6, [sp, #100]	; 0x64
 80071e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80071e2:	781a      	ldrb	r2, [r3, #0]
 80071e4:	2a2b      	cmp	r2, #43	; 0x2b
 80071e6:	d04c      	beq.n	8007282 <_strtod_l+0xca>
 80071e8:	d83a      	bhi.n	8007260 <_strtod_l+0xa8>
 80071ea:	2a0d      	cmp	r2, #13
 80071ec:	d833      	bhi.n	8007256 <_strtod_l+0x9e>
 80071ee:	2a08      	cmp	r2, #8
 80071f0:	d833      	bhi.n	800725a <_strtod_l+0xa2>
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d03d      	beq.n	8007272 <_strtod_l+0xba>
 80071f6:	2300      	movs	r3, #0
 80071f8:	930a      	str	r3, [sp, #40]	; 0x28
 80071fa:	9d19      	ldr	r5, [sp, #100]	; 0x64
 80071fc:	782b      	ldrb	r3, [r5, #0]
 80071fe:	2b30      	cmp	r3, #48	; 0x30
 8007200:	f040 80aa 	bne.w	8007358 <_strtod_l+0x1a0>
 8007204:	786b      	ldrb	r3, [r5, #1]
 8007206:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800720a:	2b58      	cmp	r3, #88	; 0x58
 800720c:	d166      	bne.n	80072dc <_strtod_l+0x124>
 800720e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007210:	4650      	mov	r0, sl
 8007212:	9301      	str	r3, [sp, #4]
 8007214:	ab1a      	add	r3, sp, #104	; 0x68
 8007216:	9300      	str	r3, [sp, #0]
 8007218:	4a8a      	ldr	r2, [pc, #552]	; (8007444 <_strtod_l+0x28c>)
 800721a:	f8cd b008 	str.w	fp, [sp, #8]
 800721e:	ab1b      	add	r3, sp, #108	; 0x6c
 8007220:	a919      	add	r1, sp, #100	; 0x64
 8007222:	f002 f849 	bl	80092b8 <__gethex>
 8007226:	f010 0607 	ands.w	r6, r0, #7
 800722a:	4604      	mov	r4, r0
 800722c:	d005      	beq.n	800723a <_strtod_l+0x82>
 800722e:	2e06      	cmp	r6, #6
 8007230:	d129      	bne.n	8007286 <_strtod_l+0xce>
 8007232:	2300      	movs	r3, #0
 8007234:	3501      	adds	r5, #1
 8007236:	9519      	str	r5, [sp, #100]	; 0x64
 8007238:	930a      	str	r3, [sp, #40]	; 0x28
 800723a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800723c:	2b00      	cmp	r3, #0
 800723e:	f040 858a 	bne.w	8007d56 <_strtod_l+0xb9e>
 8007242:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007244:	b1d3      	cbz	r3, 800727c <_strtod_l+0xc4>
 8007246:	4642      	mov	r2, r8
 8007248:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800724c:	4610      	mov	r0, r2
 800724e:	4619      	mov	r1, r3
 8007250:	b01f      	add	sp, #124	; 0x7c
 8007252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007256:	2a20      	cmp	r2, #32
 8007258:	d1cd      	bne.n	80071f6 <_strtod_l+0x3e>
 800725a:	3301      	adds	r3, #1
 800725c:	9319      	str	r3, [sp, #100]	; 0x64
 800725e:	e7bf      	b.n	80071e0 <_strtod_l+0x28>
 8007260:	2a2d      	cmp	r2, #45	; 0x2d
 8007262:	d1c8      	bne.n	80071f6 <_strtod_l+0x3e>
 8007264:	2201      	movs	r2, #1
 8007266:	920a      	str	r2, [sp, #40]	; 0x28
 8007268:	1c5a      	adds	r2, r3, #1
 800726a:	9219      	str	r2, [sp, #100]	; 0x64
 800726c:	785b      	ldrb	r3, [r3, #1]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1c3      	bne.n	80071fa <_strtod_l+0x42>
 8007272:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007274:	9619      	str	r6, [sp, #100]	; 0x64
 8007276:	2b00      	cmp	r3, #0
 8007278:	f040 856b 	bne.w	8007d52 <_strtod_l+0xb9a>
 800727c:	4642      	mov	r2, r8
 800727e:	464b      	mov	r3, r9
 8007280:	e7e4      	b.n	800724c <_strtod_l+0x94>
 8007282:	2200      	movs	r2, #0
 8007284:	e7ef      	b.n	8007266 <_strtod_l+0xae>
 8007286:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007288:	b13a      	cbz	r2, 800729a <_strtod_l+0xe2>
 800728a:	2135      	movs	r1, #53	; 0x35
 800728c:	a81c      	add	r0, sp, #112	; 0x70
 800728e:	f003 f831 	bl	800a2f4 <__copybits>
 8007292:	4650      	mov	r0, sl
 8007294:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007296:	f002 fbf9 	bl	8009a8c <_Bfree>
 800729a:	3e01      	subs	r6, #1
 800729c:	2e04      	cmp	r6, #4
 800729e:	d806      	bhi.n	80072ae <_strtod_l+0xf6>
 80072a0:	e8df f006 	tbb	[pc, r6]
 80072a4:	1714030a 	.word	0x1714030a
 80072a8:	0a          	.byte	0x0a
 80072a9:	00          	.byte	0x00
 80072aa:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 80072ae:	0721      	lsls	r1, r4, #28
 80072b0:	d5c3      	bpl.n	800723a <_strtod_l+0x82>
 80072b2:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 80072b6:	e7c0      	b.n	800723a <_strtod_l+0x82>
 80072b8:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80072ba:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 80072be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80072c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80072c6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 80072ca:	e7f0      	b.n	80072ae <_strtod_l+0xf6>
 80072cc:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007448 <_strtod_l+0x290>
 80072d0:	e7ed      	b.n	80072ae <_strtod_l+0xf6>
 80072d2:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80072d6:	f04f 38ff 	mov.w	r8, #4294967295
 80072da:	e7e8      	b.n	80072ae <_strtod_l+0xf6>
 80072dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072de:	1c5a      	adds	r2, r3, #1
 80072e0:	9219      	str	r2, [sp, #100]	; 0x64
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b30      	cmp	r3, #48	; 0x30
 80072e6:	d0f9      	beq.n	80072dc <_strtod_l+0x124>
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d0a6      	beq.n	800723a <_strtod_l+0x82>
 80072ec:	2301      	movs	r3, #1
 80072ee:	9307      	str	r3, [sp, #28]
 80072f0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80072f2:	220a      	movs	r2, #10
 80072f4:	9308      	str	r3, [sp, #32]
 80072f6:	2300      	movs	r3, #0
 80072f8:	469b      	mov	fp, r3
 80072fa:	e9cd 3305 	strd	r3, r3, [sp, #20]
 80072fe:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007300:	7805      	ldrb	r5, [r0, #0]
 8007302:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8007306:	b2d9      	uxtb	r1, r3
 8007308:	2909      	cmp	r1, #9
 800730a:	d927      	bls.n	800735c <_strtod_l+0x1a4>
 800730c:	4622      	mov	r2, r4
 800730e:	4639      	mov	r1, r7
 8007310:	f7ff ff05 	bl	800711e <strncmp>
 8007314:	2800      	cmp	r0, #0
 8007316:	d033      	beq.n	8007380 <_strtod_l+0x1c8>
 8007318:	2000      	movs	r0, #0
 800731a:	462a      	mov	r2, r5
 800731c:	465c      	mov	r4, fp
 800731e:	4603      	mov	r3, r0
 8007320:	9004      	str	r0, [sp, #16]
 8007322:	2a65      	cmp	r2, #101	; 0x65
 8007324:	d001      	beq.n	800732a <_strtod_l+0x172>
 8007326:	2a45      	cmp	r2, #69	; 0x45
 8007328:	d114      	bne.n	8007354 <_strtod_l+0x19c>
 800732a:	b91c      	cbnz	r4, 8007334 <_strtod_l+0x17c>
 800732c:	9a07      	ldr	r2, [sp, #28]
 800732e:	4302      	orrs	r2, r0
 8007330:	d09f      	beq.n	8007272 <_strtod_l+0xba>
 8007332:	2400      	movs	r4, #0
 8007334:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8007336:	1c72      	adds	r2, r6, #1
 8007338:	9219      	str	r2, [sp, #100]	; 0x64
 800733a:	7872      	ldrb	r2, [r6, #1]
 800733c:	2a2b      	cmp	r2, #43	; 0x2b
 800733e:	d079      	beq.n	8007434 <_strtod_l+0x27c>
 8007340:	2a2d      	cmp	r2, #45	; 0x2d
 8007342:	f000 8083 	beq.w	800744c <_strtod_l+0x294>
 8007346:	2700      	movs	r7, #0
 8007348:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800734c:	2909      	cmp	r1, #9
 800734e:	f240 8083 	bls.w	8007458 <_strtod_l+0x2a0>
 8007352:	9619      	str	r6, [sp, #100]	; 0x64
 8007354:	2500      	movs	r5, #0
 8007356:	e09f      	b.n	8007498 <_strtod_l+0x2e0>
 8007358:	2300      	movs	r3, #0
 800735a:	e7c8      	b.n	80072ee <_strtod_l+0x136>
 800735c:	f1bb 0f08 	cmp.w	fp, #8
 8007360:	bfd5      	itete	le
 8007362:	9906      	ldrle	r1, [sp, #24]
 8007364:	9905      	ldrgt	r1, [sp, #20]
 8007366:	fb02 3301 	mlale	r3, r2, r1, r3
 800736a:	fb02 3301 	mlagt	r3, r2, r1, r3
 800736e:	f100 0001 	add.w	r0, r0, #1
 8007372:	bfd4      	ite	le
 8007374:	9306      	strle	r3, [sp, #24]
 8007376:	9305      	strgt	r3, [sp, #20]
 8007378:	f10b 0b01 	add.w	fp, fp, #1
 800737c:	9019      	str	r0, [sp, #100]	; 0x64
 800737e:	e7be      	b.n	80072fe <_strtod_l+0x146>
 8007380:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007382:	191a      	adds	r2, r3, r4
 8007384:	9219      	str	r2, [sp, #100]	; 0x64
 8007386:	5d1a      	ldrb	r2, [r3, r4]
 8007388:	f1bb 0f00 	cmp.w	fp, #0
 800738c:	d036      	beq.n	80073fc <_strtod_l+0x244>
 800738e:	465c      	mov	r4, fp
 8007390:	9004      	str	r0, [sp, #16]
 8007392:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007396:	2b09      	cmp	r3, #9
 8007398:	d912      	bls.n	80073c0 <_strtod_l+0x208>
 800739a:	2301      	movs	r3, #1
 800739c:	e7c1      	b.n	8007322 <_strtod_l+0x16a>
 800739e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073a0:	3001      	adds	r0, #1
 80073a2:	1c5a      	adds	r2, r3, #1
 80073a4:	9219      	str	r2, [sp, #100]	; 0x64
 80073a6:	785a      	ldrb	r2, [r3, #1]
 80073a8:	2a30      	cmp	r2, #48	; 0x30
 80073aa:	d0f8      	beq.n	800739e <_strtod_l+0x1e6>
 80073ac:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80073b0:	2b08      	cmp	r3, #8
 80073b2:	f200 84d5 	bhi.w	8007d60 <_strtod_l+0xba8>
 80073b6:	9004      	str	r0, [sp, #16]
 80073b8:	2000      	movs	r0, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80073be:	9308      	str	r3, [sp, #32]
 80073c0:	3a30      	subs	r2, #48	; 0x30
 80073c2:	f100 0301 	add.w	r3, r0, #1
 80073c6:	d013      	beq.n	80073f0 <_strtod_l+0x238>
 80073c8:	9904      	ldr	r1, [sp, #16]
 80073ca:	1905      	adds	r5, r0, r4
 80073cc:	4419      	add	r1, r3
 80073ce:	9104      	str	r1, [sp, #16]
 80073d0:	4623      	mov	r3, r4
 80073d2:	210a      	movs	r1, #10
 80073d4:	42ab      	cmp	r3, r5
 80073d6:	d113      	bne.n	8007400 <_strtod_l+0x248>
 80073d8:	1823      	adds	r3, r4, r0
 80073da:	2b08      	cmp	r3, #8
 80073dc:	f104 0401 	add.w	r4, r4, #1
 80073e0:	4404      	add	r4, r0
 80073e2:	dc1b      	bgt.n	800741c <_strtod_l+0x264>
 80073e4:	230a      	movs	r3, #10
 80073e6:	9906      	ldr	r1, [sp, #24]
 80073e8:	fb03 2301 	mla	r3, r3, r1, r2
 80073ec:	9306      	str	r3, [sp, #24]
 80073ee:	2300      	movs	r3, #0
 80073f0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80073f2:	4618      	mov	r0, r3
 80073f4:	1c51      	adds	r1, r2, #1
 80073f6:	9119      	str	r1, [sp, #100]	; 0x64
 80073f8:	7852      	ldrb	r2, [r2, #1]
 80073fa:	e7ca      	b.n	8007392 <_strtod_l+0x1da>
 80073fc:	4658      	mov	r0, fp
 80073fe:	e7d3      	b.n	80073a8 <_strtod_l+0x1f0>
 8007400:	2b08      	cmp	r3, #8
 8007402:	dc04      	bgt.n	800740e <_strtod_l+0x256>
 8007404:	9f06      	ldr	r7, [sp, #24]
 8007406:	434f      	muls	r7, r1
 8007408:	9706      	str	r7, [sp, #24]
 800740a:	3301      	adds	r3, #1
 800740c:	e7e2      	b.n	80073d4 <_strtod_l+0x21c>
 800740e:	1c5f      	adds	r7, r3, #1
 8007410:	2f10      	cmp	r7, #16
 8007412:	bfde      	ittt	le
 8007414:	9f05      	ldrle	r7, [sp, #20]
 8007416:	434f      	mulle	r7, r1
 8007418:	9705      	strle	r7, [sp, #20]
 800741a:	e7f6      	b.n	800740a <_strtod_l+0x252>
 800741c:	2c10      	cmp	r4, #16
 800741e:	bfdf      	itttt	le
 8007420:	230a      	movle	r3, #10
 8007422:	9905      	ldrle	r1, [sp, #20]
 8007424:	fb03 2301 	mlale	r3, r3, r1, r2
 8007428:	9305      	strle	r3, [sp, #20]
 800742a:	e7e0      	b.n	80073ee <_strtod_l+0x236>
 800742c:	2300      	movs	r3, #0
 800742e:	9304      	str	r3, [sp, #16]
 8007430:	2301      	movs	r3, #1
 8007432:	e77b      	b.n	800732c <_strtod_l+0x174>
 8007434:	2700      	movs	r7, #0
 8007436:	1cb2      	adds	r2, r6, #2
 8007438:	9219      	str	r2, [sp, #100]	; 0x64
 800743a:	78b2      	ldrb	r2, [r6, #2]
 800743c:	e784      	b.n	8007348 <_strtod_l+0x190>
 800743e:	bf00      	nop
 8007440:	0800b284 	.word	0x0800b284
 8007444:	0800b058 	.word	0x0800b058
 8007448:	7ff00000 	.word	0x7ff00000
 800744c:	2701      	movs	r7, #1
 800744e:	e7f2      	b.n	8007436 <_strtod_l+0x27e>
 8007450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007452:	1c51      	adds	r1, r2, #1
 8007454:	9119      	str	r1, [sp, #100]	; 0x64
 8007456:	7852      	ldrb	r2, [r2, #1]
 8007458:	2a30      	cmp	r2, #48	; 0x30
 800745a:	d0f9      	beq.n	8007450 <_strtod_l+0x298>
 800745c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007460:	2908      	cmp	r1, #8
 8007462:	f63f af77 	bhi.w	8007354 <_strtod_l+0x19c>
 8007466:	f04f 0e0a 	mov.w	lr, #10
 800746a:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800746e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007470:	9209      	str	r2, [sp, #36]	; 0x24
 8007472:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007474:	1c51      	adds	r1, r2, #1
 8007476:	9119      	str	r1, [sp, #100]	; 0x64
 8007478:	7852      	ldrb	r2, [r2, #1]
 800747a:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800747e:	2d09      	cmp	r5, #9
 8007480:	d935      	bls.n	80074ee <_strtod_l+0x336>
 8007482:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007484:	1b49      	subs	r1, r1, r5
 8007486:	2908      	cmp	r1, #8
 8007488:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800748c:	dc02      	bgt.n	8007494 <_strtod_l+0x2dc>
 800748e:	4565      	cmp	r5, ip
 8007490:	bfa8      	it	ge
 8007492:	4665      	movge	r5, ip
 8007494:	b107      	cbz	r7, 8007498 <_strtod_l+0x2e0>
 8007496:	426d      	negs	r5, r5
 8007498:	2c00      	cmp	r4, #0
 800749a:	d14c      	bne.n	8007536 <_strtod_l+0x37e>
 800749c:	9907      	ldr	r1, [sp, #28]
 800749e:	4301      	orrs	r1, r0
 80074a0:	f47f aecb 	bne.w	800723a <_strtod_l+0x82>
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	f47f aee4 	bne.w	8007272 <_strtod_l+0xba>
 80074aa:	2a69      	cmp	r2, #105	; 0x69
 80074ac:	d026      	beq.n	80074fc <_strtod_l+0x344>
 80074ae:	dc23      	bgt.n	80074f8 <_strtod_l+0x340>
 80074b0:	2a49      	cmp	r2, #73	; 0x49
 80074b2:	d023      	beq.n	80074fc <_strtod_l+0x344>
 80074b4:	2a4e      	cmp	r2, #78	; 0x4e
 80074b6:	f47f aedc 	bne.w	8007272 <_strtod_l+0xba>
 80074ba:	499d      	ldr	r1, [pc, #628]	; (8007730 <_strtod_l+0x578>)
 80074bc:	a819      	add	r0, sp, #100	; 0x64
 80074be:	f002 f949 	bl	8009754 <__match>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f43f aed5 	beq.w	8007272 <_strtod_l+0xba>
 80074c8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b28      	cmp	r3, #40	; 0x28
 80074ce:	d12c      	bne.n	800752a <_strtod_l+0x372>
 80074d0:	4998      	ldr	r1, [pc, #608]	; (8007734 <_strtod_l+0x57c>)
 80074d2:	aa1c      	add	r2, sp, #112	; 0x70
 80074d4:	a819      	add	r0, sp, #100	; 0x64
 80074d6:	f002 f951 	bl	800977c <__hexnan>
 80074da:	2805      	cmp	r0, #5
 80074dc:	d125      	bne.n	800752a <_strtod_l+0x372>
 80074de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80074e0:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 80074e4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80074e8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80074ec:	e6a5      	b.n	800723a <_strtod_l+0x82>
 80074ee:	fb0e 2c0c 	mla	ip, lr, ip, r2
 80074f2:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 80074f6:	e7bc      	b.n	8007472 <_strtod_l+0x2ba>
 80074f8:	2a6e      	cmp	r2, #110	; 0x6e
 80074fa:	e7dc      	b.n	80074b6 <_strtod_l+0x2fe>
 80074fc:	498e      	ldr	r1, [pc, #568]	; (8007738 <_strtod_l+0x580>)
 80074fe:	a819      	add	r0, sp, #100	; 0x64
 8007500:	f002 f928 	bl	8009754 <__match>
 8007504:	2800      	cmp	r0, #0
 8007506:	f43f aeb4 	beq.w	8007272 <_strtod_l+0xba>
 800750a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800750c:	498b      	ldr	r1, [pc, #556]	; (800773c <_strtod_l+0x584>)
 800750e:	3b01      	subs	r3, #1
 8007510:	a819      	add	r0, sp, #100	; 0x64
 8007512:	9319      	str	r3, [sp, #100]	; 0x64
 8007514:	f002 f91e 	bl	8009754 <__match>
 8007518:	b910      	cbnz	r0, 8007520 <_strtod_l+0x368>
 800751a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800751c:	3301      	adds	r3, #1
 800751e:	9319      	str	r3, [sp, #100]	; 0x64
 8007520:	f04f 0800 	mov.w	r8, #0
 8007524:	f8df 9218 	ldr.w	r9, [pc, #536]	; 8007740 <_strtod_l+0x588>
 8007528:	e687      	b.n	800723a <_strtod_l+0x82>
 800752a:	4886      	ldr	r0, [pc, #536]	; (8007744 <_strtod_l+0x58c>)
 800752c:	f003 fa2e 	bl	800a98c <nan>
 8007530:	4680      	mov	r8, r0
 8007532:	4689      	mov	r9, r1
 8007534:	e681      	b.n	800723a <_strtod_l+0x82>
 8007536:	9b04      	ldr	r3, [sp, #16]
 8007538:	f1bb 0f00 	cmp.w	fp, #0
 800753c:	bf08      	it	eq
 800753e:	46a3      	moveq	fp, r4
 8007540:	1aeb      	subs	r3, r5, r3
 8007542:	2c10      	cmp	r4, #16
 8007544:	9806      	ldr	r0, [sp, #24]
 8007546:	4626      	mov	r6, r4
 8007548:	9307      	str	r3, [sp, #28]
 800754a:	bfa8      	it	ge
 800754c:	2610      	movge	r6, #16
 800754e:	f7f8 ff8f 	bl	8000470 <__aeabi_ui2d>
 8007552:	2c09      	cmp	r4, #9
 8007554:	4680      	mov	r8, r0
 8007556:	4689      	mov	r9, r1
 8007558:	dd13      	ble.n	8007582 <_strtod_l+0x3ca>
 800755a:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <_strtod_l+0x590>)
 800755c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007560:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007564:	f7f8 fffe 	bl	8000564 <__aeabi_dmul>
 8007568:	4680      	mov	r8, r0
 800756a:	9805      	ldr	r0, [sp, #20]
 800756c:	4689      	mov	r9, r1
 800756e:	f7f8 ff7f 	bl	8000470 <__aeabi_ui2d>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4640      	mov	r0, r8
 8007578:	4649      	mov	r1, r9
 800757a:	f7f8 fe3d 	bl	80001f8 <__adddf3>
 800757e:	4680      	mov	r8, r0
 8007580:	4689      	mov	r9, r1
 8007582:	2c0f      	cmp	r4, #15
 8007584:	dc36      	bgt.n	80075f4 <_strtod_l+0x43c>
 8007586:	9b07      	ldr	r3, [sp, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	f43f ae56 	beq.w	800723a <_strtod_l+0x82>
 800758e:	dd22      	ble.n	80075d6 <_strtod_l+0x41e>
 8007590:	2b16      	cmp	r3, #22
 8007592:	dc09      	bgt.n	80075a8 <_strtod_l+0x3f0>
 8007594:	496c      	ldr	r1, [pc, #432]	; (8007748 <_strtod_l+0x590>)
 8007596:	4642      	mov	r2, r8
 8007598:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800759c:	464b      	mov	r3, r9
 800759e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a2:	f7f8 ffdf 	bl	8000564 <__aeabi_dmul>
 80075a6:	e7c3      	b.n	8007530 <_strtod_l+0x378>
 80075a8:	9a07      	ldr	r2, [sp, #28]
 80075aa:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 80075ae:	4293      	cmp	r3, r2
 80075b0:	db20      	blt.n	80075f4 <_strtod_l+0x43c>
 80075b2:	4d65      	ldr	r5, [pc, #404]	; (8007748 <_strtod_l+0x590>)
 80075b4:	f1c4 040f 	rsb	r4, r4, #15
 80075b8:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 80075bc:	4642      	mov	r2, r8
 80075be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075c2:	464b      	mov	r3, r9
 80075c4:	f7f8 ffce 	bl	8000564 <__aeabi_dmul>
 80075c8:	9b07      	ldr	r3, [sp, #28]
 80075ca:	1b1c      	subs	r4, r3, r4
 80075cc:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 80075d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075d4:	e7e5      	b.n	80075a2 <_strtod_l+0x3ea>
 80075d6:	9b07      	ldr	r3, [sp, #28]
 80075d8:	3316      	adds	r3, #22
 80075da:	db0b      	blt.n	80075f4 <_strtod_l+0x43c>
 80075dc:	9b04      	ldr	r3, [sp, #16]
 80075de:	4640      	mov	r0, r8
 80075e0:	1b5d      	subs	r5, r3, r5
 80075e2:	4b59      	ldr	r3, [pc, #356]	; (8007748 <_strtod_l+0x590>)
 80075e4:	4649      	mov	r1, r9
 80075e6:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80075ea:	e9d5 2300 	ldrd	r2, r3, [r5]
 80075ee:	f7f9 f8e3 	bl	80007b8 <__aeabi_ddiv>
 80075f2:	e79d      	b.n	8007530 <_strtod_l+0x378>
 80075f4:	9b07      	ldr	r3, [sp, #28]
 80075f6:	1ba6      	subs	r6, r4, r6
 80075f8:	441e      	add	r6, r3
 80075fa:	2e00      	cmp	r6, #0
 80075fc:	dd74      	ble.n	80076e8 <_strtod_l+0x530>
 80075fe:	f016 030f 	ands.w	r3, r6, #15
 8007602:	d00a      	beq.n	800761a <_strtod_l+0x462>
 8007604:	4950      	ldr	r1, [pc, #320]	; (8007748 <_strtod_l+0x590>)
 8007606:	4642      	mov	r2, r8
 8007608:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800760c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007610:	464b      	mov	r3, r9
 8007612:	f7f8 ffa7 	bl	8000564 <__aeabi_dmul>
 8007616:	4680      	mov	r8, r0
 8007618:	4689      	mov	r9, r1
 800761a:	f036 060f 	bics.w	r6, r6, #15
 800761e:	d052      	beq.n	80076c6 <_strtod_l+0x50e>
 8007620:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8007624:	dd27      	ble.n	8007676 <_strtod_l+0x4be>
 8007626:	f04f 0b00 	mov.w	fp, #0
 800762a:	f8cd b010 	str.w	fp, [sp, #16]
 800762e:	f8cd b020 	str.w	fp, [sp, #32]
 8007632:	f8cd b018 	str.w	fp, [sp, #24]
 8007636:	2322      	movs	r3, #34	; 0x22
 8007638:	f04f 0800 	mov.w	r8, #0
 800763c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 8007740 <_strtod_l+0x588>
 8007640:	f8ca 3000 	str.w	r3, [sl]
 8007644:	9b08      	ldr	r3, [sp, #32]
 8007646:	2b00      	cmp	r3, #0
 8007648:	f43f adf7 	beq.w	800723a <_strtod_l+0x82>
 800764c:	4650      	mov	r0, sl
 800764e:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007650:	f002 fa1c 	bl	8009a8c <_Bfree>
 8007654:	4650      	mov	r0, sl
 8007656:	9906      	ldr	r1, [sp, #24]
 8007658:	f002 fa18 	bl	8009a8c <_Bfree>
 800765c:	4650      	mov	r0, sl
 800765e:	9904      	ldr	r1, [sp, #16]
 8007660:	f002 fa14 	bl	8009a8c <_Bfree>
 8007664:	4650      	mov	r0, sl
 8007666:	9908      	ldr	r1, [sp, #32]
 8007668:	f002 fa10 	bl	8009a8c <_Bfree>
 800766c:	4659      	mov	r1, fp
 800766e:	4650      	mov	r0, sl
 8007670:	f002 fa0c 	bl	8009a8c <_Bfree>
 8007674:	e5e1      	b.n	800723a <_strtod_l+0x82>
 8007676:	4b35      	ldr	r3, [pc, #212]	; (800774c <_strtod_l+0x594>)
 8007678:	4640      	mov	r0, r8
 800767a:	9305      	str	r3, [sp, #20]
 800767c:	2300      	movs	r3, #0
 800767e:	4649      	mov	r1, r9
 8007680:	461f      	mov	r7, r3
 8007682:	1136      	asrs	r6, r6, #4
 8007684:	2e01      	cmp	r6, #1
 8007686:	dc21      	bgt.n	80076cc <_strtod_l+0x514>
 8007688:	b10b      	cbz	r3, 800768e <_strtod_l+0x4d6>
 800768a:	4680      	mov	r8, r0
 800768c:	4689      	mov	r9, r1
 800768e:	4b2f      	ldr	r3, [pc, #188]	; (800774c <_strtod_l+0x594>)
 8007690:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007694:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007698:	4642      	mov	r2, r8
 800769a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800769e:	464b      	mov	r3, r9
 80076a0:	f7f8 ff60 	bl	8000564 <__aeabi_dmul>
 80076a4:	4b26      	ldr	r3, [pc, #152]	; (8007740 <_strtod_l+0x588>)
 80076a6:	460a      	mov	r2, r1
 80076a8:	400b      	ands	r3, r1
 80076aa:	4929      	ldr	r1, [pc, #164]	; (8007750 <_strtod_l+0x598>)
 80076ac:	4680      	mov	r8, r0
 80076ae:	428b      	cmp	r3, r1
 80076b0:	d8b9      	bhi.n	8007626 <_strtod_l+0x46e>
 80076b2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80076b6:	428b      	cmp	r3, r1
 80076b8:	bf86      	itte	hi
 80076ba:	f04f 38ff 	movhi.w	r8, #4294967295
 80076be:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 8007754 <_strtod_l+0x59c>
 80076c2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 80076c6:	2300      	movs	r3, #0
 80076c8:	9305      	str	r3, [sp, #20]
 80076ca:	e07f      	b.n	80077cc <_strtod_l+0x614>
 80076cc:	07f2      	lsls	r2, r6, #31
 80076ce:	d505      	bpl.n	80076dc <_strtod_l+0x524>
 80076d0:	9b05      	ldr	r3, [sp, #20]
 80076d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d6:	f7f8 ff45 	bl	8000564 <__aeabi_dmul>
 80076da:	2301      	movs	r3, #1
 80076dc:	9a05      	ldr	r2, [sp, #20]
 80076de:	3701      	adds	r7, #1
 80076e0:	3208      	adds	r2, #8
 80076e2:	1076      	asrs	r6, r6, #1
 80076e4:	9205      	str	r2, [sp, #20]
 80076e6:	e7cd      	b.n	8007684 <_strtod_l+0x4cc>
 80076e8:	d0ed      	beq.n	80076c6 <_strtod_l+0x50e>
 80076ea:	4276      	negs	r6, r6
 80076ec:	f016 020f 	ands.w	r2, r6, #15
 80076f0:	d00a      	beq.n	8007708 <_strtod_l+0x550>
 80076f2:	4b15      	ldr	r3, [pc, #84]	; (8007748 <_strtod_l+0x590>)
 80076f4:	4640      	mov	r0, r8
 80076f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076fa:	4649      	mov	r1, r9
 80076fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007700:	f7f9 f85a 	bl	80007b8 <__aeabi_ddiv>
 8007704:	4680      	mov	r8, r0
 8007706:	4689      	mov	r9, r1
 8007708:	1136      	asrs	r6, r6, #4
 800770a:	d0dc      	beq.n	80076c6 <_strtod_l+0x50e>
 800770c:	2e1f      	cmp	r6, #31
 800770e:	dd23      	ble.n	8007758 <_strtod_l+0x5a0>
 8007710:	f04f 0b00 	mov.w	fp, #0
 8007714:	f8cd b010 	str.w	fp, [sp, #16]
 8007718:	f8cd b020 	str.w	fp, [sp, #32]
 800771c:	f8cd b018 	str.w	fp, [sp, #24]
 8007720:	2322      	movs	r3, #34	; 0x22
 8007722:	f04f 0800 	mov.w	r8, #0
 8007726:	f04f 0900 	mov.w	r9, #0
 800772a:	f8ca 3000 	str.w	r3, [sl]
 800772e:	e789      	b.n	8007644 <_strtod_l+0x48c>
 8007730:	0800afbd 	.word	0x0800afbd
 8007734:	0800b06c 	.word	0x0800b06c
 8007738:	0800afb5 	.word	0x0800afb5
 800773c:	0800b144 	.word	0x0800b144
 8007740:	7ff00000 	.word	0x7ff00000
 8007744:	0800b140 	.word	0x0800b140
 8007748:	0800b320 	.word	0x0800b320
 800774c:	0800b2f8 	.word	0x0800b2f8
 8007750:	7ca00000 	.word	0x7ca00000
 8007754:	7fefffff 	.word	0x7fefffff
 8007758:	f016 0310 	ands.w	r3, r6, #16
 800775c:	bf18      	it	ne
 800775e:	236a      	movne	r3, #106	; 0x6a
 8007760:	4640      	mov	r0, r8
 8007762:	9305      	str	r3, [sp, #20]
 8007764:	4649      	mov	r1, r9
 8007766:	2300      	movs	r3, #0
 8007768:	4fb0      	ldr	r7, [pc, #704]	; (8007a2c <_strtod_l+0x874>)
 800776a:	07f2      	lsls	r2, r6, #31
 800776c:	d504      	bpl.n	8007778 <_strtod_l+0x5c0>
 800776e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007772:	f7f8 fef7 	bl	8000564 <__aeabi_dmul>
 8007776:	2301      	movs	r3, #1
 8007778:	1076      	asrs	r6, r6, #1
 800777a:	f107 0708 	add.w	r7, r7, #8
 800777e:	d1f4      	bne.n	800776a <_strtod_l+0x5b2>
 8007780:	b10b      	cbz	r3, 8007786 <_strtod_l+0x5ce>
 8007782:	4680      	mov	r8, r0
 8007784:	4689      	mov	r9, r1
 8007786:	9b05      	ldr	r3, [sp, #20]
 8007788:	b1c3      	cbz	r3, 80077bc <_strtod_l+0x604>
 800778a:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800778e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007792:	2b00      	cmp	r3, #0
 8007794:	4649      	mov	r1, r9
 8007796:	dd11      	ble.n	80077bc <_strtod_l+0x604>
 8007798:	2b1f      	cmp	r3, #31
 800779a:	f340 8127 	ble.w	80079ec <_strtod_l+0x834>
 800779e:	2b34      	cmp	r3, #52	; 0x34
 80077a0:	bfd8      	it	le
 80077a2:	f04f 33ff 	movle.w	r3, #4294967295
 80077a6:	f04f 0800 	mov.w	r8, #0
 80077aa:	bfcf      	iteee	gt
 80077ac:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 80077b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80077b4:	fa03 f202 	lslle.w	r2, r3, r2
 80077b8:	ea02 0901 	andle.w	r9, r2, r1
 80077bc:	2200      	movs	r2, #0
 80077be:	2300      	movs	r3, #0
 80077c0:	4640      	mov	r0, r8
 80077c2:	4649      	mov	r1, r9
 80077c4:	f7f9 f936 	bl	8000a34 <__aeabi_dcmpeq>
 80077c8:	2800      	cmp	r0, #0
 80077ca:	d1a1      	bne.n	8007710 <_strtod_l+0x558>
 80077cc:	9b06      	ldr	r3, [sp, #24]
 80077ce:	465a      	mov	r2, fp
 80077d0:	9300      	str	r3, [sp, #0]
 80077d2:	4650      	mov	r0, sl
 80077d4:	4623      	mov	r3, r4
 80077d6:	9908      	ldr	r1, [sp, #32]
 80077d8:	f002 f9c0 	bl	8009b5c <__s2b>
 80077dc:	9008      	str	r0, [sp, #32]
 80077de:	2800      	cmp	r0, #0
 80077e0:	f43f af21 	beq.w	8007626 <_strtod_l+0x46e>
 80077e4:	9b04      	ldr	r3, [sp, #16]
 80077e6:	f04f 0b00 	mov.w	fp, #0
 80077ea:	1b5d      	subs	r5, r3, r5
 80077ec:	9b07      	ldr	r3, [sp, #28]
 80077ee:	f8cd b010 	str.w	fp, [sp, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	bfb4      	ite	lt
 80077f6:	462b      	movlt	r3, r5
 80077f8:	2300      	movge	r3, #0
 80077fa:	930e      	str	r3, [sp, #56]	; 0x38
 80077fc:	9b07      	ldr	r3, [sp, #28]
 80077fe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007802:	9314      	str	r3, [sp, #80]	; 0x50
 8007804:	9b08      	ldr	r3, [sp, #32]
 8007806:	4650      	mov	r0, sl
 8007808:	6859      	ldr	r1, [r3, #4]
 800780a:	f002 f8ff 	bl	8009a0c <_Balloc>
 800780e:	9006      	str	r0, [sp, #24]
 8007810:	2800      	cmp	r0, #0
 8007812:	f43f af10 	beq.w	8007636 <_strtod_l+0x47e>
 8007816:	9b08      	ldr	r3, [sp, #32]
 8007818:	300c      	adds	r0, #12
 800781a:	691a      	ldr	r2, [r3, #16]
 800781c:	f103 010c 	add.w	r1, r3, #12
 8007820:	3202      	adds	r2, #2
 8007822:	0092      	lsls	r2, r2, #2
 8007824:	f7fe fd92 	bl	800634c <memcpy>
 8007828:	ab1c      	add	r3, sp, #112	; 0x70
 800782a:	9301      	str	r3, [sp, #4]
 800782c:	ab1b      	add	r3, sp, #108	; 0x6c
 800782e:	9300      	str	r3, [sp, #0]
 8007830:	4642      	mov	r2, r8
 8007832:	464b      	mov	r3, r9
 8007834:	4650      	mov	r0, sl
 8007836:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800783a:	f002 fcd1 	bl	800a1e0 <__d2b>
 800783e:	901a      	str	r0, [sp, #104]	; 0x68
 8007840:	2800      	cmp	r0, #0
 8007842:	f43f aef8 	beq.w	8007636 <_strtod_l+0x47e>
 8007846:	2101      	movs	r1, #1
 8007848:	4650      	mov	r0, sl
 800784a:	f002 fa1f 	bl	8009c8c <__i2b>
 800784e:	4603      	mov	r3, r0
 8007850:	9004      	str	r0, [sp, #16]
 8007852:	2800      	cmp	r0, #0
 8007854:	f43f aeef 	beq.w	8007636 <_strtod_l+0x47e>
 8007858:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800785a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800785c:	2d00      	cmp	r5, #0
 800785e:	bfab      	itete	ge
 8007860:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007862:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 8007864:	18ee      	addge	r6, r5, r3
 8007866:	1b5c      	sublt	r4, r3, r5
 8007868:	9b05      	ldr	r3, [sp, #20]
 800786a:	bfa8      	it	ge
 800786c:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800786e:	eba5 0503 	sub.w	r5, r5, r3
 8007872:	4415      	add	r5, r2
 8007874:	4b6e      	ldr	r3, [pc, #440]	; (8007a30 <_strtod_l+0x878>)
 8007876:	f105 35ff 	add.w	r5, r5, #4294967295
 800787a:	bfb8      	it	lt
 800787c:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800787e:	429d      	cmp	r5, r3
 8007880:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007884:	f280 80c4 	bge.w	8007a10 <_strtod_l+0x858>
 8007888:	1b5b      	subs	r3, r3, r5
 800788a:	2b1f      	cmp	r3, #31
 800788c:	f04f 0701 	mov.w	r7, #1
 8007890:	eba2 0203 	sub.w	r2, r2, r3
 8007894:	f300 80b1 	bgt.w	80079fa <_strtod_l+0x842>
 8007898:	2500      	movs	r5, #0
 800789a:	fa07 f303 	lsl.w	r3, r7, r3
 800789e:	930f      	str	r3, [sp, #60]	; 0x3c
 80078a0:	18b7      	adds	r7, r6, r2
 80078a2:	9b05      	ldr	r3, [sp, #20]
 80078a4:	42be      	cmp	r6, r7
 80078a6:	4414      	add	r4, r2
 80078a8:	441c      	add	r4, r3
 80078aa:	4633      	mov	r3, r6
 80078ac:	bfa8      	it	ge
 80078ae:	463b      	movge	r3, r7
 80078b0:	42a3      	cmp	r3, r4
 80078b2:	bfa8      	it	ge
 80078b4:	4623      	movge	r3, r4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	bfc2      	ittt	gt
 80078ba:	1aff      	subgt	r7, r7, r3
 80078bc:	1ae4      	subgt	r4, r4, r3
 80078be:	1af6      	subgt	r6, r6, r3
 80078c0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	dd17      	ble.n	80078f6 <_strtod_l+0x73e>
 80078c6:	461a      	mov	r2, r3
 80078c8:	4650      	mov	r0, sl
 80078ca:	9904      	ldr	r1, [sp, #16]
 80078cc:	f002 fa9c 	bl	8009e08 <__pow5mult>
 80078d0:	9004      	str	r0, [sp, #16]
 80078d2:	2800      	cmp	r0, #0
 80078d4:	f43f aeaf 	beq.w	8007636 <_strtod_l+0x47e>
 80078d8:	4601      	mov	r1, r0
 80078da:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80078dc:	4650      	mov	r0, sl
 80078de:	f002 f9eb 	bl	8009cb8 <__multiply>
 80078e2:	9009      	str	r0, [sp, #36]	; 0x24
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f43f aea6 	beq.w	8007636 <_strtod_l+0x47e>
 80078ea:	4650      	mov	r0, sl
 80078ec:	991a      	ldr	r1, [sp, #104]	; 0x68
 80078ee:	f002 f8cd 	bl	8009a8c <_Bfree>
 80078f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80078f4:	931a      	str	r3, [sp, #104]	; 0x68
 80078f6:	2f00      	cmp	r7, #0
 80078f8:	f300 808e 	bgt.w	8007a18 <_strtod_l+0x860>
 80078fc:	9b07      	ldr	r3, [sp, #28]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	dd08      	ble.n	8007914 <_strtod_l+0x75c>
 8007902:	4650      	mov	r0, sl
 8007904:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007906:	9906      	ldr	r1, [sp, #24]
 8007908:	f002 fa7e 	bl	8009e08 <__pow5mult>
 800790c:	9006      	str	r0, [sp, #24]
 800790e:	2800      	cmp	r0, #0
 8007910:	f43f ae91 	beq.w	8007636 <_strtod_l+0x47e>
 8007914:	2c00      	cmp	r4, #0
 8007916:	dd08      	ble.n	800792a <_strtod_l+0x772>
 8007918:	4622      	mov	r2, r4
 800791a:	4650      	mov	r0, sl
 800791c:	9906      	ldr	r1, [sp, #24]
 800791e:	f002 facd 	bl	8009ebc <__lshift>
 8007922:	9006      	str	r0, [sp, #24]
 8007924:	2800      	cmp	r0, #0
 8007926:	f43f ae86 	beq.w	8007636 <_strtod_l+0x47e>
 800792a:	2e00      	cmp	r6, #0
 800792c:	dd08      	ble.n	8007940 <_strtod_l+0x788>
 800792e:	4632      	mov	r2, r6
 8007930:	4650      	mov	r0, sl
 8007932:	9904      	ldr	r1, [sp, #16]
 8007934:	f002 fac2 	bl	8009ebc <__lshift>
 8007938:	9004      	str	r0, [sp, #16]
 800793a:	2800      	cmp	r0, #0
 800793c:	f43f ae7b 	beq.w	8007636 <_strtod_l+0x47e>
 8007940:	4650      	mov	r0, sl
 8007942:	9a06      	ldr	r2, [sp, #24]
 8007944:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007946:	f002 fb45 	bl	8009fd4 <__mdiff>
 800794a:	4683      	mov	fp, r0
 800794c:	2800      	cmp	r0, #0
 800794e:	f43f ae72 	beq.w	8007636 <_strtod_l+0x47e>
 8007952:	2400      	movs	r4, #0
 8007954:	68c3      	ldr	r3, [r0, #12]
 8007956:	9904      	ldr	r1, [sp, #16]
 8007958:	60c4      	str	r4, [r0, #12]
 800795a:	930b      	str	r3, [sp, #44]	; 0x2c
 800795c:	f002 fb1e 	bl	8009f9c <__mcmp>
 8007960:	42a0      	cmp	r0, r4
 8007962:	da6b      	bge.n	8007a3c <_strtod_l+0x884>
 8007964:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007966:	ea53 0308 	orrs.w	r3, r3, r8
 800796a:	f040 8091 	bne.w	8007a90 <_strtod_l+0x8d8>
 800796e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007972:	2b00      	cmp	r3, #0
 8007974:	f040 808c 	bne.w	8007a90 <_strtod_l+0x8d8>
 8007978:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800797c:	0d1b      	lsrs	r3, r3, #20
 800797e:	051b      	lsls	r3, r3, #20
 8007980:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007984:	f240 8084 	bls.w	8007a90 <_strtod_l+0x8d8>
 8007988:	f8db 3014 	ldr.w	r3, [fp, #20]
 800798c:	b91b      	cbnz	r3, 8007996 <_strtod_l+0x7de>
 800798e:	f8db 3010 	ldr.w	r3, [fp, #16]
 8007992:	2b01      	cmp	r3, #1
 8007994:	dd7c      	ble.n	8007a90 <_strtod_l+0x8d8>
 8007996:	4659      	mov	r1, fp
 8007998:	2201      	movs	r2, #1
 800799a:	4650      	mov	r0, sl
 800799c:	f002 fa8e 	bl	8009ebc <__lshift>
 80079a0:	9904      	ldr	r1, [sp, #16]
 80079a2:	4683      	mov	fp, r0
 80079a4:	f002 fafa 	bl	8009f9c <__mcmp>
 80079a8:	2800      	cmp	r0, #0
 80079aa:	dd71      	ble.n	8007a90 <_strtod_l+0x8d8>
 80079ac:	9905      	ldr	r1, [sp, #20]
 80079ae:	464b      	mov	r3, r9
 80079b0:	4a20      	ldr	r2, [pc, #128]	; (8007a34 <_strtod_l+0x87c>)
 80079b2:	2900      	cmp	r1, #0
 80079b4:	f000 808c 	beq.w	8007ad0 <_strtod_l+0x918>
 80079b8:	ea02 0109 	and.w	r1, r2, r9
 80079bc:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80079c0:	f300 8086 	bgt.w	8007ad0 <_strtod_l+0x918>
 80079c4:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80079c8:	f77f aeaa 	ble.w	8007720 <_strtod_l+0x568>
 80079cc:	4640      	mov	r0, r8
 80079ce:	4649      	mov	r1, r9
 80079d0:	4b19      	ldr	r3, [pc, #100]	; (8007a38 <_strtod_l+0x880>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	f7f8 fdc6 	bl	8000564 <__aeabi_dmul>
 80079d8:	460b      	mov	r3, r1
 80079da:	4303      	orrs	r3, r0
 80079dc:	bf08      	it	eq
 80079de:	2322      	moveq	r3, #34	; 0x22
 80079e0:	4680      	mov	r8, r0
 80079e2:	4689      	mov	r9, r1
 80079e4:	bf08      	it	eq
 80079e6:	f8ca 3000 	streq.w	r3, [sl]
 80079ea:	e62f      	b.n	800764c <_strtod_l+0x494>
 80079ec:	f04f 32ff 	mov.w	r2, #4294967295
 80079f0:	fa02 f303 	lsl.w	r3, r2, r3
 80079f4:	ea03 0808 	and.w	r8, r3, r8
 80079f8:	e6e0      	b.n	80077bc <_strtod_l+0x604>
 80079fa:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 80079fe:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8007a02:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8007a06:	35e2      	adds	r5, #226	; 0xe2
 8007a08:	fa07 f505 	lsl.w	r5, r7, r5
 8007a0c:	970f      	str	r7, [sp, #60]	; 0x3c
 8007a0e:	e747      	b.n	80078a0 <_strtod_l+0x6e8>
 8007a10:	2301      	movs	r3, #1
 8007a12:	2500      	movs	r5, #0
 8007a14:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a16:	e743      	b.n	80078a0 <_strtod_l+0x6e8>
 8007a18:	463a      	mov	r2, r7
 8007a1a:	4650      	mov	r0, sl
 8007a1c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007a1e:	f002 fa4d 	bl	8009ebc <__lshift>
 8007a22:	901a      	str	r0, [sp, #104]	; 0x68
 8007a24:	2800      	cmp	r0, #0
 8007a26:	f47f af69 	bne.w	80078fc <_strtod_l+0x744>
 8007a2a:	e604      	b.n	8007636 <_strtod_l+0x47e>
 8007a2c:	0800b080 	.word	0x0800b080
 8007a30:	fffffc02 	.word	0xfffffc02
 8007a34:	7ff00000 	.word	0x7ff00000
 8007a38:	39500000 	.word	0x39500000
 8007a3c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8007a40:	d165      	bne.n	8007b0e <_strtod_l+0x956>
 8007a42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007a44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a48:	b35a      	cbz	r2, 8007aa2 <_strtod_l+0x8ea>
 8007a4a:	4a99      	ldr	r2, [pc, #612]	; (8007cb0 <_strtod_l+0xaf8>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d12b      	bne.n	8007aa8 <_strtod_l+0x8f0>
 8007a50:	9b05      	ldr	r3, [sp, #20]
 8007a52:	4641      	mov	r1, r8
 8007a54:	b303      	cbz	r3, 8007a98 <_strtod_l+0x8e0>
 8007a56:	464a      	mov	r2, r9
 8007a58:	4b96      	ldr	r3, [pc, #600]	; (8007cb4 <_strtod_l+0xafc>)
 8007a5a:	4013      	ands	r3, r2
 8007a5c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007a60:	f04f 32ff 	mov.w	r2, #4294967295
 8007a64:	d81b      	bhi.n	8007a9e <_strtod_l+0x8e6>
 8007a66:	0d1b      	lsrs	r3, r3, #20
 8007a68:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a70:	4299      	cmp	r1, r3
 8007a72:	d119      	bne.n	8007aa8 <_strtod_l+0x8f0>
 8007a74:	4b90      	ldr	r3, [pc, #576]	; (8007cb8 <_strtod_l+0xb00>)
 8007a76:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d102      	bne.n	8007a82 <_strtod_l+0x8ca>
 8007a7c:	3101      	adds	r1, #1
 8007a7e:	f43f adda 	beq.w	8007636 <_strtod_l+0x47e>
 8007a82:	f04f 0800 	mov.w	r8, #0
 8007a86:	4b8b      	ldr	r3, [pc, #556]	; (8007cb4 <_strtod_l+0xafc>)
 8007a88:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007a8a:	401a      	ands	r2, r3
 8007a8c:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8007a90:	9b05      	ldr	r3, [sp, #20]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d19a      	bne.n	80079cc <_strtod_l+0x814>
 8007a96:	e5d9      	b.n	800764c <_strtod_l+0x494>
 8007a98:	f04f 33ff 	mov.w	r3, #4294967295
 8007a9c:	e7e8      	b.n	8007a70 <_strtod_l+0x8b8>
 8007a9e:	4613      	mov	r3, r2
 8007aa0:	e7e6      	b.n	8007a70 <_strtod_l+0x8b8>
 8007aa2:	ea53 0308 	orrs.w	r3, r3, r8
 8007aa6:	d081      	beq.n	80079ac <_strtod_l+0x7f4>
 8007aa8:	b1e5      	cbz	r5, 8007ae4 <_strtod_l+0x92c>
 8007aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007aac:	421d      	tst	r5, r3
 8007aae:	d0ef      	beq.n	8007a90 <_strtod_l+0x8d8>
 8007ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ab2:	4640      	mov	r0, r8
 8007ab4:	4649      	mov	r1, r9
 8007ab6:	9a05      	ldr	r2, [sp, #20]
 8007ab8:	b1c3      	cbz	r3, 8007aec <_strtod_l+0x934>
 8007aba:	f7ff fb5a 	bl	8007172 <sulp>
 8007abe:	4602      	mov	r2, r0
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007ac6:	f7f8 fb97 	bl	80001f8 <__adddf3>
 8007aca:	4680      	mov	r8, r0
 8007acc:	4689      	mov	r9, r1
 8007ace:	e7df      	b.n	8007a90 <_strtod_l+0x8d8>
 8007ad0:	4013      	ands	r3, r2
 8007ad2:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007ad6:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007ada:	f04f 38ff 	mov.w	r8, #4294967295
 8007ade:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007ae2:	e7d5      	b.n	8007a90 <_strtod_l+0x8d8>
 8007ae4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ae6:	ea13 0f08 	tst.w	r3, r8
 8007aea:	e7e0      	b.n	8007aae <_strtod_l+0x8f6>
 8007aec:	f7ff fb41 	bl	8007172 <sulp>
 8007af0:	4602      	mov	r2, r0
 8007af2:	460b      	mov	r3, r1
 8007af4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007af8:	f7f8 fb7c 	bl	80001f4 <__aeabi_dsub>
 8007afc:	2200      	movs	r2, #0
 8007afe:	2300      	movs	r3, #0
 8007b00:	4680      	mov	r8, r0
 8007b02:	4689      	mov	r9, r1
 8007b04:	f7f8 ff96 	bl	8000a34 <__aeabi_dcmpeq>
 8007b08:	2800      	cmp	r0, #0
 8007b0a:	d0c1      	beq.n	8007a90 <_strtod_l+0x8d8>
 8007b0c:	e608      	b.n	8007720 <_strtod_l+0x568>
 8007b0e:	4658      	mov	r0, fp
 8007b10:	9904      	ldr	r1, [sp, #16]
 8007b12:	f002 fbc1 	bl	800a298 <__ratio>
 8007b16:	2200      	movs	r2, #0
 8007b18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007b1c:	4606      	mov	r6, r0
 8007b1e:	460f      	mov	r7, r1
 8007b20:	f7f8 ff9c 	bl	8000a5c <__aeabi_dcmple>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	d070      	beq.n	8007c0a <_strtod_l+0xa52>
 8007b28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d042      	beq.n	8007bb4 <_strtod_l+0x9fc>
 8007b2e:	2600      	movs	r6, #0
 8007b30:	4f62      	ldr	r7, [pc, #392]	; (8007cbc <_strtod_l+0xb04>)
 8007b32:	4d62      	ldr	r5, [pc, #392]	; (8007cbc <_strtod_l+0xb04>)
 8007b34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b36:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007b3a:	0d1b      	lsrs	r3, r3, #20
 8007b3c:	051b      	lsls	r3, r3, #20
 8007b3e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007b40:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b42:	4b5f      	ldr	r3, [pc, #380]	; (8007cc0 <_strtod_l+0xb08>)
 8007b44:	429a      	cmp	r2, r3
 8007b46:	f040 80c3 	bne.w	8007cd0 <_strtod_l+0xb18>
 8007b4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007b4c:	4640      	mov	r0, r8
 8007b4e:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8007b52:	4649      	mov	r1, r9
 8007b54:	f002 faca 	bl	800a0ec <__ulp>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	460b      	mov	r3, r1
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	4639      	mov	r1, r7
 8007b60:	f7f8 fd00 	bl	8000564 <__aeabi_dmul>
 8007b64:	4642      	mov	r2, r8
 8007b66:	464b      	mov	r3, r9
 8007b68:	f7f8 fb46 	bl	80001f8 <__adddf3>
 8007b6c:	460b      	mov	r3, r1
 8007b6e:	4951      	ldr	r1, [pc, #324]	; (8007cb4 <_strtod_l+0xafc>)
 8007b70:	4a54      	ldr	r2, [pc, #336]	; (8007cc4 <_strtod_l+0xb0c>)
 8007b72:	4019      	ands	r1, r3
 8007b74:	4291      	cmp	r1, r2
 8007b76:	4680      	mov	r8, r0
 8007b78:	d95d      	bls.n	8007c36 <_strtod_l+0xa7e>
 8007b7a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b7c:	4b4e      	ldr	r3, [pc, #312]	; (8007cb8 <_strtod_l+0xb00>)
 8007b7e:	429a      	cmp	r2, r3
 8007b80:	d103      	bne.n	8007b8a <_strtod_l+0x9d2>
 8007b82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b84:	3301      	adds	r3, #1
 8007b86:	f43f ad56 	beq.w	8007636 <_strtod_l+0x47e>
 8007b8a:	f04f 38ff 	mov.w	r8, #4294967295
 8007b8e:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8007cb8 <_strtod_l+0xb00>
 8007b92:	4650      	mov	r0, sl
 8007b94:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007b96:	f001 ff79 	bl	8009a8c <_Bfree>
 8007b9a:	4650      	mov	r0, sl
 8007b9c:	9906      	ldr	r1, [sp, #24]
 8007b9e:	f001 ff75 	bl	8009a8c <_Bfree>
 8007ba2:	4650      	mov	r0, sl
 8007ba4:	9904      	ldr	r1, [sp, #16]
 8007ba6:	f001 ff71 	bl	8009a8c <_Bfree>
 8007baa:	4659      	mov	r1, fp
 8007bac:	4650      	mov	r0, sl
 8007bae:	f001 ff6d 	bl	8009a8c <_Bfree>
 8007bb2:	e627      	b.n	8007804 <_strtod_l+0x64c>
 8007bb4:	f1b8 0f00 	cmp.w	r8, #0
 8007bb8:	d119      	bne.n	8007bee <_strtod_l+0xa36>
 8007bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007bc0:	b9e3      	cbnz	r3, 8007bfc <_strtod_l+0xa44>
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	4630      	mov	r0, r6
 8007bc6:	4639      	mov	r1, r7
 8007bc8:	4b3c      	ldr	r3, [pc, #240]	; (8007cbc <_strtod_l+0xb04>)
 8007bca:	f7f8 ff3d 	bl	8000a48 <__aeabi_dcmplt>
 8007bce:	b9c8      	cbnz	r0, 8007c04 <_strtod_l+0xa4c>
 8007bd0:	2200      	movs	r2, #0
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	4b3c      	ldr	r3, [pc, #240]	; (8007cc8 <_strtod_l+0xb10>)
 8007bd8:	f7f8 fcc4 	bl	8000564 <__aeabi_dmul>
 8007bdc:	4604      	mov	r4, r0
 8007bde:	460d      	mov	r5, r1
 8007be0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8007be4:	9416      	str	r4, [sp, #88]	; 0x58
 8007be6:	9317      	str	r3, [sp, #92]	; 0x5c
 8007be8:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8007bec:	e7a2      	b.n	8007b34 <_strtod_l+0x97c>
 8007bee:	f1b8 0f01 	cmp.w	r8, #1
 8007bf2:	d103      	bne.n	8007bfc <_strtod_l+0xa44>
 8007bf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	f43f ad92 	beq.w	8007720 <_strtod_l+0x568>
 8007bfc:	2600      	movs	r6, #0
 8007bfe:	2400      	movs	r4, #0
 8007c00:	4f32      	ldr	r7, [pc, #200]	; (8007ccc <_strtod_l+0xb14>)
 8007c02:	e796      	b.n	8007b32 <_strtod_l+0x97a>
 8007c04:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8007c06:	4d30      	ldr	r5, [pc, #192]	; (8007cc8 <_strtod_l+0xb10>)
 8007c08:	e7ea      	b.n	8007be0 <_strtod_l+0xa28>
 8007c0a:	4b2f      	ldr	r3, [pc, #188]	; (8007cc8 <_strtod_l+0xb10>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	4630      	mov	r0, r6
 8007c10:	4639      	mov	r1, r7
 8007c12:	f7f8 fca7 	bl	8000564 <__aeabi_dmul>
 8007c16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c18:	4604      	mov	r4, r0
 8007c1a:	460d      	mov	r5, r1
 8007c1c:	b933      	cbnz	r3, 8007c2c <_strtod_l+0xa74>
 8007c1e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c22:	9010      	str	r0, [sp, #64]	; 0x40
 8007c24:	9311      	str	r3, [sp, #68]	; 0x44
 8007c26:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8007c2a:	e783      	b.n	8007b34 <_strtod_l+0x97c>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	460b      	mov	r3, r1
 8007c30:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8007c34:	e7f7      	b.n	8007c26 <_strtod_l+0xa6e>
 8007c36:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007c3a:	9b05      	ldr	r3, [sp, #20]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d1a8      	bne.n	8007b92 <_strtod_l+0x9da>
 8007c40:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007c46:	0d1b      	lsrs	r3, r3, #20
 8007c48:	051b      	lsls	r3, r3, #20
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d1a1      	bne.n	8007b92 <_strtod_l+0x9da>
 8007c4e:	4620      	mov	r0, r4
 8007c50:	4629      	mov	r1, r5
 8007c52:	f7f8 ff97 	bl	8000b84 <__aeabi_d2lz>
 8007c56:	f7f8 fc57 	bl	8000508 <__aeabi_l2d>
 8007c5a:	4602      	mov	r2, r0
 8007c5c:	460b      	mov	r3, r1
 8007c5e:	4620      	mov	r0, r4
 8007c60:	4629      	mov	r1, r5
 8007c62:	f7f8 fac7 	bl	80001f4 <__aeabi_dsub>
 8007c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c68:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c6c:	ea43 0308 	orr.w	r3, r3, r8
 8007c70:	4313      	orrs	r3, r2
 8007c72:	4604      	mov	r4, r0
 8007c74:	460d      	mov	r5, r1
 8007c76:	d066      	beq.n	8007d46 <_strtod_l+0xb8e>
 8007c78:	a309      	add	r3, pc, #36	; (adr r3, 8007ca0 <_strtod_l+0xae8>)
 8007c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c7e:	f7f8 fee3 	bl	8000a48 <__aeabi_dcmplt>
 8007c82:	2800      	cmp	r0, #0
 8007c84:	f47f ace2 	bne.w	800764c <_strtod_l+0x494>
 8007c88:	a307      	add	r3, pc, #28	; (adr r3, 8007ca8 <_strtod_l+0xaf0>)
 8007c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c8e:	4620      	mov	r0, r4
 8007c90:	4629      	mov	r1, r5
 8007c92:	f7f8 fef7 	bl	8000a84 <__aeabi_dcmpgt>
 8007c96:	2800      	cmp	r0, #0
 8007c98:	f43f af7b 	beq.w	8007b92 <_strtod_l+0x9da>
 8007c9c:	e4d6      	b.n	800764c <_strtod_l+0x494>
 8007c9e:	bf00      	nop
 8007ca0:	94a03595 	.word	0x94a03595
 8007ca4:	3fdfffff 	.word	0x3fdfffff
 8007ca8:	35afe535 	.word	0x35afe535
 8007cac:	3fe00000 	.word	0x3fe00000
 8007cb0:	000fffff 	.word	0x000fffff
 8007cb4:	7ff00000 	.word	0x7ff00000
 8007cb8:	7fefffff 	.word	0x7fefffff
 8007cbc:	3ff00000 	.word	0x3ff00000
 8007cc0:	7fe00000 	.word	0x7fe00000
 8007cc4:	7c9fffff 	.word	0x7c9fffff
 8007cc8:	3fe00000 	.word	0x3fe00000
 8007ccc:	bff00000 	.word	0xbff00000
 8007cd0:	9b05      	ldr	r3, [sp, #20]
 8007cd2:	b313      	cbz	r3, 8007d1a <_strtod_l+0xb62>
 8007cd4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007cda:	d81e      	bhi.n	8007d1a <_strtod_l+0xb62>
 8007cdc:	a326      	add	r3, pc, #152	; (adr r3, 8007d78 <_strtod_l+0xbc0>)
 8007cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	4629      	mov	r1, r5
 8007ce6:	f7f8 feb9 	bl	8000a5c <__aeabi_dcmple>
 8007cea:	b190      	cbz	r0, 8007d12 <_strtod_l+0xb5a>
 8007cec:	4629      	mov	r1, r5
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f7f8 ff10 	bl	8000b14 <__aeabi_d2uiz>
 8007cf4:	2801      	cmp	r0, #1
 8007cf6:	bf38      	it	cc
 8007cf8:	2001      	movcc	r0, #1
 8007cfa:	f7f8 fbb9 	bl	8000470 <__aeabi_ui2d>
 8007cfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d00:	4604      	mov	r4, r0
 8007d02:	460d      	mov	r5, r1
 8007d04:	b9d3      	cbnz	r3, 8007d3c <_strtod_l+0xb84>
 8007d06:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007d0a:	9012      	str	r0, [sp, #72]	; 0x48
 8007d0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8007d0e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8007d12:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007d14:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8007d18:	1a9f      	subs	r7, r3, r2
 8007d1a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007d1e:	f002 f9e5 	bl	800a0ec <__ulp>
 8007d22:	4602      	mov	r2, r0
 8007d24:	460b      	mov	r3, r1
 8007d26:	4630      	mov	r0, r6
 8007d28:	4639      	mov	r1, r7
 8007d2a:	f7f8 fc1b 	bl	8000564 <__aeabi_dmul>
 8007d2e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007d32:	f7f8 fa61 	bl	80001f8 <__adddf3>
 8007d36:	4680      	mov	r8, r0
 8007d38:	4689      	mov	r9, r1
 8007d3a:	e77e      	b.n	8007c3a <_strtod_l+0xa82>
 8007d3c:	4602      	mov	r2, r0
 8007d3e:	460b      	mov	r3, r1
 8007d40:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8007d44:	e7e3      	b.n	8007d0e <_strtod_l+0xb56>
 8007d46:	a30e      	add	r3, pc, #56	; (adr r3, 8007d80 <_strtod_l+0xbc8>)
 8007d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d4c:	f7f8 fe7c 	bl	8000a48 <__aeabi_dcmplt>
 8007d50:	e7a1      	b.n	8007c96 <_strtod_l+0xade>
 8007d52:	2300      	movs	r3, #0
 8007d54:	930a      	str	r3, [sp, #40]	; 0x28
 8007d56:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007d58:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007d5a:	6013      	str	r3, [r2, #0]
 8007d5c:	f7ff ba71 	b.w	8007242 <_strtod_l+0x8a>
 8007d60:	2a65      	cmp	r2, #101	; 0x65
 8007d62:	f43f ab63 	beq.w	800742c <_strtod_l+0x274>
 8007d66:	2a45      	cmp	r2, #69	; 0x45
 8007d68:	f43f ab60 	beq.w	800742c <_strtod_l+0x274>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	f7ff bb95 	b.w	800749c <_strtod_l+0x2e4>
 8007d72:	bf00      	nop
 8007d74:	f3af 8000 	nop.w
 8007d78:	ffc00000 	.word	0xffc00000
 8007d7c:	41dfffff 	.word	0x41dfffff
 8007d80:	94a03595 	.word	0x94a03595
 8007d84:	3fcfffff 	.word	0x3fcfffff

08007d88 <strtod>:
 8007d88:	460a      	mov	r2, r1
 8007d8a:	4601      	mov	r1, r0
 8007d8c:	4802      	ldr	r0, [pc, #8]	; (8007d98 <strtod+0x10>)
 8007d8e:	4b03      	ldr	r3, [pc, #12]	; (8007d9c <strtod+0x14>)
 8007d90:	6800      	ldr	r0, [r0, #0]
 8007d92:	f7ff ba11 	b.w	80071b8 <_strtod_l>
 8007d96:	bf00      	nop
 8007d98:	20000034 	.word	0x20000034
 8007d9c:	2000009c 	.word	0x2000009c

08007da0 <strtok>:
 8007da0:	4b16      	ldr	r3, [pc, #88]	; (8007dfc <strtok+0x5c>)
 8007da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007da6:	681f      	ldr	r7, [r3, #0]
 8007da8:	4605      	mov	r5, r0
 8007daa:	6dbc      	ldr	r4, [r7, #88]	; 0x58
 8007dac:	460e      	mov	r6, r1
 8007dae:	b9ec      	cbnz	r4, 8007dec <strtok+0x4c>
 8007db0:	2050      	movs	r0, #80	; 0x50
 8007db2:	f7fe fabb 	bl	800632c <malloc>
 8007db6:	4602      	mov	r2, r0
 8007db8:	65b8      	str	r0, [r7, #88]	; 0x58
 8007dba:	b920      	cbnz	r0, 8007dc6 <strtok+0x26>
 8007dbc:	2157      	movs	r1, #87	; 0x57
 8007dbe:	4b10      	ldr	r3, [pc, #64]	; (8007e00 <strtok+0x60>)
 8007dc0:	4810      	ldr	r0, [pc, #64]	; (8007e04 <strtok+0x64>)
 8007dc2:	f000 f9a1 	bl	8008108 <__assert_func>
 8007dc6:	e9c0 4400 	strd	r4, r4, [r0]
 8007dca:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8007dce:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8007dd2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8007dd6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8007dda:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8007dde:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8007de2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8007de6:	6184      	str	r4, [r0, #24]
 8007de8:	7704      	strb	r4, [r0, #28]
 8007dea:	6244      	str	r4, [r0, #36]	; 0x24
 8007dec:	4631      	mov	r1, r6
 8007dee:	4628      	mov	r0, r5
 8007df0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007df2:	2301      	movs	r3, #1
 8007df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007df8:	f000 b806 	b.w	8007e08 <__strtok_r>
 8007dfc:	20000034 	.word	0x20000034
 8007e00:	0800afe4 	.word	0x0800afe4
 8007e04:	0800b0a8 	.word	0x0800b0a8

08007e08 <__strtok_r>:
 8007e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e0a:	b908      	cbnz	r0, 8007e10 <__strtok_r+0x8>
 8007e0c:	6810      	ldr	r0, [r2, #0]
 8007e0e:	b188      	cbz	r0, 8007e34 <__strtok_r+0x2c>
 8007e10:	4604      	mov	r4, r0
 8007e12:	460f      	mov	r7, r1
 8007e14:	4620      	mov	r0, r4
 8007e16:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007e1a:	f817 6b01 	ldrb.w	r6, [r7], #1
 8007e1e:	b91e      	cbnz	r6, 8007e28 <__strtok_r+0x20>
 8007e20:	b965      	cbnz	r5, 8007e3c <__strtok_r+0x34>
 8007e22:	4628      	mov	r0, r5
 8007e24:	6015      	str	r5, [r2, #0]
 8007e26:	e005      	b.n	8007e34 <__strtok_r+0x2c>
 8007e28:	42b5      	cmp	r5, r6
 8007e2a:	d1f6      	bne.n	8007e1a <__strtok_r+0x12>
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d1f0      	bne.n	8007e12 <__strtok_r+0xa>
 8007e30:	6014      	str	r4, [r2, #0]
 8007e32:	7003      	strb	r3, [r0, #0]
 8007e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e36:	461c      	mov	r4, r3
 8007e38:	e00c      	b.n	8007e54 <__strtok_r+0x4c>
 8007e3a:	b915      	cbnz	r5, 8007e42 <__strtok_r+0x3a>
 8007e3c:	460e      	mov	r6, r1
 8007e3e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007e42:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007e46:	42ab      	cmp	r3, r5
 8007e48:	d1f7      	bne.n	8007e3a <__strtok_r+0x32>
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0f3      	beq.n	8007e36 <__strtok_r+0x2e>
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007e54:	6014      	str	r4, [r2, #0]
 8007e56:	e7ed      	b.n	8007e34 <__strtok_r+0x2c>

08007e58 <_strtol_l.constprop.0>:
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e5e:	4680      	mov	r8, r0
 8007e60:	d001      	beq.n	8007e66 <_strtol_l.constprop.0+0xe>
 8007e62:	2b24      	cmp	r3, #36	; 0x24
 8007e64:	d906      	bls.n	8007e74 <_strtol_l.constprop.0+0x1c>
 8007e66:	f7fe fa37 	bl	80062d8 <__errno>
 8007e6a:	2316      	movs	r3, #22
 8007e6c:	6003      	str	r3, [r0, #0]
 8007e6e:	2000      	movs	r0, #0
 8007e70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e74:	460d      	mov	r5, r1
 8007e76:	4f35      	ldr	r7, [pc, #212]	; (8007f4c <_strtol_l.constprop.0+0xf4>)
 8007e78:	4628      	mov	r0, r5
 8007e7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007e7e:	5de6      	ldrb	r6, [r4, r7]
 8007e80:	f016 0608 	ands.w	r6, r6, #8
 8007e84:	d1f8      	bne.n	8007e78 <_strtol_l.constprop.0+0x20>
 8007e86:	2c2d      	cmp	r4, #45	; 0x2d
 8007e88:	d12f      	bne.n	8007eea <_strtol_l.constprop.0+0x92>
 8007e8a:	2601      	movs	r6, #1
 8007e8c:	782c      	ldrb	r4, [r5, #0]
 8007e8e:	1c85      	adds	r5, r0, #2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d057      	beq.n	8007f44 <_strtol_l.constprop.0+0xec>
 8007e94:	2b10      	cmp	r3, #16
 8007e96:	d109      	bne.n	8007eac <_strtol_l.constprop.0+0x54>
 8007e98:	2c30      	cmp	r4, #48	; 0x30
 8007e9a:	d107      	bne.n	8007eac <_strtol_l.constprop.0+0x54>
 8007e9c:	7828      	ldrb	r0, [r5, #0]
 8007e9e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007ea2:	2858      	cmp	r0, #88	; 0x58
 8007ea4:	d149      	bne.n	8007f3a <_strtol_l.constprop.0+0xe2>
 8007ea6:	2310      	movs	r3, #16
 8007ea8:	786c      	ldrb	r4, [r5, #1]
 8007eaa:	3502      	adds	r5, #2
 8007eac:	2700      	movs	r7, #0
 8007eae:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007eb2:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007eb6:	fbbe f9f3 	udiv	r9, lr, r3
 8007eba:	4638      	mov	r0, r7
 8007ebc:	fb03 ea19 	mls	sl, r3, r9, lr
 8007ec0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007ec4:	f1bc 0f09 	cmp.w	ip, #9
 8007ec8:	d814      	bhi.n	8007ef4 <_strtol_l.constprop.0+0x9c>
 8007eca:	4664      	mov	r4, ip
 8007ecc:	42a3      	cmp	r3, r4
 8007ece:	dd22      	ble.n	8007f16 <_strtol_l.constprop.0+0xbe>
 8007ed0:	2f00      	cmp	r7, #0
 8007ed2:	db1d      	blt.n	8007f10 <_strtol_l.constprop.0+0xb8>
 8007ed4:	4581      	cmp	r9, r0
 8007ed6:	d31b      	bcc.n	8007f10 <_strtol_l.constprop.0+0xb8>
 8007ed8:	d101      	bne.n	8007ede <_strtol_l.constprop.0+0x86>
 8007eda:	45a2      	cmp	sl, r4
 8007edc:	db18      	blt.n	8007f10 <_strtol_l.constprop.0+0xb8>
 8007ede:	2701      	movs	r7, #1
 8007ee0:	fb00 4003 	mla	r0, r0, r3, r4
 8007ee4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ee8:	e7ea      	b.n	8007ec0 <_strtol_l.constprop.0+0x68>
 8007eea:	2c2b      	cmp	r4, #43	; 0x2b
 8007eec:	bf04      	itt	eq
 8007eee:	782c      	ldrbeq	r4, [r5, #0]
 8007ef0:	1c85      	addeq	r5, r0, #2
 8007ef2:	e7cd      	b.n	8007e90 <_strtol_l.constprop.0+0x38>
 8007ef4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007ef8:	f1bc 0f19 	cmp.w	ip, #25
 8007efc:	d801      	bhi.n	8007f02 <_strtol_l.constprop.0+0xaa>
 8007efe:	3c37      	subs	r4, #55	; 0x37
 8007f00:	e7e4      	b.n	8007ecc <_strtol_l.constprop.0+0x74>
 8007f02:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007f06:	f1bc 0f19 	cmp.w	ip, #25
 8007f0a:	d804      	bhi.n	8007f16 <_strtol_l.constprop.0+0xbe>
 8007f0c:	3c57      	subs	r4, #87	; 0x57
 8007f0e:	e7dd      	b.n	8007ecc <_strtol_l.constprop.0+0x74>
 8007f10:	f04f 37ff 	mov.w	r7, #4294967295
 8007f14:	e7e6      	b.n	8007ee4 <_strtol_l.constprop.0+0x8c>
 8007f16:	2f00      	cmp	r7, #0
 8007f18:	da07      	bge.n	8007f2a <_strtol_l.constprop.0+0xd2>
 8007f1a:	2322      	movs	r3, #34	; 0x22
 8007f1c:	4670      	mov	r0, lr
 8007f1e:	f8c8 3000 	str.w	r3, [r8]
 8007f22:	2a00      	cmp	r2, #0
 8007f24:	d0a4      	beq.n	8007e70 <_strtol_l.constprop.0+0x18>
 8007f26:	1e69      	subs	r1, r5, #1
 8007f28:	e005      	b.n	8007f36 <_strtol_l.constprop.0+0xde>
 8007f2a:	b106      	cbz	r6, 8007f2e <_strtol_l.constprop.0+0xd6>
 8007f2c:	4240      	negs	r0, r0
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	d09e      	beq.n	8007e70 <_strtol_l.constprop.0+0x18>
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d1f7      	bne.n	8007f26 <_strtol_l.constprop.0+0xce>
 8007f36:	6011      	str	r1, [r2, #0]
 8007f38:	e79a      	b.n	8007e70 <_strtol_l.constprop.0+0x18>
 8007f3a:	2430      	movs	r4, #48	; 0x30
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d1b5      	bne.n	8007eac <_strtol_l.constprop.0+0x54>
 8007f40:	2308      	movs	r3, #8
 8007f42:	e7b3      	b.n	8007eac <_strtol_l.constprop.0+0x54>
 8007f44:	2c30      	cmp	r4, #48	; 0x30
 8007f46:	d0a9      	beq.n	8007e9c <_strtol_l.constprop.0+0x44>
 8007f48:	230a      	movs	r3, #10
 8007f4a:	e7af      	b.n	8007eac <_strtol_l.constprop.0+0x54>
 8007f4c:	0800aea9 	.word	0x0800aea9

08007f50 <strtol>:
 8007f50:	4613      	mov	r3, r2
 8007f52:	460a      	mov	r2, r1
 8007f54:	4601      	mov	r1, r0
 8007f56:	4802      	ldr	r0, [pc, #8]	; (8007f60 <strtol+0x10>)
 8007f58:	6800      	ldr	r0, [r0, #0]
 8007f5a:	f7ff bf7d 	b.w	8007e58 <_strtol_l.constprop.0>
 8007f5e:	bf00      	nop
 8007f60:	20000034 	.word	0x20000034

08007f64 <__swbuf_r>:
 8007f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f66:	460e      	mov	r6, r1
 8007f68:	4614      	mov	r4, r2
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	b118      	cbz	r0, 8007f76 <__swbuf_r+0x12>
 8007f6e:	6983      	ldr	r3, [r0, #24]
 8007f70:	b90b      	cbnz	r3, 8007f76 <__swbuf_r+0x12>
 8007f72:	f001 f889 	bl	8009088 <__sinit>
 8007f76:	4b21      	ldr	r3, [pc, #132]	; (8007ffc <__swbuf_r+0x98>)
 8007f78:	429c      	cmp	r4, r3
 8007f7a:	d12b      	bne.n	8007fd4 <__swbuf_r+0x70>
 8007f7c:	686c      	ldr	r4, [r5, #4]
 8007f7e:	69a3      	ldr	r3, [r4, #24]
 8007f80:	60a3      	str	r3, [r4, #8]
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	071a      	lsls	r2, r3, #28
 8007f86:	d52f      	bpl.n	8007fe8 <__swbuf_r+0x84>
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	b36b      	cbz	r3, 8007fe8 <__swbuf_r+0x84>
 8007f8c:	6923      	ldr	r3, [r4, #16]
 8007f8e:	6820      	ldr	r0, [r4, #0]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	1ac0      	subs	r0, r0, r3
 8007f94:	6963      	ldr	r3, [r4, #20]
 8007f96:	4637      	mov	r7, r6
 8007f98:	4283      	cmp	r3, r0
 8007f9a:	dc04      	bgt.n	8007fa6 <__swbuf_r+0x42>
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	4628      	mov	r0, r5
 8007fa0:	f000 ffde 	bl	8008f60 <_fflush_r>
 8007fa4:	bb30      	cbnz	r0, 8007ff4 <__swbuf_r+0x90>
 8007fa6:	68a3      	ldr	r3, [r4, #8]
 8007fa8:	3001      	adds	r0, #1
 8007faa:	3b01      	subs	r3, #1
 8007fac:	60a3      	str	r3, [r4, #8]
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	6022      	str	r2, [r4, #0]
 8007fb4:	701e      	strb	r6, [r3, #0]
 8007fb6:	6963      	ldr	r3, [r4, #20]
 8007fb8:	4283      	cmp	r3, r0
 8007fba:	d004      	beq.n	8007fc6 <__swbuf_r+0x62>
 8007fbc:	89a3      	ldrh	r3, [r4, #12]
 8007fbe:	07db      	lsls	r3, r3, #31
 8007fc0:	d506      	bpl.n	8007fd0 <__swbuf_r+0x6c>
 8007fc2:	2e0a      	cmp	r6, #10
 8007fc4:	d104      	bne.n	8007fd0 <__swbuf_r+0x6c>
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 ffc9 	bl	8008f60 <_fflush_r>
 8007fce:	b988      	cbnz	r0, 8007ff4 <__swbuf_r+0x90>
 8007fd0:	4638      	mov	r0, r7
 8007fd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd4:	4b0a      	ldr	r3, [pc, #40]	; (8008000 <__swbuf_r+0x9c>)
 8007fd6:	429c      	cmp	r4, r3
 8007fd8:	d101      	bne.n	8007fde <__swbuf_r+0x7a>
 8007fda:	68ac      	ldr	r4, [r5, #8]
 8007fdc:	e7cf      	b.n	8007f7e <__swbuf_r+0x1a>
 8007fde:	4b09      	ldr	r3, [pc, #36]	; (8008004 <__swbuf_r+0xa0>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	bf08      	it	eq
 8007fe4:	68ec      	ldreq	r4, [r5, #12]
 8007fe6:	e7ca      	b.n	8007f7e <__swbuf_r+0x1a>
 8007fe8:	4621      	mov	r1, r4
 8007fea:	4628      	mov	r0, r5
 8007fec:	f000 f81e 	bl	800802c <__swsetup_r>
 8007ff0:	2800      	cmp	r0, #0
 8007ff2:	d0cb      	beq.n	8007f8c <__swbuf_r+0x28>
 8007ff4:	f04f 37ff 	mov.w	r7, #4294967295
 8007ff8:	e7ea      	b.n	8007fd0 <__swbuf_r+0x6c>
 8007ffa:	bf00      	nop
 8007ffc:	0800b1dc 	.word	0x0800b1dc
 8008000:	0800b1fc 	.word	0x0800b1fc
 8008004:	0800b1bc 	.word	0x0800b1bc

08008008 <_write_r>:
 8008008:	b538      	push	{r3, r4, r5, lr}
 800800a:	4604      	mov	r4, r0
 800800c:	4608      	mov	r0, r1
 800800e:	4611      	mov	r1, r2
 8008010:	2200      	movs	r2, #0
 8008012:	4d05      	ldr	r5, [pc, #20]	; (8008028 <_write_r+0x20>)
 8008014:	602a      	str	r2, [r5, #0]
 8008016:	461a      	mov	r2, r3
 8008018:	f7fb fc1e 	bl	8003858 <_write>
 800801c:	1c43      	adds	r3, r0, #1
 800801e:	d102      	bne.n	8008026 <_write_r+0x1e>
 8008020:	682b      	ldr	r3, [r5, #0]
 8008022:	b103      	cbz	r3, 8008026 <_write_r+0x1e>
 8008024:	6023      	str	r3, [r4, #0]
 8008026:	bd38      	pop	{r3, r4, r5, pc}
 8008028:	20000818 	.word	0x20000818

0800802c <__swsetup_r>:
 800802c:	4b32      	ldr	r3, [pc, #200]	; (80080f8 <__swsetup_r+0xcc>)
 800802e:	b570      	push	{r4, r5, r6, lr}
 8008030:	681d      	ldr	r5, [r3, #0]
 8008032:	4606      	mov	r6, r0
 8008034:	460c      	mov	r4, r1
 8008036:	b125      	cbz	r5, 8008042 <__swsetup_r+0x16>
 8008038:	69ab      	ldr	r3, [r5, #24]
 800803a:	b913      	cbnz	r3, 8008042 <__swsetup_r+0x16>
 800803c:	4628      	mov	r0, r5
 800803e:	f001 f823 	bl	8009088 <__sinit>
 8008042:	4b2e      	ldr	r3, [pc, #184]	; (80080fc <__swsetup_r+0xd0>)
 8008044:	429c      	cmp	r4, r3
 8008046:	d10f      	bne.n	8008068 <__swsetup_r+0x3c>
 8008048:	686c      	ldr	r4, [r5, #4]
 800804a:	89a3      	ldrh	r3, [r4, #12]
 800804c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008050:	0719      	lsls	r1, r3, #28
 8008052:	d42c      	bmi.n	80080ae <__swsetup_r+0x82>
 8008054:	06dd      	lsls	r5, r3, #27
 8008056:	d411      	bmi.n	800807c <__swsetup_r+0x50>
 8008058:	2309      	movs	r3, #9
 800805a:	6033      	str	r3, [r6, #0]
 800805c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008060:	f04f 30ff 	mov.w	r0, #4294967295
 8008064:	81a3      	strh	r3, [r4, #12]
 8008066:	e03e      	b.n	80080e6 <__swsetup_r+0xba>
 8008068:	4b25      	ldr	r3, [pc, #148]	; (8008100 <__swsetup_r+0xd4>)
 800806a:	429c      	cmp	r4, r3
 800806c:	d101      	bne.n	8008072 <__swsetup_r+0x46>
 800806e:	68ac      	ldr	r4, [r5, #8]
 8008070:	e7eb      	b.n	800804a <__swsetup_r+0x1e>
 8008072:	4b24      	ldr	r3, [pc, #144]	; (8008104 <__swsetup_r+0xd8>)
 8008074:	429c      	cmp	r4, r3
 8008076:	bf08      	it	eq
 8008078:	68ec      	ldreq	r4, [r5, #12]
 800807a:	e7e6      	b.n	800804a <__swsetup_r+0x1e>
 800807c:	0758      	lsls	r0, r3, #29
 800807e:	d512      	bpl.n	80080a6 <__swsetup_r+0x7a>
 8008080:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008082:	b141      	cbz	r1, 8008096 <__swsetup_r+0x6a>
 8008084:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008088:	4299      	cmp	r1, r3
 800808a:	d002      	beq.n	8008092 <__swsetup_r+0x66>
 800808c:	4630      	mov	r0, r6
 800808e:	f7fe f973 	bl	8006378 <_free_r>
 8008092:	2300      	movs	r3, #0
 8008094:	6363      	str	r3, [r4, #52]	; 0x34
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800809c:	81a3      	strh	r3, [r4, #12]
 800809e:	2300      	movs	r3, #0
 80080a0:	6063      	str	r3, [r4, #4]
 80080a2:	6923      	ldr	r3, [r4, #16]
 80080a4:	6023      	str	r3, [r4, #0]
 80080a6:	89a3      	ldrh	r3, [r4, #12]
 80080a8:	f043 0308 	orr.w	r3, r3, #8
 80080ac:	81a3      	strh	r3, [r4, #12]
 80080ae:	6923      	ldr	r3, [r4, #16]
 80080b0:	b94b      	cbnz	r3, 80080c6 <__swsetup_r+0x9a>
 80080b2:	89a3      	ldrh	r3, [r4, #12]
 80080b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080bc:	d003      	beq.n	80080c6 <__swsetup_r+0x9a>
 80080be:	4621      	mov	r1, r4
 80080c0:	4630      	mov	r0, r6
 80080c2:	f001 fc37 	bl	8009934 <__smakebuf_r>
 80080c6:	89a0      	ldrh	r0, [r4, #12]
 80080c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080cc:	f010 0301 	ands.w	r3, r0, #1
 80080d0:	d00a      	beq.n	80080e8 <__swsetup_r+0xbc>
 80080d2:	2300      	movs	r3, #0
 80080d4:	60a3      	str	r3, [r4, #8]
 80080d6:	6963      	ldr	r3, [r4, #20]
 80080d8:	425b      	negs	r3, r3
 80080da:	61a3      	str	r3, [r4, #24]
 80080dc:	6923      	ldr	r3, [r4, #16]
 80080de:	b943      	cbnz	r3, 80080f2 <__swsetup_r+0xc6>
 80080e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080e4:	d1ba      	bne.n	800805c <__swsetup_r+0x30>
 80080e6:	bd70      	pop	{r4, r5, r6, pc}
 80080e8:	0781      	lsls	r1, r0, #30
 80080ea:	bf58      	it	pl
 80080ec:	6963      	ldrpl	r3, [r4, #20]
 80080ee:	60a3      	str	r3, [r4, #8]
 80080f0:	e7f4      	b.n	80080dc <__swsetup_r+0xb0>
 80080f2:	2000      	movs	r0, #0
 80080f4:	e7f7      	b.n	80080e6 <__swsetup_r+0xba>
 80080f6:	bf00      	nop
 80080f8:	20000034 	.word	0x20000034
 80080fc:	0800b1dc 	.word	0x0800b1dc
 8008100:	0800b1fc 	.word	0x0800b1fc
 8008104:	0800b1bc 	.word	0x0800b1bc

08008108 <__assert_func>:
 8008108:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800810a:	4614      	mov	r4, r2
 800810c:	461a      	mov	r2, r3
 800810e:	4b09      	ldr	r3, [pc, #36]	; (8008134 <__assert_func+0x2c>)
 8008110:	4605      	mov	r5, r0
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68d8      	ldr	r0, [r3, #12]
 8008116:	b14c      	cbz	r4, 800812c <__assert_func+0x24>
 8008118:	4b07      	ldr	r3, [pc, #28]	; (8008138 <__assert_func+0x30>)
 800811a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800811e:	9100      	str	r1, [sp, #0]
 8008120:	462b      	mov	r3, r5
 8008122:	4906      	ldr	r1, [pc, #24]	; (800813c <__assert_func+0x34>)
 8008124:	f001 f82e 	bl	8009184 <fiprintf>
 8008128:	f002 fc43 	bl	800a9b2 <abort>
 800812c:	4b04      	ldr	r3, [pc, #16]	; (8008140 <__assert_func+0x38>)
 800812e:	461c      	mov	r4, r3
 8008130:	e7f3      	b.n	800811a <__assert_func+0x12>
 8008132:	bf00      	nop
 8008134:	20000034 	.word	0x20000034
 8008138:	0800b105 	.word	0x0800b105
 800813c:	0800b112 	.word	0x0800b112
 8008140:	0800b140 	.word	0x0800b140

08008144 <_close_r>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	2300      	movs	r3, #0
 8008148:	4d05      	ldr	r5, [pc, #20]	; (8008160 <_close_r+0x1c>)
 800814a:	4604      	mov	r4, r0
 800814c:	4608      	mov	r0, r1
 800814e:	602b      	str	r3, [r5, #0]
 8008150:	f7fb fb9e 	bl	8003890 <_close>
 8008154:	1c43      	adds	r3, r0, #1
 8008156:	d102      	bne.n	800815e <_close_r+0x1a>
 8008158:	682b      	ldr	r3, [r5, #0]
 800815a:	b103      	cbz	r3, 800815e <_close_r+0x1a>
 800815c:	6023      	str	r3, [r4, #0]
 800815e:	bd38      	pop	{r3, r4, r5, pc}
 8008160:	20000818 	.word	0x20000818

08008164 <quorem>:
 8008164:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008168:	6903      	ldr	r3, [r0, #16]
 800816a:	690c      	ldr	r4, [r1, #16]
 800816c:	4607      	mov	r7, r0
 800816e:	42a3      	cmp	r3, r4
 8008170:	f2c0 8082 	blt.w	8008278 <quorem+0x114>
 8008174:	3c01      	subs	r4, #1
 8008176:	f100 0514 	add.w	r5, r0, #20
 800817a:	f101 0814 	add.w	r8, r1, #20
 800817e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008182:	9301      	str	r3, [sp, #4]
 8008184:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008188:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800818c:	3301      	adds	r3, #1
 800818e:	429a      	cmp	r2, r3
 8008190:	fbb2 f6f3 	udiv	r6, r2, r3
 8008194:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008198:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800819c:	d331      	bcc.n	8008202 <quorem+0x9e>
 800819e:	f04f 0e00 	mov.w	lr, #0
 80081a2:	4640      	mov	r0, r8
 80081a4:	46ac      	mov	ip, r5
 80081a6:	46f2      	mov	sl, lr
 80081a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80081ac:	b293      	uxth	r3, r2
 80081ae:	fb06 e303 	mla	r3, r6, r3, lr
 80081b2:	0c12      	lsrs	r2, r2, #16
 80081b4:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	fb06 e202 	mla	r2, r6, r2, lr
 80081be:	ebaa 0303 	sub.w	r3, sl, r3
 80081c2:	f8dc a000 	ldr.w	sl, [ip]
 80081c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80081ca:	fa1f fa8a 	uxth.w	sl, sl
 80081ce:	4453      	add	r3, sl
 80081d0:	f8dc a000 	ldr.w	sl, [ip]
 80081d4:	b292      	uxth	r2, r2
 80081d6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80081da:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081de:	b29b      	uxth	r3, r3
 80081e0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081e4:	4581      	cmp	r9, r0
 80081e6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081ea:	f84c 3b04 	str.w	r3, [ip], #4
 80081ee:	d2db      	bcs.n	80081a8 <quorem+0x44>
 80081f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80081f4:	b92b      	cbnz	r3, 8008202 <quorem+0x9e>
 80081f6:	9b01      	ldr	r3, [sp, #4]
 80081f8:	3b04      	subs	r3, #4
 80081fa:	429d      	cmp	r5, r3
 80081fc:	461a      	mov	r2, r3
 80081fe:	d32f      	bcc.n	8008260 <quorem+0xfc>
 8008200:	613c      	str	r4, [r7, #16]
 8008202:	4638      	mov	r0, r7
 8008204:	f001 feca 	bl	8009f9c <__mcmp>
 8008208:	2800      	cmp	r0, #0
 800820a:	db25      	blt.n	8008258 <quorem+0xf4>
 800820c:	4628      	mov	r0, r5
 800820e:	f04f 0c00 	mov.w	ip, #0
 8008212:	3601      	adds	r6, #1
 8008214:	f858 1b04 	ldr.w	r1, [r8], #4
 8008218:	f8d0 e000 	ldr.w	lr, [r0]
 800821c:	b28b      	uxth	r3, r1
 800821e:	ebac 0303 	sub.w	r3, ip, r3
 8008222:	fa1f f28e 	uxth.w	r2, lr
 8008226:	4413      	add	r3, r2
 8008228:	0c0a      	lsrs	r2, r1, #16
 800822a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800822e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008232:	b29b      	uxth	r3, r3
 8008234:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008238:	45c1      	cmp	r9, r8
 800823a:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800823e:	f840 3b04 	str.w	r3, [r0], #4
 8008242:	d2e7      	bcs.n	8008214 <quorem+0xb0>
 8008244:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008248:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800824c:	b922      	cbnz	r2, 8008258 <quorem+0xf4>
 800824e:	3b04      	subs	r3, #4
 8008250:	429d      	cmp	r5, r3
 8008252:	461a      	mov	r2, r3
 8008254:	d30a      	bcc.n	800826c <quorem+0x108>
 8008256:	613c      	str	r4, [r7, #16]
 8008258:	4630      	mov	r0, r6
 800825a:	b003      	add	sp, #12
 800825c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008260:	6812      	ldr	r2, [r2, #0]
 8008262:	3b04      	subs	r3, #4
 8008264:	2a00      	cmp	r2, #0
 8008266:	d1cb      	bne.n	8008200 <quorem+0x9c>
 8008268:	3c01      	subs	r4, #1
 800826a:	e7c6      	b.n	80081fa <quorem+0x96>
 800826c:	6812      	ldr	r2, [r2, #0]
 800826e:	3b04      	subs	r3, #4
 8008270:	2a00      	cmp	r2, #0
 8008272:	d1f0      	bne.n	8008256 <quorem+0xf2>
 8008274:	3c01      	subs	r4, #1
 8008276:	e7eb      	b.n	8008250 <quorem+0xec>
 8008278:	2000      	movs	r0, #0
 800827a:	e7ee      	b.n	800825a <quorem+0xf6>
 800827c:	0000      	movs	r0, r0
	...

08008280 <_dtoa_r>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	4616      	mov	r6, r2
 8008286:	461f      	mov	r7, r3
 8008288:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800828a:	b099      	sub	sp, #100	; 0x64
 800828c:	4605      	mov	r5, r0
 800828e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8008292:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8008296:	b974      	cbnz	r4, 80082b6 <_dtoa_r+0x36>
 8008298:	2010      	movs	r0, #16
 800829a:	f7fe f847 	bl	800632c <malloc>
 800829e:	4602      	mov	r2, r0
 80082a0:	6268      	str	r0, [r5, #36]	; 0x24
 80082a2:	b920      	cbnz	r0, 80082ae <_dtoa_r+0x2e>
 80082a4:	21ea      	movs	r1, #234	; 0xea
 80082a6:	4ba8      	ldr	r3, [pc, #672]	; (8008548 <_dtoa_r+0x2c8>)
 80082a8:	48a8      	ldr	r0, [pc, #672]	; (800854c <_dtoa_r+0x2cc>)
 80082aa:	f7ff ff2d 	bl	8008108 <__assert_func>
 80082ae:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80082b2:	6004      	str	r4, [r0, #0]
 80082b4:	60c4      	str	r4, [r0, #12]
 80082b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082b8:	6819      	ldr	r1, [r3, #0]
 80082ba:	b151      	cbz	r1, 80082d2 <_dtoa_r+0x52>
 80082bc:	685a      	ldr	r2, [r3, #4]
 80082be:	2301      	movs	r3, #1
 80082c0:	4093      	lsls	r3, r2
 80082c2:	604a      	str	r2, [r1, #4]
 80082c4:	608b      	str	r3, [r1, #8]
 80082c6:	4628      	mov	r0, r5
 80082c8:	f001 fbe0 	bl	8009a8c <_Bfree>
 80082cc:	2200      	movs	r2, #0
 80082ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80082d0:	601a      	str	r2, [r3, #0]
 80082d2:	1e3b      	subs	r3, r7, #0
 80082d4:	bfaf      	iteee	ge
 80082d6:	2300      	movge	r3, #0
 80082d8:	2201      	movlt	r2, #1
 80082da:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80082de:	9305      	strlt	r3, [sp, #20]
 80082e0:	bfa8      	it	ge
 80082e2:	f8c8 3000 	strge.w	r3, [r8]
 80082e6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80082ea:	4b99      	ldr	r3, [pc, #612]	; (8008550 <_dtoa_r+0x2d0>)
 80082ec:	bfb8      	it	lt
 80082ee:	f8c8 2000 	strlt.w	r2, [r8]
 80082f2:	ea33 0309 	bics.w	r3, r3, r9
 80082f6:	d119      	bne.n	800832c <_dtoa_r+0xac>
 80082f8:	f242 730f 	movw	r3, #9999	; 0x270f
 80082fc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80082fe:	6013      	str	r3, [r2, #0]
 8008300:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008304:	4333      	orrs	r3, r6
 8008306:	f000 857f 	beq.w	8008e08 <_dtoa_r+0xb88>
 800830a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800830c:	b953      	cbnz	r3, 8008324 <_dtoa_r+0xa4>
 800830e:	4b91      	ldr	r3, [pc, #580]	; (8008554 <_dtoa_r+0x2d4>)
 8008310:	e022      	b.n	8008358 <_dtoa_r+0xd8>
 8008312:	4b91      	ldr	r3, [pc, #580]	; (8008558 <_dtoa_r+0x2d8>)
 8008314:	9303      	str	r3, [sp, #12]
 8008316:	3308      	adds	r3, #8
 8008318:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800831a:	6013      	str	r3, [r2, #0]
 800831c:	9803      	ldr	r0, [sp, #12]
 800831e:	b019      	add	sp, #100	; 0x64
 8008320:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008324:	4b8b      	ldr	r3, [pc, #556]	; (8008554 <_dtoa_r+0x2d4>)
 8008326:	9303      	str	r3, [sp, #12]
 8008328:	3303      	adds	r3, #3
 800832a:	e7f5      	b.n	8008318 <_dtoa_r+0x98>
 800832c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008330:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8008334:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008338:	2200      	movs	r2, #0
 800833a:	2300      	movs	r3, #0
 800833c:	f7f8 fb7a 	bl	8000a34 <__aeabi_dcmpeq>
 8008340:	4680      	mov	r8, r0
 8008342:	b158      	cbz	r0, 800835c <_dtoa_r+0xdc>
 8008344:	2301      	movs	r3, #1
 8008346:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008348:	6013      	str	r3, [r2, #0]
 800834a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8558 	beq.w	8008e02 <_dtoa_r+0xb82>
 8008352:	4882      	ldr	r0, [pc, #520]	; (800855c <_dtoa_r+0x2dc>)
 8008354:	6018      	str	r0, [r3, #0]
 8008356:	1e43      	subs	r3, r0, #1
 8008358:	9303      	str	r3, [sp, #12]
 800835a:	e7df      	b.n	800831c <_dtoa_r+0x9c>
 800835c:	ab16      	add	r3, sp, #88	; 0x58
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	ab17      	add	r3, sp, #92	; 0x5c
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	4628      	mov	r0, r5
 8008366:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800836a:	f001 ff39 	bl	800a1e0 <__d2b>
 800836e:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8008372:	4683      	mov	fp, r0
 8008374:	2c00      	cmp	r4, #0
 8008376:	d07f      	beq.n	8008478 <_dtoa_r+0x1f8>
 8008378:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800837c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800837e:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8008382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008386:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800838a:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800838e:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8008392:	2200      	movs	r2, #0
 8008394:	4b72      	ldr	r3, [pc, #456]	; (8008560 <_dtoa_r+0x2e0>)
 8008396:	f7f7 ff2d 	bl	80001f4 <__aeabi_dsub>
 800839a:	a365      	add	r3, pc, #404	; (adr r3, 8008530 <_dtoa_r+0x2b0>)
 800839c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a0:	f7f8 f8e0 	bl	8000564 <__aeabi_dmul>
 80083a4:	a364      	add	r3, pc, #400	; (adr r3, 8008538 <_dtoa_r+0x2b8>)
 80083a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083aa:	f7f7 ff25 	bl	80001f8 <__adddf3>
 80083ae:	4606      	mov	r6, r0
 80083b0:	4620      	mov	r0, r4
 80083b2:	460f      	mov	r7, r1
 80083b4:	f7f8 f86c 	bl	8000490 <__aeabi_i2d>
 80083b8:	a361      	add	r3, pc, #388	; (adr r3, 8008540 <_dtoa_r+0x2c0>)
 80083ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083be:	f7f8 f8d1 	bl	8000564 <__aeabi_dmul>
 80083c2:	4602      	mov	r2, r0
 80083c4:	460b      	mov	r3, r1
 80083c6:	4630      	mov	r0, r6
 80083c8:	4639      	mov	r1, r7
 80083ca:	f7f7 ff15 	bl	80001f8 <__adddf3>
 80083ce:	4606      	mov	r6, r0
 80083d0:	460f      	mov	r7, r1
 80083d2:	f7f8 fb77 	bl	8000ac4 <__aeabi_d2iz>
 80083d6:	2200      	movs	r2, #0
 80083d8:	4682      	mov	sl, r0
 80083da:	2300      	movs	r3, #0
 80083dc:	4630      	mov	r0, r6
 80083de:	4639      	mov	r1, r7
 80083e0:	f7f8 fb32 	bl	8000a48 <__aeabi_dcmplt>
 80083e4:	b148      	cbz	r0, 80083fa <_dtoa_r+0x17a>
 80083e6:	4650      	mov	r0, sl
 80083e8:	f7f8 f852 	bl	8000490 <__aeabi_i2d>
 80083ec:	4632      	mov	r2, r6
 80083ee:	463b      	mov	r3, r7
 80083f0:	f7f8 fb20 	bl	8000a34 <__aeabi_dcmpeq>
 80083f4:	b908      	cbnz	r0, 80083fa <_dtoa_r+0x17a>
 80083f6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083fa:	f1ba 0f16 	cmp.w	sl, #22
 80083fe:	d858      	bhi.n	80084b2 <_dtoa_r+0x232>
 8008400:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008404:	4b57      	ldr	r3, [pc, #348]	; (8008564 <_dtoa_r+0x2e4>)
 8008406:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800840a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800840e:	f7f8 fb1b 	bl	8000a48 <__aeabi_dcmplt>
 8008412:	2800      	cmp	r0, #0
 8008414:	d04f      	beq.n	80084b6 <_dtoa_r+0x236>
 8008416:	2300      	movs	r3, #0
 8008418:	f10a 3aff 	add.w	sl, sl, #4294967295
 800841c:	930f      	str	r3, [sp, #60]	; 0x3c
 800841e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008420:	1b1c      	subs	r4, r3, r4
 8008422:	1e63      	subs	r3, r4, #1
 8008424:	9309      	str	r3, [sp, #36]	; 0x24
 8008426:	bf49      	itett	mi
 8008428:	f1c4 0301 	rsbmi	r3, r4, #1
 800842c:	2300      	movpl	r3, #0
 800842e:	9306      	strmi	r3, [sp, #24]
 8008430:	2300      	movmi	r3, #0
 8008432:	bf54      	ite	pl
 8008434:	9306      	strpl	r3, [sp, #24]
 8008436:	9309      	strmi	r3, [sp, #36]	; 0x24
 8008438:	f1ba 0f00 	cmp.w	sl, #0
 800843c:	db3d      	blt.n	80084ba <_dtoa_r+0x23a>
 800843e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008440:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008444:	4453      	add	r3, sl
 8008446:	9309      	str	r3, [sp, #36]	; 0x24
 8008448:	2300      	movs	r3, #0
 800844a:	930a      	str	r3, [sp, #40]	; 0x28
 800844c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800844e:	2b09      	cmp	r3, #9
 8008450:	f200 808c 	bhi.w	800856c <_dtoa_r+0x2ec>
 8008454:	2b05      	cmp	r3, #5
 8008456:	bfc4      	itt	gt
 8008458:	3b04      	subgt	r3, #4
 800845a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800845c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800845e:	bfc8      	it	gt
 8008460:	2400      	movgt	r4, #0
 8008462:	f1a3 0302 	sub.w	r3, r3, #2
 8008466:	bfd8      	it	le
 8008468:	2401      	movle	r4, #1
 800846a:	2b03      	cmp	r3, #3
 800846c:	f200 808a 	bhi.w	8008584 <_dtoa_r+0x304>
 8008470:	e8df f003 	tbb	[pc, r3]
 8008474:	5b4d4f2d 	.word	0x5b4d4f2d
 8008478:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800847c:	441c      	add	r4, r3
 800847e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8008482:	2b20      	cmp	r3, #32
 8008484:	bfc3      	ittte	gt
 8008486:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800848a:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800848e:	fa09 f303 	lslgt.w	r3, r9, r3
 8008492:	f1c3 0320 	rsble	r3, r3, #32
 8008496:	bfc6      	itte	gt
 8008498:	fa26 f000 	lsrgt.w	r0, r6, r0
 800849c:	4318      	orrgt	r0, r3
 800849e:	fa06 f003 	lslle.w	r0, r6, r3
 80084a2:	f7f7 ffe5 	bl	8000470 <__aeabi_ui2d>
 80084a6:	2301      	movs	r3, #1
 80084a8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80084ac:	3c01      	subs	r4, #1
 80084ae:	9313      	str	r3, [sp, #76]	; 0x4c
 80084b0:	e76f      	b.n	8008392 <_dtoa_r+0x112>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e7b2      	b.n	800841c <_dtoa_r+0x19c>
 80084b6:	900f      	str	r0, [sp, #60]	; 0x3c
 80084b8:	e7b1      	b.n	800841e <_dtoa_r+0x19e>
 80084ba:	9b06      	ldr	r3, [sp, #24]
 80084bc:	eba3 030a 	sub.w	r3, r3, sl
 80084c0:	9306      	str	r3, [sp, #24]
 80084c2:	f1ca 0300 	rsb	r3, sl, #0
 80084c6:	930a      	str	r3, [sp, #40]	; 0x28
 80084c8:	2300      	movs	r3, #0
 80084ca:	930e      	str	r3, [sp, #56]	; 0x38
 80084cc:	e7be      	b.n	800844c <_dtoa_r+0x1cc>
 80084ce:	2300      	movs	r3, #0
 80084d0:	930b      	str	r3, [sp, #44]	; 0x2c
 80084d2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	dc58      	bgt.n	800858a <_dtoa_r+0x30a>
 80084d8:	f04f 0901 	mov.w	r9, #1
 80084dc:	464b      	mov	r3, r9
 80084de:	f8cd 9020 	str.w	r9, [sp, #32]
 80084e2:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 80084e6:	2200      	movs	r2, #0
 80084e8:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80084ea:	6042      	str	r2, [r0, #4]
 80084ec:	2204      	movs	r2, #4
 80084ee:	f102 0614 	add.w	r6, r2, #20
 80084f2:	429e      	cmp	r6, r3
 80084f4:	6841      	ldr	r1, [r0, #4]
 80084f6:	d94e      	bls.n	8008596 <_dtoa_r+0x316>
 80084f8:	4628      	mov	r0, r5
 80084fa:	f001 fa87 	bl	8009a0c <_Balloc>
 80084fe:	9003      	str	r0, [sp, #12]
 8008500:	2800      	cmp	r0, #0
 8008502:	d14c      	bne.n	800859e <_dtoa_r+0x31e>
 8008504:	4602      	mov	r2, r0
 8008506:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800850a:	4b17      	ldr	r3, [pc, #92]	; (8008568 <_dtoa_r+0x2e8>)
 800850c:	e6cc      	b.n	80082a8 <_dtoa_r+0x28>
 800850e:	2301      	movs	r3, #1
 8008510:	e7de      	b.n	80084d0 <_dtoa_r+0x250>
 8008512:	2300      	movs	r3, #0
 8008514:	930b      	str	r3, [sp, #44]	; 0x2c
 8008516:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008518:	eb0a 0903 	add.w	r9, sl, r3
 800851c:	f109 0301 	add.w	r3, r9, #1
 8008520:	2b01      	cmp	r3, #1
 8008522:	9308      	str	r3, [sp, #32]
 8008524:	bfb8      	it	lt
 8008526:	2301      	movlt	r3, #1
 8008528:	e7dd      	b.n	80084e6 <_dtoa_r+0x266>
 800852a:	2301      	movs	r3, #1
 800852c:	e7f2      	b.n	8008514 <_dtoa_r+0x294>
 800852e:	bf00      	nop
 8008530:	636f4361 	.word	0x636f4361
 8008534:	3fd287a7 	.word	0x3fd287a7
 8008538:	8b60c8b3 	.word	0x8b60c8b3
 800853c:	3fc68a28 	.word	0x3fc68a28
 8008540:	509f79fb 	.word	0x509f79fb
 8008544:	3fd34413 	.word	0x3fd34413
 8008548:	0800afe4 	.word	0x0800afe4
 800854c:	0800b14e 	.word	0x0800b14e
 8008550:	7ff00000 	.word	0x7ff00000
 8008554:	0800b14a 	.word	0x0800b14a
 8008558:	0800b141 	.word	0x0800b141
 800855c:	0800afc1 	.word	0x0800afc1
 8008560:	3ff80000 	.word	0x3ff80000
 8008564:	0800b320 	.word	0x0800b320
 8008568:	0800b1a9 	.word	0x0800b1a9
 800856c:	2401      	movs	r4, #1
 800856e:	2300      	movs	r3, #0
 8008570:	940b      	str	r4, [sp, #44]	; 0x2c
 8008572:	9322      	str	r3, [sp, #136]	; 0x88
 8008574:	f04f 39ff 	mov.w	r9, #4294967295
 8008578:	2200      	movs	r2, #0
 800857a:	2312      	movs	r3, #18
 800857c:	f8cd 9020 	str.w	r9, [sp, #32]
 8008580:	9223      	str	r2, [sp, #140]	; 0x8c
 8008582:	e7b0      	b.n	80084e6 <_dtoa_r+0x266>
 8008584:	2301      	movs	r3, #1
 8008586:	930b      	str	r3, [sp, #44]	; 0x2c
 8008588:	e7f4      	b.n	8008574 <_dtoa_r+0x2f4>
 800858a:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800858e:	464b      	mov	r3, r9
 8008590:	f8cd 9020 	str.w	r9, [sp, #32]
 8008594:	e7a7      	b.n	80084e6 <_dtoa_r+0x266>
 8008596:	3101      	adds	r1, #1
 8008598:	6041      	str	r1, [r0, #4]
 800859a:	0052      	lsls	r2, r2, #1
 800859c:	e7a7      	b.n	80084ee <_dtoa_r+0x26e>
 800859e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80085a0:	9a03      	ldr	r2, [sp, #12]
 80085a2:	601a      	str	r2, [r3, #0]
 80085a4:	9b08      	ldr	r3, [sp, #32]
 80085a6:	2b0e      	cmp	r3, #14
 80085a8:	f200 80a8 	bhi.w	80086fc <_dtoa_r+0x47c>
 80085ac:	2c00      	cmp	r4, #0
 80085ae:	f000 80a5 	beq.w	80086fc <_dtoa_r+0x47c>
 80085b2:	f1ba 0f00 	cmp.w	sl, #0
 80085b6:	dd34      	ble.n	8008622 <_dtoa_r+0x3a2>
 80085b8:	4a9a      	ldr	r2, [pc, #616]	; (8008824 <_dtoa_r+0x5a4>)
 80085ba:	f00a 030f 	and.w	r3, sl, #15
 80085be:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80085c2:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80085c6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80085ca:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80085ce:	ea4f 142a 	mov.w	r4, sl, asr #4
 80085d2:	d016      	beq.n	8008602 <_dtoa_r+0x382>
 80085d4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085d8:	4b93      	ldr	r3, [pc, #588]	; (8008828 <_dtoa_r+0x5a8>)
 80085da:	2703      	movs	r7, #3
 80085dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085e0:	f7f8 f8ea 	bl	80007b8 <__aeabi_ddiv>
 80085e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085e8:	f004 040f 	and.w	r4, r4, #15
 80085ec:	4e8e      	ldr	r6, [pc, #568]	; (8008828 <_dtoa_r+0x5a8>)
 80085ee:	b954      	cbnz	r4, 8008606 <_dtoa_r+0x386>
 80085f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80085f8:	f7f8 f8de 	bl	80007b8 <__aeabi_ddiv>
 80085fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008600:	e029      	b.n	8008656 <_dtoa_r+0x3d6>
 8008602:	2702      	movs	r7, #2
 8008604:	e7f2      	b.n	80085ec <_dtoa_r+0x36c>
 8008606:	07e1      	lsls	r1, r4, #31
 8008608:	d508      	bpl.n	800861c <_dtoa_r+0x39c>
 800860a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800860e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008612:	f7f7 ffa7 	bl	8000564 <__aeabi_dmul>
 8008616:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800861a:	3701      	adds	r7, #1
 800861c:	1064      	asrs	r4, r4, #1
 800861e:	3608      	adds	r6, #8
 8008620:	e7e5      	b.n	80085ee <_dtoa_r+0x36e>
 8008622:	f000 80a5 	beq.w	8008770 <_dtoa_r+0x4f0>
 8008626:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800862a:	f1ca 0400 	rsb	r4, sl, #0
 800862e:	4b7d      	ldr	r3, [pc, #500]	; (8008824 <_dtoa_r+0x5a4>)
 8008630:	f004 020f 	and.w	r2, r4, #15
 8008634:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800863c:	f7f7 ff92 	bl	8000564 <__aeabi_dmul>
 8008640:	2702      	movs	r7, #2
 8008642:	2300      	movs	r3, #0
 8008644:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008648:	4e77      	ldr	r6, [pc, #476]	; (8008828 <_dtoa_r+0x5a8>)
 800864a:	1124      	asrs	r4, r4, #4
 800864c:	2c00      	cmp	r4, #0
 800864e:	f040 8084 	bne.w	800875a <_dtoa_r+0x4da>
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1d2      	bne.n	80085fc <_dtoa_r+0x37c>
 8008656:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008658:	2b00      	cmp	r3, #0
 800865a:	f000 808b 	beq.w	8008774 <_dtoa_r+0x4f4>
 800865e:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8008662:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8008666:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800866a:	2200      	movs	r2, #0
 800866c:	4b6f      	ldr	r3, [pc, #444]	; (800882c <_dtoa_r+0x5ac>)
 800866e:	f7f8 f9eb 	bl	8000a48 <__aeabi_dcmplt>
 8008672:	2800      	cmp	r0, #0
 8008674:	d07e      	beq.n	8008774 <_dtoa_r+0x4f4>
 8008676:	9b08      	ldr	r3, [sp, #32]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d07b      	beq.n	8008774 <_dtoa_r+0x4f4>
 800867c:	f1b9 0f00 	cmp.w	r9, #0
 8008680:	dd38      	ble.n	80086f4 <_dtoa_r+0x474>
 8008682:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008686:	2200      	movs	r2, #0
 8008688:	4b69      	ldr	r3, [pc, #420]	; (8008830 <_dtoa_r+0x5b0>)
 800868a:	f7f7 ff6b 	bl	8000564 <__aeabi_dmul>
 800868e:	464c      	mov	r4, r9
 8008690:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008694:	f10a 38ff 	add.w	r8, sl, #4294967295
 8008698:	3701      	adds	r7, #1
 800869a:	4638      	mov	r0, r7
 800869c:	f7f7 fef8 	bl	8000490 <__aeabi_i2d>
 80086a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086a4:	f7f7 ff5e 	bl	8000564 <__aeabi_dmul>
 80086a8:	2200      	movs	r2, #0
 80086aa:	4b62      	ldr	r3, [pc, #392]	; (8008834 <_dtoa_r+0x5b4>)
 80086ac:	f7f7 fda4 	bl	80001f8 <__adddf3>
 80086b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80086b4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80086b8:	9611      	str	r6, [sp, #68]	; 0x44
 80086ba:	2c00      	cmp	r4, #0
 80086bc:	d15d      	bne.n	800877a <_dtoa_r+0x4fa>
 80086be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c2:	2200      	movs	r2, #0
 80086c4:	4b5c      	ldr	r3, [pc, #368]	; (8008838 <_dtoa_r+0x5b8>)
 80086c6:	f7f7 fd95 	bl	80001f4 <__aeabi_dsub>
 80086ca:	4602      	mov	r2, r0
 80086cc:	460b      	mov	r3, r1
 80086ce:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086d2:	4633      	mov	r3, r6
 80086d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086d6:	f7f8 f9d5 	bl	8000a84 <__aeabi_dcmpgt>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f040 829c 	bne.w	8008c18 <_dtoa_r+0x998>
 80086e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80086e6:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80086ea:	f7f8 f9ad 	bl	8000a48 <__aeabi_dcmplt>
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f040 8290 	bne.w	8008c14 <_dtoa_r+0x994>
 80086f4:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80086f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f2c0 8152 	blt.w	80089a8 <_dtoa_r+0x728>
 8008704:	f1ba 0f0e 	cmp.w	sl, #14
 8008708:	f300 814e 	bgt.w	80089a8 <_dtoa_r+0x728>
 800870c:	4b45      	ldr	r3, [pc, #276]	; (8008824 <_dtoa_r+0x5a4>)
 800870e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008712:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008716:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800871a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800871c:	2b00      	cmp	r3, #0
 800871e:	f280 80db 	bge.w	80088d8 <_dtoa_r+0x658>
 8008722:	9b08      	ldr	r3, [sp, #32]
 8008724:	2b00      	cmp	r3, #0
 8008726:	f300 80d7 	bgt.w	80088d8 <_dtoa_r+0x658>
 800872a:	f040 8272 	bne.w	8008c12 <_dtoa_r+0x992>
 800872e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008732:	2200      	movs	r2, #0
 8008734:	4b40      	ldr	r3, [pc, #256]	; (8008838 <_dtoa_r+0x5b8>)
 8008736:	f7f7 ff15 	bl	8000564 <__aeabi_dmul>
 800873a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873e:	f7f8 f997 	bl	8000a70 <__aeabi_dcmpge>
 8008742:	9c08      	ldr	r4, [sp, #32]
 8008744:	4626      	mov	r6, r4
 8008746:	2800      	cmp	r0, #0
 8008748:	f040 8248 	bne.w	8008bdc <_dtoa_r+0x95c>
 800874c:	2331      	movs	r3, #49	; 0x31
 800874e:	9f03      	ldr	r7, [sp, #12]
 8008750:	f10a 0a01 	add.w	sl, sl, #1
 8008754:	f807 3b01 	strb.w	r3, [r7], #1
 8008758:	e244      	b.n	8008be4 <_dtoa_r+0x964>
 800875a:	07e2      	lsls	r2, r4, #31
 800875c:	d505      	bpl.n	800876a <_dtoa_r+0x4ea>
 800875e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008762:	f7f7 feff 	bl	8000564 <__aeabi_dmul>
 8008766:	2301      	movs	r3, #1
 8008768:	3701      	adds	r7, #1
 800876a:	1064      	asrs	r4, r4, #1
 800876c:	3608      	adds	r6, #8
 800876e:	e76d      	b.n	800864c <_dtoa_r+0x3cc>
 8008770:	2702      	movs	r7, #2
 8008772:	e770      	b.n	8008656 <_dtoa_r+0x3d6>
 8008774:	46d0      	mov	r8, sl
 8008776:	9c08      	ldr	r4, [sp, #32]
 8008778:	e78f      	b.n	800869a <_dtoa_r+0x41a>
 800877a:	9903      	ldr	r1, [sp, #12]
 800877c:	4b29      	ldr	r3, [pc, #164]	; (8008824 <_dtoa_r+0x5a4>)
 800877e:	4421      	add	r1, r4
 8008780:	9112      	str	r1, [sp, #72]	; 0x48
 8008782:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008784:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008788:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800878c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008790:	2900      	cmp	r1, #0
 8008792:	d055      	beq.n	8008840 <_dtoa_r+0x5c0>
 8008794:	2000      	movs	r0, #0
 8008796:	4929      	ldr	r1, [pc, #164]	; (800883c <_dtoa_r+0x5bc>)
 8008798:	f7f8 f80e 	bl	80007b8 <__aeabi_ddiv>
 800879c:	463b      	mov	r3, r7
 800879e:	4632      	mov	r2, r6
 80087a0:	f7f7 fd28 	bl	80001f4 <__aeabi_dsub>
 80087a4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80087a8:	9f03      	ldr	r7, [sp, #12]
 80087aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087ae:	f7f8 f989 	bl	8000ac4 <__aeabi_d2iz>
 80087b2:	4604      	mov	r4, r0
 80087b4:	f7f7 fe6c 	bl	8000490 <__aeabi_i2d>
 80087b8:	4602      	mov	r2, r0
 80087ba:	460b      	mov	r3, r1
 80087bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087c0:	f7f7 fd18 	bl	80001f4 <__aeabi_dsub>
 80087c4:	4602      	mov	r2, r0
 80087c6:	460b      	mov	r3, r1
 80087c8:	3430      	adds	r4, #48	; 0x30
 80087ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087d2:	f807 4b01 	strb.w	r4, [r7], #1
 80087d6:	f7f8 f937 	bl	8000a48 <__aeabi_dcmplt>
 80087da:	2800      	cmp	r0, #0
 80087dc:	d174      	bne.n	80088c8 <_dtoa_r+0x648>
 80087de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087e2:	2000      	movs	r0, #0
 80087e4:	4911      	ldr	r1, [pc, #68]	; (800882c <_dtoa_r+0x5ac>)
 80087e6:	f7f7 fd05 	bl	80001f4 <__aeabi_dsub>
 80087ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80087ee:	f7f8 f92b 	bl	8000a48 <__aeabi_dcmplt>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	f040 80b7 	bne.w	8008966 <_dtoa_r+0x6e6>
 80087f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80087fa:	429f      	cmp	r7, r3
 80087fc:	f43f af7a 	beq.w	80086f4 <_dtoa_r+0x474>
 8008800:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008804:	2200      	movs	r2, #0
 8008806:	4b0a      	ldr	r3, [pc, #40]	; (8008830 <_dtoa_r+0x5b0>)
 8008808:	f7f7 feac 	bl	8000564 <__aeabi_dmul>
 800880c:	2200      	movs	r2, #0
 800880e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8008812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008816:	4b06      	ldr	r3, [pc, #24]	; (8008830 <_dtoa_r+0x5b0>)
 8008818:	f7f7 fea4 	bl	8000564 <__aeabi_dmul>
 800881c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008820:	e7c3      	b.n	80087aa <_dtoa_r+0x52a>
 8008822:	bf00      	nop
 8008824:	0800b320 	.word	0x0800b320
 8008828:	0800b2f8 	.word	0x0800b2f8
 800882c:	3ff00000 	.word	0x3ff00000
 8008830:	40240000 	.word	0x40240000
 8008834:	401c0000 	.word	0x401c0000
 8008838:	40140000 	.word	0x40140000
 800883c:	3fe00000 	.word	0x3fe00000
 8008840:	4630      	mov	r0, r6
 8008842:	4639      	mov	r1, r7
 8008844:	f7f7 fe8e 	bl	8000564 <__aeabi_dmul>
 8008848:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800884a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800884e:	9c03      	ldr	r4, [sp, #12]
 8008850:	9314      	str	r3, [sp, #80]	; 0x50
 8008852:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008856:	f7f8 f935 	bl	8000ac4 <__aeabi_d2iz>
 800885a:	9015      	str	r0, [sp, #84]	; 0x54
 800885c:	f7f7 fe18 	bl	8000490 <__aeabi_i2d>
 8008860:	4602      	mov	r2, r0
 8008862:	460b      	mov	r3, r1
 8008864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008868:	f7f7 fcc4 	bl	80001f4 <__aeabi_dsub>
 800886c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800886e:	4606      	mov	r6, r0
 8008870:	3330      	adds	r3, #48	; 0x30
 8008872:	f804 3b01 	strb.w	r3, [r4], #1
 8008876:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008878:	460f      	mov	r7, r1
 800887a:	429c      	cmp	r4, r3
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	d124      	bne.n	80088cc <_dtoa_r+0x64c>
 8008882:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008886:	4bb0      	ldr	r3, [pc, #704]	; (8008b48 <_dtoa_r+0x8c8>)
 8008888:	f7f7 fcb6 	bl	80001f8 <__adddf3>
 800888c:	4602      	mov	r2, r0
 800888e:	460b      	mov	r3, r1
 8008890:	4630      	mov	r0, r6
 8008892:	4639      	mov	r1, r7
 8008894:	f7f8 f8f6 	bl	8000a84 <__aeabi_dcmpgt>
 8008898:	2800      	cmp	r0, #0
 800889a:	d163      	bne.n	8008964 <_dtoa_r+0x6e4>
 800889c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80088a0:	2000      	movs	r0, #0
 80088a2:	49a9      	ldr	r1, [pc, #676]	; (8008b48 <_dtoa_r+0x8c8>)
 80088a4:	f7f7 fca6 	bl	80001f4 <__aeabi_dsub>
 80088a8:	4602      	mov	r2, r0
 80088aa:	460b      	mov	r3, r1
 80088ac:	4630      	mov	r0, r6
 80088ae:	4639      	mov	r1, r7
 80088b0:	f7f8 f8ca 	bl	8000a48 <__aeabi_dcmplt>
 80088b4:	2800      	cmp	r0, #0
 80088b6:	f43f af1d 	beq.w	80086f4 <_dtoa_r+0x474>
 80088ba:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80088bc:	1e7b      	subs	r3, r7, #1
 80088be:	9314      	str	r3, [sp, #80]	; 0x50
 80088c0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80088c4:	2b30      	cmp	r3, #48	; 0x30
 80088c6:	d0f8      	beq.n	80088ba <_dtoa_r+0x63a>
 80088c8:	46c2      	mov	sl, r8
 80088ca:	e03b      	b.n	8008944 <_dtoa_r+0x6c4>
 80088cc:	4b9f      	ldr	r3, [pc, #636]	; (8008b4c <_dtoa_r+0x8cc>)
 80088ce:	f7f7 fe49 	bl	8000564 <__aeabi_dmul>
 80088d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088d6:	e7bc      	b.n	8008852 <_dtoa_r+0x5d2>
 80088d8:	9f03      	ldr	r7, [sp, #12]
 80088da:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80088de:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088e2:	4640      	mov	r0, r8
 80088e4:	4649      	mov	r1, r9
 80088e6:	f7f7 ff67 	bl	80007b8 <__aeabi_ddiv>
 80088ea:	f7f8 f8eb 	bl	8000ac4 <__aeabi_d2iz>
 80088ee:	4604      	mov	r4, r0
 80088f0:	f7f7 fdce 	bl	8000490 <__aeabi_i2d>
 80088f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80088f8:	f7f7 fe34 	bl	8000564 <__aeabi_dmul>
 80088fc:	4602      	mov	r2, r0
 80088fe:	460b      	mov	r3, r1
 8008900:	4640      	mov	r0, r8
 8008902:	4649      	mov	r1, r9
 8008904:	f7f7 fc76 	bl	80001f4 <__aeabi_dsub>
 8008908:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800890c:	f807 6b01 	strb.w	r6, [r7], #1
 8008910:	9e03      	ldr	r6, [sp, #12]
 8008912:	f8dd c020 	ldr.w	ip, [sp, #32]
 8008916:	1bbe      	subs	r6, r7, r6
 8008918:	45b4      	cmp	ip, r6
 800891a:	4602      	mov	r2, r0
 800891c:	460b      	mov	r3, r1
 800891e:	d136      	bne.n	800898e <_dtoa_r+0x70e>
 8008920:	f7f7 fc6a 	bl	80001f8 <__adddf3>
 8008924:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008928:	4680      	mov	r8, r0
 800892a:	4689      	mov	r9, r1
 800892c:	f7f8 f8aa 	bl	8000a84 <__aeabi_dcmpgt>
 8008930:	bb58      	cbnz	r0, 800898a <_dtoa_r+0x70a>
 8008932:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008936:	4640      	mov	r0, r8
 8008938:	4649      	mov	r1, r9
 800893a:	f7f8 f87b 	bl	8000a34 <__aeabi_dcmpeq>
 800893e:	b108      	cbz	r0, 8008944 <_dtoa_r+0x6c4>
 8008940:	07e1      	lsls	r1, r4, #31
 8008942:	d422      	bmi.n	800898a <_dtoa_r+0x70a>
 8008944:	4628      	mov	r0, r5
 8008946:	4659      	mov	r1, fp
 8008948:	f001 f8a0 	bl	8009a8c <_Bfree>
 800894c:	2300      	movs	r3, #0
 800894e:	703b      	strb	r3, [r7, #0]
 8008950:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8008952:	f10a 0001 	add.w	r0, sl, #1
 8008956:	6018      	str	r0, [r3, #0]
 8008958:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800895a:	2b00      	cmp	r3, #0
 800895c:	f43f acde 	beq.w	800831c <_dtoa_r+0x9c>
 8008960:	601f      	str	r7, [r3, #0]
 8008962:	e4db      	b.n	800831c <_dtoa_r+0x9c>
 8008964:	4627      	mov	r7, r4
 8008966:	463b      	mov	r3, r7
 8008968:	461f      	mov	r7, r3
 800896a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800896e:	2a39      	cmp	r2, #57	; 0x39
 8008970:	d107      	bne.n	8008982 <_dtoa_r+0x702>
 8008972:	9a03      	ldr	r2, [sp, #12]
 8008974:	429a      	cmp	r2, r3
 8008976:	d1f7      	bne.n	8008968 <_dtoa_r+0x6e8>
 8008978:	2230      	movs	r2, #48	; 0x30
 800897a:	9903      	ldr	r1, [sp, #12]
 800897c:	f108 0801 	add.w	r8, r8, #1
 8008980:	700a      	strb	r2, [r1, #0]
 8008982:	781a      	ldrb	r2, [r3, #0]
 8008984:	3201      	adds	r2, #1
 8008986:	701a      	strb	r2, [r3, #0]
 8008988:	e79e      	b.n	80088c8 <_dtoa_r+0x648>
 800898a:	46d0      	mov	r8, sl
 800898c:	e7eb      	b.n	8008966 <_dtoa_r+0x6e6>
 800898e:	2200      	movs	r2, #0
 8008990:	4b6e      	ldr	r3, [pc, #440]	; (8008b4c <_dtoa_r+0x8cc>)
 8008992:	f7f7 fde7 	bl	8000564 <__aeabi_dmul>
 8008996:	2200      	movs	r2, #0
 8008998:	2300      	movs	r3, #0
 800899a:	4680      	mov	r8, r0
 800899c:	4689      	mov	r9, r1
 800899e:	f7f8 f849 	bl	8000a34 <__aeabi_dcmpeq>
 80089a2:	2800      	cmp	r0, #0
 80089a4:	d09b      	beq.n	80088de <_dtoa_r+0x65e>
 80089a6:	e7cd      	b.n	8008944 <_dtoa_r+0x6c4>
 80089a8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80089aa:	2a00      	cmp	r2, #0
 80089ac:	f000 80d0 	beq.w	8008b50 <_dtoa_r+0x8d0>
 80089b0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80089b2:	2a01      	cmp	r2, #1
 80089b4:	f300 80ae 	bgt.w	8008b14 <_dtoa_r+0x894>
 80089b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80089ba:	2a00      	cmp	r2, #0
 80089bc:	f000 80a6 	beq.w	8008b0c <_dtoa_r+0x88c>
 80089c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80089c4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80089c6:	9f06      	ldr	r7, [sp, #24]
 80089c8:	9a06      	ldr	r2, [sp, #24]
 80089ca:	2101      	movs	r1, #1
 80089cc:	441a      	add	r2, r3
 80089ce:	9206      	str	r2, [sp, #24]
 80089d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089d2:	4628      	mov	r0, r5
 80089d4:	441a      	add	r2, r3
 80089d6:	9209      	str	r2, [sp, #36]	; 0x24
 80089d8:	f001 f958 	bl	8009c8c <__i2b>
 80089dc:	4606      	mov	r6, r0
 80089de:	2f00      	cmp	r7, #0
 80089e0:	dd0c      	ble.n	80089fc <_dtoa_r+0x77c>
 80089e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	dd09      	ble.n	80089fc <_dtoa_r+0x77c>
 80089e8:	42bb      	cmp	r3, r7
 80089ea:	bfa8      	it	ge
 80089ec:	463b      	movge	r3, r7
 80089ee:	9a06      	ldr	r2, [sp, #24]
 80089f0:	1aff      	subs	r7, r7, r3
 80089f2:	1ad2      	subs	r2, r2, r3
 80089f4:	9206      	str	r2, [sp, #24]
 80089f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80089f8:	1ad3      	subs	r3, r2, r3
 80089fa:	9309      	str	r3, [sp, #36]	; 0x24
 80089fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089fe:	b1f3      	cbz	r3, 8008a3e <_dtoa_r+0x7be>
 8008a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80a8 	beq.w	8008b58 <_dtoa_r+0x8d8>
 8008a08:	2c00      	cmp	r4, #0
 8008a0a:	dd10      	ble.n	8008a2e <_dtoa_r+0x7ae>
 8008a0c:	4631      	mov	r1, r6
 8008a0e:	4622      	mov	r2, r4
 8008a10:	4628      	mov	r0, r5
 8008a12:	f001 f9f9 	bl	8009e08 <__pow5mult>
 8008a16:	465a      	mov	r2, fp
 8008a18:	4601      	mov	r1, r0
 8008a1a:	4606      	mov	r6, r0
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	f001 f94b 	bl	8009cb8 <__multiply>
 8008a22:	4680      	mov	r8, r0
 8008a24:	4659      	mov	r1, fp
 8008a26:	4628      	mov	r0, r5
 8008a28:	f001 f830 	bl	8009a8c <_Bfree>
 8008a2c:	46c3      	mov	fp, r8
 8008a2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a30:	1b1a      	subs	r2, r3, r4
 8008a32:	d004      	beq.n	8008a3e <_dtoa_r+0x7be>
 8008a34:	4659      	mov	r1, fp
 8008a36:	4628      	mov	r0, r5
 8008a38:	f001 f9e6 	bl	8009e08 <__pow5mult>
 8008a3c:	4683      	mov	fp, r0
 8008a3e:	2101      	movs	r1, #1
 8008a40:	4628      	mov	r0, r5
 8008a42:	f001 f923 	bl	8009c8c <__i2b>
 8008a46:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a48:	4604      	mov	r4, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	f340 8086 	ble.w	8008b5c <_dtoa_r+0x8dc>
 8008a50:	461a      	mov	r2, r3
 8008a52:	4601      	mov	r1, r0
 8008a54:	4628      	mov	r0, r5
 8008a56:	f001 f9d7 	bl	8009e08 <__pow5mult>
 8008a5a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008a5c:	4604      	mov	r4, r0
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	dd7f      	ble.n	8008b62 <_dtoa_r+0x8e2>
 8008a62:	f04f 0800 	mov.w	r8, #0
 8008a66:	6923      	ldr	r3, [r4, #16]
 8008a68:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008a6c:	6918      	ldr	r0, [r3, #16]
 8008a6e:	f001 f8bf 	bl	8009bf0 <__hi0bits>
 8008a72:	f1c0 0020 	rsb	r0, r0, #32
 8008a76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a78:	4418      	add	r0, r3
 8008a7a:	f010 001f 	ands.w	r0, r0, #31
 8008a7e:	f000 8092 	beq.w	8008ba6 <_dtoa_r+0x926>
 8008a82:	f1c0 0320 	rsb	r3, r0, #32
 8008a86:	2b04      	cmp	r3, #4
 8008a88:	f340 808a 	ble.w	8008ba0 <_dtoa_r+0x920>
 8008a8c:	f1c0 001c 	rsb	r0, r0, #28
 8008a90:	9b06      	ldr	r3, [sp, #24]
 8008a92:	4407      	add	r7, r0
 8008a94:	4403      	add	r3, r0
 8008a96:	9306      	str	r3, [sp, #24]
 8008a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a9a:	4403      	add	r3, r0
 8008a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8008a9e:	9b06      	ldr	r3, [sp, #24]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	dd05      	ble.n	8008ab0 <_dtoa_r+0x830>
 8008aa4:	4659      	mov	r1, fp
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	4628      	mov	r0, r5
 8008aaa:	f001 fa07 	bl	8009ebc <__lshift>
 8008aae:	4683      	mov	fp, r0
 8008ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	dd05      	ble.n	8008ac2 <_dtoa_r+0x842>
 8008ab6:	4621      	mov	r1, r4
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4628      	mov	r0, r5
 8008abc:	f001 f9fe 	bl	8009ebc <__lshift>
 8008ac0:	4604      	mov	r4, r0
 8008ac2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d070      	beq.n	8008baa <_dtoa_r+0x92a>
 8008ac8:	4621      	mov	r1, r4
 8008aca:	4658      	mov	r0, fp
 8008acc:	f001 fa66 	bl	8009f9c <__mcmp>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	da6a      	bge.n	8008baa <_dtoa_r+0x92a>
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	4659      	mov	r1, fp
 8008ad8:	220a      	movs	r2, #10
 8008ada:	4628      	mov	r0, r5
 8008adc:	f000 fff8 	bl	8009ad0 <__multadd>
 8008ae0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ae2:	4683      	mov	fp, r0
 8008ae4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ae8:	2b00      	cmp	r3, #0
 8008aea:	f000 8194 	beq.w	8008e16 <_dtoa_r+0xb96>
 8008aee:	4631      	mov	r1, r6
 8008af0:	2300      	movs	r3, #0
 8008af2:	220a      	movs	r2, #10
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 ffeb 	bl	8009ad0 <__multadd>
 8008afa:	f1b9 0f00 	cmp.w	r9, #0
 8008afe:	4606      	mov	r6, r0
 8008b00:	f300 8093 	bgt.w	8008c2a <_dtoa_r+0x9aa>
 8008b04:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b06:	2b02      	cmp	r3, #2
 8008b08:	dc57      	bgt.n	8008bba <_dtoa_r+0x93a>
 8008b0a:	e08e      	b.n	8008c2a <_dtoa_r+0x9aa>
 8008b0c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8008b0e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008b12:	e757      	b.n	80089c4 <_dtoa_r+0x744>
 8008b14:	9b08      	ldr	r3, [sp, #32]
 8008b16:	1e5c      	subs	r4, r3, #1
 8008b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b1a:	42a3      	cmp	r3, r4
 8008b1c:	bfb7      	itett	lt
 8008b1e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008b20:	1b1c      	subge	r4, r3, r4
 8008b22:	1ae2      	sublt	r2, r4, r3
 8008b24:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008b26:	bfbe      	ittt	lt
 8008b28:	940a      	strlt	r4, [sp, #40]	; 0x28
 8008b2a:	189b      	addlt	r3, r3, r2
 8008b2c:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008b2e:	9b08      	ldr	r3, [sp, #32]
 8008b30:	bfb8      	it	lt
 8008b32:	2400      	movlt	r4, #0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	bfbb      	ittet	lt
 8008b38:	9b06      	ldrlt	r3, [sp, #24]
 8008b3a:	9a08      	ldrlt	r2, [sp, #32]
 8008b3c:	9f06      	ldrge	r7, [sp, #24]
 8008b3e:	1a9f      	sublt	r7, r3, r2
 8008b40:	bfac      	ite	ge
 8008b42:	9b08      	ldrge	r3, [sp, #32]
 8008b44:	2300      	movlt	r3, #0
 8008b46:	e73f      	b.n	80089c8 <_dtoa_r+0x748>
 8008b48:	3fe00000 	.word	0x3fe00000
 8008b4c:	40240000 	.word	0x40240000
 8008b50:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8008b52:	9f06      	ldr	r7, [sp, #24]
 8008b54:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008b56:	e742      	b.n	80089de <_dtoa_r+0x75e>
 8008b58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b5a:	e76b      	b.n	8008a34 <_dtoa_r+0x7b4>
 8008b5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008b5e:	2b01      	cmp	r3, #1
 8008b60:	dc19      	bgt.n	8008b96 <_dtoa_r+0x916>
 8008b62:	9b04      	ldr	r3, [sp, #16]
 8008b64:	b9bb      	cbnz	r3, 8008b96 <_dtoa_r+0x916>
 8008b66:	9b05      	ldr	r3, [sp, #20]
 8008b68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b6c:	b99b      	cbnz	r3, 8008b96 <_dtoa_r+0x916>
 8008b6e:	9b05      	ldr	r3, [sp, #20]
 8008b70:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b74:	0d1b      	lsrs	r3, r3, #20
 8008b76:	051b      	lsls	r3, r3, #20
 8008b78:	b183      	cbz	r3, 8008b9c <_dtoa_r+0x91c>
 8008b7a:	f04f 0801 	mov.w	r8, #1
 8008b7e:	9b06      	ldr	r3, [sp, #24]
 8008b80:	3301      	adds	r3, #1
 8008b82:	9306      	str	r3, [sp, #24]
 8008b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b86:	3301      	adds	r3, #1
 8008b88:	9309      	str	r3, [sp, #36]	; 0x24
 8008b8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	f47f af6a 	bne.w	8008a66 <_dtoa_r+0x7e6>
 8008b92:	2001      	movs	r0, #1
 8008b94:	e76f      	b.n	8008a76 <_dtoa_r+0x7f6>
 8008b96:	f04f 0800 	mov.w	r8, #0
 8008b9a:	e7f6      	b.n	8008b8a <_dtoa_r+0x90a>
 8008b9c:	4698      	mov	r8, r3
 8008b9e:	e7f4      	b.n	8008b8a <_dtoa_r+0x90a>
 8008ba0:	f43f af7d 	beq.w	8008a9e <_dtoa_r+0x81e>
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	301c      	adds	r0, #28
 8008ba8:	e772      	b.n	8008a90 <_dtoa_r+0x810>
 8008baa:	9b08      	ldr	r3, [sp, #32]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	dc36      	bgt.n	8008c1e <_dtoa_r+0x99e>
 8008bb0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	dd33      	ble.n	8008c1e <_dtoa_r+0x99e>
 8008bb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008bba:	f1b9 0f00 	cmp.w	r9, #0
 8008bbe:	d10d      	bne.n	8008bdc <_dtoa_r+0x95c>
 8008bc0:	4621      	mov	r1, r4
 8008bc2:	464b      	mov	r3, r9
 8008bc4:	2205      	movs	r2, #5
 8008bc6:	4628      	mov	r0, r5
 8008bc8:	f000 ff82 	bl	8009ad0 <__multadd>
 8008bcc:	4601      	mov	r1, r0
 8008bce:	4604      	mov	r4, r0
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	f001 f9e3 	bl	8009f9c <__mcmp>
 8008bd6:	2800      	cmp	r0, #0
 8008bd8:	f73f adb8 	bgt.w	800874c <_dtoa_r+0x4cc>
 8008bdc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008bde:	9f03      	ldr	r7, [sp, #12]
 8008be0:	ea6f 0a03 	mvn.w	sl, r3
 8008be4:	f04f 0800 	mov.w	r8, #0
 8008be8:	4621      	mov	r1, r4
 8008bea:	4628      	mov	r0, r5
 8008bec:	f000 ff4e 	bl	8009a8c <_Bfree>
 8008bf0:	2e00      	cmp	r6, #0
 8008bf2:	f43f aea7 	beq.w	8008944 <_dtoa_r+0x6c4>
 8008bf6:	f1b8 0f00 	cmp.w	r8, #0
 8008bfa:	d005      	beq.n	8008c08 <_dtoa_r+0x988>
 8008bfc:	45b0      	cmp	r8, r6
 8008bfe:	d003      	beq.n	8008c08 <_dtoa_r+0x988>
 8008c00:	4641      	mov	r1, r8
 8008c02:	4628      	mov	r0, r5
 8008c04:	f000 ff42 	bl	8009a8c <_Bfree>
 8008c08:	4631      	mov	r1, r6
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f000 ff3e 	bl	8009a8c <_Bfree>
 8008c10:	e698      	b.n	8008944 <_dtoa_r+0x6c4>
 8008c12:	2400      	movs	r4, #0
 8008c14:	4626      	mov	r6, r4
 8008c16:	e7e1      	b.n	8008bdc <_dtoa_r+0x95c>
 8008c18:	46c2      	mov	sl, r8
 8008c1a:	4626      	mov	r6, r4
 8008c1c:	e596      	b.n	800874c <_dtoa_r+0x4cc>
 8008c1e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	f000 80fd 	beq.w	8008e24 <_dtoa_r+0xba4>
 8008c2a:	2f00      	cmp	r7, #0
 8008c2c:	dd05      	ble.n	8008c3a <_dtoa_r+0x9ba>
 8008c2e:	4631      	mov	r1, r6
 8008c30:	463a      	mov	r2, r7
 8008c32:	4628      	mov	r0, r5
 8008c34:	f001 f942 	bl	8009ebc <__lshift>
 8008c38:	4606      	mov	r6, r0
 8008c3a:	f1b8 0f00 	cmp.w	r8, #0
 8008c3e:	d05c      	beq.n	8008cfa <_dtoa_r+0xa7a>
 8008c40:	4628      	mov	r0, r5
 8008c42:	6871      	ldr	r1, [r6, #4]
 8008c44:	f000 fee2 	bl	8009a0c <_Balloc>
 8008c48:	4607      	mov	r7, r0
 8008c4a:	b928      	cbnz	r0, 8008c58 <_dtoa_r+0x9d8>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008c52:	4b7f      	ldr	r3, [pc, #508]	; (8008e50 <_dtoa_r+0xbd0>)
 8008c54:	f7ff bb28 	b.w	80082a8 <_dtoa_r+0x28>
 8008c58:	6932      	ldr	r2, [r6, #16]
 8008c5a:	f106 010c 	add.w	r1, r6, #12
 8008c5e:	3202      	adds	r2, #2
 8008c60:	0092      	lsls	r2, r2, #2
 8008c62:	300c      	adds	r0, #12
 8008c64:	f7fd fb72 	bl	800634c <memcpy>
 8008c68:	2201      	movs	r2, #1
 8008c6a:	4639      	mov	r1, r7
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f001 f925 	bl	8009ebc <__lshift>
 8008c72:	46b0      	mov	r8, r6
 8008c74:	4606      	mov	r6, r0
 8008c76:	9b03      	ldr	r3, [sp, #12]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	9308      	str	r3, [sp, #32]
 8008c7c:	9b03      	ldr	r3, [sp, #12]
 8008c7e:	444b      	add	r3, r9
 8008c80:	930a      	str	r3, [sp, #40]	; 0x28
 8008c82:	9b04      	ldr	r3, [sp, #16]
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	9309      	str	r3, [sp, #36]	; 0x24
 8008c8a:	9b08      	ldr	r3, [sp, #32]
 8008c8c:	4621      	mov	r1, r4
 8008c8e:	3b01      	subs	r3, #1
 8008c90:	4658      	mov	r0, fp
 8008c92:	9304      	str	r3, [sp, #16]
 8008c94:	f7ff fa66 	bl	8008164 <quorem>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	4641      	mov	r1, r8
 8008c9c:	3330      	adds	r3, #48	; 0x30
 8008c9e:	9006      	str	r0, [sp, #24]
 8008ca0:	4658      	mov	r0, fp
 8008ca2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008ca4:	f001 f97a 	bl	8009f9c <__mcmp>
 8008ca8:	4632      	mov	r2, r6
 8008caa:	4681      	mov	r9, r0
 8008cac:	4621      	mov	r1, r4
 8008cae:	4628      	mov	r0, r5
 8008cb0:	f001 f990 	bl	8009fd4 <__mdiff>
 8008cb4:	68c2      	ldr	r2, [r0, #12]
 8008cb6:	4607      	mov	r7, r0
 8008cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cba:	bb02      	cbnz	r2, 8008cfe <_dtoa_r+0xa7e>
 8008cbc:	4601      	mov	r1, r0
 8008cbe:	4658      	mov	r0, fp
 8008cc0:	f001 f96c 	bl	8009f9c <__mcmp>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cc8:	4639      	mov	r1, r7
 8008cca:	4628      	mov	r0, r5
 8008ccc:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8008cd0:	f000 fedc 	bl	8009a8c <_Bfree>
 8008cd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008cd6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008cd8:	9f08      	ldr	r7, [sp, #32]
 8008cda:	ea43 0102 	orr.w	r1, r3, r2
 8008cde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ce0:	430b      	orrs	r3, r1
 8008ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce4:	d10d      	bne.n	8008d02 <_dtoa_r+0xa82>
 8008ce6:	2b39      	cmp	r3, #57	; 0x39
 8008ce8:	d029      	beq.n	8008d3e <_dtoa_r+0xabe>
 8008cea:	f1b9 0f00 	cmp.w	r9, #0
 8008cee:	dd01      	ble.n	8008cf4 <_dtoa_r+0xa74>
 8008cf0:	9b06      	ldr	r3, [sp, #24]
 8008cf2:	3331      	adds	r3, #49	; 0x31
 8008cf4:	9a04      	ldr	r2, [sp, #16]
 8008cf6:	7013      	strb	r3, [r2, #0]
 8008cf8:	e776      	b.n	8008be8 <_dtoa_r+0x968>
 8008cfa:	4630      	mov	r0, r6
 8008cfc:	e7b9      	b.n	8008c72 <_dtoa_r+0x9f2>
 8008cfe:	2201      	movs	r2, #1
 8008d00:	e7e2      	b.n	8008cc8 <_dtoa_r+0xa48>
 8008d02:	f1b9 0f00 	cmp.w	r9, #0
 8008d06:	db06      	blt.n	8008d16 <_dtoa_r+0xa96>
 8008d08:	9922      	ldr	r1, [sp, #136]	; 0x88
 8008d0a:	ea41 0909 	orr.w	r9, r1, r9
 8008d0e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d10:	ea59 0101 	orrs.w	r1, r9, r1
 8008d14:	d120      	bne.n	8008d58 <_dtoa_r+0xad8>
 8008d16:	2a00      	cmp	r2, #0
 8008d18:	ddec      	ble.n	8008cf4 <_dtoa_r+0xa74>
 8008d1a:	4659      	mov	r1, fp
 8008d1c:	2201      	movs	r2, #1
 8008d1e:	4628      	mov	r0, r5
 8008d20:	9308      	str	r3, [sp, #32]
 8008d22:	f001 f8cb 	bl	8009ebc <__lshift>
 8008d26:	4621      	mov	r1, r4
 8008d28:	4683      	mov	fp, r0
 8008d2a:	f001 f937 	bl	8009f9c <__mcmp>
 8008d2e:	2800      	cmp	r0, #0
 8008d30:	9b08      	ldr	r3, [sp, #32]
 8008d32:	dc02      	bgt.n	8008d3a <_dtoa_r+0xaba>
 8008d34:	d1de      	bne.n	8008cf4 <_dtoa_r+0xa74>
 8008d36:	07da      	lsls	r2, r3, #31
 8008d38:	d5dc      	bpl.n	8008cf4 <_dtoa_r+0xa74>
 8008d3a:	2b39      	cmp	r3, #57	; 0x39
 8008d3c:	d1d8      	bne.n	8008cf0 <_dtoa_r+0xa70>
 8008d3e:	2339      	movs	r3, #57	; 0x39
 8008d40:	9a04      	ldr	r2, [sp, #16]
 8008d42:	7013      	strb	r3, [r2, #0]
 8008d44:	463b      	mov	r3, r7
 8008d46:	461f      	mov	r7, r3
 8008d48:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	2a39      	cmp	r2, #57	; 0x39
 8008d50:	d050      	beq.n	8008df4 <_dtoa_r+0xb74>
 8008d52:	3201      	adds	r2, #1
 8008d54:	701a      	strb	r2, [r3, #0]
 8008d56:	e747      	b.n	8008be8 <_dtoa_r+0x968>
 8008d58:	2a00      	cmp	r2, #0
 8008d5a:	dd03      	ble.n	8008d64 <_dtoa_r+0xae4>
 8008d5c:	2b39      	cmp	r3, #57	; 0x39
 8008d5e:	d0ee      	beq.n	8008d3e <_dtoa_r+0xabe>
 8008d60:	3301      	adds	r3, #1
 8008d62:	e7c7      	b.n	8008cf4 <_dtoa_r+0xa74>
 8008d64:	9a08      	ldr	r2, [sp, #32]
 8008d66:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008d68:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d6c:	428a      	cmp	r2, r1
 8008d6e:	d02a      	beq.n	8008dc6 <_dtoa_r+0xb46>
 8008d70:	4659      	mov	r1, fp
 8008d72:	2300      	movs	r3, #0
 8008d74:	220a      	movs	r2, #10
 8008d76:	4628      	mov	r0, r5
 8008d78:	f000 feaa 	bl	8009ad0 <__multadd>
 8008d7c:	45b0      	cmp	r8, r6
 8008d7e:	4683      	mov	fp, r0
 8008d80:	f04f 0300 	mov.w	r3, #0
 8008d84:	f04f 020a 	mov.w	r2, #10
 8008d88:	4641      	mov	r1, r8
 8008d8a:	4628      	mov	r0, r5
 8008d8c:	d107      	bne.n	8008d9e <_dtoa_r+0xb1e>
 8008d8e:	f000 fe9f 	bl	8009ad0 <__multadd>
 8008d92:	4680      	mov	r8, r0
 8008d94:	4606      	mov	r6, r0
 8008d96:	9b08      	ldr	r3, [sp, #32]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9308      	str	r3, [sp, #32]
 8008d9c:	e775      	b.n	8008c8a <_dtoa_r+0xa0a>
 8008d9e:	f000 fe97 	bl	8009ad0 <__multadd>
 8008da2:	4631      	mov	r1, r6
 8008da4:	4680      	mov	r8, r0
 8008da6:	2300      	movs	r3, #0
 8008da8:	220a      	movs	r2, #10
 8008daa:	4628      	mov	r0, r5
 8008dac:	f000 fe90 	bl	8009ad0 <__multadd>
 8008db0:	4606      	mov	r6, r0
 8008db2:	e7f0      	b.n	8008d96 <_dtoa_r+0xb16>
 8008db4:	f1b9 0f00 	cmp.w	r9, #0
 8008db8:	bfcc      	ite	gt
 8008dba:	464f      	movgt	r7, r9
 8008dbc:	2701      	movle	r7, #1
 8008dbe:	f04f 0800 	mov.w	r8, #0
 8008dc2:	9a03      	ldr	r2, [sp, #12]
 8008dc4:	4417      	add	r7, r2
 8008dc6:	4659      	mov	r1, fp
 8008dc8:	2201      	movs	r2, #1
 8008dca:	4628      	mov	r0, r5
 8008dcc:	9308      	str	r3, [sp, #32]
 8008dce:	f001 f875 	bl	8009ebc <__lshift>
 8008dd2:	4621      	mov	r1, r4
 8008dd4:	4683      	mov	fp, r0
 8008dd6:	f001 f8e1 	bl	8009f9c <__mcmp>
 8008dda:	2800      	cmp	r0, #0
 8008ddc:	dcb2      	bgt.n	8008d44 <_dtoa_r+0xac4>
 8008dde:	d102      	bne.n	8008de6 <_dtoa_r+0xb66>
 8008de0:	9b08      	ldr	r3, [sp, #32]
 8008de2:	07db      	lsls	r3, r3, #31
 8008de4:	d4ae      	bmi.n	8008d44 <_dtoa_r+0xac4>
 8008de6:	463b      	mov	r3, r7
 8008de8:	461f      	mov	r7, r3
 8008dea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dee:	2a30      	cmp	r2, #48	; 0x30
 8008df0:	d0fa      	beq.n	8008de8 <_dtoa_r+0xb68>
 8008df2:	e6f9      	b.n	8008be8 <_dtoa_r+0x968>
 8008df4:	9a03      	ldr	r2, [sp, #12]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d1a5      	bne.n	8008d46 <_dtoa_r+0xac6>
 8008dfa:	2331      	movs	r3, #49	; 0x31
 8008dfc:	f10a 0a01 	add.w	sl, sl, #1
 8008e00:	e779      	b.n	8008cf6 <_dtoa_r+0xa76>
 8008e02:	4b14      	ldr	r3, [pc, #80]	; (8008e54 <_dtoa_r+0xbd4>)
 8008e04:	f7ff baa8 	b.w	8008358 <_dtoa_r+0xd8>
 8008e08:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	f47f aa81 	bne.w	8008312 <_dtoa_r+0x92>
 8008e10:	4b11      	ldr	r3, [pc, #68]	; (8008e58 <_dtoa_r+0xbd8>)
 8008e12:	f7ff baa1 	b.w	8008358 <_dtoa_r+0xd8>
 8008e16:	f1b9 0f00 	cmp.w	r9, #0
 8008e1a:	dc03      	bgt.n	8008e24 <_dtoa_r+0xba4>
 8008e1c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8008e1e:	2b02      	cmp	r3, #2
 8008e20:	f73f aecb 	bgt.w	8008bba <_dtoa_r+0x93a>
 8008e24:	9f03      	ldr	r7, [sp, #12]
 8008e26:	4621      	mov	r1, r4
 8008e28:	4658      	mov	r0, fp
 8008e2a:	f7ff f99b 	bl	8008164 <quorem>
 8008e2e:	9a03      	ldr	r2, [sp, #12]
 8008e30:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8008e34:	f807 3b01 	strb.w	r3, [r7], #1
 8008e38:	1aba      	subs	r2, r7, r2
 8008e3a:	4591      	cmp	r9, r2
 8008e3c:	ddba      	ble.n	8008db4 <_dtoa_r+0xb34>
 8008e3e:	4659      	mov	r1, fp
 8008e40:	2300      	movs	r3, #0
 8008e42:	220a      	movs	r2, #10
 8008e44:	4628      	mov	r0, r5
 8008e46:	f000 fe43 	bl	8009ad0 <__multadd>
 8008e4a:	4683      	mov	fp, r0
 8008e4c:	e7eb      	b.n	8008e26 <_dtoa_r+0xba6>
 8008e4e:	bf00      	nop
 8008e50:	0800b1a9 	.word	0x0800b1a9
 8008e54:	0800afc0 	.word	0x0800afc0
 8008e58:	0800b141 	.word	0x0800b141

08008e5c <__sflush_r>:
 8008e5c:	898a      	ldrh	r2, [r1, #12]
 8008e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e60:	4605      	mov	r5, r0
 8008e62:	0710      	lsls	r0, r2, #28
 8008e64:	460c      	mov	r4, r1
 8008e66:	d457      	bmi.n	8008f18 <__sflush_r+0xbc>
 8008e68:	684b      	ldr	r3, [r1, #4]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	dc04      	bgt.n	8008e78 <__sflush_r+0x1c>
 8008e6e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	dc01      	bgt.n	8008e78 <__sflush_r+0x1c>
 8008e74:	2000      	movs	r0, #0
 8008e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e7a:	2e00      	cmp	r6, #0
 8008e7c:	d0fa      	beq.n	8008e74 <__sflush_r+0x18>
 8008e7e:	2300      	movs	r3, #0
 8008e80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e84:	682f      	ldr	r7, [r5, #0]
 8008e86:	602b      	str	r3, [r5, #0]
 8008e88:	d032      	beq.n	8008ef0 <__sflush_r+0x94>
 8008e8a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e8c:	89a3      	ldrh	r3, [r4, #12]
 8008e8e:	075a      	lsls	r2, r3, #29
 8008e90:	d505      	bpl.n	8008e9e <__sflush_r+0x42>
 8008e92:	6863      	ldr	r3, [r4, #4]
 8008e94:	1ac0      	subs	r0, r0, r3
 8008e96:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e98:	b10b      	cbz	r3, 8008e9e <__sflush_r+0x42>
 8008e9a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e9c:	1ac0      	subs	r0, r0, r3
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ea4:	4628      	mov	r0, r5
 8008ea6:	6a21      	ldr	r1, [r4, #32]
 8008ea8:	47b0      	blx	r6
 8008eaa:	1c43      	adds	r3, r0, #1
 8008eac:	89a3      	ldrh	r3, [r4, #12]
 8008eae:	d106      	bne.n	8008ebe <__sflush_r+0x62>
 8008eb0:	6829      	ldr	r1, [r5, #0]
 8008eb2:	291d      	cmp	r1, #29
 8008eb4:	d82c      	bhi.n	8008f10 <__sflush_r+0xb4>
 8008eb6:	4a29      	ldr	r2, [pc, #164]	; (8008f5c <__sflush_r+0x100>)
 8008eb8:	40ca      	lsrs	r2, r1
 8008eba:	07d6      	lsls	r6, r2, #31
 8008ebc:	d528      	bpl.n	8008f10 <__sflush_r+0xb4>
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	6062      	str	r2, [r4, #4]
 8008ec2:	6922      	ldr	r2, [r4, #16]
 8008ec4:	04d9      	lsls	r1, r3, #19
 8008ec6:	6022      	str	r2, [r4, #0]
 8008ec8:	d504      	bpl.n	8008ed4 <__sflush_r+0x78>
 8008eca:	1c42      	adds	r2, r0, #1
 8008ecc:	d101      	bne.n	8008ed2 <__sflush_r+0x76>
 8008ece:	682b      	ldr	r3, [r5, #0]
 8008ed0:	b903      	cbnz	r3, 8008ed4 <__sflush_r+0x78>
 8008ed2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ed4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ed6:	602f      	str	r7, [r5, #0]
 8008ed8:	2900      	cmp	r1, #0
 8008eda:	d0cb      	beq.n	8008e74 <__sflush_r+0x18>
 8008edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ee0:	4299      	cmp	r1, r3
 8008ee2:	d002      	beq.n	8008eea <__sflush_r+0x8e>
 8008ee4:	4628      	mov	r0, r5
 8008ee6:	f7fd fa47 	bl	8006378 <_free_r>
 8008eea:	2000      	movs	r0, #0
 8008eec:	6360      	str	r0, [r4, #52]	; 0x34
 8008eee:	e7c2      	b.n	8008e76 <__sflush_r+0x1a>
 8008ef0:	6a21      	ldr	r1, [r4, #32]
 8008ef2:	2301      	movs	r3, #1
 8008ef4:	4628      	mov	r0, r5
 8008ef6:	47b0      	blx	r6
 8008ef8:	1c41      	adds	r1, r0, #1
 8008efa:	d1c7      	bne.n	8008e8c <__sflush_r+0x30>
 8008efc:	682b      	ldr	r3, [r5, #0]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d0c4      	beq.n	8008e8c <__sflush_r+0x30>
 8008f02:	2b1d      	cmp	r3, #29
 8008f04:	d001      	beq.n	8008f0a <__sflush_r+0xae>
 8008f06:	2b16      	cmp	r3, #22
 8008f08:	d101      	bne.n	8008f0e <__sflush_r+0xb2>
 8008f0a:	602f      	str	r7, [r5, #0]
 8008f0c:	e7b2      	b.n	8008e74 <__sflush_r+0x18>
 8008f0e:	89a3      	ldrh	r3, [r4, #12]
 8008f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f14:	81a3      	strh	r3, [r4, #12]
 8008f16:	e7ae      	b.n	8008e76 <__sflush_r+0x1a>
 8008f18:	690f      	ldr	r7, [r1, #16]
 8008f1a:	2f00      	cmp	r7, #0
 8008f1c:	d0aa      	beq.n	8008e74 <__sflush_r+0x18>
 8008f1e:	0793      	lsls	r3, r2, #30
 8008f20:	bf18      	it	ne
 8008f22:	2300      	movne	r3, #0
 8008f24:	680e      	ldr	r6, [r1, #0]
 8008f26:	bf08      	it	eq
 8008f28:	694b      	ldreq	r3, [r1, #20]
 8008f2a:	1bf6      	subs	r6, r6, r7
 8008f2c:	600f      	str	r7, [r1, #0]
 8008f2e:	608b      	str	r3, [r1, #8]
 8008f30:	2e00      	cmp	r6, #0
 8008f32:	dd9f      	ble.n	8008e74 <__sflush_r+0x18>
 8008f34:	4633      	mov	r3, r6
 8008f36:	463a      	mov	r2, r7
 8008f38:	4628      	mov	r0, r5
 8008f3a:	6a21      	ldr	r1, [r4, #32]
 8008f3c:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8008f40:	47e0      	blx	ip
 8008f42:	2800      	cmp	r0, #0
 8008f44:	dc06      	bgt.n	8008f54 <__sflush_r+0xf8>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f04f 30ff 	mov.w	r0, #4294967295
 8008f4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f50:	81a3      	strh	r3, [r4, #12]
 8008f52:	e790      	b.n	8008e76 <__sflush_r+0x1a>
 8008f54:	4407      	add	r7, r0
 8008f56:	1a36      	subs	r6, r6, r0
 8008f58:	e7ea      	b.n	8008f30 <__sflush_r+0xd4>
 8008f5a:	bf00      	nop
 8008f5c:	20400001 	.word	0x20400001

08008f60 <_fflush_r>:
 8008f60:	b538      	push	{r3, r4, r5, lr}
 8008f62:	690b      	ldr	r3, [r1, #16]
 8008f64:	4605      	mov	r5, r0
 8008f66:	460c      	mov	r4, r1
 8008f68:	b913      	cbnz	r3, 8008f70 <_fflush_r+0x10>
 8008f6a:	2500      	movs	r5, #0
 8008f6c:	4628      	mov	r0, r5
 8008f6e:	bd38      	pop	{r3, r4, r5, pc}
 8008f70:	b118      	cbz	r0, 8008f7a <_fflush_r+0x1a>
 8008f72:	6983      	ldr	r3, [r0, #24]
 8008f74:	b90b      	cbnz	r3, 8008f7a <_fflush_r+0x1a>
 8008f76:	f000 f887 	bl	8009088 <__sinit>
 8008f7a:	4b14      	ldr	r3, [pc, #80]	; (8008fcc <_fflush_r+0x6c>)
 8008f7c:	429c      	cmp	r4, r3
 8008f7e:	d11b      	bne.n	8008fb8 <_fflush_r+0x58>
 8008f80:	686c      	ldr	r4, [r5, #4]
 8008f82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d0ef      	beq.n	8008f6a <_fflush_r+0xa>
 8008f8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f8c:	07d0      	lsls	r0, r2, #31
 8008f8e:	d404      	bmi.n	8008f9a <_fflush_r+0x3a>
 8008f90:	0599      	lsls	r1, r3, #22
 8008f92:	d402      	bmi.n	8008f9a <_fflush_r+0x3a>
 8008f94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f96:	f000 fc92 	bl	80098be <__retarget_lock_acquire_recursive>
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	f7ff ff5d 	bl	8008e5c <__sflush_r>
 8008fa2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fa4:	4605      	mov	r5, r0
 8008fa6:	07da      	lsls	r2, r3, #31
 8008fa8:	d4e0      	bmi.n	8008f6c <_fflush_r+0xc>
 8008faa:	89a3      	ldrh	r3, [r4, #12]
 8008fac:	059b      	lsls	r3, r3, #22
 8008fae:	d4dd      	bmi.n	8008f6c <_fflush_r+0xc>
 8008fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fb2:	f000 fc85 	bl	80098c0 <__retarget_lock_release_recursive>
 8008fb6:	e7d9      	b.n	8008f6c <_fflush_r+0xc>
 8008fb8:	4b05      	ldr	r3, [pc, #20]	; (8008fd0 <_fflush_r+0x70>)
 8008fba:	429c      	cmp	r4, r3
 8008fbc:	d101      	bne.n	8008fc2 <_fflush_r+0x62>
 8008fbe:	68ac      	ldr	r4, [r5, #8]
 8008fc0:	e7df      	b.n	8008f82 <_fflush_r+0x22>
 8008fc2:	4b04      	ldr	r3, [pc, #16]	; (8008fd4 <_fflush_r+0x74>)
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	bf08      	it	eq
 8008fc8:	68ec      	ldreq	r4, [r5, #12]
 8008fca:	e7da      	b.n	8008f82 <_fflush_r+0x22>
 8008fcc:	0800b1dc 	.word	0x0800b1dc
 8008fd0:	0800b1fc 	.word	0x0800b1fc
 8008fd4:	0800b1bc 	.word	0x0800b1bc

08008fd8 <std>:
 8008fd8:	2300      	movs	r3, #0
 8008fda:	b510      	push	{r4, lr}
 8008fdc:	4604      	mov	r4, r0
 8008fde:	e9c0 3300 	strd	r3, r3, [r0]
 8008fe2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008fe6:	6083      	str	r3, [r0, #8]
 8008fe8:	8181      	strh	r1, [r0, #12]
 8008fea:	6643      	str	r3, [r0, #100]	; 0x64
 8008fec:	81c2      	strh	r2, [r0, #14]
 8008fee:	6183      	str	r3, [r0, #24]
 8008ff0:	4619      	mov	r1, r3
 8008ff2:	2208      	movs	r2, #8
 8008ff4:	305c      	adds	r0, #92	; 0x5c
 8008ff6:	f7fd f9b7 	bl	8006368 <memset>
 8008ffa:	4b05      	ldr	r3, [pc, #20]	; (8009010 <std+0x38>)
 8008ffc:	6224      	str	r4, [r4, #32]
 8008ffe:	6263      	str	r3, [r4, #36]	; 0x24
 8009000:	4b04      	ldr	r3, [pc, #16]	; (8009014 <std+0x3c>)
 8009002:	62a3      	str	r3, [r4, #40]	; 0x28
 8009004:	4b04      	ldr	r3, [pc, #16]	; (8009018 <std+0x40>)
 8009006:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009008:	4b04      	ldr	r3, [pc, #16]	; (800901c <std+0x44>)
 800900a:	6323      	str	r3, [r4, #48]	; 0x30
 800900c:	bd10      	pop	{r4, pc}
 800900e:	bf00      	nop
 8009010:	08007061 	.word	0x08007061
 8009014:	08007083 	.word	0x08007083
 8009018:	080070bb 	.word	0x080070bb
 800901c:	080070df 	.word	0x080070df

08009020 <_cleanup_r>:
 8009020:	4901      	ldr	r1, [pc, #4]	; (8009028 <_cleanup_r+0x8>)
 8009022:	f000 b8c1 	b.w	80091a8 <_fwalk_reent>
 8009026:	bf00      	nop
 8009028:	08008f61 	.word	0x08008f61

0800902c <__sfmoreglue>:
 800902c:	2268      	movs	r2, #104	; 0x68
 800902e:	b570      	push	{r4, r5, r6, lr}
 8009030:	1e4d      	subs	r5, r1, #1
 8009032:	4355      	muls	r5, r2
 8009034:	460e      	mov	r6, r1
 8009036:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800903a:	f7fd fa05 	bl	8006448 <_malloc_r>
 800903e:	4604      	mov	r4, r0
 8009040:	b140      	cbz	r0, 8009054 <__sfmoreglue+0x28>
 8009042:	2100      	movs	r1, #0
 8009044:	e9c0 1600 	strd	r1, r6, [r0]
 8009048:	300c      	adds	r0, #12
 800904a:	60a0      	str	r0, [r4, #8]
 800904c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009050:	f7fd f98a 	bl	8006368 <memset>
 8009054:	4620      	mov	r0, r4
 8009056:	bd70      	pop	{r4, r5, r6, pc}

08009058 <__sfp_lock_acquire>:
 8009058:	4801      	ldr	r0, [pc, #4]	; (8009060 <__sfp_lock_acquire+0x8>)
 800905a:	f000 bc30 	b.w	80098be <__retarget_lock_acquire_recursive>
 800905e:	bf00      	nop
 8009060:	20000815 	.word	0x20000815

08009064 <__sfp_lock_release>:
 8009064:	4801      	ldr	r0, [pc, #4]	; (800906c <__sfp_lock_release+0x8>)
 8009066:	f000 bc2b 	b.w	80098c0 <__retarget_lock_release_recursive>
 800906a:	bf00      	nop
 800906c:	20000815 	.word	0x20000815

08009070 <__sinit_lock_acquire>:
 8009070:	4801      	ldr	r0, [pc, #4]	; (8009078 <__sinit_lock_acquire+0x8>)
 8009072:	f000 bc24 	b.w	80098be <__retarget_lock_acquire_recursive>
 8009076:	bf00      	nop
 8009078:	20000816 	.word	0x20000816

0800907c <__sinit_lock_release>:
 800907c:	4801      	ldr	r0, [pc, #4]	; (8009084 <__sinit_lock_release+0x8>)
 800907e:	f000 bc1f 	b.w	80098c0 <__retarget_lock_release_recursive>
 8009082:	bf00      	nop
 8009084:	20000816 	.word	0x20000816

08009088 <__sinit>:
 8009088:	b510      	push	{r4, lr}
 800908a:	4604      	mov	r4, r0
 800908c:	f7ff fff0 	bl	8009070 <__sinit_lock_acquire>
 8009090:	69a3      	ldr	r3, [r4, #24]
 8009092:	b11b      	cbz	r3, 800909c <__sinit+0x14>
 8009094:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009098:	f7ff bff0 	b.w	800907c <__sinit_lock_release>
 800909c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090a0:	6523      	str	r3, [r4, #80]	; 0x50
 80090a2:	4b13      	ldr	r3, [pc, #76]	; (80090f0 <__sinit+0x68>)
 80090a4:	4a13      	ldr	r2, [pc, #76]	; (80090f4 <__sinit+0x6c>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	62a2      	str	r2, [r4, #40]	; 0x28
 80090aa:	42a3      	cmp	r3, r4
 80090ac:	bf08      	it	eq
 80090ae:	2301      	moveq	r3, #1
 80090b0:	4620      	mov	r0, r4
 80090b2:	bf08      	it	eq
 80090b4:	61a3      	streq	r3, [r4, #24]
 80090b6:	f000 f81f 	bl	80090f8 <__sfp>
 80090ba:	6060      	str	r0, [r4, #4]
 80090bc:	4620      	mov	r0, r4
 80090be:	f000 f81b 	bl	80090f8 <__sfp>
 80090c2:	60a0      	str	r0, [r4, #8]
 80090c4:	4620      	mov	r0, r4
 80090c6:	f000 f817 	bl	80090f8 <__sfp>
 80090ca:	2200      	movs	r2, #0
 80090cc:	2104      	movs	r1, #4
 80090ce:	60e0      	str	r0, [r4, #12]
 80090d0:	6860      	ldr	r0, [r4, #4]
 80090d2:	f7ff ff81 	bl	8008fd8 <std>
 80090d6:	2201      	movs	r2, #1
 80090d8:	2109      	movs	r1, #9
 80090da:	68a0      	ldr	r0, [r4, #8]
 80090dc:	f7ff ff7c 	bl	8008fd8 <std>
 80090e0:	2202      	movs	r2, #2
 80090e2:	2112      	movs	r1, #18
 80090e4:	68e0      	ldr	r0, [r4, #12]
 80090e6:	f7ff ff77 	bl	8008fd8 <std>
 80090ea:	2301      	movs	r3, #1
 80090ec:	61a3      	str	r3, [r4, #24]
 80090ee:	e7d1      	b.n	8009094 <__sinit+0xc>
 80090f0:	0800afac 	.word	0x0800afac
 80090f4:	08009021 	.word	0x08009021

080090f8 <__sfp>:
 80090f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090fa:	4607      	mov	r7, r0
 80090fc:	f7ff ffac 	bl	8009058 <__sfp_lock_acquire>
 8009100:	4b1e      	ldr	r3, [pc, #120]	; (800917c <__sfp+0x84>)
 8009102:	681e      	ldr	r6, [r3, #0]
 8009104:	69b3      	ldr	r3, [r6, #24]
 8009106:	b913      	cbnz	r3, 800910e <__sfp+0x16>
 8009108:	4630      	mov	r0, r6
 800910a:	f7ff ffbd 	bl	8009088 <__sinit>
 800910e:	3648      	adds	r6, #72	; 0x48
 8009110:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009114:	3b01      	subs	r3, #1
 8009116:	d503      	bpl.n	8009120 <__sfp+0x28>
 8009118:	6833      	ldr	r3, [r6, #0]
 800911a:	b30b      	cbz	r3, 8009160 <__sfp+0x68>
 800911c:	6836      	ldr	r6, [r6, #0]
 800911e:	e7f7      	b.n	8009110 <__sfp+0x18>
 8009120:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009124:	b9d5      	cbnz	r5, 800915c <__sfp+0x64>
 8009126:	4b16      	ldr	r3, [pc, #88]	; (8009180 <__sfp+0x88>)
 8009128:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800912c:	60e3      	str	r3, [r4, #12]
 800912e:	6665      	str	r5, [r4, #100]	; 0x64
 8009130:	f000 fbc4 	bl	80098bc <__retarget_lock_init_recursive>
 8009134:	f7ff ff96 	bl	8009064 <__sfp_lock_release>
 8009138:	2208      	movs	r2, #8
 800913a:	4629      	mov	r1, r5
 800913c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009140:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009144:	6025      	str	r5, [r4, #0]
 8009146:	61a5      	str	r5, [r4, #24]
 8009148:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800914c:	f7fd f90c 	bl	8006368 <memset>
 8009150:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009154:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009158:	4620      	mov	r0, r4
 800915a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800915c:	3468      	adds	r4, #104	; 0x68
 800915e:	e7d9      	b.n	8009114 <__sfp+0x1c>
 8009160:	2104      	movs	r1, #4
 8009162:	4638      	mov	r0, r7
 8009164:	f7ff ff62 	bl	800902c <__sfmoreglue>
 8009168:	4604      	mov	r4, r0
 800916a:	6030      	str	r0, [r6, #0]
 800916c:	2800      	cmp	r0, #0
 800916e:	d1d5      	bne.n	800911c <__sfp+0x24>
 8009170:	f7ff ff78 	bl	8009064 <__sfp_lock_release>
 8009174:	230c      	movs	r3, #12
 8009176:	603b      	str	r3, [r7, #0]
 8009178:	e7ee      	b.n	8009158 <__sfp+0x60>
 800917a:	bf00      	nop
 800917c:	0800afac 	.word	0x0800afac
 8009180:	ffff0001 	.word	0xffff0001

08009184 <fiprintf>:
 8009184:	b40e      	push	{r1, r2, r3}
 8009186:	b503      	push	{r0, r1, lr}
 8009188:	4601      	mov	r1, r0
 800918a:	ab03      	add	r3, sp, #12
 800918c:	4805      	ldr	r0, [pc, #20]	; (80091a4 <fiprintf+0x20>)
 800918e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009192:	6800      	ldr	r0, [r0, #0]
 8009194:	9301      	str	r3, [sp, #4]
 8009196:	f001 fab7 	bl	800a708 <_vfiprintf_r>
 800919a:	b002      	add	sp, #8
 800919c:	f85d eb04 	ldr.w	lr, [sp], #4
 80091a0:	b003      	add	sp, #12
 80091a2:	4770      	bx	lr
 80091a4:	20000034 	.word	0x20000034

080091a8 <_fwalk_reent>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	4606      	mov	r6, r0
 80091ae:	4688      	mov	r8, r1
 80091b0:	2700      	movs	r7, #0
 80091b2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091b6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091ba:	f1b9 0901 	subs.w	r9, r9, #1
 80091be:	d505      	bpl.n	80091cc <_fwalk_reent+0x24>
 80091c0:	6824      	ldr	r4, [r4, #0]
 80091c2:	2c00      	cmp	r4, #0
 80091c4:	d1f7      	bne.n	80091b6 <_fwalk_reent+0xe>
 80091c6:	4638      	mov	r0, r7
 80091c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091cc:	89ab      	ldrh	r3, [r5, #12]
 80091ce:	2b01      	cmp	r3, #1
 80091d0:	d907      	bls.n	80091e2 <_fwalk_reent+0x3a>
 80091d2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091d6:	3301      	adds	r3, #1
 80091d8:	d003      	beq.n	80091e2 <_fwalk_reent+0x3a>
 80091da:	4629      	mov	r1, r5
 80091dc:	4630      	mov	r0, r6
 80091de:	47c0      	blx	r8
 80091e0:	4307      	orrs	r7, r0
 80091e2:	3568      	adds	r5, #104	; 0x68
 80091e4:	e7e9      	b.n	80091ba <_fwalk_reent+0x12>

080091e6 <rshift>:
 80091e6:	6903      	ldr	r3, [r0, #16]
 80091e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80091ec:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80091f0:	f100 0414 	add.w	r4, r0, #20
 80091f4:	ea4f 1261 	mov.w	r2, r1, asr #5
 80091f8:	dd46      	ble.n	8009288 <rshift+0xa2>
 80091fa:	f011 011f 	ands.w	r1, r1, #31
 80091fe:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009202:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009206:	d10c      	bne.n	8009222 <rshift+0x3c>
 8009208:	4629      	mov	r1, r5
 800920a:	f100 0710 	add.w	r7, r0, #16
 800920e:	42b1      	cmp	r1, r6
 8009210:	d335      	bcc.n	800927e <rshift+0x98>
 8009212:	1a9b      	subs	r3, r3, r2
 8009214:	009b      	lsls	r3, r3, #2
 8009216:	1eea      	subs	r2, r5, #3
 8009218:	4296      	cmp	r6, r2
 800921a:	bf38      	it	cc
 800921c:	2300      	movcc	r3, #0
 800921e:	4423      	add	r3, r4
 8009220:	e015      	b.n	800924e <rshift+0x68>
 8009222:	46a1      	mov	r9, r4
 8009224:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009228:	f1c1 0820 	rsb	r8, r1, #32
 800922c:	40cf      	lsrs	r7, r1
 800922e:	f105 0e04 	add.w	lr, r5, #4
 8009232:	4576      	cmp	r6, lr
 8009234:	46f4      	mov	ip, lr
 8009236:	d816      	bhi.n	8009266 <rshift+0x80>
 8009238:	1a9a      	subs	r2, r3, r2
 800923a:	0092      	lsls	r2, r2, #2
 800923c:	3a04      	subs	r2, #4
 800923e:	3501      	adds	r5, #1
 8009240:	42ae      	cmp	r6, r5
 8009242:	bf38      	it	cc
 8009244:	2200      	movcc	r2, #0
 8009246:	18a3      	adds	r3, r4, r2
 8009248:	50a7      	str	r7, [r4, r2]
 800924a:	b107      	cbz	r7, 800924e <rshift+0x68>
 800924c:	3304      	adds	r3, #4
 800924e:	42a3      	cmp	r3, r4
 8009250:	eba3 0204 	sub.w	r2, r3, r4
 8009254:	bf08      	it	eq
 8009256:	2300      	moveq	r3, #0
 8009258:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800925c:	6102      	str	r2, [r0, #16]
 800925e:	bf08      	it	eq
 8009260:	6143      	streq	r3, [r0, #20]
 8009262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009266:	f8dc c000 	ldr.w	ip, [ip]
 800926a:	fa0c fc08 	lsl.w	ip, ip, r8
 800926e:	ea4c 0707 	orr.w	r7, ip, r7
 8009272:	f849 7b04 	str.w	r7, [r9], #4
 8009276:	f85e 7b04 	ldr.w	r7, [lr], #4
 800927a:	40cf      	lsrs	r7, r1
 800927c:	e7d9      	b.n	8009232 <rshift+0x4c>
 800927e:	f851 cb04 	ldr.w	ip, [r1], #4
 8009282:	f847 cf04 	str.w	ip, [r7, #4]!
 8009286:	e7c2      	b.n	800920e <rshift+0x28>
 8009288:	4623      	mov	r3, r4
 800928a:	e7e0      	b.n	800924e <rshift+0x68>

0800928c <__hexdig_fun>:
 800928c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009290:	2b09      	cmp	r3, #9
 8009292:	d802      	bhi.n	800929a <__hexdig_fun+0xe>
 8009294:	3820      	subs	r0, #32
 8009296:	b2c0      	uxtb	r0, r0
 8009298:	4770      	bx	lr
 800929a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800929e:	2b05      	cmp	r3, #5
 80092a0:	d801      	bhi.n	80092a6 <__hexdig_fun+0x1a>
 80092a2:	3847      	subs	r0, #71	; 0x47
 80092a4:	e7f7      	b.n	8009296 <__hexdig_fun+0xa>
 80092a6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80092aa:	2b05      	cmp	r3, #5
 80092ac:	d801      	bhi.n	80092b2 <__hexdig_fun+0x26>
 80092ae:	3827      	subs	r0, #39	; 0x27
 80092b0:	e7f1      	b.n	8009296 <__hexdig_fun+0xa>
 80092b2:	2000      	movs	r0, #0
 80092b4:	4770      	bx	lr
	...

080092b8 <__gethex>:
 80092b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092bc:	b08b      	sub	sp, #44	; 0x2c
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	4bb2      	ldr	r3, [pc, #712]	; (800958c <__gethex+0x2d4>)
 80092c2:	9002      	str	r0, [sp, #8]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	468b      	mov	fp, r1
 80092c8:	4618      	mov	r0, r3
 80092ca:	4690      	mov	r8, r2
 80092cc:	9303      	str	r3, [sp, #12]
 80092ce:	f7f6 ff85 	bl	80001dc <strlen>
 80092d2:	4682      	mov	sl, r0
 80092d4:	9b03      	ldr	r3, [sp, #12]
 80092d6:	f8db 2000 	ldr.w	r2, [fp]
 80092da:	4403      	add	r3, r0
 80092dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80092e0:	9306      	str	r3, [sp, #24]
 80092e2:	1c93      	adds	r3, r2, #2
 80092e4:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80092e8:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80092ec:	32fe      	adds	r2, #254	; 0xfe
 80092ee:	18d1      	adds	r1, r2, r3
 80092f0:	461f      	mov	r7, r3
 80092f2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80092f6:	9101      	str	r1, [sp, #4]
 80092f8:	2830      	cmp	r0, #48	; 0x30
 80092fa:	d0f8      	beq.n	80092ee <__gethex+0x36>
 80092fc:	f7ff ffc6 	bl	800928c <__hexdig_fun>
 8009300:	4604      	mov	r4, r0
 8009302:	2800      	cmp	r0, #0
 8009304:	d13a      	bne.n	800937c <__gethex+0xc4>
 8009306:	4652      	mov	r2, sl
 8009308:	4638      	mov	r0, r7
 800930a:	9903      	ldr	r1, [sp, #12]
 800930c:	f7fd ff07 	bl	800711e <strncmp>
 8009310:	4605      	mov	r5, r0
 8009312:	2800      	cmp	r0, #0
 8009314:	d166      	bne.n	80093e4 <__gethex+0x12c>
 8009316:	f817 000a 	ldrb.w	r0, [r7, sl]
 800931a:	eb07 060a 	add.w	r6, r7, sl
 800931e:	f7ff ffb5 	bl	800928c <__hexdig_fun>
 8009322:	2800      	cmp	r0, #0
 8009324:	d060      	beq.n	80093e8 <__gethex+0x130>
 8009326:	4633      	mov	r3, r6
 8009328:	7818      	ldrb	r0, [r3, #0]
 800932a:	461f      	mov	r7, r3
 800932c:	2830      	cmp	r0, #48	; 0x30
 800932e:	f103 0301 	add.w	r3, r3, #1
 8009332:	d0f9      	beq.n	8009328 <__gethex+0x70>
 8009334:	f7ff ffaa 	bl	800928c <__hexdig_fun>
 8009338:	2301      	movs	r3, #1
 800933a:	fab0 f480 	clz	r4, r0
 800933e:	4635      	mov	r5, r6
 8009340:	0964      	lsrs	r4, r4, #5
 8009342:	9301      	str	r3, [sp, #4]
 8009344:	463a      	mov	r2, r7
 8009346:	4616      	mov	r6, r2
 8009348:	7830      	ldrb	r0, [r6, #0]
 800934a:	3201      	adds	r2, #1
 800934c:	f7ff ff9e 	bl	800928c <__hexdig_fun>
 8009350:	2800      	cmp	r0, #0
 8009352:	d1f8      	bne.n	8009346 <__gethex+0x8e>
 8009354:	4652      	mov	r2, sl
 8009356:	4630      	mov	r0, r6
 8009358:	9903      	ldr	r1, [sp, #12]
 800935a:	f7fd fee0 	bl	800711e <strncmp>
 800935e:	b980      	cbnz	r0, 8009382 <__gethex+0xca>
 8009360:	b94d      	cbnz	r5, 8009376 <__gethex+0xbe>
 8009362:	eb06 050a 	add.w	r5, r6, sl
 8009366:	462a      	mov	r2, r5
 8009368:	4616      	mov	r6, r2
 800936a:	7830      	ldrb	r0, [r6, #0]
 800936c:	3201      	adds	r2, #1
 800936e:	f7ff ff8d 	bl	800928c <__hexdig_fun>
 8009372:	2800      	cmp	r0, #0
 8009374:	d1f8      	bne.n	8009368 <__gethex+0xb0>
 8009376:	1bad      	subs	r5, r5, r6
 8009378:	00ad      	lsls	r5, r5, #2
 800937a:	e004      	b.n	8009386 <__gethex+0xce>
 800937c:	2400      	movs	r4, #0
 800937e:	4625      	mov	r5, r4
 8009380:	e7e0      	b.n	8009344 <__gethex+0x8c>
 8009382:	2d00      	cmp	r5, #0
 8009384:	d1f7      	bne.n	8009376 <__gethex+0xbe>
 8009386:	7833      	ldrb	r3, [r6, #0]
 8009388:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800938c:	2b50      	cmp	r3, #80	; 0x50
 800938e:	d139      	bne.n	8009404 <__gethex+0x14c>
 8009390:	7873      	ldrb	r3, [r6, #1]
 8009392:	2b2b      	cmp	r3, #43	; 0x2b
 8009394:	d02a      	beq.n	80093ec <__gethex+0x134>
 8009396:	2b2d      	cmp	r3, #45	; 0x2d
 8009398:	d02c      	beq.n	80093f4 <__gethex+0x13c>
 800939a:	f04f 0900 	mov.w	r9, #0
 800939e:	1c71      	adds	r1, r6, #1
 80093a0:	7808      	ldrb	r0, [r1, #0]
 80093a2:	f7ff ff73 	bl	800928c <__hexdig_fun>
 80093a6:	1e43      	subs	r3, r0, #1
 80093a8:	b2db      	uxtb	r3, r3
 80093aa:	2b18      	cmp	r3, #24
 80093ac:	d82a      	bhi.n	8009404 <__gethex+0x14c>
 80093ae:	f1a0 0210 	sub.w	r2, r0, #16
 80093b2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80093b6:	f7ff ff69 	bl	800928c <__hexdig_fun>
 80093ba:	1e43      	subs	r3, r0, #1
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	2b18      	cmp	r3, #24
 80093c0:	d91b      	bls.n	80093fa <__gethex+0x142>
 80093c2:	f1b9 0f00 	cmp.w	r9, #0
 80093c6:	d000      	beq.n	80093ca <__gethex+0x112>
 80093c8:	4252      	negs	r2, r2
 80093ca:	4415      	add	r5, r2
 80093cc:	f8cb 1000 	str.w	r1, [fp]
 80093d0:	b1d4      	cbz	r4, 8009408 <__gethex+0x150>
 80093d2:	9b01      	ldr	r3, [sp, #4]
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	bf14      	ite	ne
 80093d8:	2700      	movne	r7, #0
 80093da:	2706      	moveq	r7, #6
 80093dc:	4638      	mov	r0, r7
 80093de:	b00b      	add	sp, #44	; 0x2c
 80093e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093e4:	463e      	mov	r6, r7
 80093e6:	4625      	mov	r5, r4
 80093e8:	2401      	movs	r4, #1
 80093ea:	e7cc      	b.n	8009386 <__gethex+0xce>
 80093ec:	f04f 0900 	mov.w	r9, #0
 80093f0:	1cb1      	adds	r1, r6, #2
 80093f2:	e7d5      	b.n	80093a0 <__gethex+0xe8>
 80093f4:	f04f 0901 	mov.w	r9, #1
 80093f8:	e7fa      	b.n	80093f0 <__gethex+0x138>
 80093fa:	230a      	movs	r3, #10
 80093fc:	fb03 0202 	mla	r2, r3, r2, r0
 8009400:	3a10      	subs	r2, #16
 8009402:	e7d6      	b.n	80093b2 <__gethex+0xfa>
 8009404:	4631      	mov	r1, r6
 8009406:	e7e1      	b.n	80093cc <__gethex+0x114>
 8009408:	4621      	mov	r1, r4
 800940a:	1bf3      	subs	r3, r6, r7
 800940c:	3b01      	subs	r3, #1
 800940e:	2b07      	cmp	r3, #7
 8009410:	dc0a      	bgt.n	8009428 <__gethex+0x170>
 8009412:	9802      	ldr	r0, [sp, #8]
 8009414:	f000 fafa 	bl	8009a0c <_Balloc>
 8009418:	4604      	mov	r4, r0
 800941a:	b940      	cbnz	r0, 800942e <__gethex+0x176>
 800941c:	4602      	mov	r2, r0
 800941e:	21de      	movs	r1, #222	; 0xde
 8009420:	4b5b      	ldr	r3, [pc, #364]	; (8009590 <__gethex+0x2d8>)
 8009422:	485c      	ldr	r0, [pc, #368]	; (8009594 <__gethex+0x2dc>)
 8009424:	f7fe fe70 	bl	8008108 <__assert_func>
 8009428:	3101      	adds	r1, #1
 800942a:	105b      	asrs	r3, r3, #1
 800942c:	e7ef      	b.n	800940e <__gethex+0x156>
 800942e:	f04f 0b00 	mov.w	fp, #0
 8009432:	f100 0914 	add.w	r9, r0, #20
 8009436:	f1ca 0301 	rsb	r3, sl, #1
 800943a:	f8cd 9010 	str.w	r9, [sp, #16]
 800943e:	f8cd b004 	str.w	fp, [sp, #4]
 8009442:	9308      	str	r3, [sp, #32]
 8009444:	42b7      	cmp	r7, r6
 8009446:	d33f      	bcc.n	80094c8 <__gethex+0x210>
 8009448:	9f04      	ldr	r7, [sp, #16]
 800944a:	9b01      	ldr	r3, [sp, #4]
 800944c:	f847 3b04 	str.w	r3, [r7], #4
 8009450:	eba7 0709 	sub.w	r7, r7, r9
 8009454:	10bf      	asrs	r7, r7, #2
 8009456:	6127      	str	r7, [r4, #16]
 8009458:	4618      	mov	r0, r3
 800945a:	f000 fbc9 	bl	8009bf0 <__hi0bits>
 800945e:	017f      	lsls	r7, r7, #5
 8009460:	f8d8 6000 	ldr.w	r6, [r8]
 8009464:	1a3f      	subs	r7, r7, r0
 8009466:	42b7      	cmp	r7, r6
 8009468:	dd62      	ble.n	8009530 <__gethex+0x278>
 800946a:	1bbf      	subs	r7, r7, r6
 800946c:	4639      	mov	r1, r7
 800946e:	4620      	mov	r0, r4
 8009470:	f000 ff63 	bl	800a33a <__any_on>
 8009474:	4682      	mov	sl, r0
 8009476:	b1a8      	cbz	r0, 80094a4 <__gethex+0x1ec>
 8009478:	f04f 0a01 	mov.w	sl, #1
 800947c:	1e7b      	subs	r3, r7, #1
 800947e:	1159      	asrs	r1, r3, #5
 8009480:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009484:	f003 021f 	and.w	r2, r3, #31
 8009488:	fa0a f202 	lsl.w	r2, sl, r2
 800948c:	420a      	tst	r2, r1
 800948e:	d009      	beq.n	80094a4 <__gethex+0x1ec>
 8009490:	4553      	cmp	r3, sl
 8009492:	dd05      	ble.n	80094a0 <__gethex+0x1e8>
 8009494:	4620      	mov	r0, r4
 8009496:	1eb9      	subs	r1, r7, #2
 8009498:	f000 ff4f 	bl	800a33a <__any_on>
 800949c:	2800      	cmp	r0, #0
 800949e:	d144      	bne.n	800952a <__gethex+0x272>
 80094a0:	f04f 0a02 	mov.w	sl, #2
 80094a4:	4639      	mov	r1, r7
 80094a6:	4620      	mov	r0, r4
 80094a8:	f7ff fe9d 	bl	80091e6 <rshift>
 80094ac:	443d      	add	r5, r7
 80094ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80094b2:	42ab      	cmp	r3, r5
 80094b4:	da4a      	bge.n	800954c <__gethex+0x294>
 80094b6:	4621      	mov	r1, r4
 80094b8:	9802      	ldr	r0, [sp, #8]
 80094ba:	f000 fae7 	bl	8009a8c <_Bfree>
 80094be:	2300      	movs	r3, #0
 80094c0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80094c2:	27a3      	movs	r7, #163	; 0xa3
 80094c4:	6013      	str	r3, [r2, #0]
 80094c6:	e789      	b.n	80093dc <__gethex+0x124>
 80094c8:	1e73      	subs	r3, r6, #1
 80094ca:	9a06      	ldr	r2, [sp, #24]
 80094cc:	9307      	str	r3, [sp, #28]
 80094ce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80094d2:	4293      	cmp	r3, r2
 80094d4:	d019      	beq.n	800950a <__gethex+0x252>
 80094d6:	f1bb 0f20 	cmp.w	fp, #32
 80094da:	d107      	bne.n	80094ec <__gethex+0x234>
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	9a01      	ldr	r2, [sp, #4]
 80094e0:	f843 2b04 	str.w	r2, [r3], #4
 80094e4:	9304      	str	r3, [sp, #16]
 80094e6:	2300      	movs	r3, #0
 80094e8:	469b      	mov	fp, r3
 80094ea:	9301      	str	r3, [sp, #4]
 80094ec:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 80094f0:	f7ff fecc 	bl	800928c <__hexdig_fun>
 80094f4:	9b01      	ldr	r3, [sp, #4]
 80094f6:	f000 000f 	and.w	r0, r0, #15
 80094fa:	fa00 f00b 	lsl.w	r0, r0, fp
 80094fe:	4303      	orrs	r3, r0
 8009500:	9301      	str	r3, [sp, #4]
 8009502:	f10b 0b04 	add.w	fp, fp, #4
 8009506:	9b07      	ldr	r3, [sp, #28]
 8009508:	e00d      	b.n	8009526 <__gethex+0x26e>
 800950a:	9a08      	ldr	r2, [sp, #32]
 800950c:	1e73      	subs	r3, r6, #1
 800950e:	4413      	add	r3, r2
 8009510:	42bb      	cmp	r3, r7
 8009512:	d3e0      	bcc.n	80094d6 <__gethex+0x21e>
 8009514:	4618      	mov	r0, r3
 8009516:	4652      	mov	r2, sl
 8009518:	9903      	ldr	r1, [sp, #12]
 800951a:	9309      	str	r3, [sp, #36]	; 0x24
 800951c:	f7fd fdff 	bl	800711e <strncmp>
 8009520:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009522:	2800      	cmp	r0, #0
 8009524:	d1d7      	bne.n	80094d6 <__gethex+0x21e>
 8009526:	461e      	mov	r6, r3
 8009528:	e78c      	b.n	8009444 <__gethex+0x18c>
 800952a:	f04f 0a03 	mov.w	sl, #3
 800952e:	e7b9      	b.n	80094a4 <__gethex+0x1ec>
 8009530:	da09      	bge.n	8009546 <__gethex+0x28e>
 8009532:	1bf7      	subs	r7, r6, r7
 8009534:	4621      	mov	r1, r4
 8009536:	463a      	mov	r2, r7
 8009538:	9802      	ldr	r0, [sp, #8]
 800953a:	f000 fcbf 	bl	8009ebc <__lshift>
 800953e:	4604      	mov	r4, r0
 8009540:	1bed      	subs	r5, r5, r7
 8009542:	f100 0914 	add.w	r9, r0, #20
 8009546:	f04f 0a00 	mov.w	sl, #0
 800954a:	e7b0      	b.n	80094ae <__gethex+0x1f6>
 800954c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009550:	42a8      	cmp	r0, r5
 8009552:	dd72      	ble.n	800963a <__gethex+0x382>
 8009554:	1b45      	subs	r5, r0, r5
 8009556:	42ae      	cmp	r6, r5
 8009558:	dc35      	bgt.n	80095c6 <__gethex+0x30e>
 800955a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d029      	beq.n	80095b6 <__gethex+0x2fe>
 8009562:	2b03      	cmp	r3, #3
 8009564:	d02b      	beq.n	80095be <__gethex+0x306>
 8009566:	2b01      	cmp	r3, #1
 8009568:	d11c      	bne.n	80095a4 <__gethex+0x2ec>
 800956a:	42ae      	cmp	r6, r5
 800956c:	d11a      	bne.n	80095a4 <__gethex+0x2ec>
 800956e:	2e01      	cmp	r6, #1
 8009570:	d112      	bne.n	8009598 <__gethex+0x2e0>
 8009572:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009576:	9a05      	ldr	r2, [sp, #20]
 8009578:	2762      	movs	r7, #98	; 0x62
 800957a:	6013      	str	r3, [r2, #0]
 800957c:	2301      	movs	r3, #1
 800957e:	6123      	str	r3, [r4, #16]
 8009580:	f8c9 3000 	str.w	r3, [r9]
 8009584:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009586:	601c      	str	r4, [r3, #0]
 8009588:	e728      	b.n	80093dc <__gethex+0x124>
 800958a:	bf00      	nop
 800958c:	0800b284 	.word	0x0800b284
 8009590:	0800b1a9 	.word	0x0800b1a9
 8009594:	0800b21c 	.word	0x0800b21c
 8009598:	4620      	mov	r0, r4
 800959a:	1e71      	subs	r1, r6, #1
 800959c:	f000 fecd 	bl	800a33a <__any_on>
 80095a0:	2800      	cmp	r0, #0
 80095a2:	d1e6      	bne.n	8009572 <__gethex+0x2ba>
 80095a4:	4621      	mov	r1, r4
 80095a6:	9802      	ldr	r0, [sp, #8]
 80095a8:	f000 fa70 	bl	8009a8c <_Bfree>
 80095ac:	2300      	movs	r3, #0
 80095ae:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80095b0:	2750      	movs	r7, #80	; 0x50
 80095b2:	6013      	str	r3, [r2, #0]
 80095b4:	e712      	b.n	80093dc <__gethex+0x124>
 80095b6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d1f3      	bne.n	80095a4 <__gethex+0x2ec>
 80095bc:	e7d9      	b.n	8009572 <__gethex+0x2ba>
 80095be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d1d6      	bne.n	8009572 <__gethex+0x2ba>
 80095c4:	e7ee      	b.n	80095a4 <__gethex+0x2ec>
 80095c6:	1e6f      	subs	r7, r5, #1
 80095c8:	f1ba 0f00 	cmp.w	sl, #0
 80095cc:	d132      	bne.n	8009634 <__gethex+0x37c>
 80095ce:	b127      	cbz	r7, 80095da <__gethex+0x322>
 80095d0:	4639      	mov	r1, r7
 80095d2:	4620      	mov	r0, r4
 80095d4:	f000 feb1 	bl	800a33a <__any_on>
 80095d8:	4682      	mov	sl, r0
 80095da:	2101      	movs	r1, #1
 80095dc:	117b      	asrs	r3, r7, #5
 80095de:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80095e2:	f007 071f 	and.w	r7, r7, #31
 80095e6:	fa01 f707 	lsl.w	r7, r1, r7
 80095ea:	421f      	tst	r7, r3
 80095ec:	f04f 0702 	mov.w	r7, #2
 80095f0:	4629      	mov	r1, r5
 80095f2:	4620      	mov	r0, r4
 80095f4:	bf18      	it	ne
 80095f6:	f04a 0a02 	orrne.w	sl, sl, #2
 80095fa:	1b76      	subs	r6, r6, r5
 80095fc:	f7ff fdf3 	bl	80091e6 <rshift>
 8009600:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009604:	f1ba 0f00 	cmp.w	sl, #0
 8009608:	d048      	beq.n	800969c <__gethex+0x3e4>
 800960a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800960e:	2b02      	cmp	r3, #2
 8009610:	d015      	beq.n	800963e <__gethex+0x386>
 8009612:	2b03      	cmp	r3, #3
 8009614:	d017      	beq.n	8009646 <__gethex+0x38e>
 8009616:	2b01      	cmp	r3, #1
 8009618:	d109      	bne.n	800962e <__gethex+0x376>
 800961a:	f01a 0f02 	tst.w	sl, #2
 800961e:	d006      	beq.n	800962e <__gethex+0x376>
 8009620:	f8d9 0000 	ldr.w	r0, [r9]
 8009624:	ea4a 0a00 	orr.w	sl, sl, r0
 8009628:	f01a 0f01 	tst.w	sl, #1
 800962c:	d10e      	bne.n	800964c <__gethex+0x394>
 800962e:	f047 0710 	orr.w	r7, r7, #16
 8009632:	e033      	b.n	800969c <__gethex+0x3e4>
 8009634:	f04f 0a01 	mov.w	sl, #1
 8009638:	e7cf      	b.n	80095da <__gethex+0x322>
 800963a:	2701      	movs	r7, #1
 800963c:	e7e2      	b.n	8009604 <__gethex+0x34c>
 800963e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009640:	f1c3 0301 	rsb	r3, r3, #1
 8009644:	9315      	str	r3, [sp, #84]	; 0x54
 8009646:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009648:	2b00      	cmp	r3, #0
 800964a:	d0f0      	beq.n	800962e <__gethex+0x376>
 800964c:	f04f 0c00 	mov.w	ip, #0
 8009650:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009654:	f104 0314 	add.w	r3, r4, #20
 8009658:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800965c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009660:	4618      	mov	r0, r3
 8009662:	f853 2b04 	ldr.w	r2, [r3], #4
 8009666:	f1b2 3fff 	cmp.w	r2, #4294967295
 800966a:	d01c      	beq.n	80096a6 <__gethex+0x3ee>
 800966c:	3201      	adds	r2, #1
 800966e:	6002      	str	r2, [r0, #0]
 8009670:	2f02      	cmp	r7, #2
 8009672:	f104 0314 	add.w	r3, r4, #20
 8009676:	d13d      	bne.n	80096f4 <__gethex+0x43c>
 8009678:	f8d8 2000 	ldr.w	r2, [r8]
 800967c:	3a01      	subs	r2, #1
 800967e:	42b2      	cmp	r2, r6
 8009680:	d10a      	bne.n	8009698 <__gethex+0x3e0>
 8009682:	2201      	movs	r2, #1
 8009684:	1171      	asrs	r1, r6, #5
 8009686:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800968a:	f006 061f 	and.w	r6, r6, #31
 800968e:	fa02 f606 	lsl.w	r6, r2, r6
 8009692:	421e      	tst	r6, r3
 8009694:	bf18      	it	ne
 8009696:	4617      	movne	r7, r2
 8009698:	f047 0720 	orr.w	r7, r7, #32
 800969c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800969e:	601c      	str	r4, [r3, #0]
 80096a0:	9b05      	ldr	r3, [sp, #20]
 80096a2:	601d      	str	r5, [r3, #0]
 80096a4:	e69a      	b.n	80093dc <__gethex+0x124>
 80096a6:	4299      	cmp	r1, r3
 80096a8:	f843 cc04 	str.w	ip, [r3, #-4]
 80096ac:	d8d8      	bhi.n	8009660 <__gethex+0x3a8>
 80096ae:	68a3      	ldr	r3, [r4, #8]
 80096b0:	459b      	cmp	fp, r3
 80096b2:	db17      	blt.n	80096e4 <__gethex+0x42c>
 80096b4:	6861      	ldr	r1, [r4, #4]
 80096b6:	9802      	ldr	r0, [sp, #8]
 80096b8:	3101      	adds	r1, #1
 80096ba:	f000 f9a7 	bl	8009a0c <_Balloc>
 80096be:	4681      	mov	r9, r0
 80096c0:	b918      	cbnz	r0, 80096ca <__gethex+0x412>
 80096c2:	4602      	mov	r2, r0
 80096c4:	2184      	movs	r1, #132	; 0x84
 80096c6:	4b19      	ldr	r3, [pc, #100]	; (800972c <__gethex+0x474>)
 80096c8:	e6ab      	b.n	8009422 <__gethex+0x16a>
 80096ca:	6922      	ldr	r2, [r4, #16]
 80096cc:	f104 010c 	add.w	r1, r4, #12
 80096d0:	3202      	adds	r2, #2
 80096d2:	0092      	lsls	r2, r2, #2
 80096d4:	300c      	adds	r0, #12
 80096d6:	f7fc fe39 	bl	800634c <memcpy>
 80096da:	4621      	mov	r1, r4
 80096dc:	9802      	ldr	r0, [sp, #8]
 80096de:	f000 f9d5 	bl	8009a8c <_Bfree>
 80096e2:	464c      	mov	r4, r9
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	1c5a      	adds	r2, r3, #1
 80096e8:	6122      	str	r2, [r4, #16]
 80096ea:	2201      	movs	r2, #1
 80096ec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80096f0:	615a      	str	r2, [r3, #20]
 80096f2:	e7bd      	b.n	8009670 <__gethex+0x3b8>
 80096f4:	6922      	ldr	r2, [r4, #16]
 80096f6:	455a      	cmp	r2, fp
 80096f8:	dd0b      	ble.n	8009712 <__gethex+0x45a>
 80096fa:	2101      	movs	r1, #1
 80096fc:	4620      	mov	r0, r4
 80096fe:	f7ff fd72 	bl	80091e6 <rshift>
 8009702:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009706:	3501      	adds	r5, #1
 8009708:	42ab      	cmp	r3, r5
 800970a:	f6ff aed4 	blt.w	80094b6 <__gethex+0x1fe>
 800970e:	2701      	movs	r7, #1
 8009710:	e7c2      	b.n	8009698 <__gethex+0x3e0>
 8009712:	f016 061f 	ands.w	r6, r6, #31
 8009716:	d0fa      	beq.n	800970e <__gethex+0x456>
 8009718:	4453      	add	r3, sl
 800971a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800971e:	f000 fa67 	bl	8009bf0 <__hi0bits>
 8009722:	f1c6 0620 	rsb	r6, r6, #32
 8009726:	42b0      	cmp	r0, r6
 8009728:	dbe7      	blt.n	80096fa <__gethex+0x442>
 800972a:	e7f0      	b.n	800970e <__gethex+0x456>
 800972c:	0800b1a9 	.word	0x0800b1a9

08009730 <L_shift>:
 8009730:	f1c2 0208 	rsb	r2, r2, #8
 8009734:	0092      	lsls	r2, r2, #2
 8009736:	b570      	push	{r4, r5, r6, lr}
 8009738:	f1c2 0620 	rsb	r6, r2, #32
 800973c:	6843      	ldr	r3, [r0, #4]
 800973e:	6804      	ldr	r4, [r0, #0]
 8009740:	fa03 f506 	lsl.w	r5, r3, r6
 8009744:	432c      	orrs	r4, r5
 8009746:	40d3      	lsrs	r3, r2
 8009748:	6004      	str	r4, [r0, #0]
 800974a:	f840 3f04 	str.w	r3, [r0, #4]!
 800974e:	4288      	cmp	r0, r1
 8009750:	d3f4      	bcc.n	800973c <L_shift+0xc>
 8009752:	bd70      	pop	{r4, r5, r6, pc}

08009754 <__match>:
 8009754:	b530      	push	{r4, r5, lr}
 8009756:	6803      	ldr	r3, [r0, #0]
 8009758:	3301      	adds	r3, #1
 800975a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800975e:	b914      	cbnz	r4, 8009766 <__match+0x12>
 8009760:	6003      	str	r3, [r0, #0]
 8009762:	2001      	movs	r0, #1
 8009764:	bd30      	pop	{r4, r5, pc}
 8009766:	f813 2b01 	ldrb.w	r2, [r3], #1
 800976a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800976e:	2d19      	cmp	r5, #25
 8009770:	bf98      	it	ls
 8009772:	3220      	addls	r2, #32
 8009774:	42a2      	cmp	r2, r4
 8009776:	d0f0      	beq.n	800975a <__match+0x6>
 8009778:	2000      	movs	r0, #0
 800977a:	e7f3      	b.n	8009764 <__match+0x10>

0800977c <__hexnan>:
 800977c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009780:	2500      	movs	r5, #0
 8009782:	680b      	ldr	r3, [r1, #0]
 8009784:	4682      	mov	sl, r0
 8009786:	115e      	asrs	r6, r3, #5
 8009788:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800978c:	f013 031f 	ands.w	r3, r3, #31
 8009790:	bf18      	it	ne
 8009792:	3604      	addne	r6, #4
 8009794:	1f37      	subs	r7, r6, #4
 8009796:	46b9      	mov	r9, r7
 8009798:	463c      	mov	r4, r7
 800979a:	46ab      	mov	fp, r5
 800979c:	b087      	sub	sp, #28
 800979e:	4690      	mov	r8, r2
 80097a0:	6802      	ldr	r2, [r0, #0]
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	f846 5c04 	str.w	r5, [r6, #-4]
 80097a8:	9502      	str	r5, [sp, #8]
 80097aa:	7851      	ldrb	r1, [r2, #1]
 80097ac:	1c53      	adds	r3, r2, #1
 80097ae:	9303      	str	r3, [sp, #12]
 80097b0:	b341      	cbz	r1, 8009804 <__hexnan+0x88>
 80097b2:	4608      	mov	r0, r1
 80097b4:	9205      	str	r2, [sp, #20]
 80097b6:	9104      	str	r1, [sp, #16]
 80097b8:	f7ff fd68 	bl	800928c <__hexdig_fun>
 80097bc:	2800      	cmp	r0, #0
 80097be:	d14f      	bne.n	8009860 <__hexnan+0xe4>
 80097c0:	9904      	ldr	r1, [sp, #16]
 80097c2:	9a05      	ldr	r2, [sp, #20]
 80097c4:	2920      	cmp	r1, #32
 80097c6:	d818      	bhi.n	80097fa <__hexnan+0x7e>
 80097c8:	9b02      	ldr	r3, [sp, #8]
 80097ca:	459b      	cmp	fp, r3
 80097cc:	dd13      	ble.n	80097f6 <__hexnan+0x7a>
 80097ce:	454c      	cmp	r4, r9
 80097d0:	d206      	bcs.n	80097e0 <__hexnan+0x64>
 80097d2:	2d07      	cmp	r5, #7
 80097d4:	dc04      	bgt.n	80097e0 <__hexnan+0x64>
 80097d6:	462a      	mov	r2, r5
 80097d8:	4649      	mov	r1, r9
 80097da:	4620      	mov	r0, r4
 80097dc:	f7ff ffa8 	bl	8009730 <L_shift>
 80097e0:	4544      	cmp	r4, r8
 80097e2:	d950      	bls.n	8009886 <__hexnan+0x10a>
 80097e4:	2300      	movs	r3, #0
 80097e6:	f1a4 0904 	sub.w	r9, r4, #4
 80097ea:	f844 3c04 	str.w	r3, [r4, #-4]
 80097ee:	461d      	mov	r5, r3
 80097f0:	464c      	mov	r4, r9
 80097f2:	f8cd b008 	str.w	fp, [sp, #8]
 80097f6:	9a03      	ldr	r2, [sp, #12]
 80097f8:	e7d7      	b.n	80097aa <__hexnan+0x2e>
 80097fa:	2929      	cmp	r1, #41	; 0x29
 80097fc:	d156      	bne.n	80098ac <__hexnan+0x130>
 80097fe:	3202      	adds	r2, #2
 8009800:	f8ca 2000 	str.w	r2, [sl]
 8009804:	f1bb 0f00 	cmp.w	fp, #0
 8009808:	d050      	beq.n	80098ac <__hexnan+0x130>
 800980a:	454c      	cmp	r4, r9
 800980c:	d206      	bcs.n	800981c <__hexnan+0xa0>
 800980e:	2d07      	cmp	r5, #7
 8009810:	dc04      	bgt.n	800981c <__hexnan+0xa0>
 8009812:	462a      	mov	r2, r5
 8009814:	4649      	mov	r1, r9
 8009816:	4620      	mov	r0, r4
 8009818:	f7ff ff8a 	bl	8009730 <L_shift>
 800981c:	4544      	cmp	r4, r8
 800981e:	d934      	bls.n	800988a <__hexnan+0x10e>
 8009820:	4623      	mov	r3, r4
 8009822:	f1a8 0204 	sub.w	r2, r8, #4
 8009826:	f853 1b04 	ldr.w	r1, [r3], #4
 800982a:	429f      	cmp	r7, r3
 800982c:	f842 1f04 	str.w	r1, [r2, #4]!
 8009830:	d2f9      	bcs.n	8009826 <__hexnan+0xaa>
 8009832:	1b3b      	subs	r3, r7, r4
 8009834:	f023 0303 	bic.w	r3, r3, #3
 8009838:	3304      	adds	r3, #4
 800983a:	3401      	adds	r4, #1
 800983c:	3e03      	subs	r6, #3
 800983e:	42b4      	cmp	r4, r6
 8009840:	bf88      	it	hi
 8009842:	2304      	movhi	r3, #4
 8009844:	2200      	movs	r2, #0
 8009846:	4443      	add	r3, r8
 8009848:	f843 2b04 	str.w	r2, [r3], #4
 800984c:	429f      	cmp	r7, r3
 800984e:	d2fb      	bcs.n	8009848 <__hexnan+0xcc>
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	b91b      	cbnz	r3, 800985c <__hexnan+0xe0>
 8009854:	4547      	cmp	r7, r8
 8009856:	d127      	bne.n	80098a8 <__hexnan+0x12c>
 8009858:	2301      	movs	r3, #1
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	2005      	movs	r0, #5
 800985e:	e026      	b.n	80098ae <__hexnan+0x132>
 8009860:	3501      	adds	r5, #1
 8009862:	2d08      	cmp	r5, #8
 8009864:	f10b 0b01 	add.w	fp, fp, #1
 8009868:	dd06      	ble.n	8009878 <__hexnan+0xfc>
 800986a:	4544      	cmp	r4, r8
 800986c:	d9c3      	bls.n	80097f6 <__hexnan+0x7a>
 800986e:	2300      	movs	r3, #0
 8009870:	2501      	movs	r5, #1
 8009872:	f844 3c04 	str.w	r3, [r4, #-4]
 8009876:	3c04      	subs	r4, #4
 8009878:	6822      	ldr	r2, [r4, #0]
 800987a:	f000 000f 	and.w	r0, r0, #15
 800987e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009882:	6022      	str	r2, [r4, #0]
 8009884:	e7b7      	b.n	80097f6 <__hexnan+0x7a>
 8009886:	2508      	movs	r5, #8
 8009888:	e7b5      	b.n	80097f6 <__hexnan+0x7a>
 800988a:	9b01      	ldr	r3, [sp, #4]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d0df      	beq.n	8009850 <__hexnan+0xd4>
 8009890:	f04f 32ff 	mov.w	r2, #4294967295
 8009894:	f1c3 0320 	rsb	r3, r3, #32
 8009898:	fa22 f303 	lsr.w	r3, r2, r3
 800989c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80098a0:	401a      	ands	r2, r3
 80098a2:	f846 2c04 	str.w	r2, [r6, #-4]
 80098a6:	e7d3      	b.n	8009850 <__hexnan+0xd4>
 80098a8:	3f04      	subs	r7, #4
 80098aa:	e7d1      	b.n	8009850 <__hexnan+0xd4>
 80098ac:	2004      	movs	r0, #4
 80098ae:	b007      	add	sp, #28
 80098b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098b4 <_localeconv_r>:
 80098b4:	4800      	ldr	r0, [pc, #0]	; (80098b8 <_localeconv_r+0x4>)
 80098b6:	4770      	bx	lr
 80098b8:	2000018c 	.word	0x2000018c

080098bc <__retarget_lock_init_recursive>:
 80098bc:	4770      	bx	lr

080098be <__retarget_lock_acquire_recursive>:
 80098be:	4770      	bx	lr

080098c0 <__retarget_lock_release_recursive>:
 80098c0:	4770      	bx	lr
	...

080098c4 <_lseek_r>:
 80098c4:	b538      	push	{r3, r4, r5, lr}
 80098c6:	4604      	mov	r4, r0
 80098c8:	4608      	mov	r0, r1
 80098ca:	4611      	mov	r1, r2
 80098cc:	2200      	movs	r2, #0
 80098ce:	4d05      	ldr	r5, [pc, #20]	; (80098e4 <_lseek_r+0x20>)
 80098d0:	602a      	str	r2, [r5, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	f7fa f800 	bl	80038d8 <_lseek>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d102      	bne.n	80098e2 <_lseek_r+0x1e>
 80098dc:	682b      	ldr	r3, [r5, #0]
 80098de:	b103      	cbz	r3, 80098e2 <_lseek_r+0x1e>
 80098e0:	6023      	str	r3, [r4, #0]
 80098e2:	bd38      	pop	{r3, r4, r5, pc}
 80098e4:	20000818 	.word	0x20000818

080098e8 <__swhatbuf_r>:
 80098e8:	b570      	push	{r4, r5, r6, lr}
 80098ea:	460e      	mov	r6, r1
 80098ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098f0:	4614      	mov	r4, r2
 80098f2:	2900      	cmp	r1, #0
 80098f4:	461d      	mov	r5, r3
 80098f6:	b096      	sub	sp, #88	; 0x58
 80098f8:	da08      	bge.n	800990c <__swhatbuf_r+0x24>
 80098fa:	2200      	movs	r2, #0
 80098fc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8009900:	602a      	str	r2, [r5, #0]
 8009902:	061a      	lsls	r2, r3, #24
 8009904:	d410      	bmi.n	8009928 <__swhatbuf_r+0x40>
 8009906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800990a:	e00e      	b.n	800992a <__swhatbuf_r+0x42>
 800990c:	466a      	mov	r2, sp
 800990e:	f001 f857 	bl	800a9c0 <_fstat_r>
 8009912:	2800      	cmp	r0, #0
 8009914:	dbf1      	blt.n	80098fa <__swhatbuf_r+0x12>
 8009916:	9a01      	ldr	r2, [sp, #4]
 8009918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800991c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009920:	425a      	negs	r2, r3
 8009922:	415a      	adcs	r2, r3
 8009924:	602a      	str	r2, [r5, #0]
 8009926:	e7ee      	b.n	8009906 <__swhatbuf_r+0x1e>
 8009928:	2340      	movs	r3, #64	; 0x40
 800992a:	2000      	movs	r0, #0
 800992c:	6023      	str	r3, [r4, #0]
 800992e:	b016      	add	sp, #88	; 0x58
 8009930:	bd70      	pop	{r4, r5, r6, pc}
	...

08009934 <__smakebuf_r>:
 8009934:	898b      	ldrh	r3, [r1, #12]
 8009936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009938:	079d      	lsls	r5, r3, #30
 800993a:	4606      	mov	r6, r0
 800993c:	460c      	mov	r4, r1
 800993e:	d507      	bpl.n	8009950 <__smakebuf_r+0x1c>
 8009940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009944:	6023      	str	r3, [r4, #0]
 8009946:	6123      	str	r3, [r4, #16]
 8009948:	2301      	movs	r3, #1
 800994a:	6163      	str	r3, [r4, #20]
 800994c:	b002      	add	sp, #8
 800994e:	bd70      	pop	{r4, r5, r6, pc}
 8009950:	466a      	mov	r2, sp
 8009952:	ab01      	add	r3, sp, #4
 8009954:	f7ff ffc8 	bl	80098e8 <__swhatbuf_r>
 8009958:	9900      	ldr	r1, [sp, #0]
 800995a:	4605      	mov	r5, r0
 800995c:	4630      	mov	r0, r6
 800995e:	f7fc fd73 	bl	8006448 <_malloc_r>
 8009962:	b948      	cbnz	r0, 8009978 <__smakebuf_r+0x44>
 8009964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009968:	059a      	lsls	r2, r3, #22
 800996a:	d4ef      	bmi.n	800994c <__smakebuf_r+0x18>
 800996c:	f023 0303 	bic.w	r3, r3, #3
 8009970:	f043 0302 	orr.w	r3, r3, #2
 8009974:	81a3      	strh	r3, [r4, #12]
 8009976:	e7e3      	b.n	8009940 <__smakebuf_r+0xc>
 8009978:	4b0d      	ldr	r3, [pc, #52]	; (80099b0 <__smakebuf_r+0x7c>)
 800997a:	62b3      	str	r3, [r6, #40]	; 0x28
 800997c:	89a3      	ldrh	r3, [r4, #12]
 800997e:	6020      	str	r0, [r4, #0]
 8009980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009984:	81a3      	strh	r3, [r4, #12]
 8009986:	9b00      	ldr	r3, [sp, #0]
 8009988:	6120      	str	r0, [r4, #16]
 800998a:	6163      	str	r3, [r4, #20]
 800998c:	9b01      	ldr	r3, [sp, #4]
 800998e:	b15b      	cbz	r3, 80099a8 <__smakebuf_r+0x74>
 8009990:	4630      	mov	r0, r6
 8009992:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009996:	f001 f825 	bl	800a9e4 <_isatty_r>
 800999a:	b128      	cbz	r0, 80099a8 <__smakebuf_r+0x74>
 800999c:	89a3      	ldrh	r3, [r4, #12]
 800999e:	f023 0303 	bic.w	r3, r3, #3
 80099a2:	f043 0301 	orr.w	r3, r3, #1
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	89a0      	ldrh	r0, [r4, #12]
 80099aa:	4305      	orrs	r5, r0
 80099ac:	81a5      	strh	r5, [r4, #12]
 80099ae:	e7cd      	b.n	800994c <__smakebuf_r+0x18>
 80099b0:	08009021 	.word	0x08009021

080099b4 <__ascii_mbtowc>:
 80099b4:	b082      	sub	sp, #8
 80099b6:	b901      	cbnz	r1, 80099ba <__ascii_mbtowc+0x6>
 80099b8:	a901      	add	r1, sp, #4
 80099ba:	b142      	cbz	r2, 80099ce <__ascii_mbtowc+0x1a>
 80099bc:	b14b      	cbz	r3, 80099d2 <__ascii_mbtowc+0x1e>
 80099be:	7813      	ldrb	r3, [r2, #0]
 80099c0:	600b      	str	r3, [r1, #0]
 80099c2:	7812      	ldrb	r2, [r2, #0]
 80099c4:	1e10      	subs	r0, r2, #0
 80099c6:	bf18      	it	ne
 80099c8:	2001      	movne	r0, #1
 80099ca:	b002      	add	sp, #8
 80099cc:	4770      	bx	lr
 80099ce:	4610      	mov	r0, r2
 80099d0:	e7fb      	b.n	80099ca <__ascii_mbtowc+0x16>
 80099d2:	f06f 0001 	mvn.w	r0, #1
 80099d6:	e7f8      	b.n	80099ca <__ascii_mbtowc+0x16>

080099d8 <memchr>:
 80099d8:	4603      	mov	r3, r0
 80099da:	b510      	push	{r4, lr}
 80099dc:	b2c9      	uxtb	r1, r1
 80099de:	4402      	add	r2, r0
 80099e0:	4293      	cmp	r3, r2
 80099e2:	4618      	mov	r0, r3
 80099e4:	d101      	bne.n	80099ea <memchr+0x12>
 80099e6:	2000      	movs	r0, #0
 80099e8:	e003      	b.n	80099f2 <memchr+0x1a>
 80099ea:	7804      	ldrb	r4, [r0, #0]
 80099ec:	3301      	adds	r3, #1
 80099ee:	428c      	cmp	r4, r1
 80099f0:	d1f6      	bne.n	80099e0 <memchr+0x8>
 80099f2:	bd10      	pop	{r4, pc}

080099f4 <__malloc_lock>:
 80099f4:	4801      	ldr	r0, [pc, #4]	; (80099fc <__malloc_lock+0x8>)
 80099f6:	f7ff bf62 	b.w	80098be <__retarget_lock_acquire_recursive>
 80099fa:	bf00      	nop
 80099fc:	20000814 	.word	0x20000814

08009a00 <__malloc_unlock>:
 8009a00:	4801      	ldr	r0, [pc, #4]	; (8009a08 <__malloc_unlock+0x8>)
 8009a02:	f7ff bf5d 	b.w	80098c0 <__retarget_lock_release_recursive>
 8009a06:	bf00      	nop
 8009a08:	20000814 	.word	0x20000814

08009a0c <_Balloc>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	b976      	cbnz	r6, 8009a34 <_Balloc+0x28>
 8009a16:	2010      	movs	r0, #16
 8009a18:	f7fc fc88 	bl	800632c <malloc>
 8009a1c:	4602      	mov	r2, r0
 8009a1e:	6260      	str	r0, [r4, #36]	; 0x24
 8009a20:	b920      	cbnz	r0, 8009a2c <_Balloc+0x20>
 8009a22:	2166      	movs	r1, #102	; 0x66
 8009a24:	4b17      	ldr	r3, [pc, #92]	; (8009a84 <_Balloc+0x78>)
 8009a26:	4818      	ldr	r0, [pc, #96]	; (8009a88 <_Balloc+0x7c>)
 8009a28:	f7fe fb6e 	bl	8008108 <__assert_func>
 8009a2c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009a30:	6006      	str	r6, [r0, #0]
 8009a32:	60c6      	str	r6, [r0, #12]
 8009a34:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009a36:	68f3      	ldr	r3, [r6, #12]
 8009a38:	b183      	cbz	r3, 8009a5c <_Balloc+0x50>
 8009a3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a3c:	68db      	ldr	r3, [r3, #12]
 8009a3e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009a42:	b9b8      	cbnz	r0, 8009a74 <_Balloc+0x68>
 8009a44:	2101      	movs	r1, #1
 8009a46:	fa01 f605 	lsl.w	r6, r1, r5
 8009a4a:	1d72      	adds	r2, r6, #5
 8009a4c:	4620      	mov	r0, r4
 8009a4e:	0092      	lsls	r2, r2, #2
 8009a50:	f000 fc94 	bl	800a37c <_calloc_r>
 8009a54:	b160      	cbz	r0, 8009a70 <_Balloc+0x64>
 8009a56:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009a5a:	e00e      	b.n	8009a7a <_Balloc+0x6e>
 8009a5c:	2221      	movs	r2, #33	; 0x21
 8009a5e:	2104      	movs	r1, #4
 8009a60:	4620      	mov	r0, r4
 8009a62:	f000 fc8b 	bl	800a37c <_calloc_r>
 8009a66:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a68:	60f0      	str	r0, [r6, #12]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d1e4      	bne.n	8009a3a <_Balloc+0x2e>
 8009a70:	2000      	movs	r0, #0
 8009a72:	bd70      	pop	{r4, r5, r6, pc}
 8009a74:	6802      	ldr	r2, [r0, #0]
 8009a76:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009a7a:	2300      	movs	r3, #0
 8009a7c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009a80:	e7f7      	b.n	8009a72 <_Balloc+0x66>
 8009a82:	bf00      	nop
 8009a84:	0800afe4 	.word	0x0800afe4
 8009a88:	0800b298 	.word	0x0800b298

08009a8c <_Bfree>:
 8009a8c:	b570      	push	{r4, r5, r6, lr}
 8009a8e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009a90:	4605      	mov	r5, r0
 8009a92:	460c      	mov	r4, r1
 8009a94:	b976      	cbnz	r6, 8009ab4 <_Bfree+0x28>
 8009a96:	2010      	movs	r0, #16
 8009a98:	f7fc fc48 	bl	800632c <malloc>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	6268      	str	r0, [r5, #36]	; 0x24
 8009aa0:	b920      	cbnz	r0, 8009aac <_Bfree+0x20>
 8009aa2:	218a      	movs	r1, #138	; 0x8a
 8009aa4:	4b08      	ldr	r3, [pc, #32]	; (8009ac8 <_Bfree+0x3c>)
 8009aa6:	4809      	ldr	r0, [pc, #36]	; (8009acc <_Bfree+0x40>)
 8009aa8:	f7fe fb2e 	bl	8008108 <__assert_func>
 8009aac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009ab0:	6006      	str	r6, [r0, #0]
 8009ab2:	60c6      	str	r6, [r0, #12]
 8009ab4:	b13c      	cbz	r4, 8009ac6 <_Bfree+0x3a>
 8009ab6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009ab8:	6862      	ldr	r2, [r4, #4]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ac0:	6021      	str	r1, [r4, #0]
 8009ac2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}
 8009ac8:	0800afe4 	.word	0x0800afe4
 8009acc:	0800b298 	.word	0x0800b298

08009ad0 <__multadd>:
 8009ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ad4:	4607      	mov	r7, r0
 8009ad6:	460c      	mov	r4, r1
 8009ad8:	461e      	mov	r6, r3
 8009ada:	2000      	movs	r0, #0
 8009adc:	690d      	ldr	r5, [r1, #16]
 8009ade:	f101 0c14 	add.w	ip, r1, #20
 8009ae2:	f8dc 3000 	ldr.w	r3, [ip]
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	b299      	uxth	r1, r3
 8009aea:	fb02 6101 	mla	r1, r2, r1, r6
 8009aee:	0c1e      	lsrs	r6, r3, #16
 8009af0:	0c0b      	lsrs	r3, r1, #16
 8009af2:	fb02 3306 	mla	r3, r2, r6, r3
 8009af6:	b289      	uxth	r1, r1
 8009af8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009afc:	4285      	cmp	r5, r0
 8009afe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009b02:	f84c 1b04 	str.w	r1, [ip], #4
 8009b06:	dcec      	bgt.n	8009ae2 <__multadd+0x12>
 8009b08:	b30e      	cbz	r6, 8009b4e <__multadd+0x7e>
 8009b0a:	68a3      	ldr	r3, [r4, #8]
 8009b0c:	42ab      	cmp	r3, r5
 8009b0e:	dc19      	bgt.n	8009b44 <__multadd+0x74>
 8009b10:	6861      	ldr	r1, [r4, #4]
 8009b12:	4638      	mov	r0, r7
 8009b14:	3101      	adds	r1, #1
 8009b16:	f7ff ff79 	bl	8009a0c <_Balloc>
 8009b1a:	4680      	mov	r8, r0
 8009b1c:	b928      	cbnz	r0, 8009b2a <__multadd+0x5a>
 8009b1e:	4602      	mov	r2, r0
 8009b20:	21b5      	movs	r1, #181	; 0xb5
 8009b22:	4b0c      	ldr	r3, [pc, #48]	; (8009b54 <__multadd+0x84>)
 8009b24:	480c      	ldr	r0, [pc, #48]	; (8009b58 <__multadd+0x88>)
 8009b26:	f7fe faef 	bl	8008108 <__assert_func>
 8009b2a:	6922      	ldr	r2, [r4, #16]
 8009b2c:	f104 010c 	add.w	r1, r4, #12
 8009b30:	3202      	adds	r2, #2
 8009b32:	0092      	lsls	r2, r2, #2
 8009b34:	300c      	adds	r0, #12
 8009b36:	f7fc fc09 	bl	800634c <memcpy>
 8009b3a:	4621      	mov	r1, r4
 8009b3c:	4638      	mov	r0, r7
 8009b3e:	f7ff ffa5 	bl	8009a8c <_Bfree>
 8009b42:	4644      	mov	r4, r8
 8009b44:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009b48:	3501      	adds	r5, #1
 8009b4a:	615e      	str	r6, [r3, #20]
 8009b4c:	6125      	str	r5, [r4, #16]
 8009b4e:	4620      	mov	r0, r4
 8009b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b54:	0800b1a9 	.word	0x0800b1a9
 8009b58:	0800b298 	.word	0x0800b298

08009b5c <__s2b>:
 8009b5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009b60:	4615      	mov	r5, r2
 8009b62:	2209      	movs	r2, #9
 8009b64:	461f      	mov	r7, r3
 8009b66:	3308      	adds	r3, #8
 8009b68:	460c      	mov	r4, r1
 8009b6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8009b6e:	4606      	mov	r6, r0
 8009b70:	2201      	movs	r2, #1
 8009b72:	2100      	movs	r1, #0
 8009b74:	429a      	cmp	r2, r3
 8009b76:	db09      	blt.n	8009b8c <__s2b+0x30>
 8009b78:	4630      	mov	r0, r6
 8009b7a:	f7ff ff47 	bl	8009a0c <_Balloc>
 8009b7e:	b940      	cbnz	r0, 8009b92 <__s2b+0x36>
 8009b80:	4602      	mov	r2, r0
 8009b82:	21ce      	movs	r1, #206	; 0xce
 8009b84:	4b18      	ldr	r3, [pc, #96]	; (8009be8 <__s2b+0x8c>)
 8009b86:	4819      	ldr	r0, [pc, #100]	; (8009bec <__s2b+0x90>)
 8009b88:	f7fe fabe 	bl	8008108 <__assert_func>
 8009b8c:	0052      	lsls	r2, r2, #1
 8009b8e:	3101      	adds	r1, #1
 8009b90:	e7f0      	b.n	8009b74 <__s2b+0x18>
 8009b92:	9b08      	ldr	r3, [sp, #32]
 8009b94:	2d09      	cmp	r5, #9
 8009b96:	6143      	str	r3, [r0, #20]
 8009b98:	f04f 0301 	mov.w	r3, #1
 8009b9c:	6103      	str	r3, [r0, #16]
 8009b9e:	dd16      	ble.n	8009bce <__s2b+0x72>
 8009ba0:	f104 0909 	add.w	r9, r4, #9
 8009ba4:	46c8      	mov	r8, r9
 8009ba6:	442c      	add	r4, r5
 8009ba8:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009bac:	4601      	mov	r1, r0
 8009bae:	220a      	movs	r2, #10
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	3b30      	subs	r3, #48	; 0x30
 8009bb4:	f7ff ff8c 	bl	8009ad0 <__multadd>
 8009bb8:	45a0      	cmp	r8, r4
 8009bba:	d1f5      	bne.n	8009ba8 <__s2b+0x4c>
 8009bbc:	f1a5 0408 	sub.w	r4, r5, #8
 8009bc0:	444c      	add	r4, r9
 8009bc2:	1b2d      	subs	r5, r5, r4
 8009bc4:	1963      	adds	r3, r4, r5
 8009bc6:	42bb      	cmp	r3, r7
 8009bc8:	db04      	blt.n	8009bd4 <__s2b+0x78>
 8009bca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009bce:	2509      	movs	r5, #9
 8009bd0:	340a      	adds	r4, #10
 8009bd2:	e7f6      	b.n	8009bc2 <__s2b+0x66>
 8009bd4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009bd8:	4601      	mov	r1, r0
 8009bda:	220a      	movs	r2, #10
 8009bdc:	4630      	mov	r0, r6
 8009bde:	3b30      	subs	r3, #48	; 0x30
 8009be0:	f7ff ff76 	bl	8009ad0 <__multadd>
 8009be4:	e7ee      	b.n	8009bc4 <__s2b+0x68>
 8009be6:	bf00      	nop
 8009be8:	0800b1a9 	.word	0x0800b1a9
 8009bec:	0800b298 	.word	0x0800b298

08009bf0 <__hi0bits>:
 8009bf0:	0c02      	lsrs	r2, r0, #16
 8009bf2:	0412      	lsls	r2, r2, #16
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	b9ca      	cbnz	r2, 8009c2c <__hi0bits+0x3c>
 8009bf8:	0403      	lsls	r3, r0, #16
 8009bfa:	2010      	movs	r0, #16
 8009bfc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009c00:	bf04      	itt	eq
 8009c02:	021b      	lsleq	r3, r3, #8
 8009c04:	3008      	addeq	r0, #8
 8009c06:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8009c0a:	bf04      	itt	eq
 8009c0c:	011b      	lsleq	r3, r3, #4
 8009c0e:	3004      	addeq	r0, #4
 8009c10:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009c14:	bf04      	itt	eq
 8009c16:	009b      	lsleq	r3, r3, #2
 8009c18:	3002      	addeq	r0, #2
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	db05      	blt.n	8009c2a <__hi0bits+0x3a>
 8009c1e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8009c22:	f100 0001 	add.w	r0, r0, #1
 8009c26:	bf08      	it	eq
 8009c28:	2020      	moveq	r0, #32
 8009c2a:	4770      	bx	lr
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	e7e5      	b.n	8009bfc <__hi0bits+0xc>

08009c30 <__lo0bits>:
 8009c30:	6803      	ldr	r3, [r0, #0]
 8009c32:	4602      	mov	r2, r0
 8009c34:	f013 0007 	ands.w	r0, r3, #7
 8009c38:	d00b      	beq.n	8009c52 <__lo0bits+0x22>
 8009c3a:	07d9      	lsls	r1, r3, #31
 8009c3c:	d421      	bmi.n	8009c82 <__lo0bits+0x52>
 8009c3e:	0798      	lsls	r0, r3, #30
 8009c40:	bf49      	itett	mi
 8009c42:	085b      	lsrmi	r3, r3, #1
 8009c44:	089b      	lsrpl	r3, r3, #2
 8009c46:	2001      	movmi	r0, #1
 8009c48:	6013      	strmi	r3, [r2, #0]
 8009c4a:	bf5c      	itt	pl
 8009c4c:	2002      	movpl	r0, #2
 8009c4e:	6013      	strpl	r3, [r2, #0]
 8009c50:	4770      	bx	lr
 8009c52:	b299      	uxth	r1, r3
 8009c54:	b909      	cbnz	r1, 8009c5a <__lo0bits+0x2a>
 8009c56:	2010      	movs	r0, #16
 8009c58:	0c1b      	lsrs	r3, r3, #16
 8009c5a:	b2d9      	uxtb	r1, r3
 8009c5c:	b909      	cbnz	r1, 8009c62 <__lo0bits+0x32>
 8009c5e:	3008      	adds	r0, #8
 8009c60:	0a1b      	lsrs	r3, r3, #8
 8009c62:	0719      	lsls	r1, r3, #28
 8009c64:	bf04      	itt	eq
 8009c66:	091b      	lsreq	r3, r3, #4
 8009c68:	3004      	addeq	r0, #4
 8009c6a:	0799      	lsls	r1, r3, #30
 8009c6c:	bf04      	itt	eq
 8009c6e:	089b      	lsreq	r3, r3, #2
 8009c70:	3002      	addeq	r0, #2
 8009c72:	07d9      	lsls	r1, r3, #31
 8009c74:	d403      	bmi.n	8009c7e <__lo0bits+0x4e>
 8009c76:	085b      	lsrs	r3, r3, #1
 8009c78:	f100 0001 	add.w	r0, r0, #1
 8009c7c:	d003      	beq.n	8009c86 <__lo0bits+0x56>
 8009c7e:	6013      	str	r3, [r2, #0]
 8009c80:	4770      	bx	lr
 8009c82:	2000      	movs	r0, #0
 8009c84:	4770      	bx	lr
 8009c86:	2020      	movs	r0, #32
 8009c88:	4770      	bx	lr
	...

08009c8c <__i2b>:
 8009c8c:	b510      	push	{r4, lr}
 8009c8e:	460c      	mov	r4, r1
 8009c90:	2101      	movs	r1, #1
 8009c92:	f7ff febb 	bl	8009a0c <_Balloc>
 8009c96:	4602      	mov	r2, r0
 8009c98:	b928      	cbnz	r0, 8009ca6 <__i2b+0x1a>
 8009c9a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009c9e:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <__i2b+0x24>)
 8009ca0:	4804      	ldr	r0, [pc, #16]	; (8009cb4 <__i2b+0x28>)
 8009ca2:	f7fe fa31 	bl	8008108 <__assert_func>
 8009ca6:	2301      	movs	r3, #1
 8009ca8:	6144      	str	r4, [r0, #20]
 8009caa:	6103      	str	r3, [r0, #16]
 8009cac:	bd10      	pop	{r4, pc}
 8009cae:	bf00      	nop
 8009cb0:	0800b1a9 	.word	0x0800b1a9
 8009cb4:	0800b298 	.word	0x0800b298

08009cb8 <__multiply>:
 8009cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cbc:	4691      	mov	r9, r2
 8009cbe:	690a      	ldr	r2, [r1, #16]
 8009cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009cc4:	460c      	mov	r4, r1
 8009cc6:	429a      	cmp	r2, r3
 8009cc8:	bfbe      	ittt	lt
 8009cca:	460b      	movlt	r3, r1
 8009ccc:	464c      	movlt	r4, r9
 8009cce:	4699      	movlt	r9, r3
 8009cd0:	6927      	ldr	r7, [r4, #16]
 8009cd2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009cd6:	68a3      	ldr	r3, [r4, #8]
 8009cd8:	6861      	ldr	r1, [r4, #4]
 8009cda:	eb07 060a 	add.w	r6, r7, sl
 8009cde:	42b3      	cmp	r3, r6
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	bfb8      	it	lt
 8009ce4:	3101      	addlt	r1, #1
 8009ce6:	f7ff fe91 	bl	8009a0c <_Balloc>
 8009cea:	b930      	cbnz	r0, 8009cfa <__multiply+0x42>
 8009cec:	4602      	mov	r2, r0
 8009cee:	f240 115d 	movw	r1, #349	; 0x15d
 8009cf2:	4b43      	ldr	r3, [pc, #268]	; (8009e00 <__multiply+0x148>)
 8009cf4:	4843      	ldr	r0, [pc, #268]	; (8009e04 <__multiply+0x14c>)
 8009cf6:	f7fe fa07 	bl	8008108 <__assert_func>
 8009cfa:	f100 0514 	add.w	r5, r0, #20
 8009cfe:	462b      	mov	r3, r5
 8009d00:	2200      	movs	r2, #0
 8009d02:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009d06:	4543      	cmp	r3, r8
 8009d08:	d321      	bcc.n	8009d4e <__multiply+0x96>
 8009d0a:	f104 0314 	add.w	r3, r4, #20
 8009d0e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009d12:	f109 0314 	add.w	r3, r9, #20
 8009d16:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009d1a:	9202      	str	r2, [sp, #8]
 8009d1c:	1b3a      	subs	r2, r7, r4
 8009d1e:	3a15      	subs	r2, #21
 8009d20:	f022 0203 	bic.w	r2, r2, #3
 8009d24:	3204      	adds	r2, #4
 8009d26:	f104 0115 	add.w	r1, r4, #21
 8009d2a:	428f      	cmp	r7, r1
 8009d2c:	bf38      	it	cc
 8009d2e:	2204      	movcc	r2, #4
 8009d30:	9201      	str	r2, [sp, #4]
 8009d32:	9a02      	ldr	r2, [sp, #8]
 8009d34:	9303      	str	r3, [sp, #12]
 8009d36:	429a      	cmp	r2, r3
 8009d38:	d80c      	bhi.n	8009d54 <__multiply+0x9c>
 8009d3a:	2e00      	cmp	r6, #0
 8009d3c:	dd03      	ble.n	8009d46 <__multiply+0x8e>
 8009d3e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d059      	beq.n	8009dfa <__multiply+0x142>
 8009d46:	6106      	str	r6, [r0, #16]
 8009d48:	b005      	add	sp, #20
 8009d4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d4e:	f843 2b04 	str.w	r2, [r3], #4
 8009d52:	e7d8      	b.n	8009d06 <__multiply+0x4e>
 8009d54:	f8b3 a000 	ldrh.w	sl, [r3]
 8009d58:	f1ba 0f00 	cmp.w	sl, #0
 8009d5c:	d023      	beq.n	8009da6 <__multiply+0xee>
 8009d5e:	46a9      	mov	r9, r5
 8009d60:	f04f 0c00 	mov.w	ip, #0
 8009d64:	f104 0e14 	add.w	lr, r4, #20
 8009d68:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009d6c:	f8d9 1000 	ldr.w	r1, [r9]
 8009d70:	fa1f fb82 	uxth.w	fp, r2
 8009d74:	b289      	uxth	r1, r1
 8009d76:	fb0a 110b 	mla	r1, sl, fp, r1
 8009d7a:	4461      	add	r1, ip
 8009d7c:	f8d9 c000 	ldr.w	ip, [r9]
 8009d80:	0c12      	lsrs	r2, r2, #16
 8009d82:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009d86:	fb0a c202 	mla	r2, sl, r2, ip
 8009d8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009d8e:	b289      	uxth	r1, r1
 8009d90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009d94:	4577      	cmp	r7, lr
 8009d96:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009d9a:	f849 1b04 	str.w	r1, [r9], #4
 8009d9e:	d8e3      	bhi.n	8009d68 <__multiply+0xb0>
 8009da0:	9a01      	ldr	r2, [sp, #4]
 8009da2:	f845 c002 	str.w	ip, [r5, r2]
 8009da6:	9a03      	ldr	r2, [sp, #12]
 8009da8:	3304      	adds	r3, #4
 8009daa:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009dae:	f1b9 0f00 	cmp.w	r9, #0
 8009db2:	d020      	beq.n	8009df6 <__multiply+0x13e>
 8009db4:	46ae      	mov	lr, r5
 8009db6:	f04f 0a00 	mov.w	sl, #0
 8009dba:	6829      	ldr	r1, [r5, #0]
 8009dbc:	f104 0c14 	add.w	ip, r4, #20
 8009dc0:	f8bc b000 	ldrh.w	fp, [ip]
 8009dc4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009dc8:	b289      	uxth	r1, r1
 8009dca:	fb09 220b 	mla	r2, r9, fp, r2
 8009dce:	4492      	add	sl, r2
 8009dd0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009dd4:	f84e 1b04 	str.w	r1, [lr], #4
 8009dd8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009ddc:	f8be 1000 	ldrh.w	r1, [lr]
 8009de0:	0c12      	lsrs	r2, r2, #16
 8009de2:	fb09 1102 	mla	r1, r9, r2, r1
 8009de6:	4567      	cmp	r7, ip
 8009de8:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009dec:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009df0:	d8e6      	bhi.n	8009dc0 <__multiply+0x108>
 8009df2:	9a01      	ldr	r2, [sp, #4]
 8009df4:	50a9      	str	r1, [r5, r2]
 8009df6:	3504      	adds	r5, #4
 8009df8:	e79b      	b.n	8009d32 <__multiply+0x7a>
 8009dfa:	3e01      	subs	r6, #1
 8009dfc:	e79d      	b.n	8009d3a <__multiply+0x82>
 8009dfe:	bf00      	nop
 8009e00:	0800b1a9 	.word	0x0800b1a9
 8009e04:	0800b298 	.word	0x0800b298

08009e08 <__pow5mult>:
 8009e08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e0c:	4615      	mov	r5, r2
 8009e0e:	f012 0203 	ands.w	r2, r2, #3
 8009e12:	4606      	mov	r6, r0
 8009e14:	460f      	mov	r7, r1
 8009e16:	d007      	beq.n	8009e28 <__pow5mult+0x20>
 8009e18:	4c25      	ldr	r4, [pc, #148]	; (8009eb0 <__pow5mult+0xa8>)
 8009e1a:	3a01      	subs	r2, #1
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009e22:	f7ff fe55 	bl	8009ad0 <__multadd>
 8009e26:	4607      	mov	r7, r0
 8009e28:	10ad      	asrs	r5, r5, #2
 8009e2a:	d03d      	beq.n	8009ea8 <__pow5mult+0xa0>
 8009e2c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009e2e:	b97c      	cbnz	r4, 8009e50 <__pow5mult+0x48>
 8009e30:	2010      	movs	r0, #16
 8009e32:	f7fc fa7b 	bl	800632c <malloc>
 8009e36:	4602      	mov	r2, r0
 8009e38:	6270      	str	r0, [r6, #36]	; 0x24
 8009e3a:	b928      	cbnz	r0, 8009e48 <__pow5mult+0x40>
 8009e3c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009e40:	4b1c      	ldr	r3, [pc, #112]	; (8009eb4 <__pow5mult+0xac>)
 8009e42:	481d      	ldr	r0, [pc, #116]	; (8009eb8 <__pow5mult+0xb0>)
 8009e44:	f7fe f960 	bl	8008108 <__assert_func>
 8009e48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009e4c:	6004      	str	r4, [r0, #0]
 8009e4e:	60c4      	str	r4, [r0, #12]
 8009e50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009e54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009e58:	b94c      	cbnz	r4, 8009e6e <__pow5mult+0x66>
 8009e5a:	f240 2171 	movw	r1, #625	; 0x271
 8009e5e:	4630      	mov	r0, r6
 8009e60:	f7ff ff14 	bl	8009c8c <__i2b>
 8009e64:	2300      	movs	r3, #0
 8009e66:	4604      	mov	r4, r0
 8009e68:	f8c8 0008 	str.w	r0, [r8, #8]
 8009e6c:	6003      	str	r3, [r0, #0]
 8009e6e:	f04f 0900 	mov.w	r9, #0
 8009e72:	07eb      	lsls	r3, r5, #31
 8009e74:	d50a      	bpl.n	8009e8c <__pow5mult+0x84>
 8009e76:	4639      	mov	r1, r7
 8009e78:	4622      	mov	r2, r4
 8009e7a:	4630      	mov	r0, r6
 8009e7c:	f7ff ff1c 	bl	8009cb8 <__multiply>
 8009e80:	4680      	mov	r8, r0
 8009e82:	4639      	mov	r1, r7
 8009e84:	4630      	mov	r0, r6
 8009e86:	f7ff fe01 	bl	8009a8c <_Bfree>
 8009e8a:	4647      	mov	r7, r8
 8009e8c:	106d      	asrs	r5, r5, #1
 8009e8e:	d00b      	beq.n	8009ea8 <__pow5mult+0xa0>
 8009e90:	6820      	ldr	r0, [r4, #0]
 8009e92:	b938      	cbnz	r0, 8009ea4 <__pow5mult+0x9c>
 8009e94:	4622      	mov	r2, r4
 8009e96:	4621      	mov	r1, r4
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f7ff ff0d 	bl	8009cb8 <__multiply>
 8009e9e:	6020      	str	r0, [r4, #0]
 8009ea0:	f8c0 9000 	str.w	r9, [r0]
 8009ea4:	4604      	mov	r4, r0
 8009ea6:	e7e4      	b.n	8009e72 <__pow5mult+0x6a>
 8009ea8:	4638      	mov	r0, r7
 8009eaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009eae:	bf00      	nop
 8009eb0:	0800b3e8 	.word	0x0800b3e8
 8009eb4:	0800afe4 	.word	0x0800afe4
 8009eb8:	0800b298 	.word	0x0800b298

08009ebc <__lshift>:
 8009ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ec0:	460c      	mov	r4, r1
 8009ec2:	4607      	mov	r7, r0
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	6923      	ldr	r3, [r4, #16]
 8009ec8:	6849      	ldr	r1, [r1, #4]
 8009eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009ece:	68a3      	ldr	r3, [r4, #8]
 8009ed0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009ed4:	f108 0601 	add.w	r6, r8, #1
 8009ed8:	42b3      	cmp	r3, r6
 8009eda:	db0b      	blt.n	8009ef4 <__lshift+0x38>
 8009edc:	4638      	mov	r0, r7
 8009ede:	f7ff fd95 	bl	8009a0c <_Balloc>
 8009ee2:	4605      	mov	r5, r0
 8009ee4:	b948      	cbnz	r0, 8009efa <__lshift+0x3e>
 8009ee6:	4602      	mov	r2, r0
 8009ee8:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009eec:	4b29      	ldr	r3, [pc, #164]	; (8009f94 <__lshift+0xd8>)
 8009eee:	482a      	ldr	r0, [pc, #168]	; (8009f98 <__lshift+0xdc>)
 8009ef0:	f7fe f90a 	bl	8008108 <__assert_func>
 8009ef4:	3101      	adds	r1, #1
 8009ef6:	005b      	lsls	r3, r3, #1
 8009ef8:	e7ee      	b.n	8009ed8 <__lshift+0x1c>
 8009efa:	2300      	movs	r3, #0
 8009efc:	f100 0114 	add.w	r1, r0, #20
 8009f00:	f100 0210 	add.w	r2, r0, #16
 8009f04:	4618      	mov	r0, r3
 8009f06:	4553      	cmp	r3, sl
 8009f08:	db37      	blt.n	8009f7a <__lshift+0xbe>
 8009f0a:	6920      	ldr	r0, [r4, #16]
 8009f0c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009f10:	f104 0314 	add.w	r3, r4, #20
 8009f14:	f019 091f 	ands.w	r9, r9, #31
 8009f18:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009f1c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009f20:	d02f      	beq.n	8009f82 <__lshift+0xc6>
 8009f22:	468a      	mov	sl, r1
 8009f24:	f04f 0c00 	mov.w	ip, #0
 8009f28:	f1c9 0e20 	rsb	lr, r9, #32
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	fa02 f209 	lsl.w	r2, r2, r9
 8009f32:	ea42 020c 	orr.w	r2, r2, ip
 8009f36:	f84a 2b04 	str.w	r2, [sl], #4
 8009f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f3e:	4298      	cmp	r0, r3
 8009f40:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009f44:	d8f2      	bhi.n	8009f2c <__lshift+0x70>
 8009f46:	1b03      	subs	r3, r0, r4
 8009f48:	3b15      	subs	r3, #21
 8009f4a:	f023 0303 	bic.w	r3, r3, #3
 8009f4e:	3304      	adds	r3, #4
 8009f50:	f104 0215 	add.w	r2, r4, #21
 8009f54:	4290      	cmp	r0, r2
 8009f56:	bf38      	it	cc
 8009f58:	2304      	movcc	r3, #4
 8009f5a:	f841 c003 	str.w	ip, [r1, r3]
 8009f5e:	f1bc 0f00 	cmp.w	ip, #0
 8009f62:	d001      	beq.n	8009f68 <__lshift+0xac>
 8009f64:	f108 0602 	add.w	r6, r8, #2
 8009f68:	3e01      	subs	r6, #1
 8009f6a:	4638      	mov	r0, r7
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	612e      	str	r6, [r5, #16]
 8009f70:	f7ff fd8c 	bl	8009a8c <_Bfree>
 8009f74:	4628      	mov	r0, r5
 8009f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8009f7e:	3301      	adds	r3, #1
 8009f80:	e7c1      	b.n	8009f06 <__lshift+0x4a>
 8009f82:	3904      	subs	r1, #4
 8009f84:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f88:	4298      	cmp	r0, r3
 8009f8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8009f8e:	d8f9      	bhi.n	8009f84 <__lshift+0xc8>
 8009f90:	e7ea      	b.n	8009f68 <__lshift+0xac>
 8009f92:	bf00      	nop
 8009f94:	0800b1a9 	.word	0x0800b1a9
 8009f98:	0800b298 	.word	0x0800b298

08009f9c <__mcmp>:
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	690a      	ldr	r2, [r1, #16]
 8009fa0:	6900      	ldr	r0, [r0, #16]
 8009fa2:	b530      	push	{r4, r5, lr}
 8009fa4:	1a80      	subs	r0, r0, r2
 8009fa6:	d10d      	bne.n	8009fc4 <__mcmp+0x28>
 8009fa8:	3314      	adds	r3, #20
 8009faa:	3114      	adds	r1, #20
 8009fac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009fb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009fb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009fb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009fbc:	4295      	cmp	r5, r2
 8009fbe:	d002      	beq.n	8009fc6 <__mcmp+0x2a>
 8009fc0:	d304      	bcc.n	8009fcc <__mcmp+0x30>
 8009fc2:	2001      	movs	r0, #1
 8009fc4:	bd30      	pop	{r4, r5, pc}
 8009fc6:	42a3      	cmp	r3, r4
 8009fc8:	d3f4      	bcc.n	8009fb4 <__mcmp+0x18>
 8009fca:	e7fb      	b.n	8009fc4 <__mcmp+0x28>
 8009fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8009fd0:	e7f8      	b.n	8009fc4 <__mcmp+0x28>
	...

08009fd4 <__mdiff>:
 8009fd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	460d      	mov	r5, r1
 8009fda:	4607      	mov	r7, r0
 8009fdc:	4611      	mov	r1, r2
 8009fde:	4628      	mov	r0, r5
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	f7ff ffdb 	bl	8009f9c <__mcmp>
 8009fe6:	1e06      	subs	r6, r0, #0
 8009fe8:	d111      	bne.n	800a00e <__mdiff+0x3a>
 8009fea:	4631      	mov	r1, r6
 8009fec:	4638      	mov	r0, r7
 8009fee:	f7ff fd0d 	bl	8009a0c <_Balloc>
 8009ff2:	4602      	mov	r2, r0
 8009ff4:	b928      	cbnz	r0, 800a002 <__mdiff+0x2e>
 8009ff6:	f240 2132 	movw	r1, #562	; 0x232
 8009ffa:	4b3a      	ldr	r3, [pc, #232]	; (800a0e4 <__mdiff+0x110>)
 8009ffc:	483a      	ldr	r0, [pc, #232]	; (800a0e8 <__mdiff+0x114>)
 8009ffe:	f7fe f883 	bl	8008108 <__assert_func>
 800a002:	2301      	movs	r3, #1
 800a004:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800a008:	4610      	mov	r0, r2
 800a00a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a00e:	bfa4      	itt	ge
 800a010:	4623      	movge	r3, r4
 800a012:	462c      	movge	r4, r5
 800a014:	4638      	mov	r0, r7
 800a016:	6861      	ldr	r1, [r4, #4]
 800a018:	bfa6      	itte	ge
 800a01a:	461d      	movge	r5, r3
 800a01c:	2600      	movge	r6, #0
 800a01e:	2601      	movlt	r6, #1
 800a020:	f7ff fcf4 	bl	8009a0c <_Balloc>
 800a024:	4602      	mov	r2, r0
 800a026:	b918      	cbnz	r0, 800a030 <__mdiff+0x5c>
 800a028:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a02c:	4b2d      	ldr	r3, [pc, #180]	; (800a0e4 <__mdiff+0x110>)
 800a02e:	e7e5      	b.n	8009ffc <__mdiff+0x28>
 800a030:	f102 0814 	add.w	r8, r2, #20
 800a034:	46c2      	mov	sl, r8
 800a036:	f04f 0c00 	mov.w	ip, #0
 800a03a:	6927      	ldr	r7, [r4, #16]
 800a03c:	60c6      	str	r6, [r0, #12]
 800a03e:	692e      	ldr	r6, [r5, #16]
 800a040:	f104 0014 	add.w	r0, r4, #20
 800a044:	f105 0914 	add.w	r9, r5, #20
 800a048:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800a04c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a050:	3410      	adds	r4, #16
 800a052:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800a056:	f859 3b04 	ldr.w	r3, [r9], #4
 800a05a:	fa1f f18b 	uxth.w	r1, fp
 800a05e:	448c      	add	ip, r1
 800a060:	b299      	uxth	r1, r3
 800a062:	0c1b      	lsrs	r3, r3, #16
 800a064:	ebac 0101 	sub.w	r1, ip, r1
 800a068:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a06c:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800a070:	b289      	uxth	r1, r1
 800a072:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800a076:	454e      	cmp	r6, r9
 800a078:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800a07c:	f84a 3b04 	str.w	r3, [sl], #4
 800a080:	d8e7      	bhi.n	800a052 <__mdiff+0x7e>
 800a082:	1b73      	subs	r3, r6, r5
 800a084:	3b15      	subs	r3, #21
 800a086:	f023 0303 	bic.w	r3, r3, #3
 800a08a:	3515      	adds	r5, #21
 800a08c:	3304      	adds	r3, #4
 800a08e:	42ae      	cmp	r6, r5
 800a090:	bf38      	it	cc
 800a092:	2304      	movcc	r3, #4
 800a094:	4418      	add	r0, r3
 800a096:	4443      	add	r3, r8
 800a098:	461e      	mov	r6, r3
 800a09a:	4605      	mov	r5, r0
 800a09c:	4575      	cmp	r5, lr
 800a09e:	d30e      	bcc.n	800a0be <__mdiff+0xea>
 800a0a0:	f10e 0103 	add.w	r1, lr, #3
 800a0a4:	1a09      	subs	r1, r1, r0
 800a0a6:	f021 0103 	bic.w	r1, r1, #3
 800a0aa:	3803      	subs	r0, #3
 800a0ac:	4586      	cmp	lr, r0
 800a0ae:	bf38      	it	cc
 800a0b0:	2100      	movcc	r1, #0
 800a0b2:	4419      	add	r1, r3
 800a0b4:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800a0b8:	b18b      	cbz	r3, 800a0de <__mdiff+0x10a>
 800a0ba:	6117      	str	r7, [r2, #16]
 800a0bc:	e7a4      	b.n	800a008 <__mdiff+0x34>
 800a0be:	f855 8b04 	ldr.w	r8, [r5], #4
 800a0c2:	fa1f f188 	uxth.w	r1, r8
 800a0c6:	4461      	add	r1, ip
 800a0c8:	140c      	asrs	r4, r1, #16
 800a0ca:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a0ce:	b289      	uxth	r1, r1
 800a0d0:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a0d4:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800a0d8:	f846 1b04 	str.w	r1, [r6], #4
 800a0dc:	e7de      	b.n	800a09c <__mdiff+0xc8>
 800a0de:	3f01      	subs	r7, #1
 800a0e0:	e7e8      	b.n	800a0b4 <__mdiff+0xe0>
 800a0e2:	bf00      	nop
 800a0e4:	0800b1a9 	.word	0x0800b1a9
 800a0e8:	0800b298 	.word	0x0800b298

0800a0ec <__ulp>:
 800a0ec:	4b11      	ldr	r3, [pc, #68]	; (800a134 <__ulp+0x48>)
 800a0ee:	400b      	ands	r3, r1
 800a0f0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	dd02      	ble.n	800a0fe <__ulp+0x12>
 800a0f8:	2000      	movs	r0, #0
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	4770      	bx	lr
 800a0fe:	425b      	negs	r3, r3
 800a100:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a104:	f04f 0000 	mov.w	r0, #0
 800a108:	f04f 0100 	mov.w	r1, #0
 800a10c:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a110:	da04      	bge.n	800a11c <__ulp+0x30>
 800a112:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a116:	fa43 f102 	asr.w	r1, r3, r2
 800a11a:	4770      	bx	lr
 800a11c:	f1a2 0314 	sub.w	r3, r2, #20
 800a120:	2b1e      	cmp	r3, #30
 800a122:	bfd6      	itet	le
 800a124:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a128:	2301      	movgt	r3, #1
 800a12a:	fa22 f303 	lsrle.w	r3, r2, r3
 800a12e:	4618      	mov	r0, r3
 800a130:	4770      	bx	lr
 800a132:	bf00      	nop
 800a134:	7ff00000 	.word	0x7ff00000

0800a138 <__b2d>:
 800a138:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a13c:	6907      	ldr	r7, [r0, #16]
 800a13e:	f100 0914 	add.w	r9, r0, #20
 800a142:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800a146:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800a14a:	f1a7 0804 	sub.w	r8, r7, #4
 800a14e:	4630      	mov	r0, r6
 800a150:	f7ff fd4e 	bl	8009bf0 <__hi0bits>
 800a154:	f1c0 0320 	rsb	r3, r0, #32
 800a158:	280a      	cmp	r0, #10
 800a15a:	600b      	str	r3, [r1, #0]
 800a15c:	491f      	ldr	r1, [pc, #124]	; (800a1dc <__b2d+0xa4>)
 800a15e:	dc17      	bgt.n	800a190 <__b2d+0x58>
 800a160:	45c1      	cmp	r9, r8
 800a162:	bf28      	it	cs
 800a164:	2200      	movcs	r2, #0
 800a166:	f1c0 0c0b 	rsb	ip, r0, #11
 800a16a:	fa26 f30c 	lsr.w	r3, r6, ip
 800a16e:	bf38      	it	cc
 800a170:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a174:	ea43 0501 	orr.w	r5, r3, r1
 800a178:	f100 0315 	add.w	r3, r0, #21
 800a17c:	fa06 f303 	lsl.w	r3, r6, r3
 800a180:	fa22 f20c 	lsr.w	r2, r2, ip
 800a184:	ea43 0402 	orr.w	r4, r3, r2
 800a188:	4620      	mov	r0, r4
 800a18a:	4629      	mov	r1, r5
 800a18c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a190:	45c1      	cmp	r9, r8
 800a192:	bf2e      	itee	cs
 800a194:	2200      	movcs	r2, #0
 800a196:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800a19a:	f1a7 0808 	subcc.w	r8, r7, #8
 800a19e:	f1b0 030b 	subs.w	r3, r0, #11
 800a1a2:	d016      	beq.n	800a1d2 <__b2d+0x9a>
 800a1a4:	f1c3 0720 	rsb	r7, r3, #32
 800a1a8:	fa22 f107 	lsr.w	r1, r2, r7
 800a1ac:	45c8      	cmp	r8, r9
 800a1ae:	fa06 f603 	lsl.w	r6, r6, r3
 800a1b2:	ea46 0601 	orr.w	r6, r6, r1
 800a1b6:	bf94      	ite	ls
 800a1b8:	2100      	movls	r1, #0
 800a1ba:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800a1be:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800a1c2:	fa02 f003 	lsl.w	r0, r2, r3
 800a1c6:	40f9      	lsrs	r1, r7
 800a1c8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800a1cc:	ea40 0401 	orr.w	r4, r0, r1
 800a1d0:	e7da      	b.n	800a188 <__b2d+0x50>
 800a1d2:	4614      	mov	r4, r2
 800a1d4:	ea46 0501 	orr.w	r5, r6, r1
 800a1d8:	e7d6      	b.n	800a188 <__b2d+0x50>
 800a1da:	bf00      	nop
 800a1dc:	3ff00000 	.word	0x3ff00000

0800a1e0 <__d2b>:
 800a1e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800a1e4:	2101      	movs	r1, #1
 800a1e6:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800a1ea:	4690      	mov	r8, r2
 800a1ec:	461d      	mov	r5, r3
 800a1ee:	f7ff fc0d 	bl	8009a0c <_Balloc>
 800a1f2:	4604      	mov	r4, r0
 800a1f4:	b930      	cbnz	r0, 800a204 <__d2b+0x24>
 800a1f6:	4602      	mov	r2, r0
 800a1f8:	f240 310a 	movw	r1, #778	; 0x30a
 800a1fc:	4b24      	ldr	r3, [pc, #144]	; (800a290 <__d2b+0xb0>)
 800a1fe:	4825      	ldr	r0, [pc, #148]	; (800a294 <__d2b+0xb4>)
 800a200:	f7fd ff82 	bl	8008108 <__assert_func>
 800a204:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800a208:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800a20c:	bb2d      	cbnz	r5, 800a25a <__d2b+0x7a>
 800a20e:	9301      	str	r3, [sp, #4]
 800a210:	f1b8 0300 	subs.w	r3, r8, #0
 800a214:	d026      	beq.n	800a264 <__d2b+0x84>
 800a216:	4668      	mov	r0, sp
 800a218:	9300      	str	r3, [sp, #0]
 800a21a:	f7ff fd09 	bl	8009c30 <__lo0bits>
 800a21e:	9900      	ldr	r1, [sp, #0]
 800a220:	b1f0      	cbz	r0, 800a260 <__d2b+0x80>
 800a222:	9a01      	ldr	r2, [sp, #4]
 800a224:	f1c0 0320 	rsb	r3, r0, #32
 800a228:	fa02 f303 	lsl.w	r3, r2, r3
 800a22c:	430b      	orrs	r3, r1
 800a22e:	40c2      	lsrs	r2, r0
 800a230:	6163      	str	r3, [r4, #20]
 800a232:	9201      	str	r2, [sp, #4]
 800a234:	9b01      	ldr	r3, [sp, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	bf14      	ite	ne
 800a23a:	2102      	movne	r1, #2
 800a23c:	2101      	moveq	r1, #1
 800a23e:	61a3      	str	r3, [r4, #24]
 800a240:	6121      	str	r1, [r4, #16]
 800a242:	b1c5      	cbz	r5, 800a276 <__d2b+0x96>
 800a244:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a248:	4405      	add	r5, r0
 800a24a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a24e:	603d      	str	r5, [r7, #0]
 800a250:	6030      	str	r0, [r6, #0]
 800a252:	4620      	mov	r0, r4
 800a254:	b002      	add	sp, #8
 800a256:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a25a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a25e:	e7d6      	b.n	800a20e <__d2b+0x2e>
 800a260:	6161      	str	r1, [r4, #20]
 800a262:	e7e7      	b.n	800a234 <__d2b+0x54>
 800a264:	a801      	add	r0, sp, #4
 800a266:	f7ff fce3 	bl	8009c30 <__lo0bits>
 800a26a:	2101      	movs	r1, #1
 800a26c:	9b01      	ldr	r3, [sp, #4]
 800a26e:	6121      	str	r1, [r4, #16]
 800a270:	6163      	str	r3, [r4, #20]
 800a272:	3020      	adds	r0, #32
 800a274:	e7e5      	b.n	800a242 <__d2b+0x62>
 800a276:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800a27a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a27e:	6038      	str	r0, [r7, #0]
 800a280:	6918      	ldr	r0, [r3, #16]
 800a282:	f7ff fcb5 	bl	8009bf0 <__hi0bits>
 800a286:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800a28a:	6031      	str	r1, [r6, #0]
 800a28c:	e7e1      	b.n	800a252 <__d2b+0x72>
 800a28e:	bf00      	nop
 800a290:	0800b1a9 	.word	0x0800b1a9
 800a294:	0800b298 	.word	0x0800b298

0800a298 <__ratio>:
 800a298:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29c:	4688      	mov	r8, r1
 800a29e:	4669      	mov	r1, sp
 800a2a0:	4681      	mov	r9, r0
 800a2a2:	f7ff ff49 	bl	800a138 <__b2d>
 800a2a6:	460f      	mov	r7, r1
 800a2a8:	4604      	mov	r4, r0
 800a2aa:	460d      	mov	r5, r1
 800a2ac:	4640      	mov	r0, r8
 800a2ae:	a901      	add	r1, sp, #4
 800a2b0:	f7ff ff42 	bl	800a138 <__b2d>
 800a2b4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a2b8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a2bc:	468b      	mov	fp, r1
 800a2be:	eba3 0c02 	sub.w	ip, r3, r2
 800a2c2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a2c6:	1a9b      	subs	r3, r3, r2
 800a2c8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	bfd5      	itete	le
 800a2d0:	460a      	movle	r2, r1
 800a2d2:	462a      	movgt	r2, r5
 800a2d4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a2d8:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a2dc:	bfd8      	it	le
 800a2de:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a2e2:	465b      	mov	r3, fp
 800a2e4:	4602      	mov	r2, r0
 800a2e6:	4639      	mov	r1, r7
 800a2e8:	4620      	mov	r0, r4
 800a2ea:	f7f6 fa65 	bl	80007b8 <__aeabi_ddiv>
 800a2ee:	b003      	add	sp, #12
 800a2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a2f4 <__copybits>:
 800a2f4:	3901      	subs	r1, #1
 800a2f6:	b570      	push	{r4, r5, r6, lr}
 800a2f8:	1149      	asrs	r1, r1, #5
 800a2fa:	6914      	ldr	r4, [r2, #16]
 800a2fc:	3101      	adds	r1, #1
 800a2fe:	f102 0314 	add.w	r3, r2, #20
 800a302:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a306:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a30a:	1f05      	subs	r5, r0, #4
 800a30c:	42a3      	cmp	r3, r4
 800a30e:	d30c      	bcc.n	800a32a <__copybits+0x36>
 800a310:	1aa3      	subs	r3, r4, r2
 800a312:	3b11      	subs	r3, #17
 800a314:	f023 0303 	bic.w	r3, r3, #3
 800a318:	3211      	adds	r2, #17
 800a31a:	42a2      	cmp	r2, r4
 800a31c:	bf88      	it	hi
 800a31e:	2300      	movhi	r3, #0
 800a320:	4418      	add	r0, r3
 800a322:	2300      	movs	r3, #0
 800a324:	4288      	cmp	r0, r1
 800a326:	d305      	bcc.n	800a334 <__copybits+0x40>
 800a328:	bd70      	pop	{r4, r5, r6, pc}
 800a32a:	f853 6b04 	ldr.w	r6, [r3], #4
 800a32e:	f845 6f04 	str.w	r6, [r5, #4]!
 800a332:	e7eb      	b.n	800a30c <__copybits+0x18>
 800a334:	f840 3b04 	str.w	r3, [r0], #4
 800a338:	e7f4      	b.n	800a324 <__copybits+0x30>

0800a33a <__any_on>:
 800a33a:	f100 0214 	add.w	r2, r0, #20
 800a33e:	6900      	ldr	r0, [r0, #16]
 800a340:	114b      	asrs	r3, r1, #5
 800a342:	4298      	cmp	r0, r3
 800a344:	b510      	push	{r4, lr}
 800a346:	db11      	blt.n	800a36c <__any_on+0x32>
 800a348:	dd0a      	ble.n	800a360 <__any_on+0x26>
 800a34a:	f011 011f 	ands.w	r1, r1, #31
 800a34e:	d007      	beq.n	800a360 <__any_on+0x26>
 800a350:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a354:	fa24 f001 	lsr.w	r0, r4, r1
 800a358:	fa00 f101 	lsl.w	r1, r0, r1
 800a35c:	428c      	cmp	r4, r1
 800a35e:	d10b      	bne.n	800a378 <__any_on+0x3e>
 800a360:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a364:	4293      	cmp	r3, r2
 800a366:	d803      	bhi.n	800a370 <__any_on+0x36>
 800a368:	2000      	movs	r0, #0
 800a36a:	bd10      	pop	{r4, pc}
 800a36c:	4603      	mov	r3, r0
 800a36e:	e7f7      	b.n	800a360 <__any_on+0x26>
 800a370:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a374:	2900      	cmp	r1, #0
 800a376:	d0f5      	beq.n	800a364 <__any_on+0x2a>
 800a378:	2001      	movs	r0, #1
 800a37a:	e7f6      	b.n	800a36a <__any_on+0x30>

0800a37c <_calloc_r>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	fba1 5402 	umull	r5, r4, r1, r2
 800a382:	b934      	cbnz	r4, 800a392 <_calloc_r+0x16>
 800a384:	4629      	mov	r1, r5
 800a386:	f7fc f85f 	bl	8006448 <_malloc_r>
 800a38a:	4606      	mov	r6, r0
 800a38c:	b928      	cbnz	r0, 800a39a <_calloc_r+0x1e>
 800a38e:	4630      	mov	r0, r6
 800a390:	bd70      	pop	{r4, r5, r6, pc}
 800a392:	220c      	movs	r2, #12
 800a394:	2600      	movs	r6, #0
 800a396:	6002      	str	r2, [r0, #0]
 800a398:	e7f9      	b.n	800a38e <_calloc_r+0x12>
 800a39a:	462a      	mov	r2, r5
 800a39c:	4621      	mov	r1, r4
 800a39e:	f7fb ffe3 	bl	8006368 <memset>
 800a3a2:	e7f4      	b.n	800a38e <_calloc_r+0x12>

0800a3a4 <_realloc_r>:
 800a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3a8:	4680      	mov	r8, r0
 800a3aa:	4614      	mov	r4, r2
 800a3ac:	460e      	mov	r6, r1
 800a3ae:	b921      	cbnz	r1, 800a3ba <_realloc_r+0x16>
 800a3b0:	4611      	mov	r1, r2
 800a3b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b6:	f7fc b847 	b.w	8006448 <_malloc_r>
 800a3ba:	b92a      	cbnz	r2, 800a3c8 <_realloc_r+0x24>
 800a3bc:	f7fb ffdc 	bl	8006378 <_free_r>
 800a3c0:	4625      	mov	r5, r4
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3c8:	f000 fb36 	bl	800aa38 <_malloc_usable_size_r>
 800a3cc:	4284      	cmp	r4, r0
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	d802      	bhi.n	800a3d8 <_realloc_r+0x34>
 800a3d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a3d6:	d812      	bhi.n	800a3fe <_realloc_r+0x5a>
 800a3d8:	4621      	mov	r1, r4
 800a3da:	4640      	mov	r0, r8
 800a3dc:	f7fc f834 	bl	8006448 <_malloc_r>
 800a3e0:	4605      	mov	r5, r0
 800a3e2:	2800      	cmp	r0, #0
 800a3e4:	d0ed      	beq.n	800a3c2 <_realloc_r+0x1e>
 800a3e6:	42bc      	cmp	r4, r7
 800a3e8:	4622      	mov	r2, r4
 800a3ea:	4631      	mov	r1, r6
 800a3ec:	bf28      	it	cs
 800a3ee:	463a      	movcs	r2, r7
 800a3f0:	f7fb ffac 	bl	800634c <memcpy>
 800a3f4:	4631      	mov	r1, r6
 800a3f6:	4640      	mov	r0, r8
 800a3f8:	f7fb ffbe 	bl	8006378 <_free_r>
 800a3fc:	e7e1      	b.n	800a3c2 <_realloc_r+0x1e>
 800a3fe:	4635      	mov	r5, r6
 800a400:	e7df      	b.n	800a3c2 <_realloc_r+0x1e>

0800a402 <__ssputs_r>:
 800a402:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a406:	688e      	ldr	r6, [r1, #8]
 800a408:	4682      	mov	sl, r0
 800a40a:	429e      	cmp	r6, r3
 800a40c:	460c      	mov	r4, r1
 800a40e:	4690      	mov	r8, r2
 800a410:	461f      	mov	r7, r3
 800a412:	d838      	bhi.n	800a486 <__ssputs_r+0x84>
 800a414:	898a      	ldrh	r2, [r1, #12]
 800a416:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a41a:	d032      	beq.n	800a482 <__ssputs_r+0x80>
 800a41c:	6825      	ldr	r5, [r4, #0]
 800a41e:	6909      	ldr	r1, [r1, #16]
 800a420:	3301      	adds	r3, #1
 800a422:	eba5 0901 	sub.w	r9, r5, r1
 800a426:	6965      	ldr	r5, [r4, #20]
 800a428:	444b      	add	r3, r9
 800a42a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a42e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a432:	106d      	asrs	r5, r5, #1
 800a434:	429d      	cmp	r5, r3
 800a436:	bf38      	it	cc
 800a438:	461d      	movcc	r5, r3
 800a43a:	0553      	lsls	r3, r2, #21
 800a43c:	d531      	bpl.n	800a4a2 <__ssputs_r+0xa0>
 800a43e:	4629      	mov	r1, r5
 800a440:	f7fc f802 	bl	8006448 <_malloc_r>
 800a444:	4606      	mov	r6, r0
 800a446:	b950      	cbnz	r0, 800a45e <__ssputs_r+0x5c>
 800a448:	230c      	movs	r3, #12
 800a44a:	f04f 30ff 	mov.w	r0, #4294967295
 800a44e:	f8ca 3000 	str.w	r3, [sl]
 800a452:	89a3      	ldrh	r3, [r4, #12]
 800a454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a458:	81a3      	strh	r3, [r4, #12]
 800a45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a45e:	464a      	mov	r2, r9
 800a460:	6921      	ldr	r1, [r4, #16]
 800a462:	f7fb ff73 	bl	800634c <memcpy>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a470:	81a3      	strh	r3, [r4, #12]
 800a472:	6126      	str	r6, [r4, #16]
 800a474:	444e      	add	r6, r9
 800a476:	6026      	str	r6, [r4, #0]
 800a478:	463e      	mov	r6, r7
 800a47a:	6165      	str	r5, [r4, #20]
 800a47c:	eba5 0509 	sub.w	r5, r5, r9
 800a480:	60a5      	str	r5, [r4, #8]
 800a482:	42be      	cmp	r6, r7
 800a484:	d900      	bls.n	800a488 <__ssputs_r+0x86>
 800a486:	463e      	mov	r6, r7
 800a488:	4632      	mov	r2, r6
 800a48a:	4641      	mov	r1, r8
 800a48c:	6820      	ldr	r0, [r4, #0]
 800a48e:	f000 fab9 	bl	800aa04 <memmove>
 800a492:	68a3      	ldr	r3, [r4, #8]
 800a494:	2000      	movs	r0, #0
 800a496:	1b9b      	subs	r3, r3, r6
 800a498:	60a3      	str	r3, [r4, #8]
 800a49a:	6823      	ldr	r3, [r4, #0]
 800a49c:	4433      	add	r3, r6
 800a49e:	6023      	str	r3, [r4, #0]
 800a4a0:	e7db      	b.n	800a45a <__ssputs_r+0x58>
 800a4a2:	462a      	mov	r2, r5
 800a4a4:	f7ff ff7e 	bl	800a3a4 <_realloc_r>
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	2800      	cmp	r0, #0
 800a4ac:	d1e1      	bne.n	800a472 <__ssputs_r+0x70>
 800a4ae:	4650      	mov	r0, sl
 800a4b0:	6921      	ldr	r1, [r4, #16]
 800a4b2:	f7fb ff61 	bl	8006378 <_free_r>
 800a4b6:	e7c7      	b.n	800a448 <__ssputs_r+0x46>

0800a4b8 <_svfiprintf_r>:
 800a4b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4bc:	4698      	mov	r8, r3
 800a4be:	898b      	ldrh	r3, [r1, #12]
 800a4c0:	4607      	mov	r7, r0
 800a4c2:	061b      	lsls	r3, r3, #24
 800a4c4:	460d      	mov	r5, r1
 800a4c6:	4614      	mov	r4, r2
 800a4c8:	b09d      	sub	sp, #116	; 0x74
 800a4ca:	d50e      	bpl.n	800a4ea <_svfiprintf_r+0x32>
 800a4cc:	690b      	ldr	r3, [r1, #16]
 800a4ce:	b963      	cbnz	r3, 800a4ea <_svfiprintf_r+0x32>
 800a4d0:	2140      	movs	r1, #64	; 0x40
 800a4d2:	f7fb ffb9 	bl	8006448 <_malloc_r>
 800a4d6:	6028      	str	r0, [r5, #0]
 800a4d8:	6128      	str	r0, [r5, #16]
 800a4da:	b920      	cbnz	r0, 800a4e6 <_svfiprintf_r+0x2e>
 800a4dc:	230c      	movs	r3, #12
 800a4de:	603b      	str	r3, [r7, #0]
 800a4e0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4e4:	e0d1      	b.n	800a68a <_svfiprintf_r+0x1d2>
 800a4e6:	2340      	movs	r3, #64	; 0x40
 800a4e8:	616b      	str	r3, [r5, #20]
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	9309      	str	r3, [sp, #36]	; 0x24
 800a4ee:	2320      	movs	r3, #32
 800a4f0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a4f4:	2330      	movs	r3, #48	; 0x30
 800a4f6:	f04f 0901 	mov.w	r9, #1
 800a4fa:	f8cd 800c 	str.w	r8, [sp, #12]
 800a4fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800a6a4 <_svfiprintf_r+0x1ec>
 800a502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a506:	4623      	mov	r3, r4
 800a508:	469a      	mov	sl, r3
 800a50a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a50e:	b10a      	cbz	r2, 800a514 <_svfiprintf_r+0x5c>
 800a510:	2a25      	cmp	r2, #37	; 0x25
 800a512:	d1f9      	bne.n	800a508 <_svfiprintf_r+0x50>
 800a514:	ebba 0b04 	subs.w	fp, sl, r4
 800a518:	d00b      	beq.n	800a532 <_svfiprintf_r+0x7a>
 800a51a:	465b      	mov	r3, fp
 800a51c:	4622      	mov	r2, r4
 800a51e:	4629      	mov	r1, r5
 800a520:	4638      	mov	r0, r7
 800a522:	f7ff ff6e 	bl	800a402 <__ssputs_r>
 800a526:	3001      	adds	r0, #1
 800a528:	f000 80aa 	beq.w	800a680 <_svfiprintf_r+0x1c8>
 800a52c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a52e:	445a      	add	r2, fp
 800a530:	9209      	str	r2, [sp, #36]	; 0x24
 800a532:	f89a 3000 	ldrb.w	r3, [sl]
 800a536:	2b00      	cmp	r3, #0
 800a538:	f000 80a2 	beq.w	800a680 <_svfiprintf_r+0x1c8>
 800a53c:	2300      	movs	r3, #0
 800a53e:	f04f 32ff 	mov.w	r2, #4294967295
 800a542:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a546:	f10a 0a01 	add.w	sl, sl, #1
 800a54a:	9304      	str	r3, [sp, #16]
 800a54c:	9307      	str	r3, [sp, #28]
 800a54e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a552:	931a      	str	r3, [sp, #104]	; 0x68
 800a554:	4654      	mov	r4, sl
 800a556:	2205      	movs	r2, #5
 800a558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a55c:	4851      	ldr	r0, [pc, #324]	; (800a6a4 <_svfiprintf_r+0x1ec>)
 800a55e:	f7ff fa3b 	bl	80099d8 <memchr>
 800a562:	9a04      	ldr	r2, [sp, #16]
 800a564:	b9d8      	cbnz	r0, 800a59e <_svfiprintf_r+0xe6>
 800a566:	06d0      	lsls	r0, r2, #27
 800a568:	bf44      	itt	mi
 800a56a:	2320      	movmi	r3, #32
 800a56c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a570:	0711      	lsls	r1, r2, #28
 800a572:	bf44      	itt	mi
 800a574:	232b      	movmi	r3, #43	; 0x2b
 800a576:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a57a:	f89a 3000 	ldrb.w	r3, [sl]
 800a57e:	2b2a      	cmp	r3, #42	; 0x2a
 800a580:	d015      	beq.n	800a5ae <_svfiprintf_r+0xf6>
 800a582:	4654      	mov	r4, sl
 800a584:	2000      	movs	r0, #0
 800a586:	f04f 0c0a 	mov.w	ip, #10
 800a58a:	9a07      	ldr	r2, [sp, #28]
 800a58c:	4621      	mov	r1, r4
 800a58e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a592:	3b30      	subs	r3, #48	; 0x30
 800a594:	2b09      	cmp	r3, #9
 800a596:	d94e      	bls.n	800a636 <_svfiprintf_r+0x17e>
 800a598:	b1b0      	cbz	r0, 800a5c8 <_svfiprintf_r+0x110>
 800a59a:	9207      	str	r2, [sp, #28]
 800a59c:	e014      	b.n	800a5c8 <_svfiprintf_r+0x110>
 800a59e:	eba0 0308 	sub.w	r3, r0, r8
 800a5a2:	fa09 f303 	lsl.w	r3, r9, r3
 800a5a6:	4313      	orrs	r3, r2
 800a5a8:	46a2      	mov	sl, r4
 800a5aa:	9304      	str	r3, [sp, #16]
 800a5ac:	e7d2      	b.n	800a554 <_svfiprintf_r+0x9c>
 800a5ae:	9b03      	ldr	r3, [sp, #12]
 800a5b0:	1d19      	adds	r1, r3, #4
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	9103      	str	r1, [sp, #12]
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	bfbb      	ittet	lt
 800a5ba:	425b      	neglt	r3, r3
 800a5bc:	f042 0202 	orrlt.w	r2, r2, #2
 800a5c0:	9307      	strge	r3, [sp, #28]
 800a5c2:	9307      	strlt	r3, [sp, #28]
 800a5c4:	bfb8      	it	lt
 800a5c6:	9204      	strlt	r2, [sp, #16]
 800a5c8:	7823      	ldrb	r3, [r4, #0]
 800a5ca:	2b2e      	cmp	r3, #46	; 0x2e
 800a5cc:	d10c      	bne.n	800a5e8 <_svfiprintf_r+0x130>
 800a5ce:	7863      	ldrb	r3, [r4, #1]
 800a5d0:	2b2a      	cmp	r3, #42	; 0x2a
 800a5d2:	d135      	bne.n	800a640 <_svfiprintf_r+0x188>
 800a5d4:	9b03      	ldr	r3, [sp, #12]
 800a5d6:	3402      	adds	r4, #2
 800a5d8:	1d1a      	adds	r2, r3, #4
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	9203      	str	r2, [sp, #12]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	bfb8      	it	lt
 800a5e2:	f04f 33ff 	movlt.w	r3, #4294967295
 800a5e6:	9305      	str	r3, [sp, #20]
 800a5e8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800a6a8 <_svfiprintf_r+0x1f0>
 800a5ec:	2203      	movs	r2, #3
 800a5ee:	4650      	mov	r0, sl
 800a5f0:	7821      	ldrb	r1, [r4, #0]
 800a5f2:	f7ff f9f1 	bl	80099d8 <memchr>
 800a5f6:	b140      	cbz	r0, 800a60a <_svfiprintf_r+0x152>
 800a5f8:	2340      	movs	r3, #64	; 0x40
 800a5fa:	eba0 000a 	sub.w	r0, r0, sl
 800a5fe:	fa03 f000 	lsl.w	r0, r3, r0
 800a602:	9b04      	ldr	r3, [sp, #16]
 800a604:	3401      	adds	r4, #1
 800a606:	4303      	orrs	r3, r0
 800a608:	9304      	str	r3, [sp, #16]
 800a60a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a60e:	2206      	movs	r2, #6
 800a610:	4826      	ldr	r0, [pc, #152]	; (800a6ac <_svfiprintf_r+0x1f4>)
 800a612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a616:	f7ff f9df 	bl	80099d8 <memchr>
 800a61a:	2800      	cmp	r0, #0
 800a61c:	d038      	beq.n	800a690 <_svfiprintf_r+0x1d8>
 800a61e:	4b24      	ldr	r3, [pc, #144]	; (800a6b0 <_svfiprintf_r+0x1f8>)
 800a620:	bb1b      	cbnz	r3, 800a66a <_svfiprintf_r+0x1b2>
 800a622:	9b03      	ldr	r3, [sp, #12]
 800a624:	3307      	adds	r3, #7
 800a626:	f023 0307 	bic.w	r3, r3, #7
 800a62a:	3308      	adds	r3, #8
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a630:	4433      	add	r3, r6
 800a632:	9309      	str	r3, [sp, #36]	; 0x24
 800a634:	e767      	b.n	800a506 <_svfiprintf_r+0x4e>
 800a636:	460c      	mov	r4, r1
 800a638:	2001      	movs	r0, #1
 800a63a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a63e:	e7a5      	b.n	800a58c <_svfiprintf_r+0xd4>
 800a640:	2300      	movs	r3, #0
 800a642:	f04f 0c0a 	mov.w	ip, #10
 800a646:	4619      	mov	r1, r3
 800a648:	3401      	adds	r4, #1
 800a64a:	9305      	str	r3, [sp, #20]
 800a64c:	4620      	mov	r0, r4
 800a64e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a652:	3a30      	subs	r2, #48	; 0x30
 800a654:	2a09      	cmp	r2, #9
 800a656:	d903      	bls.n	800a660 <_svfiprintf_r+0x1a8>
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d0c5      	beq.n	800a5e8 <_svfiprintf_r+0x130>
 800a65c:	9105      	str	r1, [sp, #20]
 800a65e:	e7c3      	b.n	800a5e8 <_svfiprintf_r+0x130>
 800a660:	4604      	mov	r4, r0
 800a662:	2301      	movs	r3, #1
 800a664:	fb0c 2101 	mla	r1, ip, r1, r2
 800a668:	e7f0      	b.n	800a64c <_svfiprintf_r+0x194>
 800a66a:	ab03      	add	r3, sp, #12
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	462a      	mov	r2, r5
 800a670:	4638      	mov	r0, r7
 800a672:	4b10      	ldr	r3, [pc, #64]	; (800a6b4 <_svfiprintf_r+0x1fc>)
 800a674:	a904      	add	r1, sp, #16
 800a676:	f7fb fff9 	bl	800666c <_printf_float>
 800a67a:	1c42      	adds	r2, r0, #1
 800a67c:	4606      	mov	r6, r0
 800a67e:	d1d6      	bne.n	800a62e <_svfiprintf_r+0x176>
 800a680:	89ab      	ldrh	r3, [r5, #12]
 800a682:	065b      	lsls	r3, r3, #25
 800a684:	f53f af2c 	bmi.w	800a4e0 <_svfiprintf_r+0x28>
 800a688:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a68a:	b01d      	add	sp, #116	; 0x74
 800a68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a690:	ab03      	add	r3, sp, #12
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	462a      	mov	r2, r5
 800a696:	4638      	mov	r0, r7
 800a698:	4b06      	ldr	r3, [pc, #24]	; (800a6b4 <_svfiprintf_r+0x1fc>)
 800a69a:	a904      	add	r1, sp, #16
 800a69c:	f7fc fa82 	bl	8006ba4 <_printf_i>
 800a6a0:	e7eb      	b.n	800a67a <_svfiprintf_r+0x1c2>
 800a6a2:	bf00      	nop
 800a6a4:	0800b3f4 	.word	0x0800b3f4
 800a6a8:	0800b3fa 	.word	0x0800b3fa
 800a6ac:	0800b3fe 	.word	0x0800b3fe
 800a6b0:	0800666d 	.word	0x0800666d
 800a6b4:	0800a403 	.word	0x0800a403

0800a6b8 <__sfputc_r>:
 800a6b8:	6893      	ldr	r3, [r2, #8]
 800a6ba:	b410      	push	{r4}
 800a6bc:	3b01      	subs	r3, #1
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	6093      	str	r3, [r2, #8]
 800a6c2:	da07      	bge.n	800a6d4 <__sfputc_r+0x1c>
 800a6c4:	6994      	ldr	r4, [r2, #24]
 800a6c6:	42a3      	cmp	r3, r4
 800a6c8:	db01      	blt.n	800a6ce <__sfputc_r+0x16>
 800a6ca:	290a      	cmp	r1, #10
 800a6cc:	d102      	bne.n	800a6d4 <__sfputc_r+0x1c>
 800a6ce:	bc10      	pop	{r4}
 800a6d0:	f7fd bc48 	b.w	8007f64 <__swbuf_r>
 800a6d4:	6813      	ldr	r3, [r2, #0]
 800a6d6:	1c58      	adds	r0, r3, #1
 800a6d8:	6010      	str	r0, [r2, #0]
 800a6da:	7019      	strb	r1, [r3, #0]
 800a6dc:	4608      	mov	r0, r1
 800a6de:	bc10      	pop	{r4}
 800a6e0:	4770      	bx	lr

0800a6e2 <__sfputs_r>:
 800a6e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	460f      	mov	r7, r1
 800a6e8:	4614      	mov	r4, r2
 800a6ea:	18d5      	adds	r5, r2, r3
 800a6ec:	42ac      	cmp	r4, r5
 800a6ee:	d101      	bne.n	800a6f4 <__sfputs_r+0x12>
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	e007      	b.n	800a704 <__sfputs_r+0x22>
 800a6f4:	463a      	mov	r2, r7
 800a6f6:	4630      	mov	r0, r6
 800a6f8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6fc:	f7ff ffdc 	bl	800a6b8 <__sfputc_r>
 800a700:	1c43      	adds	r3, r0, #1
 800a702:	d1f3      	bne.n	800a6ec <__sfputs_r+0xa>
 800a704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a708 <_vfiprintf_r>:
 800a708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a70c:	460d      	mov	r5, r1
 800a70e:	4614      	mov	r4, r2
 800a710:	4698      	mov	r8, r3
 800a712:	4606      	mov	r6, r0
 800a714:	b09d      	sub	sp, #116	; 0x74
 800a716:	b118      	cbz	r0, 800a720 <_vfiprintf_r+0x18>
 800a718:	6983      	ldr	r3, [r0, #24]
 800a71a:	b90b      	cbnz	r3, 800a720 <_vfiprintf_r+0x18>
 800a71c:	f7fe fcb4 	bl	8009088 <__sinit>
 800a720:	4b89      	ldr	r3, [pc, #548]	; (800a948 <_vfiprintf_r+0x240>)
 800a722:	429d      	cmp	r5, r3
 800a724:	d11b      	bne.n	800a75e <_vfiprintf_r+0x56>
 800a726:	6875      	ldr	r5, [r6, #4]
 800a728:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a72a:	07d9      	lsls	r1, r3, #31
 800a72c:	d405      	bmi.n	800a73a <_vfiprintf_r+0x32>
 800a72e:	89ab      	ldrh	r3, [r5, #12]
 800a730:	059a      	lsls	r2, r3, #22
 800a732:	d402      	bmi.n	800a73a <_vfiprintf_r+0x32>
 800a734:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a736:	f7ff f8c2 	bl	80098be <__retarget_lock_acquire_recursive>
 800a73a:	89ab      	ldrh	r3, [r5, #12]
 800a73c:	071b      	lsls	r3, r3, #28
 800a73e:	d501      	bpl.n	800a744 <_vfiprintf_r+0x3c>
 800a740:	692b      	ldr	r3, [r5, #16]
 800a742:	b9eb      	cbnz	r3, 800a780 <_vfiprintf_r+0x78>
 800a744:	4629      	mov	r1, r5
 800a746:	4630      	mov	r0, r6
 800a748:	f7fd fc70 	bl	800802c <__swsetup_r>
 800a74c:	b1c0      	cbz	r0, 800a780 <_vfiprintf_r+0x78>
 800a74e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a750:	07dc      	lsls	r4, r3, #31
 800a752:	d50e      	bpl.n	800a772 <_vfiprintf_r+0x6a>
 800a754:	f04f 30ff 	mov.w	r0, #4294967295
 800a758:	b01d      	add	sp, #116	; 0x74
 800a75a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75e:	4b7b      	ldr	r3, [pc, #492]	; (800a94c <_vfiprintf_r+0x244>)
 800a760:	429d      	cmp	r5, r3
 800a762:	d101      	bne.n	800a768 <_vfiprintf_r+0x60>
 800a764:	68b5      	ldr	r5, [r6, #8]
 800a766:	e7df      	b.n	800a728 <_vfiprintf_r+0x20>
 800a768:	4b79      	ldr	r3, [pc, #484]	; (800a950 <_vfiprintf_r+0x248>)
 800a76a:	429d      	cmp	r5, r3
 800a76c:	bf08      	it	eq
 800a76e:	68f5      	ldreq	r5, [r6, #12]
 800a770:	e7da      	b.n	800a728 <_vfiprintf_r+0x20>
 800a772:	89ab      	ldrh	r3, [r5, #12]
 800a774:	0598      	lsls	r0, r3, #22
 800a776:	d4ed      	bmi.n	800a754 <_vfiprintf_r+0x4c>
 800a778:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a77a:	f7ff f8a1 	bl	80098c0 <__retarget_lock_release_recursive>
 800a77e:	e7e9      	b.n	800a754 <_vfiprintf_r+0x4c>
 800a780:	2300      	movs	r3, #0
 800a782:	9309      	str	r3, [sp, #36]	; 0x24
 800a784:	2320      	movs	r3, #32
 800a786:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a78a:	2330      	movs	r3, #48	; 0x30
 800a78c:	f04f 0901 	mov.w	r9, #1
 800a790:	f8cd 800c 	str.w	r8, [sp, #12]
 800a794:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a954 <_vfiprintf_r+0x24c>
 800a798:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a79c:	4623      	mov	r3, r4
 800a79e:	469a      	mov	sl, r3
 800a7a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7a4:	b10a      	cbz	r2, 800a7aa <_vfiprintf_r+0xa2>
 800a7a6:	2a25      	cmp	r2, #37	; 0x25
 800a7a8:	d1f9      	bne.n	800a79e <_vfiprintf_r+0x96>
 800a7aa:	ebba 0b04 	subs.w	fp, sl, r4
 800a7ae:	d00b      	beq.n	800a7c8 <_vfiprintf_r+0xc0>
 800a7b0:	465b      	mov	r3, fp
 800a7b2:	4622      	mov	r2, r4
 800a7b4:	4629      	mov	r1, r5
 800a7b6:	4630      	mov	r0, r6
 800a7b8:	f7ff ff93 	bl	800a6e2 <__sfputs_r>
 800a7bc:	3001      	adds	r0, #1
 800a7be:	f000 80aa 	beq.w	800a916 <_vfiprintf_r+0x20e>
 800a7c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a7c4:	445a      	add	r2, fp
 800a7c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a7c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 80a2 	beq.w	800a916 <_vfiprintf_r+0x20e>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a7d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7dc:	f10a 0a01 	add.w	sl, sl, #1
 800a7e0:	9304      	str	r3, [sp, #16]
 800a7e2:	9307      	str	r3, [sp, #28]
 800a7e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a7e8:	931a      	str	r3, [sp, #104]	; 0x68
 800a7ea:	4654      	mov	r4, sl
 800a7ec:	2205      	movs	r2, #5
 800a7ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7f2:	4858      	ldr	r0, [pc, #352]	; (800a954 <_vfiprintf_r+0x24c>)
 800a7f4:	f7ff f8f0 	bl	80099d8 <memchr>
 800a7f8:	9a04      	ldr	r2, [sp, #16]
 800a7fa:	b9d8      	cbnz	r0, 800a834 <_vfiprintf_r+0x12c>
 800a7fc:	06d1      	lsls	r1, r2, #27
 800a7fe:	bf44      	itt	mi
 800a800:	2320      	movmi	r3, #32
 800a802:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a806:	0713      	lsls	r3, r2, #28
 800a808:	bf44      	itt	mi
 800a80a:	232b      	movmi	r3, #43	; 0x2b
 800a80c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a810:	f89a 3000 	ldrb.w	r3, [sl]
 800a814:	2b2a      	cmp	r3, #42	; 0x2a
 800a816:	d015      	beq.n	800a844 <_vfiprintf_r+0x13c>
 800a818:	4654      	mov	r4, sl
 800a81a:	2000      	movs	r0, #0
 800a81c:	f04f 0c0a 	mov.w	ip, #10
 800a820:	9a07      	ldr	r2, [sp, #28]
 800a822:	4621      	mov	r1, r4
 800a824:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a828:	3b30      	subs	r3, #48	; 0x30
 800a82a:	2b09      	cmp	r3, #9
 800a82c:	d94e      	bls.n	800a8cc <_vfiprintf_r+0x1c4>
 800a82e:	b1b0      	cbz	r0, 800a85e <_vfiprintf_r+0x156>
 800a830:	9207      	str	r2, [sp, #28]
 800a832:	e014      	b.n	800a85e <_vfiprintf_r+0x156>
 800a834:	eba0 0308 	sub.w	r3, r0, r8
 800a838:	fa09 f303 	lsl.w	r3, r9, r3
 800a83c:	4313      	orrs	r3, r2
 800a83e:	46a2      	mov	sl, r4
 800a840:	9304      	str	r3, [sp, #16]
 800a842:	e7d2      	b.n	800a7ea <_vfiprintf_r+0xe2>
 800a844:	9b03      	ldr	r3, [sp, #12]
 800a846:	1d19      	adds	r1, r3, #4
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	9103      	str	r1, [sp, #12]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	bfbb      	ittet	lt
 800a850:	425b      	neglt	r3, r3
 800a852:	f042 0202 	orrlt.w	r2, r2, #2
 800a856:	9307      	strge	r3, [sp, #28]
 800a858:	9307      	strlt	r3, [sp, #28]
 800a85a:	bfb8      	it	lt
 800a85c:	9204      	strlt	r2, [sp, #16]
 800a85e:	7823      	ldrb	r3, [r4, #0]
 800a860:	2b2e      	cmp	r3, #46	; 0x2e
 800a862:	d10c      	bne.n	800a87e <_vfiprintf_r+0x176>
 800a864:	7863      	ldrb	r3, [r4, #1]
 800a866:	2b2a      	cmp	r3, #42	; 0x2a
 800a868:	d135      	bne.n	800a8d6 <_vfiprintf_r+0x1ce>
 800a86a:	9b03      	ldr	r3, [sp, #12]
 800a86c:	3402      	adds	r4, #2
 800a86e:	1d1a      	adds	r2, r3, #4
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	9203      	str	r2, [sp, #12]
 800a874:	2b00      	cmp	r3, #0
 800a876:	bfb8      	it	lt
 800a878:	f04f 33ff 	movlt.w	r3, #4294967295
 800a87c:	9305      	str	r3, [sp, #20]
 800a87e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a958 <_vfiprintf_r+0x250>
 800a882:	2203      	movs	r2, #3
 800a884:	4650      	mov	r0, sl
 800a886:	7821      	ldrb	r1, [r4, #0]
 800a888:	f7ff f8a6 	bl	80099d8 <memchr>
 800a88c:	b140      	cbz	r0, 800a8a0 <_vfiprintf_r+0x198>
 800a88e:	2340      	movs	r3, #64	; 0x40
 800a890:	eba0 000a 	sub.w	r0, r0, sl
 800a894:	fa03 f000 	lsl.w	r0, r3, r0
 800a898:	9b04      	ldr	r3, [sp, #16]
 800a89a:	3401      	adds	r4, #1
 800a89c:	4303      	orrs	r3, r0
 800a89e:	9304      	str	r3, [sp, #16]
 800a8a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8a4:	2206      	movs	r2, #6
 800a8a6:	482d      	ldr	r0, [pc, #180]	; (800a95c <_vfiprintf_r+0x254>)
 800a8a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a8ac:	f7ff f894 	bl	80099d8 <memchr>
 800a8b0:	2800      	cmp	r0, #0
 800a8b2:	d03f      	beq.n	800a934 <_vfiprintf_r+0x22c>
 800a8b4:	4b2a      	ldr	r3, [pc, #168]	; (800a960 <_vfiprintf_r+0x258>)
 800a8b6:	bb1b      	cbnz	r3, 800a900 <_vfiprintf_r+0x1f8>
 800a8b8:	9b03      	ldr	r3, [sp, #12]
 800a8ba:	3307      	adds	r3, #7
 800a8bc:	f023 0307 	bic.w	r3, r3, #7
 800a8c0:	3308      	adds	r3, #8
 800a8c2:	9303      	str	r3, [sp, #12]
 800a8c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8c6:	443b      	add	r3, r7
 800a8c8:	9309      	str	r3, [sp, #36]	; 0x24
 800a8ca:	e767      	b.n	800a79c <_vfiprintf_r+0x94>
 800a8cc:	460c      	mov	r4, r1
 800a8ce:	2001      	movs	r0, #1
 800a8d0:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8d4:	e7a5      	b.n	800a822 <_vfiprintf_r+0x11a>
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	f04f 0c0a 	mov.w	ip, #10
 800a8dc:	4619      	mov	r1, r3
 800a8de:	3401      	adds	r4, #1
 800a8e0:	9305      	str	r3, [sp, #20]
 800a8e2:	4620      	mov	r0, r4
 800a8e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a8e8:	3a30      	subs	r2, #48	; 0x30
 800a8ea:	2a09      	cmp	r2, #9
 800a8ec:	d903      	bls.n	800a8f6 <_vfiprintf_r+0x1ee>
 800a8ee:	2b00      	cmp	r3, #0
 800a8f0:	d0c5      	beq.n	800a87e <_vfiprintf_r+0x176>
 800a8f2:	9105      	str	r1, [sp, #20]
 800a8f4:	e7c3      	b.n	800a87e <_vfiprintf_r+0x176>
 800a8f6:	4604      	mov	r4, r0
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	fb0c 2101 	mla	r1, ip, r1, r2
 800a8fe:	e7f0      	b.n	800a8e2 <_vfiprintf_r+0x1da>
 800a900:	ab03      	add	r3, sp, #12
 800a902:	9300      	str	r3, [sp, #0]
 800a904:	462a      	mov	r2, r5
 800a906:	4630      	mov	r0, r6
 800a908:	4b16      	ldr	r3, [pc, #88]	; (800a964 <_vfiprintf_r+0x25c>)
 800a90a:	a904      	add	r1, sp, #16
 800a90c:	f7fb feae 	bl	800666c <_printf_float>
 800a910:	4607      	mov	r7, r0
 800a912:	1c78      	adds	r0, r7, #1
 800a914:	d1d6      	bne.n	800a8c4 <_vfiprintf_r+0x1bc>
 800a916:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a918:	07d9      	lsls	r1, r3, #31
 800a91a:	d405      	bmi.n	800a928 <_vfiprintf_r+0x220>
 800a91c:	89ab      	ldrh	r3, [r5, #12]
 800a91e:	059a      	lsls	r2, r3, #22
 800a920:	d402      	bmi.n	800a928 <_vfiprintf_r+0x220>
 800a922:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a924:	f7fe ffcc 	bl	80098c0 <__retarget_lock_release_recursive>
 800a928:	89ab      	ldrh	r3, [r5, #12]
 800a92a:	065b      	lsls	r3, r3, #25
 800a92c:	f53f af12 	bmi.w	800a754 <_vfiprintf_r+0x4c>
 800a930:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a932:	e711      	b.n	800a758 <_vfiprintf_r+0x50>
 800a934:	ab03      	add	r3, sp, #12
 800a936:	9300      	str	r3, [sp, #0]
 800a938:	462a      	mov	r2, r5
 800a93a:	4630      	mov	r0, r6
 800a93c:	4b09      	ldr	r3, [pc, #36]	; (800a964 <_vfiprintf_r+0x25c>)
 800a93e:	a904      	add	r1, sp, #16
 800a940:	f7fc f930 	bl	8006ba4 <_printf_i>
 800a944:	e7e4      	b.n	800a910 <_vfiprintf_r+0x208>
 800a946:	bf00      	nop
 800a948:	0800b1dc 	.word	0x0800b1dc
 800a94c:	0800b1fc 	.word	0x0800b1fc
 800a950:	0800b1bc 	.word	0x0800b1bc
 800a954:	0800b3f4 	.word	0x0800b3f4
 800a958:	0800b3fa 	.word	0x0800b3fa
 800a95c:	0800b3fe 	.word	0x0800b3fe
 800a960:	0800666d 	.word	0x0800666d
 800a964:	0800a6e3 	.word	0x0800a6e3

0800a968 <_read_r>:
 800a968:	b538      	push	{r3, r4, r5, lr}
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	2200      	movs	r2, #0
 800a972:	4d05      	ldr	r5, [pc, #20]	; (800a988 <_read_r+0x20>)
 800a974:	602a      	str	r2, [r5, #0]
 800a976:	461a      	mov	r2, r3
 800a978:	f7f8 ff51 	bl	800381e <_read>
 800a97c:	1c43      	adds	r3, r0, #1
 800a97e:	d102      	bne.n	800a986 <_read_r+0x1e>
 800a980:	682b      	ldr	r3, [r5, #0]
 800a982:	b103      	cbz	r3, 800a986 <_read_r+0x1e>
 800a984:	6023      	str	r3, [r4, #0]
 800a986:	bd38      	pop	{r3, r4, r5, pc}
 800a988:	20000818 	.word	0x20000818

0800a98c <nan>:
 800a98c:	2000      	movs	r0, #0
 800a98e:	4901      	ldr	r1, [pc, #4]	; (800a994 <nan+0x8>)
 800a990:	4770      	bx	lr
 800a992:	bf00      	nop
 800a994:	7ff80000 	.word	0x7ff80000

0800a998 <__ascii_wctomb>:
 800a998:	4603      	mov	r3, r0
 800a99a:	4608      	mov	r0, r1
 800a99c:	b141      	cbz	r1, 800a9b0 <__ascii_wctomb+0x18>
 800a99e:	2aff      	cmp	r2, #255	; 0xff
 800a9a0:	d904      	bls.n	800a9ac <__ascii_wctomb+0x14>
 800a9a2:	228a      	movs	r2, #138	; 0x8a
 800a9a4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a8:	601a      	str	r2, [r3, #0]
 800a9aa:	4770      	bx	lr
 800a9ac:	2001      	movs	r0, #1
 800a9ae:	700a      	strb	r2, [r1, #0]
 800a9b0:	4770      	bx	lr

0800a9b2 <abort>:
 800a9b2:	2006      	movs	r0, #6
 800a9b4:	b508      	push	{r3, lr}
 800a9b6:	f000 f86f 	bl	800aa98 <raise>
 800a9ba:	2001      	movs	r0, #1
 800a9bc:	f7f8 ff25 	bl	800380a <_exit>

0800a9c0 <_fstat_r>:
 800a9c0:	b538      	push	{r3, r4, r5, lr}
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4d06      	ldr	r5, [pc, #24]	; (800a9e0 <_fstat_r+0x20>)
 800a9c6:	4604      	mov	r4, r0
 800a9c8:	4608      	mov	r0, r1
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	602b      	str	r3, [r5, #0]
 800a9ce:	f7f8 ff6a 	bl	80038a6 <_fstat>
 800a9d2:	1c43      	adds	r3, r0, #1
 800a9d4:	d102      	bne.n	800a9dc <_fstat_r+0x1c>
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	b103      	cbz	r3, 800a9dc <_fstat_r+0x1c>
 800a9da:	6023      	str	r3, [r4, #0]
 800a9dc:	bd38      	pop	{r3, r4, r5, pc}
 800a9de:	bf00      	nop
 800a9e0:	20000818 	.word	0x20000818

0800a9e4 <_isatty_r>:
 800a9e4:	b538      	push	{r3, r4, r5, lr}
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	4d05      	ldr	r5, [pc, #20]	; (800aa00 <_isatty_r+0x1c>)
 800a9ea:	4604      	mov	r4, r0
 800a9ec:	4608      	mov	r0, r1
 800a9ee:	602b      	str	r3, [r5, #0]
 800a9f0:	f7f8 ff68 	bl	80038c4 <_isatty>
 800a9f4:	1c43      	adds	r3, r0, #1
 800a9f6:	d102      	bne.n	800a9fe <_isatty_r+0x1a>
 800a9f8:	682b      	ldr	r3, [r5, #0]
 800a9fa:	b103      	cbz	r3, 800a9fe <_isatty_r+0x1a>
 800a9fc:	6023      	str	r3, [r4, #0]
 800a9fe:	bd38      	pop	{r3, r4, r5, pc}
 800aa00:	20000818 	.word	0x20000818

0800aa04 <memmove>:
 800aa04:	4288      	cmp	r0, r1
 800aa06:	b510      	push	{r4, lr}
 800aa08:	eb01 0402 	add.w	r4, r1, r2
 800aa0c:	d902      	bls.n	800aa14 <memmove+0x10>
 800aa0e:	4284      	cmp	r4, r0
 800aa10:	4623      	mov	r3, r4
 800aa12:	d807      	bhi.n	800aa24 <memmove+0x20>
 800aa14:	1e43      	subs	r3, r0, #1
 800aa16:	42a1      	cmp	r1, r4
 800aa18:	d008      	beq.n	800aa2c <memmove+0x28>
 800aa1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800aa1e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800aa22:	e7f8      	b.n	800aa16 <memmove+0x12>
 800aa24:	4601      	mov	r1, r0
 800aa26:	4402      	add	r2, r0
 800aa28:	428a      	cmp	r2, r1
 800aa2a:	d100      	bne.n	800aa2e <memmove+0x2a>
 800aa2c:	bd10      	pop	{r4, pc}
 800aa2e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800aa32:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800aa36:	e7f7      	b.n	800aa28 <memmove+0x24>

0800aa38 <_malloc_usable_size_r>:
 800aa38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa3c:	1f18      	subs	r0, r3, #4
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	bfbc      	itt	lt
 800aa42:	580b      	ldrlt	r3, [r1, r0]
 800aa44:	18c0      	addlt	r0, r0, r3
 800aa46:	4770      	bx	lr

0800aa48 <_raise_r>:
 800aa48:	291f      	cmp	r1, #31
 800aa4a:	b538      	push	{r3, r4, r5, lr}
 800aa4c:	4604      	mov	r4, r0
 800aa4e:	460d      	mov	r5, r1
 800aa50:	d904      	bls.n	800aa5c <_raise_r+0x14>
 800aa52:	2316      	movs	r3, #22
 800aa54:	6003      	str	r3, [r0, #0]
 800aa56:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5a:	bd38      	pop	{r3, r4, r5, pc}
 800aa5c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800aa5e:	b112      	cbz	r2, 800aa66 <_raise_r+0x1e>
 800aa60:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aa64:	b94b      	cbnz	r3, 800aa7a <_raise_r+0x32>
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 f830 	bl	800aacc <_getpid_r>
 800aa6c:	462a      	mov	r2, r5
 800aa6e:	4601      	mov	r1, r0
 800aa70:	4620      	mov	r0, r4
 800aa72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa76:	f000 b817 	b.w	800aaa8 <_kill_r>
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d00a      	beq.n	800aa94 <_raise_r+0x4c>
 800aa7e:	1c59      	adds	r1, r3, #1
 800aa80:	d103      	bne.n	800aa8a <_raise_r+0x42>
 800aa82:	2316      	movs	r3, #22
 800aa84:	6003      	str	r3, [r0, #0]
 800aa86:	2001      	movs	r0, #1
 800aa88:	e7e7      	b.n	800aa5a <_raise_r+0x12>
 800aa8a:	2400      	movs	r4, #0
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800aa92:	4798      	blx	r3
 800aa94:	2000      	movs	r0, #0
 800aa96:	e7e0      	b.n	800aa5a <_raise_r+0x12>

0800aa98 <raise>:
 800aa98:	4b02      	ldr	r3, [pc, #8]	; (800aaa4 <raise+0xc>)
 800aa9a:	4601      	mov	r1, r0
 800aa9c:	6818      	ldr	r0, [r3, #0]
 800aa9e:	f7ff bfd3 	b.w	800aa48 <_raise_r>
 800aaa2:	bf00      	nop
 800aaa4:	20000034 	.word	0x20000034

0800aaa8 <_kill_r>:
 800aaa8:	b538      	push	{r3, r4, r5, lr}
 800aaaa:	2300      	movs	r3, #0
 800aaac:	4d06      	ldr	r5, [pc, #24]	; (800aac8 <_kill_r+0x20>)
 800aaae:	4604      	mov	r4, r0
 800aab0:	4608      	mov	r0, r1
 800aab2:	4611      	mov	r1, r2
 800aab4:	602b      	str	r3, [r5, #0]
 800aab6:	f7f8 fe98 	bl	80037ea <_kill>
 800aaba:	1c43      	adds	r3, r0, #1
 800aabc:	d102      	bne.n	800aac4 <_kill_r+0x1c>
 800aabe:	682b      	ldr	r3, [r5, #0]
 800aac0:	b103      	cbz	r3, 800aac4 <_kill_r+0x1c>
 800aac2:	6023      	str	r3, [r4, #0]
 800aac4:	bd38      	pop	{r3, r4, r5, pc}
 800aac6:	bf00      	nop
 800aac8:	20000818 	.word	0x20000818

0800aacc <_getpid_r>:
 800aacc:	f7f8 be86 	b.w	80037dc <_getpid>

0800aad0 <_init>:
 800aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aad2:	bf00      	nop
 800aad4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aad6:	bc08      	pop	{r3}
 800aad8:	469e      	mov	lr, r3
 800aada:	4770      	bx	lr

0800aadc <_fini>:
 800aadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aade:	bf00      	nop
 800aae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aae2:	bc08      	pop	{r3}
 800aae4:	469e      	mov	lr, r3
 800aae6:	4770      	bx	lr
