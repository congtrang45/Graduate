
test_dac.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b284  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d0  0800b418  0800b418  0001b418  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bae8  0800bae8  0002022c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bae8  0800bae8  0001bae8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800baf0  0800baf0  0002022c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800baf0  0800baf0  0001baf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800baf4  0800baf4  0001baf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0800baf8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002022c  2**0
                  CONTENTS
 10 .bss          000003b8  2000022c  2000022c  0002022c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200005e4  200005e4  0002022c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002022c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011f3c  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000268e  00000000  00000000  00032198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001070  00000000  00000000  00034828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000f78  00000000  00000000  00035898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c82  00000000  00000000  00036810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012f4f  00000000  00000000  0005a492  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dbc3e  00000000  00000000  0006d3e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014901f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005b8c  00000000  00000000  00149070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000022c 	.word	0x2000022c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b3fc 	.word	0x0800b3fc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000230 	.word	0x20000230
 80001cc:	0800b3fc 	.word	0x0800b3fc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <LCD_Delay>:
#include "Lcd.h"
#include "stdio.h"
#include "string.h"
char CLR[17] = "                M";
void LCD_Delay (int cnt)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
    cnt <<= DELAY_2N;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	011b      	lsls	r3, r3, #4
 8001004:	607b      	str	r3, [r7, #4]
    while (cnt--);
 8001006:	bf00      	nop
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	1e5a      	subs	r2, r3, #1
 800100c:	607a      	str	r2, [r7, #4]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1fa      	bne.n	8001008 <LCD_Delay+0x10>
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr

08001020 <LCD_Data_out>:
void LCD_Data_out(unsigned char data)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b082      	sub	sp, #8
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
	if ((data & 0x08) == 0x08)
 800102a:	79fb      	ldrb	r3, [r7, #7]
 800102c:	f003 0308 	and.w	r3, r3, #8
 8001030:	2b00      	cmp	r3, #0
 8001032:	d005      	beq.n	8001040 <LCD_Data_out+0x20>
		HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin, 1);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	481e      	ldr	r0, [pc, #120]	; (80010b4 <LCD_Data_out+0x94>)
 800103a:	f003 fd17 	bl	8004a6c <HAL_GPIO_WritePin>
 800103e:	e004      	b.n	800104a <LCD_Data_out+0x2a>
	else
		HAL_GPIO_WritePin(LCDD7_GPIO_Port,LCDD7_Pin, 0);
 8001040:	2200      	movs	r2, #0
 8001042:	2108      	movs	r1, #8
 8001044:	481b      	ldr	r0, [pc, #108]	; (80010b4 <LCD_Data_out+0x94>)
 8001046:	f003 fd11 	bl	8004a6c <HAL_GPIO_WritePin>

	if ((data & 0x04) == 0x04)
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 0304 	and.w	r3, r3, #4
 8001050:	2b00      	cmp	r3, #0
 8001052:	d005      	beq.n	8001060 <LCD_Data_out+0x40>
		HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin, 1);
 8001054:	2201      	movs	r2, #1
 8001056:	2104      	movs	r1, #4
 8001058:	4816      	ldr	r0, [pc, #88]	; (80010b4 <LCD_Data_out+0x94>)
 800105a:	f003 fd07 	bl	8004a6c <HAL_GPIO_WritePin>
 800105e:	e004      	b.n	800106a <LCD_Data_out+0x4a>
	else
		HAL_GPIO_WritePin(LCDD6_GPIO_Port,LCDD6_Pin, 0);
 8001060:	2200      	movs	r2, #0
 8001062:	2104      	movs	r1, #4
 8001064:	4813      	ldr	r0, [pc, #76]	; (80010b4 <LCD_Data_out+0x94>)
 8001066:	f003 fd01 	bl	8004a6c <HAL_GPIO_WritePin>

	if ((data & 0x02) == 0x02)
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 0302 	and.w	r3, r3, #2
 8001070:	2b00      	cmp	r3, #0
 8001072:	d005      	beq.n	8001080 <LCD_Data_out+0x60>
		HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin, 1);
 8001074:	2201      	movs	r2, #1
 8001076:	2102      	movs	r1, #2
 8001078:	480e      	ldr	r0, [pc, #56]	; (80010b4 <LCD_Data_out+0x94>)
 800107a:	f003 fcf7 	bl	8004a6c <HAL_GPIO_WritePin>
 800107e:	e004      	b.n	800108a <LCD_Data_out+0x6a>
	else
		HAL_GPIO_WritePin(LCDD5_GPIO_Port,LCDD5_Pin, 0);
 8001080:	2200      	movs	r2, #0
 8001082:	2102      	movs	r1, #2
 8001084:	480b      	ldr	r0, [pc, #44]	; (80010b4 <LCD_Data_out+0x94>)
 8001086:	f003 fcf1 	bl	8004a6c <HAL_GPIO_WritePin>

	if ((data & 0x01) == 0x01)
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	f003 0301 	and.w	r3, r3, #1
 8001090:	2b00      	cmp	r3, #0
 8001092:	d005      	beq.n	80010a0 <LCD_Data_out+0x80>
		HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	2101      	movs	r1, #1
 8001098:	4806      	ldr	r0, [pc, #24]	; (80010b4 <LCD_Data_out+0x94>)
 800109a:	f003 fce7 	bl	8004a6c <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin, 0);
}
 800109e:	e004      	b.n	80010aa <LCD_Data_out+0x8a>
		HAL_GPIO_WritePin(LCDD4_GPIO_Port,LCDD4_Pin, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2101      	movs	r1, #1
 80010a4:	4803      	ldr	r0, [pc, #12]	; (80010b4 <LCD_Data_out+0x94>)
 80010a6:	f003 fce1 	bl	8004a6c <HAL_GPIO_WritePin>
}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40020c00 	.word	0x40020c00

080010b8 <LCD_Write4bit>:

void LCD_Write4bit(unsigned char c)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b082      	sub	sp, #8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRW_Pin,0);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2140      	movs	r1, #64	; 0x40
 80010c6:	480f      	ldr	r0, [pc, #60]	; (8001104 <LCD_Write4bit+0x4c>)
 80010c8:	f003 fcd0 	bl	8004a6c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,1);
 80010cc:	2201      	movs	r2, #1
 80010ce:	2120      	movs	r1, #32
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <LCD_Write4bit+0x4c>)
 80010d2:	f003 fccb 	bl	8004a6c <HAL_GPIO_WritePin>
    LCD_Data_out(c&0x0F);
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	b2db      	uxtb	r3, r3
 80010de:	4618      	mov	r0, r3
 80010e0:	f7ff ff9e 	bl	8001020 <LCD_Data_out>
    LCD_Delay(35);
 80010e4:	2023      	movs	r0, #35	; 0x23
 80010e6:	f7ff ff87 	bl	8000ff8 <LCD_Delay>
    HAL_GPIO_WritePin(LCDEN_GPIO_Port,LCDEN_Pin,0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2120      	movs	r1, #32
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <LCD_Write4bit+0x4c>)
 80010f0:	f003 fcbc 	bl	8004a6c <HAL_GPIO_WritePin>
    LCD_Delay(35);
 80010f4:	2023      	movs	r0, #35	; 0x23
 80010f6:	f7ff ff7f 	bl	8000ff8 <LCD_Delay>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40020c00 	.word	0x40020c00

08001108 <LCD_WriteCMD>:

void LCD_WriteCMD(unsigned char c)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    LCD_Delay(35);
 8001112:	2023      	movs	r0, #35	; 0x23
 8001114:	f7ff ff70 	bl	8000ff8 <LCD_Delay>
    HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,0);
 8001118:	2200      	movs	r2, #0
 800111a:	2180      	movs	r1, #128	; 0x80
 800111c:	4808      	ldr	r0, [pc, #32]	; (8001140 <LCD_WriteCMD+0x38>)
 800111e:	f003 fca5 	bl	8004a6c <HAL_GPIO_WritePin>
    LCD_Write4bit(c>>4);
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffc5 	bl	80010b8 <LCD_Write4bit>
    LCD_Write4bit(c);
 800112e:	79fb      	ldrb	r3, [r7, #7]
 8001130:	4618      	mov	r0, r3
 8001132:	f7ff ffc1 	bl	80010b8 <LCD_Write4bit>
}
 8001136:	bf00      	nop
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40020c00 	.word	0x40020c00

08001144 <LCD_SetCursorPos>:

void LCD_SetCursorPos(unsigned char line, unsigned char column)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	4613      	mov	r3, r2
 8001152:	71bb      	strb	r3, [r7, #6]
    uint8_t  address;
    switch(line)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d002      	beq.n	8001160 <LCD_SetCursorPos+0x1c>
 800115a:	2b01      	cmp	r3, #1
 800115c:	d003      	beq.n	8001166 <LCD_SetCursorPos+0x22>
            break;
        case 1: //Starting address of 2nd line
            address = 0xC0;
            break;
        default:
            break;
 800115e:	e005      	b.n	800116c <LCD_SetCursorPos+0x28>
            address = 0x80;
 8001160:	2380      	movs	r3, #128	; 0x80
 8001162:	73fb      	strb	r3, [r7, #15]
            break;
 8001164:	e002      	b.n	800116c <LCD_SetCursorPos+0x28>
            address = 0xC0;
 8001166:	23c0      	movs	r3, #192	; 0xc0
 8001168:	73fb      	strb	r3, [r7, #15]
            break;
 800116a:	bf00      	nop
    }
    address = address + column;
 800116c:	7bfa      	ldrb	r2, [r7, #15]
 800116e:	79bb      	ldrb	r3, [r7, #6]
 8001170:	4413      	add	r3, r2
 8001172:	73fb      	strb	r3, [r7, #15]
    LCD_WriteCMD(address);
 8001174:	7bfb      	ldrb	r3, [r7, #15]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff ffc6 	bl	8001108 <LCD_WriteCMD>
}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <LCD_Clear>:

void LCD_Clear(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
	LCD_PrintString(0, 0, CLR);
 8001188:	4a05      	ldr	r2, [pc, #20]	; (80011a0 <LCD_Clear+0x1c>)
 800118a:	2100      	movs	r1, #0
 800118c:	2000      	movs	r0, #0
 800118e:	f000 f86f 	bl	8001270 <LCD_PrintString>
	LCD_PrintString(1, 0, CLR);
 8001192:	4a03      	ldr	r2, [pc, #12]	; (80011a0 <LCD_Clear+0x1c>)
 8001194:	2100      	movs	r1, #0
 8001196:	2001      	movs	r0, #1
 8001198:	f000 f86a 	bl	8001270 <LCD_PrintString>
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	20000000 	.word	0x20000000

080011a4 <LCD_WriteData>:

void LCD_WriteData(unsigned char c)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	4603      	mov	r3, r0
 80011ac:	71fb      	strb	r3, [r7, #7]
    LCD_Delay(35);
 80011ae:	2023      	movs	r0, #35	; 0x23
 80011b0:	f7ff ff22 	bl	8000ff8 <LCD_Delay>
    HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,1);
 80011b4:	2201      	movs	r2, #1
 80011b6:	2180      	movs	r1, #128	; 0x80
 80011b8:	4808      	ldr	r0, [pc, #32]	; (80011dc <LCD_WriteData+0x38>)
 80011ba:	f003 fc57 	bl	8004a6c <HAL_GPIO_WritePin>
    LCD_Write4bit(c>>4);
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	091b      	lsrs	r3, r3, #4
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff77 	bl	80010b8 <LCD_Write4bit>
    LCD_Write4bit(c);
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff73 	bl	80010b8 <LCD_Write4bit>
}
 80011d2:	bf00      	nop
 80011d4:	3708      	adds	r7, #8
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40020c00 	.word	0x40020c00

080011e0 <LCD_Init>:

void LCD_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
    LCD_Delay(15000);
 80011e4:	f643 2098 	movw	r0, #15000	; 0x3a98
 80011e8:	f7ff ff06 	bl	8000ff8 <LCD_Delay>
    HAL_GPIO_WritePin(LCDRS_GPIO_Port,LCDRS_Pin,0);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	481e      	ldr	r0, [pc, #120]	; (800126c <LCD_Init+0x8c>)
 80011f2:	f003 fc3b 	bl	8004a6c <HAL_GPIO_WritePin>
    LCD_Write4bit(0x3);  /* Select 4-bit interface             */
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff ff5e 	bl	80010b8 <LCD_Write4bit>
    LCD_Delay(15000);
 80011fc:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001200:	f7ff fefa 	bl	8000ff8 <LCD_Delay>
    LCD_Write4bit(0x3);
 8001204:	2003      	movs	r0, #3
 8001206:	f7ff ff57 	bl	80010b8 <LCD_Write4bit>
    LCD_Delay(15000);
 800120a:	f643 2098 	movw	r0, #15000	; 0x3a98
 800120e:	f7ff fef3 	bl	8000ff8 <LCD_Delay>
    LCD_Write4bit(0x3);
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff ff50 	bl	80010b8 <LCD_Write4bit>
    LCD_Delay(15000);
 8001218:	f643 2098 	movw	r0, #15000	; 0x3a98
 800121c:	f7ff feec 	bl	8000ff8 <LCD_Delay>
    LCD_Write4bit(0x2);
 8001220:	2002      	movs	r0, #2
 8001222:	f7ff ff49 	bl	80010b8 <LCD_Write4bit>
    LCD_Delay(15000);
 8001226:	f643 2098 	movw	r0, #15000	; 0x3a98
 800122a:	f7ff fee5 	bl	8000ff8 <LCD_Delay>

    LCD_WriteCMD(0x28);  /* 2 lines, 5x8 character matrix      */
 800122e:	2028      	movs	r0, #40	; 0x28
 8001230:	f7ff ff6a 	bl	8001108 <LCD_WriteCMD>
    LCD_Delay(15000);
 8001234:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001238:	f7ff fede 	bl	8000ff8 <LCD_Delay>
    LCD_WriteCMD(0x0C);  /* Display ctrl:Disp=ON,Curs/Blnk=OFF */
 800123c:	200c      	movs	r0, #12
 800123e:	f7ff ff63 	bl	8001108 <LCD_WriteCMD>
    LCD_Delay(15000);
 8001242:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001246:	f7ff fed7 	bl	8000ff8 <LCD_Delay>
    LCD_WriteCMD(0x06);  /* Entry mode: Move right, no shift   */
 800124a:	2006      	movs	r0, #6
 800124c:	f7ff ff5c 	bl	8001108 <LCD_WriteCMD>
    LCD_Delay(15000);
 8001250:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001254:	f7ff fed0 	bl	8000ff8 <LCD_Delay>

    LCD_WriteCMD(0x80);  /* Set DDRAM address counter to 0     */
 8001258:	2080      	movs	r0, #128	; 0x80
 800125a:	f7ff ff55 	bl	8001108 <LCD_WriteCMD>
    LCD_Delay(15000);
 800125e:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001262:	f7ff fec9 	bl	8000ff8 <LCD_Delay>
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40020c00 	.word	0x40020c00

08001270 <LCD_PrintString>:
    LCD_SetCursorPos(row, column);
    LCD_WriteData(c);
}

void LCD_PrintString(unsigned char row, unsigned char column, char *string)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	603a      	str	r2, [r7, #0]
 800127a:	71fb      	strb	r3, [r7, #7]
 800127c:	460b      	mov	r3, r1
 800127e:	71bb      	strb	r3, [r7, #6]
    LCD_SetCursorPos(row, column);
 8001280:	79ba      	ldrb	r2, [r7, #6]
 8001282:	79fb      	ldrb	r3, [r7, #7]
 8001284:	4611      	mov	r1, r2
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff ff5c 	bl	8001144 <LCD_SetCursorPos>
    while (*string)
 800128c:	e006      	b.n	800129c <LCD_PrintString+0x2c>
    {
        LCD_WriteData(*string++);
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	1c5a      	adds	r2, r3, #1
 8001292:	603a      	str	r2, [r7, #0]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ff84 	bl	80011a4 <LCD_WriteData>
    while (*string)
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d1f4      	bne.n	800128e <LCD_PrintString+0x1e>
    }
}
 80012a4:	bf00      	nop
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
	...

080012b0 <LCD_PrintNum>:

void LCD_PrintNum(unsigned char row, unsigned char column, long num)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b088      	sub	sp, #32
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	603a      	str	r2, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
 80012bc:	460b      	mov	r3, r1
 80012be:	71bb      	strb	r3, [r7, #6]
    char sNum[17];
    sprintf(sNum, "%6d", num);
 80012c0:	f107 030c 	add.w	r3, r7, #12
 80012c4:	683a      	ldr	r2, [r7, #0]
 80012c6:	4907      	ldr	r1, [pc, #28]	; (80012e4 <LCD_PrintNum+0x34>)
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fb2f 	bl	800792c <siprintf>

    LCD_PrintString(row, column, sNum);
 80012ce:	f107 020c 	add.w	r2, r7, #12
 80012d2:	79b9      	ldrb	r1, [r7, #6]
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff ffca 	bl	8001270 <LCD_PrintString>
}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	0800b418 	.word	0x0800b418

080012e8 <PID_Control_A>:
void Manual_B(void);


// HAM XU LY PID
void PID_Control_A(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	e1_k_1 = e1_k;
 80012ec:	4b48      	ldr	r3, [pc, #288]	; (8001410 <PID_Control_A+0x128>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <PID_Control_A+0x12c>)
 80012f2:	6013      	str	r3, [r2, #0]
	e1_k = DesiredForceA - pv1;
 80012f4:	4b48      	ldr	r3, [pc, #288]	; (8001418 <PID_Control_A+0x130>)
 80012f6:	ed93 7a00 	vldr	s14, [r3]
 80012fa:	4b48      	ldr	r3, [pc, #288]	; (800141c <PID_Control_A+0x134>)
 80012fc:	edd3 7a00 	vldr	s15, [r3]
 8001300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001304:	4b42      	ldr	r3, [pc, #264]	; (8001410 <PID_Control_A+0x128>)
 8001306:	edc3 7a00 	vstr	s15, [r3]
	MV1_pid_k_1 = MV1_pid_k;
 800130a:	4b45      	ldr	r3, [pc, #276]	; (8001420 <PID_Control_A+0x138>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a45      	ldr	r2, [pc, #276]	; (8001424 <PID_Control_A+0x13c>)
 8001310:	6013      	str	r3, [r2, #0]
	MV1_pid_k = MV1_pid_k_1 + K_c_1*(1 + (delta_t_1/tau_i_1))*e1_k - K_c_1*e1_k_1;
 8001312:	4b45      	ldr	r3, [pc, #276]	; (8001428 <PID_Control_A+0x140>)
 8001314:	edd3 6a00 	vldr	s13, [r3]
 8001318:	4b44      	ldr	r3, [pc, #272]	; (800142c <PID_Control_A+0x144>)
 800131a:	ed93 7a00 	vldr	s14, [r3]
 800131e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001322:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001326:	ee37 7a87 	vadd.f32	s14, s15, s14
 800132a:	4b41      	ldr	r3, [pc, #260]	; (8001430 <PID_Control_A+0x148>)
 800132c:	edd3 7a00 	vldr	s15, [r3]
 8001330:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001334:	4b36      	ldr	r3, [pc, #216]	; (8001410 <PID_Control_A+0x128>)
 8001336:	edd3 7a00 	vldr	s15, [r3]
 800133a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800133e:	4b39      	ldr	r3, [pc, #228]	; (8001424 <PID_Control_A+0x13c>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001348:	4b39      	ldr	r3, [pc, #228]	; (8001430 <PID_Control_A+0x148>)
 800134a:	edd3 6a00 	vldr	s13, [r3]
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <PID_Control_A+0x12c>)
 8001350:	edd3 7a00 	vldr	s15, [r3]
 8001354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800135c:	4b30      	ldr	r3, [pc, #192]	; (8001420 <PID_Control_A+0x138>)
 800135e:	edc3 7a00 	vstr	s15, [r3]
	if (MV1_pid_k > 100.0)
 8001362:	4b2f      	ldr	r3, [pc, #188]	; (8001420 <PID_Control_A+0x138>)
 8001364:	edd3 7a00 	vldr	s15, [r3]
 8001368:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8001434 <PID_Control_A+0x14c>
 800136c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001374:	dd02      	ble.n	800137c <PID_Control_A+0x94>
	{
		MV1_pid_k = 100.0;
 8001376:	4b2a      	ldr	r3, [pc, #168]	; (8001420 <PID_Control_A+0x138>)
 8001378:	4a2f      	ldr	r2, [pc, #188]	; (8001438 <PID_Control_A+0x150>)
 800137a:	601a      	str	r2, [r3, #0]
	}
	if (MV1_pid_k < 0.0 )
 800137c:	4b28      	ldr	r3, [pc, #160]	; (8001420 <PID_Control_A+0x138>)
 800137e:	edd3 7a00 	vldr	s15, [r3]
 8001382:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800138a:	d503      	bpl.n	8001394 <PID_Control_A+0xac>
	{
		MV1_pid_k = 0.0;
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <PID_Control_A+0x138>)
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
	}

	x1 = (int16_t)((( MV1_pid_k-y1_min)/(y1_max-y1_min))*(x1_max-x1_min)+ x1_min);
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <PID_Control_A+0x138>)
 8001396:	ed93 7a00 	vldr	s14, [r3]
 800139a:	4b28      	ldr	r3, [pc, #160]	; (800143c <PID_Control_A+0x154>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	ee07 3a90 	vmov	s15, r3
 80013a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a6:	ee77 6a67 	vsub.f32	s13, s14, s15
 80013aa:	4b25      	ldr	r3, [pc, #148]	; (8001440 <PID_Control_A+0x158>)
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	4b23      	ldr	r3, [pc, #140]	; (800143c <PID_Control_A+0x154>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	ee07 3a90 	vmov	s15, r3
 80013b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <PID_Control_A+0x15c>)
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	4b20      	ldr	r3, [pc, #128]	; (8001448 <PID_Control_A+0x160>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	ee07 3a90 	vmov	s15, r3
 80013ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <PID_Control_A+0x160>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	ee07 3a90 	vmov	s15, r3
 80013de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ea:	ee17 3a90 	vmov	r3, s15
 80013ee:	b21a      	sxth	r2, r3
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <PID_Control_A+0x164>)
 80013f2:	801a      	strh	r2, [r3, #0]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, x1);
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <PID_Control_A+0x164>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	b21b      	sxth	r3, r3
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	4814      	ldr	r0, [pc, #80]	; (8001450 <PID_Control_A+0x168>)
 8001400:	f003 f879 	bl	80044f6 <HAL_DAC_SetValue>
	HAL_Delay(500);
 8001404:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001408:	f002 fa50 	bl	80038ac <HAL_Delay>
}
 800140c:	bf00      	nop
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000370 	.word	0x20000370
 8001414:	20000374 	.word	0x20000374
 8001418:	20000380 	.word	0x20000380
 800141c:	20000384 	.word	0x20000384
 8001420:	2000037c 	.word	0x2000037c
 8001424:	20000378 	.word	0x20000378
 8001428:	2000003c 	.word	0x2000003c
 800142c:	20000018 	.word	0x20000018
 8001430:	20000014 	.word	0x20000014
 8001434:	42c80000 	.word	0x42c80000
 8001438:	42c80000 	.word	0x42c80000
 800143c:	200003a4 	.word	0x200003a4
 8001440:	20000034 	.word	0x20000034
 8001444:	2000002c 	.word	0x2000002c
 8001448:	20000024 	.word	0x20000024
 800144c:	200003a0 	.word	0x200003a0
 8001450:	2000045c 	.word	0x2000045c

08001454 <PID_Control_B>:

void PID_Control_B(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
	e2_k_1 = e2_k;
 8001458:	4b48      	ldr	r3, [pc, #288]	; (800157c <PID_Control_B+0x128>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a48      	ldr	r2, [pc, #288]	; (8001580 <PID_Control_B+0x12c>)
 800145e:	6013      	str	r3, [r2, #0]
	e2_k = DesiredForceB-pv2;
 8001460:	4b48      	ldr	r3, [pc, #288]	; (8001584 <PID_Control_B+0x130>)
 8001462:	ed93 7a00 	vldr	s14, [r3]
 8001466:	4b48      	ldr	r3, [pc, #288]	; (8001588 <PID_Control_B+0x134>)
 8001468:	edd3 7a00 	vldr	s15, [r3]
 800146c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001470:	4b42      	ldr	r3, [pc, #264]	; (800157c <PID_Control_B+0x128>)
 8001472:	edc3 7a00 	vstr	s15, [r3]
	MV2_pid_k_1 = MV2_pid_k;
 8001476:	4b45      	ldr	r3, [pc, #276]	; (800158c <PID_Control_B+0x138>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a45      	ldr	r2, [pc, #276]	; (8001590 <PID_Control_B+0x13c>)
 800147c:	6013      	str	r3, [r2, #0]
	MV2_pid_k = MV2_pid_k_1 + K_c_2*(1 + (delta_t_2/tau_i_2))*e2_k - K_c_2*e2_k_1;
 800147e:	4b45      	ldr	r3, [pc, #276]	; (8001594 <PID_Control_B+0x140>)
 8001480:	edd3 6a00 	vldr	s13, [r3]
 8001484:	4b44      	ldr	r3, [pc, #272]	; (8001598 <PID_Control_B+0x144>)
 8001486:	ed93 7a00 	vldr	s14, [r3]
 800148a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800148e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001492:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001496:	4b41      	ldr	r3, [pc, #260]	; (800159c <PID_Control_B+0x148>)
 8001498:	edd3 7a00 	vldr	s15, [r3]
 800149c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014a0:	4b36      	ldr	r3, [pc, #216]	; (800157c <PID_Control_B+0x128>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	4b39      	ldr	r3, [pc, #228]	; (8001590 <PID_Control_B+0x13c>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014b4:	4b39      	ldr	r3, [pc, #228]	; (800159c <PID_Control_B+0x148>)
 80014b6:	edd3 6a00 	vldr	s13, [r3]
 80014ba:	4b31      	ldr	r3, [pc, #196]	; (8001580 <PID_Control_B+0x12c>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014c8:	4b30      	ldr	r3, [pc, #192]	; (800158c <PID_Control_B+0x138>)
 80014ca:	edc3 7a00 	vstr	s15, [r3]
	if (MV2_pid_k > 100.0)
 80014ce:	4b2f      	ldr	r3, [pc, #188]	; (800158c <PID_Control_B+0x138>)
 80014d0:	edd3 7a00 	vldr	s15, [r3]
 80014d4:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80015a0 <PID_Control_B+0x14c>
 80014d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e0:	dd02      	ble.n	80014e8 <PID_Control_B+0x94>
	{
		MV2_pid_k = 100.0;
 80014e2:	4b2a      	ldr	r3, [pc, #168]	; (800158c <PID_Control_B+0x138>)
 80014e4:	4a2f      	ldr	r2, [pc, #188]	; (80015a4 <PID_Control_B+0x150>)
 80014e6:	601a      	str	r2, [r3, #0]
	}
	if (MV2_pid_k < 0.0 )
 80014e8:	4b28      	ldr	r3, [pc, #160]	; (800158c <PID_Control_B+0x138>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014f6:	d503      	bpl.n	8001500 <PID_Control_B+0xac>
	{
		MV2_pid_k = 0.0;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <PID_Control_B+0x138>)
 80014fa:	f04f 0200 	mov.w	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
	}

	x2 = (int16_t)((( MV2_pid_k-y2_min)/(y2_max-y2_min))*(x2_max-x2_min) + x2_min);
 8001500:	4b22      	ldr	r3, [pc, #136]	; (800158c <PID_Control_B+0x138>)
 8001502:	ed93 7a00 	vldr	s14, [r3]
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <PID_Control_B+0x154>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	ee07 3a90 	vmov	s15, r3
 800150e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001512:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <PID_Control_B+0x158>)
 8001518:	681a      	ldr	r2, [r3, #0]
 800151a:	4b23      	ldr	r3, [pc, #140]	; (80015a8 <PID_Control_B+0x154>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	ee07 3a90 	vmov	s15, r3
 8001524:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800152c:	4b20      	ldr	r3, [pc, #128]	; (80015b0 <PID_Control_B+0x15c>)
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <PID_Control_B+0x160>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	1ad3      	subs	r3, r2, r3
 8001536:	ee07 3a90 	vmov	s15, r3
 800153a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800153e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001542:	4b1c      	ldr	r3, [pc, #112]	; (80015b4 <PID_Control_B+0x160>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	ee07 3a90 	vmov	s15, r3
 800154a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800154e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001552:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001556:	ee17 3a90 	vmov	r3, s15
 800155a:	b21a      	sxth	r2, r3
 800155c:	4b16      	ldr	r3, [pc, #88]	; (80015b8 <PID_Control_B+0x164>)
 800155e:	801a      	strh	r2, [r3, #0]

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, x2);
 8001560:	4b15      	ldr	r3, [pc, #84]	; (80015b8 <PID_Control_B+0x164>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	b21b      	sxth	r3, r3
 8001566:	2200      	movs	r2, #0
 8001568:	2110      	movs	r1, #16
 800156a:	4814      	ldr	r0, [pc, #80]	; (80015bc <PID_Control_B+0x168>)
 800156c:	f002 ffc3 	bl	80044f6 <HAL_DAC_SetValue>
	HAL_Delay(500);
 8001570:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001574:	f002 f99a 	bl	80038ac <HAL_Delay>
}
 8001578:	bf00      	nop
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000388 	.word	0x20000388
 8001580:	2000038c 	.word	0x2000038c
 8001584:	20000398 	.word	0x20000398
 8001588:	2000039c 	.word	0x2000039c
 800158c:	20000394 	.word	0x20000394
 8001590:	20000390 	.word	0x20000390
 8001594:	20000040 	.word	0x20000040
 8001598:	20000020 	.word	0x20000020
 800159c:	2000001c 	.word	0x2000001c
 80015a0:	42c80000 	.word	0x42c80000
 80015a4:	42c80000 	.word	0x42c80000
 80015a8:	200003a8 	.word	0x200003a8
 80015ac:	20000038 	.word	0x20000038
 80015b0:	20000030 	.word	0x20000030
 80015b4:	20000028 	.word	0x20000028
 80015b8:	200003a2 	.word	0x200003a2
 80015bc:	2000045c 	.word	0x2000045c

080015c0 <Set_Ctrl>:
//CAC HAM XU LY NUT NHAN
void Set_Ctrl(void)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI4_Pin) == 0)
 80015c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80015c8:	4822      	ldr	r0, [pc, #136]	; (8001654 <Set_Ctrl+0x94>)
 80015ca:	f003 fa37 	bl	8004a3c <HAL_GPIO_ReadPin>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d118      	bne.n	8001606 <Set_Ctrl+0x46>
	{
		set_mode = true;
 80015d4:	4b20      	ldr	r3, [pc, #128]	; (8001658 <Set_Ctrl+0x98>)
 80015d6:	2201      	movs	r2, #1
 80015d8:	701a      	strb	r2, [r3, #0]
		ctrl_mode = false;
 80015da:	4b20      	ldr	r3, [pc, #128]	; (800165c <Set_Ctrl+0x9c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	701a      	strb	r2, [r3, #0]
		LCD_Clear();
 80015e0:	f7ff fdd0 	bl	8001184 <LCD_Clear>
		LCD_PrintString(0, 4, "Settings");
 80015e4:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <Set_Ctrl+0xa0>)
 80015e6:	2104      	movs	r1, #4
 80015e8:	2000      	movs	r0, #0
 80015ea:	f7ff fe41 	bl	8001270 <LCD_PrintString>
		HAL_Delay(1000);
 80015ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015f2:	f002 f95b 	bl	80038ac <HAL_Delay>
		LCD_Clear();
 80015f6:	f7ff fdc5 	bl	8001184 <LCD_Clear>
		LCD_PrintString(0, 0, "Select Parameter");
 80015fa:	4a1a      	ldr	r2, [pc, #104]	; (8001664 <Set_Ctrl+0xa4>)
 80015fc:	2100      	movs	r1, #0
 80015fe:	2000      	movs	r0, #0
 8001600:	f7ff fe36 	bl	8001270 <LCD_PrintString>
		HAL_Delay(1000);
		LCD_Clear();
		LCD_PrintString(0, 0, "Select Mode");
		LCD_PrintString(1, 1, "Auto or Manual");
	}
}
 8001604:	e024      	b.n	8001650 <Set_Ctrl+0x90>
	else if (HAL_GPIO_ReadPin(GPIOE, DI5_Pin) == 0)
 8001606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800160a:	4812      	ldr	r0, [pc, #72]	; (8001654 <Set_Ctrl+0x94>)
 800160c:	f003 fa16 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d11c      	bne.n	8001650 <Set_Ctrl+0x90>
		set_mode = false;
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <Set_Ctrl+0x98>)
 8001618:	2200      	movs	r2, #0
 800161a:	701a      	strb	r2, [r3, #0]
		ctrl_mode = true;
 800161c:	4b0f      	ldr	r3, [pc, #60]	; (800165c <Set_Ctrl+0x9c>)
 800161e:	2201      	movs	r2, #1
 8001620:	701a      	strb	r2, [r3, #0]
		LCD_Clear();
 8001622:	f7ff fdaf 	bl	8001184 <LCD_Clear>
		LCD_PrintString(0, 3, "Controller");
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <Set_Ctrl+0xa8>)
 8001628:	2103      	movs	r1, #3
 800162a:	2000      	movs	r0, #0
 800162c:	f7ff fe20 	bl	8001270 <LCD_PrintString>
		HAL_Delay(1000);
 8001630:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001634:	f002 f93a 	bl	80038ac <HAL_Delay>
		LCD_Clear();
 8001638:	f7ff fda4 	bl	8001184 <LCD_Clear>
		LCD_PrintString(0, 0, "Select Mode");
 800163c:	4a0b      	ldr	r2, [pc, #44]	; (800166c <Set_Ctrl+0xac>)
 800163e:	2100      	movs	r1, #0
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fe15 	bl	8001270 <LCD_PrintString>
		LCD_PrintString(1, 1, "Auto or Manual");
 8001646:	4a0a      	ldr	r2, [pc, #40]	; (8001670 <Set_Ctrl+0xb0>)
 8001648:	2101      	movs	r1, #1
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fe10 	bl	8001270 <LCD_PrintString>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40021000 	.word	0x40021000
 8001658:	2000024a 	.word	0x2000024a
 800165c:	2000024b 	.word	0x2000024b
 8001660:	0800b41c 	.word	0x0800b41c
 8001664:	0800b428 	.word	0x0800b428
 8001668:	0800b43c 	.word	0x0800b43c
 800166c:	0800b448 	.word	0x0800b448
 8001670:	0800b454 	.word	0x0800b454

08001674 <Mode>:

void Mode(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI0_Pin) == 0)
 8001678:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800167c:	488c      	ldr	r0, [pc, #560]	; (80018b0 <Mode+0x23c>)
 800167e:	f003 f9dd 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	f040 8111 	bne.w	80018ac <Mode+0x238>
	{
		HAL_Delay(100);
 800168a:	2064      	movs	r0, #100	; 0x64
 800168c:	f002 f90e 	bl	80038ac <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOE, DI0_Pin) == 0)
 8001690:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001694:	4886      	ldr	r0, [pc, #536]	; (80018b0 <Mode+0x23c>)
 8001696:	f003 f9d1 	bl	8004a3c <HAL_GPIO_ReadPin>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	f040 8105 	bne.w	80018ac <Mode+0x238>
			{
				if (set_mode == 1)
 80016a2:	4b84      	ldr	r3, [pc, #528]	; (80018b4 <Mode+0x240>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f000 80bb 	beq.w	8001822 <Mode+0x1ae>
				{
					mode ++;
 80016ac:	4b82      	ldr	r3, [pc, #520]	; (80018b8 <Mode+0x244>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	3301      	adds	r3, #1
 80016b2:	4a81      	ldr	r2, [pc, #516]	; (80018b8 <Mode+0x244>)
 80016b4:	6013      	str	r3, [r2, #0]
					if (mode > 5) mode = 1;
 80016b6:	4b80      	ldr	r3, [pc, #512]	; (80018b8 <Mode+0x244>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2b05      	cmp	r3, #5
 80016bc:	dd02      	ble.n	80016c4 <Mode+0x50>
 80016be:	4b7e      	ldr	r3, [pc, #504]	; (80018b8 <Mode+0x244>)
 80016c0:	2201      	movs	r2, #1
 80016c2:	601a      	str	r2, [r3, #0]
					if (mode == 1)
 80016c4:	4b7c      	ldr	r3, [pc, #496]	; (80018b8 <Mode+0x244>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d126      	bne.n	800171a <Mode+0xa6>
					{
						value = DesiredForceA;
 80016cc:	4b7b      	ldr	r3, [pc, #492]	; (80018bc <Mode+0x248>)
 80016ce:	edd3 7a00 	vldr	s15, [r3]
 80016d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d6:	ee17 2a90 	vmov	r2, s15
 80016da:	4b79      	ldr	r3, [pc, #484]	; (80018c0 <Mode+0x24c>)
 80016dc:	601a      	str	r2, [r3, #0]
						LCD_Clear();
 80016de:	f7ff fd51 	bl	8001184 <LCD_Clear>
						LCD_Update();
 80016e2:	f000 fbf7 	bl	8001ed4 <LCD_Update>
						LCD_PrintString(0, 0, "Force A");
 80016e6:	4a77      	ldr	r2, [pc, #476]	; (80018c4 <Mode+0x250>)
 80016e8:	2100      	movs	r1, #0
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fdc0 	bl	8001270 <LCD_PrintString>
						if (DesiredForceA != 0)
 80016f0:	4b72      	ldr	r3, [pc, #456]	; (80018bc <Mode+0x248>)
 80016f2:	edd3 7a00 	vldr	s15, [r3]
 80016f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80016fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fe:	f000 80d5 	beq.w	80018ac <Mode+0x238>
						{
							LCD_PrintNum( 1, 10, DesiredForceA);
 8001702:	4b6e      	ldr	r3, [pc, #440]	; (80018bc <Mode+0x248>)
 8001704:	edd3 7a00 	vldr	s15, [r3]
 8001708:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800170c:	ee17 2a90 	vmov	r2, s15
 8001710:	210a      	movs	r1, #10
 8001712:	2001      	movs	r0, #1
 8001714:	f7ff fdcc 	bl	80012b0 <LCD_PrintNum>
						LCD_PrintString(1, 0, "State: ");
					}
				}
			}
	}
}
 8001718:	e0c8      	b.n	80018ac <Mode+0x238>
					else if (mode == 2)
 800171a:	4b67      	ldr	r3, [pc, #412]	; (80018b8 <Mode+0x244>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2b02      	cmp	r3, #2
 8001720:	d126      	bne.n	8001770 <Mode+0xfc>
						value = DesiredForceB;
 8001722:	4b69      	ldr	r3, [pc, #420]	; (80018c8 <Mode+0x254>)
 8001724:	edd3 7a00 	vldr	s15, [r3]
 8001728:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800172c:	ee17 2a90 	vmov	r2, s15
 8001730:	4b63      	ldr	r3, [pc, #396]	; (80018c0 <Mode+0x24c>)
 8001732:	601a      	str	r2, [r3, #0]
						LCD_Clear();
 8001734:	f7ff fd26 	bl	8001184 <LCD_Clear>
						LCD_Update();
 8001738:	f000 fbcc 	bl	8001ed4 <LCD_Update>
						LCD_PrintString(0, 0, "Force B");
 800173c:	4a63      	ldr	r2, [pc, #396]	; (80018cc <Mode+0x258>)
 800173e:	2100      	movs	r1, #0
 8001740:	2000      	movs	r0, #0
 8001742:	f7ff fd95 	bl	8001270 <LCD_PrintString>
						if (DesiredForceB != 0)
 8001746:	4b60      	ldr	r3, [pc, #384]	; (80018c8 <Mode+0x254>)
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001750:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001754:	f000 80aa 	beq.w	80018ac <Mode+0x238>
							LCD_PrintNum( 1, 10, DesiredForceB);
 8001758:	4b5b      	ldr	r3, [pc, #364]	; (80018c8 <Mode+0x254>)
 800175a:	edd3 7a00 	vldr	s15, [r3]
 800175e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001762:	ee17 2a90 	vmov	r2, s15
 8001766:	210a      	movs	r1, #10
 8001768:	2001      	movs	r0, #1
 800176a:	f7ff fda1 	bl	80012b0 <LCD_PrintNum>
}
 800176e:	e09d      	b.n	80018ac <Mode+0x238>
					else if (mode == 3)
 8001770:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <Mode+0x244>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b03      	cmp	r3, #3
 8001776:	d11a      	bne.n	80017ae <Mode+0x13a>
						value = cycles;
 8001778:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <Mode+0x25c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	461a      	mov	r2, r3
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <Mode+0x24c>)
 8001780:	601a      	str	r2, [r3, #0]
						LCD_Clear();
 8001782:	f7ff fcff 	bl	8001184 <LCD_Clear>
						LCD_Update();
 8001786:	f000 fba5 	bl	8001ed4 <LCD_Update>
						LCD_PrintString(0, 0, "Cycles");
 800178a:	4a52      	ldr	r2, [pc, #328]	; (80018d4 <Mode+0x260>)
 800178c:	2100      	movs	r1, #0
 800178e:	2000      	movs	r0, #0
 8001790:	f7ff fd6e 	bl	8001270 <LCD_PrintString>
						if (cycles != 0)
 8001794:	4b4e      	ldr	r3, [pc, #312]	; (80018d0 <Mode+0x25c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	f000 8087 	beq.w	80018ac <Mode+0x238>
							LCD_PrintNum( 1, 10, cycles);
 800179e:	4b4c      	ldr	r3, [pc, #304]	; (80018d0 <Mode+0x25c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	461a      	mov	r2, r3
 80017a4:	210a      	movs	r1, #10
 80017a6:	2001      	movs	r0, #1
 80017a8:	f7ff fd82 	bl	80012b0 <LCD_PrintNum>
}
 80017ac:	e07e      	b.n	80018ac <Mode+0x238>
					else if (mode == 4)
 80017ae:	4b42      	ldr	r3, [pc, #264]	; (80018b8 <Mode+0x244>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	d118      	bne.n	80017e8 <Mode+0x174>
						value = air1;
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <Mode+0x264>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a41      	ldr	r2, [pc, #260]	; (80018c0 <Mode+0x24c>)
 80017bc:	6013      	str	r3, [r2, #0]
						LCD_Clear();
 80017be:	f7ff fce1 	bl	8001184 <LCD_Clear>
						LCD_Update();
 80017c2:	f000 fb87 	bl	8001ed4 <LCD_Update>
						LCD_PrintString(0, 0, "Air A");
 80017c6:	4a45      	ldr	r2, [pc, #276]	; (80018dc <Mode+0x268>)
 80017c8:	2100      	movs	r1, #0
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fd50 	bl	8001270 <LCD_PrintString>
						if (air1 != 0)
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <Mode+0x264>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d069      	beq.n	80018ac <Mode+0x238>
							LCD_PrintNum( 1, 10, air1);
 80017d8:	4b3f      	ldr	r3, [pc, #252]	; (80018d8 <Mode+0x264>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	210a      	movs	r1, #10
 80017e0:	2001      	movs	r0, #1
 80017e2:	f7ff fd65 	bl	80012b0 <LCD_PrintNum>
}
 80017e6:	e061      	b.n	80018ac <Mode+0x238>
					else if (mode == 5)
 80017e8:	4b33      	ldr	r3, [pc, #204]	; (80018b8 <Mode+0x244>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b05      	cmp	r3, #5
 80017ee:	d15d      	bne.n	80018ac <Mode+0x238>
						value = air2;
 80017f0:	4b3b      	ldr	r3, [pc, #236]	; (80018e0 <Mode+0x26c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a32      	ldr	r2, [pc, #200]	; (80018c0 <Mode+0x24c>)
 80017f6:	6013      	str	r3, [r2, #0]
						LCD_Clear();
 80017f8:	f7ff fcc4 	bl	8001184 <LCD_Clear>
						LCD_Update();
 80017fc:	f000 fb6a 	bl	8001ed4 <LCD_Update>
						LCD_PrintString(0, 0, "Air B");
 8001800:	4a38      	ldr	r2, [pc, #224]	; (80018e4 <Mode+0x270>)
 8001802:	2100      	movs	r1, #0
 8001804:	2000      	movs	r0, #0
 8001806:	f7ff fd33 	bl	8001270 <LCD_PrintString>
						if (air2 != 0)
 800180a:	4b35      	ldr	r3, [pc, #212]	; (80018e0 <Mode+0x26c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d04c      	beq.n	80018ac <Mode+0x238>
							LCD_PrintNum( 1, 10, air2);
 8001812:	4b33      	ldr	r3, [pc, #204]	; (80018e0 <Mode+0x26c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	461a      	mov	r2, r3
 8001818:	210a      	movs	r1, #10
 800181a:	2001      	movs	r0, #1
 800181c:	f7ff fd48 	bl	80012b0 <LCD_PrintNum>
}
 8001820:	e044      	b.n	80018ac <Mode+0x238>
				else if (ctrl_mode == 1)
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <Mode+0x274>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b00      	cmp	r3, #0
 8001828:	d040      	beq.n	80018ac <Mode+0x238>
					auto_man++;
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <Mode+0x278>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	3301      	adds	r3, #1
 8001830:	4a2e      	ldr	r2, [pc, #184]	; (80018ec <Mode+0x278>)
 8001832:	6013      	str	r3, [r2, #0]
					if (auto_man > 2) auto_man = 1;
 8001834:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <Mode+0x278>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b02      	cmp	r3, #2
 800183a:	dd02      	ble.n	8001842 <Mode+0x1ce>
 800183c:	4b2b      	ldr	r3, [pc, #172]	; (80018ec <Mode+0x278>)
 800183e:	2201      	movs	r2, #1
 8001840:	601a      	str	r2, [r3, #0]
					if (auto_man == 1)
 8001842:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <Mode+0x278>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d116      	bne.n	8001878 <Mode+0x204>
						auto_mode = true;
 800184a:	4b29      	ldr	r3, [pc, #164]	; (80018f0 <Mode+0x27c>)
 800184c:	2201      	movs	r2, #1
 800184e:	701a      	strb	r2, [r3, #0]
						man_mode = false;
 8001850:	4b28      	ldr	r3, [pc, #160]	; (80018f4 <Mode+0x280>)
 8001852:	2200      	movs	r2, #0
 8001854:	701a      	strb	r2, [r3, #0]
						LCD_Clear();
 8001856:	f7ff fc95 	bl	8001184 <LCD_Clear>
						LCD_PrintString(0, 0, "Auto Mode");
 800185a:	4a27      	ldr	r2, [pc, #156]	; (80018f8 <Mode+0x284>)
 800185c:	2100      	movs	r1, #0
 800185e:	2000      	movs	r0, #0
 8001860:	f7ff fd06 	bl	8001270 <LCD_PrintString>
						HAL_Delay(300);
 8001864:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001868:	f002 f820 	bl	80038ac <HAL_Delay>
						LCD_PrintString(1, 0, "State: ");
 800186c:	4a23      	ldr	r2, [pc, #140]	; (80018fc <Mode+0x288>)
 800186e:	2100      	movs	r1, #0
 8001870:	2001      	movs	r0, #1
 8001872:	f7ff fcfd 	bl	8001270 <LCD_PrintString>
}
 8001876:	e019      	b.n	80018ac <Mode+0x238>
					else if (auto_man == 2)
 8001878:	4b1c      	ldr	r3, [pc, #112]	; (80018ec <Mode+0x278>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d115      	bne.n	80018ac <Mode+0x238>
						auto_mode = false;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <Mode+0x27c>)
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
						man_mode = true;
 8001886:	4b1b      	ldr	r3, [pc, #108]	; (80018f4 <Mode+0x280>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
						LCD_Clear();
 800188c:	f7ff fc7a 	bl	8001184 <LCD_Clear>
						LCD_PrintString(0, 0, "Manual Mode");
 8001890:	4a1b      	ldr	r2, [pc, #108]	; (8001900 <Mode+0x28c>)
 8001892:	2100      	movs	r1, #0
 8001894:	2000      	movs	r0, #0
 8001896:	f7ff fceb 	bl	8001270 <LCD_PrintString>
						HAL_Delay(300);
 800189a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800189e:	f002 f805 	bl	80038ac <HAL_Delay>
						LCD_PrintString(1, 0, "State: ");
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <Mode+0x288>)
 80018a4:	2100      	movs	r1, #0
 80018a6:	2001      	movs	r0, #1
 80018a8:	f7ff fce2 	bl	8001270 <LCD_PrintString>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000
 80018b4:	2000024a 	.word	0x2000024a
 80018b8:	200003b8 	.word	0x200003b8
 80018bc:	20000380 	.word	0x20000380
 80018c0:	20000048 	.word	0x20000048
 80018c4:	0800b464 	.word	0x0800b464
 80018c8:	20000398 	.word	0x20000398
 80018cc:	0800b46c 	.word	0x0800b46c
 80018d0:	200003b4 	.word	0x200003b4
 80018d4:	0800b474 	.word	0x0800b474
 80018d8:	200003c4 	.word	0x200003c4
 80018dc:	0800b47c 	.word	0x0800b47c
 80018e0:	200003c8 	.word	0x200003c8
 80018e4:	0800b484 	.word	0x0800b484
 80018e8:	2000024b 	.word	0x2000024b
 80018ec:	200003bc 	.word	0x200003bc
 80018f0:	2000024c 	.word	0x2000024c
 80018f4:	2000024d 	.word	0x2000024d
 80018f8:	0800b48c 	.word	0x0800b48c
 80018fc:	0800b498 	.word	0x0800b498
 8001900:	0800b4a0 	.word	0x0800b4a0

08001904 <Set_Start_Stop>:

void Set_Start_Stop(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI1_Pin) == 0)
 8001908:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800190c:	4897      	ldr	r0, [pc, #604]	; (8001b6c <Set_Start_Stop+0x268>)
 800190e:	f003 f895 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	f040 8127 	bne.w	8001b68 <Set_Start_Stop+0x264>
	{
		HAL_Delay(100);
 800191a:	2064      	movs	r0, #100	; 0x64
 800191c:	f001 ffc6 	bl	80038ac <HAL_Delay>
		if(HAL_GPIO_ReadPin(GPIOE, DI1_Pin) == 0)
 8001920:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001924:	4891      	ldr	r0, [pc, #580]	; (8001b6c <Set_Start_Stop+0x268>)
 8001926:	f003 f889 	bl	8004a3c <HAL_GPIO_ReadPin>
 800192a:	4603      	mov	r3, r0
 800192c:	2b00      	cmp	r3, #0
 800192e:	f040 811b 	bne.w	8001b68 <Set_Start_Stop+0x264>
		{

			if (set_mode == 1)
 8001932:	4b8f      	ldr	r3, [pc, #572]	; (8001b70 <Set_Start_Stop+0x26c>)
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	2b00      	cmp	r3, #0
 8001938:	f000 80d1 	beq.w	8001ade <Set_Start_Stop+0x1da>
			{
				switch(mode)
 800193c:	4b8d      	ldr	r3, [pc, #564]	; (8001b74 <Set_Start_Stop+0x270>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	3b01      	subs	r3, #1
 8001942:	2b04      	cmp	r3, #4
 8001944:	f200 810f 	bhi.w	8001b66 <Set_Start_Stop+0x262>
 8001948:	a201      	add	r2, pc, #4	; (adr r2, 8001950 <Set_Start_Stop+0x4c>)
 800194a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800194e:	bf00      	nop
 8001950:	08001965 	.word	0x08001965
 8001954:	08001997 	.word	0x08001997
 8001958:	080019c9 	.word	0x080019c9
 800195c:	080019eb 	.word	0x080019eb
 8001960:	08001a65 	.word	0x08001a65
				{
				case 1:
					DesiredForceA = value;
 8001964:	4b84      	ldr	r3, [pc, #528]	; (8001b78 <Set_Start_Stop+0x274>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	ee07 3a90 	vmov	s15, r3
 800196c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001970:	4b82      	ldr	r3, [pc, #520]	; (8001b7c <Set_Start_Stop+0x278>)
 8001972:	edc3 7a00 	vstr	s15, [r3]
					printf("%.2f""d\r\n", DesiredForceA);
 8001976:	4b81      	ldr	r3, [pc, #516]	; (8001b7c <Set_Start_Stop+0x278>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f7fe fde4 	bl	8000548 <__aeabi_f2d>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	487e      	ldr	r0, [pc, #504]	; (8001b80 <Set_Start_Stop+0x27c>)
 8001986:	f005 ffa9 	bl	80078dc <iprintf>
					LCD_PrintString(0, 14, "OK");
 800198a:	4a7e      	ldr	r2, [pc, #504]	; (8001b84 <Set_Start_Stop+0x280>)
 800198c:	210e      	movs	r1, #14
 800198e:	2000      	movs	r0, #0
 8001990:	f7ff fc6e 	bl	8001270 <LCD_PrintString>
					break;
 8001994:	e0e8      	b.n	8001b68 <Set_Start_Stop+0x264>
				case 2:
					DesiredForceB = value;
 8001996:	4b78      	ldr	r3, [pc, #480]	; (8001b78 <Set_Start_Stop+0x274>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	ee07 3a90 	vmov	s15, r3
 800199e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019a2:	4b79      	ldr	r3, [pc, #484]	; (8001b88 <Set_Start_Stop+0x284>)
 80019a4:	edc3 7a00 	vstr	s15, [r3]
					printf("%.2f""e\r\n", DesiredForceB);
 80019a8:	4b77      	ldr	r3, [pc, #476]	; (8001b88 <Set_Start_Stop+0x284>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7fe fdcb 	bl	8000548 <__aeabi_f2d>
 80019b2:	4602      	mov	r2, r0
 80019b4:	460b      	mov	r3, r1
 80019b6:	4875      	ldr	r0, [pc, #468]	; (8001b8c <Set_Start_Stop+0x288>)
 80019b8:	f005 ff90 	bl	80078dc <iprintf>
					LCD_PrintString(0, 14, "OK");
 80019bc:	4a71      	ldr	r2, [pc, #452]	; (8001b84 <Set_Start_Stop+0x280>)
 80019be:	210e      	movs	r1, #14
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7ff fc55 	bl	8001270 <LCD_PrintString>
					break;
 80019c6:	e0cf      	b.n	8001b68 <Set_Start_Stop+0x264>
				case 3:
					cycles = value;
 80019c8:	4b6b      	ldr	r3, [pc, #428]	; (8001b78 <Set_Start_Stop+0x274>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <Set_Start_Stop+0x28c>)
 80019d0:	601a      	str	r2, [r3, #0]
					printf("%d""f\r\n", cycles);
 80019d2:	4b6f      	ldr	r3, [pc, #444]	; (8001b90 <Set_Start_Stop+0x28c>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4619      	mov	r1, r3
 80019d8:	486e      	ldr	r0, [pc, #440]	; (8001b94 <Set_Start_Stop+0x290>)
 80019da:	f005 ff7f 	bl	80078dc <iprintf>
					LCD_PrintString(0, 14, "OK");
 80019de:	4a69      	ldr	r2, [pc, #420]	; (8001b84 <Set_Start_Stop+0x280>)
 80019e0:	210e      	movs	r1, #14
 80019e2:	2000      	movs	r0, #0
 80019e4:	f7ff fc44 	bl	8001270 <LCD_PrintString>
					break;
 80019e8:	e0be      	b.n	8001b68 <Set_Start_Stop+0x264>
				case 4:
					if (value > 500)
 80019ea:	4b63      	ldr	r3, [pc, #396]	; (8001b78 <Set_Start_Stop+0x274>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80019f2:	dd22      	ble.n	8001a3a <Set_Start_Stop+0x136>
					{
						LCD_PrintString(0, 10, "FALIED");
 80019f4:	4a68      	ldr	r2, [pc, #416]	; (8001b98 <Set_Start_Stop+0x294>)
 80019f6:	210a      	movs	r1, #10
 80019f8:	2000      	movs	r0, #0
 80019fa:	f7ff fc39 	bl	8001270 <LCD_PrintString>
						while(HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 1)
 80019fe:	e013      	b.n	8001a28 <Set_Start_Stop+0x124>
						{
							LCD_PrintNum( 1, 10, value);
 8001a00:	4b5d      	ldr	r3, [pc, #372]	; (8001b78 <Set_Start_Stop+0x274>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	461a      	mov	r2, r3
 8001a06:	210a      	movs	r1, #10
 8001a08:	2001      	movs	r0, #1
 8001a0a:	f7ff fc51 	bl	80012b0 <LCD_PrintNum>
							HAL_Delay(500);
 8001a0e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a12:	f001 ff4b 	bl	80038ac <HAL_Delay>
							LCD_PrintString(1, 10, "       M");
 8001a16:	4a61      	ldr	r2, [pc, #388]	; (8001b9c <Set_Start_Stop+0x298>)
 8001a18:	210a      	movs	r1, #10
 8001a1a:	2001      	movs	r0, #1
 8001a1c:	f7ff fc28 	bl	8001270 <LCD_PrintString>
							HAL_Delay(500);
 8001a20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a24:	f001 ff42 	bl	80038ac <HAL_Delay>
						while(HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 1)
 8001a28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a2c:	484f      	ldr	r0, [pc, #316]	; (8001b6c <Set_Start_Stop+0x268>)
 8001a2e:	f003 f805 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d0e3      	beq.n	8001a00 <Set_Start_Stop+0xfc>
						air1 = value;
						printf("%d""g\r\n", air1);
						LCD_PrintString(0, 10, "      M");
						LCD_PrintString(0, 14, "OK");
					}
					break;
 8001a38:	e096      	b.n	8001b68 <Set_Start_Stop+0x264>
						air1 = value;
 8001a3a:	4b4f      	ldr	r3, [pc, #316]	; (8001b78 <Set_Start_Stop+0x274>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a58      	ldr	r2, [pc, #352]	; (8001ba0 <Set_Start_Stop+0x29c>)
 8001a40:	6013      	str	r3, [r2, #0]
						printf("%d""g\r\n", air1);
 8001a42:	4b57      	ldr	r3, [pc, #348]	; (8001ba0 <Set_Start_Stop+0x29c>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4856      	ldr	r0, [pc, #344]	; (8001ba4 <Set_Start_Stop+0x2a0>)
 8001a4a:	f005 ff47 	bl	80078dc <iprintf>
						LCD_PrintString(0, 10, "      M");
 8001a4e:	4a56      	ldr	r2, [pc, #344]	; (8001ba8 <Set_Start_Stop+0x2a4>)
 8001a50:	210a      	movs	r1, #10
 8001a52:	2000      	movs	r0, #0
 8001a54:	f7ff fc0c 	bl	8001270 <LCD_PrintString>
						LCD_PrintString(0, 14, "OK");
 8001a58:	4a4a      	ldr	r2, [pc, #296]	; (8001b84 <Set_Start_Stop+0x280>)
 8001a5a:	210e      	movs	r1, #14
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff fc07 	bl	8001270 <LCD_PrintString>
					break;
 8001a62:	e081      	b.n	8001b68 <Set_Start_Stop+0x264>
				case 5:
					if (value > 500)
 8001a64:	4b44      	ldr	r3, [pc, #272]	; (8001b78 <Set_Start_Stop+0x274>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a6c:	dd22      	ble.n	8001ab4 <Set_Start_Stop+0x1b0>
					{
						LCD_PrintString(0, 10, "FALIED");
 8001a6e:	4a4a      	ldr	r2, [pc, #296]	; (8001b98 <Set_Start_Stop+0x294>)
 8001a70:	210a      	movs	r1, #10
 8001a72:	2000      	movs	r0, #0
 8001a74:	f7ff fbfc 	bl	8001270 <LCD_PrintString>
						while(HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 1)
 8001a78:	e013      	b.n	8001aa2 <Set_Start_Stop+0x19e>
						{
							LCD_PrintNum( 1, 10, value);
 8001a7a:	4b3f      	ldr	r3, [pc, #252]	; (8001b78 <Set_Start_Stop+0x274>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	210a      	movs	r1, #10
 8001a82:	2001      	movs	r0, #1
 8001a84:	f7ff fc14 	bl	80012b0 <LCD_PrintNum>
							HAL_Delay(500);
 8001a88:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a8c:	f001 ff0e 	bl	80038ac <HAL_Delay>
							LCD_PrintString(1, 10, "       M");
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <Set_Start_Stop+0x298>)
 8001a92:	210a      	movs	r1, #10
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff fbeb 	bl	8001270 <LCD_PrintString>
							HAL_Delay(500);
 8001a9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001a9e:	f001 ff05 	bl	80038ac <HAL_Delay>
						while(HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 1)
 8001aa2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001aa6:	4831      	ldr	r0, [pc, #196]	; (8001b6c <Set_Start_Stop+0x268>)
 8001aa8:	f002 ffc8 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d0e3      	beq.n	8001a7a <Set_Start_Stop+0x176>
						printf("%d""h\r\n", air2);
						LCD_PrintString(0, 10, "      M");
						LCD_PrintString(0, 14, "OK");
					}
				default:
					break;
 8001ab2:	e058      	b.n	8001b66 <Set_Start_Stop+0x262>
						air2 = value;
 8001ab4:	4b30      	ldr	r3, [pc, #192]	; (8001b78 <Set_Start_Stop+0x274>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a3c      	ldr	r2, [pc, #240]	; (8001bac <Set_Start_Stop+0x2a8>)
 8001aba:	6013      	str	r3, [r2, #0]
						printf("%d""h\r\n", air2);
 8001abc:	4b3b      	ldr	r3, [pc, #236]	; (8001bac <Set_Start_Stop+0x2a8>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	483b      	ldr	r0, [pc, #236]	; (8001bb0 <Set_Start_Stop+0x2ac>)
 8001ac4:	f005 ff0a 	bl	80078dc <iprintf>
						LCD_PrintString(0, 10, "      M");
 8001ac8:	4a37      	ldr	r2, [pc, #220]	; (8001ba8 <Set_Start_Stop+0x2a4>)
 8001aca:	210a      	movs	r1, #10
 8001acc:	2000      	movs	r0, #0
 8001ace:	f7ff fbcf 	bl	8001270 <LCD_PrintString>
						LCD_PrintString(0, 14, "OK");
 8001ad2:	4a2c      	ldr	r2, [pc, #176]	; (8001b84 <Set_Start_Stop+0x280>)
 8001ad4:	210e      	movs	r1, #14
 8001ad6:	2000      	movs	r0, #0
 8001ad8:	f7ff fbca 	bl	8001270 <LCD_PrintString>
					break;
 8001adc:	e043      	b.n	8001b66 <Set_Start_Stop+0x262>
				}
			}
			else if (ctrl_mode == 1)
 8001ade:	4b35      	ldr	r3, [pc, #212]	; (8001bb4 <Set_Start_Stop+0x2b0>)
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d040      	beq.n	8001b68 <Set_Start_Stop+0x264>
			{
				if (auto_man == 1)
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <Set_Start_Stop+0x2b4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d13c      	bne.n	8001b68 <Set_Start_Stop+0x264>
				{
					run_stop++;
 8001aee:	4b33      	ldr	r3, [pc, #204]	; (8001bbc <Set_Start_Stop+0x2b8>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	3301      	adds	r3, #1
 8001af4:	4a31      	ldr	r2, [pc, #196]	; (8001bbc <Set_Start_Stop+0x2b8>)
 8001af6:	6013      	str	r3, [r2, #0]
					if (run_stop > 2) run_stop = 1;
 8001af8:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <Set_Start_Stop+0x2b8>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	dd02      	ble.n	8001b06 <Set_Start_Stop+0x202>
 8001b00:	4b2e      	ldr	r3, [pc, #184]	; (8001bbc <Set_Start_Stop+0x2b8>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	601a      	str	r2, [r3, #0]
					if (run_stop == 1)
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <Set_Start_Stop+0x2b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	2b01      	cmp	r3, #1
 8001b0c:	d117      	bne.n	8001b3e <Set_Start_Stop+0x23a>
					{
						run = true;
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <Set_Start_Stop+0x2bc>)
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
						LCD_Clear();
 8001b14:	f7ff fb36 	bl	8001184 <LCD_Clear>
						LCD_PrintString(0, 0, "Cycles:");
 8001b18:	4a2a      	ldr	r2, [pc, #168]	; (8001bc4 <Set_Start_Stop+0x2c0>)
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fba7 	bl	8001270 <LCD_PrintString>
						LCD_PrintNum(0, 10, count);
 8001b22:	4b29      	ldr	r3, [pc, #164]	; (8001bc8 <Set_Start_Stop+0x2c4>)
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	b21b      	sxth	r3, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	210a      	movs	r1, #10
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fbbf 	bl	80012b0 <LCD_PrintNum>
						LCD_PrintString(1, 0, "State:   RUNNING");
 8001b32:	4a26      	ldr	r2, [pc, #152]	; (8001bcc <Set_Start_Stop+0x2c8>)
 8001b34:	2100      	movs	r1, #0
 8001b36:	2001      	movs	r0, #1
 8001b38:	f7ff fb9a 	bl	8001270 <LCD_PrintString>
					}
				}
			}
		}
	}
}
 8001b3c:	e014      	b.n	8001b68 <Set_Start_Stop+0x264>
					else if (run_stop == 2)
 8001b3e:	4b1f      	ldr	r3, [pc, #124]	; (8001bbc <Set_Start_Stop+0x2b8>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b02      	cmp	r3, #2
 8001b44:	d110      	bne.n	8001b68 <Set_Start_Stop+0x264>
						run = false;
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <Set_Start_Stop+0x2bc>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
						LCD_Clear();
 8001b4c:	f7ff fb1a 	bl	8001184 <LCD_Clear>
						LCD_PrintString(0, 2, "MACHINE STOP");
 8001b50:	4a1f      	ldr	r2, [pc, #124]	; (8001bd0 <Set_Start_Stop+0x2cc>)
 8001b52:	2102      	movs	r1, #2
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff fb8b 	bl	8001270 <LCD_PrintString>
						LCD_PrintString(1, 0, "State:   WARNING");
 8001b5a:	4a1e      	ldr	r2, [pc, #120]	; (8001bd4 <Set_Start_Stop+0x2d0>)
 8001b5c:	2100      	movs	r1, #0
 8001b5e:	2001      	movs	r0, #1
 8001b60:	f7ff fb86 	bl	8001270 <LCD_PrintString>
}
 8001b64:	e000      	b.n	8001b68 <Set_Start_Stop+0x264>
					break;
 8001b66:	bf00      	nop
}
 8001b68:	bf00      	nop
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	2000024a 	.word	0x2000024a
 8001b74:	200003b8 	.word	0x200003b8
 8001b78:	20000048 	.word	0x20000048
 8001b7c:	20000380 	.word	0x20000380
 8001b80:	0800b4ac 	.word	0x0800b4ac
 8001b84:	0800b4b4 	.word	0x0800b4b4
 8001b88:	20000398 	.word	0x20000398
 8001b8c:	0800b4b8 	.word	0x0800b4b8
 8001b90:	200003b4 	.word	0x200003b4
 8001b94:	0800b4c0 	.word	0x0800b4c0
 8001b98:	0800b4c8 	.word	0x0800b4c8
 8001b9c:	0800b4d0 	.word	0x0800b4d0
 8001ba0:	200003c4 	.word	0x200003c4
 8001ba4:	0800b4dc 	.word	0x0800b4dc
 8001ba8:	0800b4e4 	.word	0x0800b4e4
 8001bac:	200003c8 	.word	0x200003c8
 8001bb0:	0800b4ec 	.word	0x0800b4ec
 8001bb4:	2000024b 	.word	0x2000024b
 8001bb8:	200003bc 	.word	0x200003bc
 8001bbc:	200003c0 	.word	0x200003c0
 8001bc0:	20000249 	.word	0x20000249
 8001bc4:	0800b4f4 	.word	0x0800b4f4
 8001bc8:	20000044 	.word	0x20000044
 8001bcc:	0800b4fc 	.word	0x0800b4fc
 8001bd0:	0800b510 	.word	0x0800b510
 8001bd4:	0800b520 	.word	0x0800b520

08001bd8 <Manual_A>:


void Manual_A(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI2_Pin) == 0)
 8001bdc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001be0:	4822      	ldr	r0, [pc, #136]	; (8001c6c <Manual_A+0x94>)
 8001be2:	f002 ff2b 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d13d      	bne.n	8001c68 <Manual_A+0x90>
		{
			HAL_Delay(100);
 8001bec:	2064      	movs	r0, #100	; 0x64
 8001bee:	f001 fe5d 	bl	80038ac <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOE, DI2_Pin) == 0)
 8001bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001bf6:	481d      	ldr	r0, [pc, #116]	; (8001c6c <Manual_A+0x94>)
 8001bf8:	f002 ff20 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d132      	bne.n	8001c68 <Manual_A+0x90>
			{
				if (ctrl_mode == 1)
 8001c02:	4b1b      	ldr	r3, [pc, #108]	; (8001c70 <Manual_A+0x98>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d02e      	beq.n	8001c68 <Manual_A+0x90>
				{
					if (man_mode == 1)
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <Manual_A+0x9c>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d02a      	beq.n	8001c68 <Manual_A+0x90>
					{
						count_s++;
 8001c12:	4b19      	ldr	r3, [pc, #100]	; (8001c78 <Manual_A+0xa0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	3301      	adds	r3, #1
 8001c18:	4a17      	ldr	r2, [pc, #92]	; (8001c78 <Manual_A+0xa0>)
 8001c1a:	6013      	str	r3, [r2, #0]
						if (count_s > 2) count_s = 1;
 8001c1c:	4b16      	ldr	r3, [pc, #88]	; (8001c78 <Manual_A+0xa0>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b02      	cmp	r3, #2
 8001c22:	dd02      	ble.n	8001c2a <Manual_A+0x52>
 8001c24:	4b14      	ldr	r3, [pc, #80]	; (8001c78 <Manual_A+0xa0>)
 8001c26:	2201      	movs	r2, #1
 8001c28:	601a      	str	r2, [r3, #0]
						if (count_s == 1)
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <Manual_A+0xa0>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d105      	bne.n	8001c3e <Manual_A+0x66>
						{
							LCD_PrintString(1, 10, "A+");
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <Manual_A+0xa4>)
 8001c34:	210a      	movs	r1, #10
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7ff fb1a 	bl	8001270 <LCD_PrintString>
						}
					}
				}
			}
		}
}
 8001c3c:	e014      	b.n	8001c68 <Manual_A+0x90>
						else if ((count_s == 2) && (pv2 < DesiredForceB))
 8001c3e:	4b0e      	ldr	r3, [pc, #56]	; (8001c78 <Manual_A+0xa0>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d110      	bne.n	8001c68 <Manual_A+0x90>
 8001c46:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <Manual_A+0xa8>)
 8001c48:	ed93 7a00 	vldr	s14, [r3]
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <Manual_A+0xac>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d400      	bmi.n	8001c5e <Manual_A+0x86>
}
 8001c5c:	e004      	b.n	8001c68 <Manual_A+0x90>
							LCD_PrintString(1, 10, "A-");
 8001c5e:	4a0a      	ldr	r2, [pc, #40]	; (8001c88 <Manual_A+0xb0>)
 8001c60:	210a      	movs	r1, #10
 8001c62:	2001      	movs	r0, #1
 8001c64:	f7ff fb04 	bl	8001270 <LCD_PrintString>
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40021000 	.word	0x40021000
 8001c70:	2000024b 	.word	0x2000024b
 8001c74:	2000024d 	.word	0x2000024d
 8001c78:	200003ac 	.word	0x200003ac
 8001c7c:	0800b534 	.word	0x0800b534
 8001c80:	2000039c 	.word	0x2000039c
 8001c84:	20000398 	.word	0x20000398
 8001c88:	0800b538 	.word	0x0800b538

08001c8c <Tare>:

void Tare(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI2_Pin) == 0)
 8001c90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c94:	4835      	ldr	r0, [pc, #212]	; (8001d6c <Tare+0xe0>)
 8001c96:	f002 fed1 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d162      	bne.n	8001d66 <Tare+0xda>
		{
			HAL_Delay(100);
 8001ca0:	2064      	movs	r0, #100	; 0x64
 8001ca2:	f001 fe03 	bl	80038ac <HAL_Delay>
			if(HAL_GPIO_ReadPin(GPIOE, DI2_Pin) == 0)
 8001ca6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001caa:	4830      	ldr	r0, [pc, #192]	; (8001d6c <Tare+0xe0>)
 8001cac:	f002 fec6 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d157      	bne.n	8001d66 <Tare+0xda>
			{
				if(set_mode == 1)
 8001cb6:	4b2e      	ldr	r3, [pc, #184]	; (8001d70 <Tare+0xe4>)
 8001cb8:	781b      	ldrb	r3, [r3, #0]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d053      	beq.n	8001d66 <Tare+0xda>
				{
					value = value*10;
 8001cbe:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <Tare+0xe8>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b29      	ldr	r3, [pc, #164]	; (8001d74 <Tare+0xe8>)
 8001cce:	601a      	str	r2, [r3, #0]
					switch(mode)
 8001cd0:	4b29      	ldr	r3, [pc, #164]	; (8001d78 <Tare+0xec>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d843      	bhi.n	8001d62 <Tare+0xd6>
 8001cda:	a201      	add	r2, pc, #4	; (adr r2, 8001ce0 <Tare+0x54>)
 8001cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ce0:	08001cf5 	.word	0x08001cf5
 8001ce4:	08001d09 	.word	0x08001d09
 8001ce8:	08001d1b 	.word	0x08001d1b
 8001cec:	08001d2d 	.word	0x08001d2d
 8001cf0:	08001d3f 	.word	0x08001d3f
					{
					case 1:
						if (value > 9999) value = 0;
 8001cf4:	4b1f      	ldr	r3, [pc, #124]	; (8001d74 <Tare+0xe8>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f242 720f 	movw	r2, #9999	; 0x270f
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	dd27      	ble.n	8001d50 <Tare+0xc4>
 8001d00:	4b1c      	ldr	r3, [pc, #112]	; (8001d74 <Tare+0xe8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
						break;
 8001d06:	e023      	b.n	8001d50 <Tare+0xc4>
					case 2:
						if (value > 999) value = 0;
 8001d08:	4b1a      	ldr	r3, [pc, #104]	; (8001d74 <Tare+0xe8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d10:	db20      	blt.n	8001d54 <Tare+0xc8>
 8001d12:	4b18      	ldr	r3, [pc, #96]	; (8001d74 <Tare+0xe8>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	601a      	str	r2, [r3, #0]
						break;
 8001d18:	e01c      	b.n	8001d54 <Tare+0xc8>
					case 3:
						if (value > 999999) value = 0;
 8001d1a:	4b16      	ldr	r3, [pc, #88]	; (8001d74 <Tare+0xe8>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a17      	ldr	r2, [pc, #92]	; (8001d7c <Tare+0xf0>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	dd19      	ble.n	8001d58 <Tare+0xcc>
 8001d24:	4b13      	ldr	r3, [pc, #76]	; (8001d74 <Tare+0xe8>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
						break;
 8001d2a:	e015      	b.n	8001d58 <Tare+0xcc>
					case 4:
						if (value > 500) value = 0;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <Tare+0xe8>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d34:	dd12      	ble.n	8001d5c <Tare+0xd0>
 8001d36:	4b0f      	ldr	r3, [pc, #60]	; (8001d74 <Tare+0xe8>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
						break;
 8001d3c:	e00e      	b.n	8001d5c <Tare+0xd0>
					case 5:
						if (value > 500) value = 0;
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <Tare+0xe8>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d46:	dd0b      	ble.n	8001d60 <Tare+0xd4>
 8001d48:	4b0a      	ldr	r3, [pc, #40]	; (8001d74 <Tare+0xe8>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
						break;
 8001d4e:	e007      	b.n	8001d60 <Tare+0xd4>
						break;
 8001d50:	bf00      	nop
 8001d52:	e006      	b.n	8001d62 <Tare+0xd6>
						break;
 8001d54:	bf00      	nop
 8001d56:	e004      	b.n	8001d62 <Tare+0xd6>
						break;
 8001d58:	bf00      	nop
 8001d5a:	e002      	b.n	8001d62 <Tare+0xd6>
						break;
 8001d5c:	bf00      	nop
 8001d5e:	e000      	b.n	8001d62 <Tare+0xd6>
						break;
 8001d60:	bf00      	nop
					}
					LCD_Update();
 8001d62:	f000 f8b7 	bl	8001ed4 <LCD_Update>
				}
			}
		}
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	2000024a 	.word	0x2000024a
 8001d74:	20000048 	.word	0x20000048
 8001d78:	200003b8 	.word	0x200003b8
 8001d7c:	000f423f 	.word	0x000f423f

08001d80 <Manual_B>:

void Manual_B(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 0)
 8001d84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d88:	4822      	ldr	r0, [pc, #136]	; (8001e14 <Manual_B+0x94>)
 8001d8a:	f002 fe57 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d13c      	bne.n	8001e0e <Manual_B+0x8e>
		{
			HAL_Delay(100);
 8001d94:	2064      	movs	r0, #100	; 0x64
 8001d96:	f001 fd89 	bl	80038ac <HAL_Delay>
			if (HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 0)
 8001d9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001d9e:	481d      	ldr	r0, [pc, #116]	; (8001e14 <Manual_B+0x94>)
 8001da0:	f002 fe4c 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001da4:	4603      	mov	r3, r0
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d131      	bne.n	8001e0e <Manual_B+0x8e>
			{

				if (ctrl_mode == 1)
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <Manual_B+0x98>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d02d      	beq.n	8001e0e <Manual_B+0x8e>
				{
					if (man_mode == 1)
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <Manual_B+0x9c>)
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d029      	beq.n	8001e0e <Manual_B+0x8e>
					{
						count_b++;
 8001dba:	4b19      	ldr	r3, [pc, #100]	; (8001e20 <Manual_B+0xa0>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	4a17      	ldr	r2, [pc, #92]	; (8001e20 <Manual_B+0xa0>)
 8001dc2:	6013      	str	r3, [r2, #0]
						if (count_b > 2) count_b = 1;
 8001dc4:	4b16      	ldr	r3, [pc, #88]	; (8001e20 <Manual_B+0xa0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	dd02      	ble.n	8001dd2 <Manual_B+0x52>
 8001dcc:	4b14      	ldr	r3, [pc, #80]	; (8001e20 <Manual_B+0xa0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]
						if ((count_b == 1) && (pv1 >= DesiredForceA))
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <Manual_B+0xa0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d110      	bne.n	8001dfc <Manual_B+0x7c>
 8001dda:	4b12      	ldr	r3, [pc, #72]	; (8001e24 <Manual_B+0xa4>)
 8001ddc:	ed93 7a00 	vldr	s14, [r3]
 8001de0:	4b11      	ldr	r3, [pc, #68]	; (8001e28 <Manual_B+0xa8>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001dea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dee:	db05      	blt.n	8001dfc <Manual_B+0x7c>
						{
							LCD_PrintString(1, 14, "B+");
 8001df0:	4a0e      	ldr	r2, [pc, #56]	; (8001e2c <Manual_B+0xac>)
 8001df2:	210e      	movs	r1, #14
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff fa3b 	bl	8001270 <LCD_PrintString>
						}
					}
				}
			}
		}
}
 8001dfa:	e008      	b.n	8001e0e <Manual_B+0x8e>
						else if (count_b == 2)
 8001dfc:	4b08      	ldr	r3, [pc, #32]	; (8001e20 <Manual_B+0xa0>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	d104      	bne.n	8001e0e <Manual_B+0x8e>
							LCD_PrintString(1, 14, "B-");
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <Manual_B+0xb0>)
 8001e06:	210e      	movs	r1, #14
 8001e08:	2001      	movs	r0, #1
 8001e0a:	f7ff fa31 	bl	8001270 <LCD_PrintString>
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	40021000 	.word	0x40021000
 8001e18:	2000024b 	.word	0x2000024b
 8001e1c:	2000024d 	.word	0x2000024d
 8001e20:	200003b0 	.word	0x200003b0
 8001e24:	20000384 	.word	0x20000384
 8001e28:	20000380 	.word	0x20000380
 8001e2c:	0800b53c 	.word	0x0800b53c
 8001e30:	0800b540 	.word	0x0800b540

08001e34 <Up>:

void Up(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 0)
 8001e3a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e3e:	4821      	ldr	r0, [pc, #132]	; (8001ec4 <Up+0x90>)
 8001e40:	f002 fdfc 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d137      	bne.n	8001eba <Up+0x86>
	{
		HAL_Delay(100);
 8001e4a:	2064      	movs	r0, #100	; 0x64
 8001e4c:	f001 fd2e 	bl	80038ac <HAL_Delay>
		if (HAL_GPIO_ReadPin(GPIOE, DI3_Pin) == 0)
 8001e50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001e54:	481b      	ldr	r0, [pc, #108]	; (8001ec4 <Up+0x90>)
 8001e56:	f002 fdf1 	bl	8004a3c <HAL_GPIO_ReadPin>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d12c      	bne.n	8001eba <Up+0x86>
		{
			if (set_mode == 1)
 8001e60:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <Up+0x94>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d028      	beq.n	8001eba <Up+0x86>
			{
			  int digitValue = value % 10;
 8001e68:	4b18      	ldr	r3, [pc, #96]	; (8001ecc <Up+0x98>)
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	4b18      	ldr	r3, [pc, #96]	; (8001ed0 <Up+0x9c>)
 8001e6e:	fb83 1302 	smull	r1, r3, r3, r2
 8001e72:	1099      	asrs	r1, r3, #2
 8001e74:	17d3      	asrs	r3, r2, #31
 8001e76:	1ac9      	subs	r1, r1, r3
 8001e78:	460b      	mov	r3, r1
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	005b      	lsls	r3, r3, #1
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	607b      	str	r3, [r7, #4]
			  digitValue++;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	3301      	adds	r3, #1
 8001e88:	607b      	str	r3, [r7, #4]
			  if (digitValue > 9){
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b09      	cmp	r3, #9
 8001e8e:	dd01      	ble.n	8001e94 <Up+0x60>
				  digitValue = 0;
 8001e90:	2300      	movs	r3, #0
 8001e92:	607b      	str	r3, [r7, #4]
			  }
			  value = (value/10)*10 + digitValue;
 8001e94:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <Up+0x98>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <Up+0x9c>)
 8001e9a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e9e:	1092      	asrs	r2, r2, #2
 8001ea0:	17db      	asrs	r3, r3, #31
 8001ea2:	1ad2      	subs	r2, r2, r3
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	461a      	mov	r2, r3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a06      	ldr	r2, [pc, #24]	; (8001ecc <Up+0x98>)
 8001eb4:	6013      	str	r3, [r2, #0]
			  LCD_Update();
 8001eb6:	f000 f80d 	bl	8001ed4 <LCD_Update>
			}
		}
	}
}
 8001eba:	bf00      	nop
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	2000024a 	.word	0x2000024a
 8001ecc:	20000048 	.word	0x20000048
 8001ed0:	66666667 	.word	0x66666667

08001ed4 <LCD_Update>:

void LCD_Update(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
	  LCD_PrintString(1, 0, "Value: ");
 8001ed8:	4a09      	ldr	r2, [pc, #36]	; (8001f00 <LCD_Update+0x2c>)
 8001eda:	2100      	movs	r1, #0
 8001edc:	2001      	movs	r0, #1
 8001ede:	f7ff f9c7 	bl	8001270 <LCD_PrintString>
	  LCD_PrintNum( 1, 10, value);
 8001ee2:	4b08      	ldr	r3, [pc, #32]	; (8001f04 <LCD_Update+0x30>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	210a      	movs	r1, #10
 8001eea:	2001      	movs	r0, #1
 8001eec:	f7ff f9e0 	bl	80012b0 <LCD_PrintNum>
	  printf("%d\r\n", value);
 8001ef0:	4b04      	ldr	r3, [pc, #16]	; (8001f04 <LCD_Update+0x30>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4804      	ldr	r0, [pc, #16]	; (8001f08 <LCD_Update+0x34>)
 8001ef8:	f005 fcf0 	bl	80078dc <iprintf>
}
 8001efc:	bf00      	nop
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	0800b544 	.word	0x0800b544
 8001f04:	20000048 	.word	0x20000048
 8001f08:	0800b54c 	.word	0x0800b54c

08001f0c <__io_putchar>:
#else
	#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
	#define GETCHAR_PROTOTYPE int fgetc(FILE *f)
#endif
	PUTCHAR_PROTOTYPE
	{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b082      	sub	sp, #8
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
		HAL_UART_Transmit(&huart1, (uint8_t*)&ch,1,100);
 8001f14:	1d39      	adds	r1, r7, #4
 8001f16:	2364      	movs	r3, #100	; 0x64
 8001f18:	2201      	movs	r2, #1
 8001f1a:	4804      	ldr	r0, [pc, #16]	; (8001f2c <__io_putchar+0x20>)
 8001f1c:	f003 ff19 	bl	8005d52 <HAL_UART_Transmit>
		return ch;
 8001f20:	687b      	ldr	r3, [r7, #4]
	}
 8001f22:	4618      	mov	r0, r3
 8001f24:	3708      	adds	r7, #8
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000544 	.word	0x20000544

08001f30 <ProcessData_A>:


void ProcessData_A()
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b09a      	sub	sp, #104	; 0x68
 8001f34:	af00      	add	r7, sp, #0
	char tempData_A[100];
	strncpy(tempData_A, receivedData_A, dataIndex_A);
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <ProcessData_A+0xa0>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	1d3b      	adds	r3, r7, #4
 8001f3e:	4925      	ldr	r1, [pc, #148]	; (8001fd4 <ProcessData_A+0xa4>)
 8001f40:	4618      	mov	r0, r3
 8001f42:	f005 fd6a 	bl	8007a1a <strncpy>
	strtok(tempData_A, ",");
 8001f46:	1d3b      	adds	r3, r7, #4
 8001f48:	4923      	ldr	r1, [pc, #140]	; (8001fd8 <ProcessData_A+0xa8>)
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f006 fba6 	bl	800869c <strtok>
	strtok(NULL, ",");
 8001f50:	4921      	ldr	r1, [pc, #132]	; (8001fd8 <ProcessData_A+0xa8>)
 8001f52:	2000      	movs	r0, #0
 8001f54:	f006 fba2 	bl	800869c <strtok>
	strtok(NULL, ",");
 8001f58:	491f      	ldr	r1, [pc, #124]	; (8001fd8 <ProcessData_A+0xa8>)
 8001f5a:	2000      	movs	r0, #0
 8001f5c:	f006 fb9e 	bl	800869c <strtok>
	cas_a = atof(strtok(NULL, ","));
 8001f60:	491d      	ldr	r1, [pc, #116]	; (8001fd8 <ProcessData_A+0xa8>)
 8001f62:	2000      	movs	r0, #0
 8001f64:	f006 fb9a 	bl	800869c <strtok>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f004 ff1c 	bl	8006da8 <atof>
 8001f70:	ec53 2b10 	vmov	r2, r3, d0
 8001f74:	4610      	mov	r0, r2
 8001f76:	4619      	mov	r1, r3
 8001f78:	f7fe fe36 	bl	8000be8 <__aeabi_d2f>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	4a17      	ldr	r2, [pc, #92]	; (8001fdc <ProcessData_A+0xac>)
 8001f80:	6013      	str	r3, [r2, #0]
	F1 = cas_a*9.6545;
 8001f82:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <ProcessData_A+0xac>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe fade 	bl	8000548 <__aeabi_f2d>
 8001f8c:	a30e      	add	r3, pc, #56	; (adr r3, 8001fc8 <ProcessData_A+0x98>)
 8001f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f92:	f7fe fb31 	bl	80005f8 <__aeabi_dmul>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fe23 	bl	8000be8 <__aeabi_d2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a0e      	ldr	r2, [pc, #56]	; (8001fe0 <ProcessData_A+0xb0>)
 8001fa6:	6013      	str	r3, [r2, #0]
	pv1 = F1;
 8001fa8:	4b0d      	ldr	r3, [pc, #52]	; (8001fe0 <ProcessData_A+0xb0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a0d      	ldr	r2, [pc, #52]	; (8001fe4 <ProcessData_A+0xb4>)
 8001fae:	6013      	str	r3, [r2, #0]
	memset(receivedData_A, 0, sizeof(receivedData_A));
 8001fb0:	2264      	movs	r2, #100	; 0x64
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4807      	ldr	r0, [pc, #28]	; (8001fd4 <ProcessData_A+0xa4>)
 8001fb6:	f004 ff3f 	bl	8006e38 <memset>
	dataIndex_A = 0;
 8001fba:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <ProcessData_A+0xa0>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	701a      	strb	r2, [r3, #0]
}
 8001fc0:	bf00      	nop
 8001fc2:	3768      	adds	r7, #104	; 0x68
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	9fbe76c9 	.word	0x9fbe76c9
 8001fcc:	40234f1a 	.word	0x40234f1a
 8001fd0:	20000324 	.word	0x20000324
 8001fd4:	2000025c 	.word	0x2000025c
 8001fd8:	0800b554 	.word	0x0800b554
 8001fdc:	20000360 	.word	0x20000360
 8001fe0:	20000368 	.word	0x20000368
 8001fe4:	20000384 	.word	0x20000384

08001fe8 <ProcessData_B>:

void ProcessData_B()
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b09a      	sub	sp, #104	; 0x68
 8001fec:	af00      	add	r7, sp, #0
	char tempData_B[100];
	strncpy(tempData_B, receivedData_B, dataIndex_B);
 8001fee:	4b26      	ldr	r3, [pc, #152]	; (8002088 <ProcessData_B+0xa0>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	4925      	ldr	r1, [pc, #148]	; (800208c <ProcessData_B+0xa4>)
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f005 fd0e 	bl	8007a1a <strncpy>
	strtok(tempData_B, ",");
 8001ffe:	1d3b      	adds	r3, r7, #4
 8002000:	4923      	ldr	r1, [pc, #140]	; (8002090 <ProcessData_B+0xa8>)
 8002002:	4618      	mov	r0, r3
 8002004:	f006 fb4a 	bl	800869c <strtok>
	strtok(NULL, ",");
 8002008:	4921      	ldr	r1, [pc, #132]	; (8002090 <ProcessData_B+0xa8>)
 800200a:	2000      	movs	r0, #0
 800200c:	f006 fb46 	bl	800869c <strtok>
	strtok(NULL, ",");
 8002010:	491f      	ldr	r1, [pc, #124]	; (8002090 <ProcessData_B+0xa8>)
 8002012:	2000      	movs	r0, #0
 8002014:	f006 fb42 	bl	800869c <strtok>
	cas_b = atof(strtok(NULL, ","));
 8002018:	491d      	ldr	r1, [pc, #116]	; (8002090 <ProcessData_B+0xa8>)
 800201a:	2000      	movs	r0, #0
 800201c:	f006 fb3e 	bl	800869c <strtok>
 8002020:	4603      	mov	r3, r0
 8002022:	4618      	mov	r0, r3
 8002024:	f004 fec0 	bl	8006da8 <atof>
 8002028:	ec53 2b10 	vmov	r2, r3, d0
 800202c:	4610      	mov	r0, r2
 800202e:	4619      	mov	r1, r3
 8002030:	f7fe fdda 	bl	8000be8 <__aeabi_d2f>
 8002034:	4603      	mov	r3, r0
 8002036:	4a17      	ldr	r2, [pc, #92]	; (8002094 <ProcessData_B+0xac>)
 8002038:	6013      	str	r3, [r2, #0]
	F2 = cas_b*9.6545;
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <ProcessData_B+0xac>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f7fe fa82 	bl	8000548 <__aeabi_f2d>
 8002044:	a30e      	add	r3, pc, #56	; (adr r3, 8002080 <ProcessData_B+0x98>)
 8002046:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204a:	f7fe fad5 	bl	80005f8 <__aeabi_dmul>
 800204e:	4602      	mov	r2, r0
 8002050:	460b      	mov	r3, r1
 8002052:	4610      	mov	r0, r2
 8002054:	4619      	mov	r1, r3
 8002056:	f7fe fdc7 	bl	8000be8 <__aeabi_d2f>
 800205a:	4603      	mov	r3, r0
 800205c:	4a0e      	ldr	r2, [pc, #56]	; (8002098 <ProcessData_B+0xb0>)
 800205e:	6013      	str	r3, [r2, #0]
	pv2 = F2;
 8002060:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <ProcessData_B+0xb0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a0d      	ldr	r2, [pc, #52]	; (800209c <ProcessData_B+0xb4>)
 8002066:	6013      	str	r3, [r2, #0]
	memset(receivedData_B, 0, sizeof(receivedData_B));
 8002068:	2264      	movs	r2, #100	; 0x64
 800206a:	2100      	movs	r1, #0
 800206c:	4807      	ldr	r0, [pc, #28]	; (800208c <ProcessData_B+0xa4>)
 800206e:	f004 fee3 	bl	8006e38 <memset>
	dataIndex_B = 0;
 8002072:	4b05      	ldr	r3, [pc, #20]	; (8002088 <ProcessData_B+0xa0>)
 8002074:	2200      	movs	r2, #0
 8002076:	701a      	strb	r2, [r3, #0]
}
 8002078:	bf00      	nop
 800207a:	3768      	adds	r7, #104	; 0x68
 800207c:	46bd      	mov	sp, r7
 800207e:	bd80      	pop	{r7, pc}
 8002080:	9fbe76c9 	.word	0x9fbe76c9
 8002084:	40234f1a 	.word	0x40234f1a
 8002088:	20000325 	.word	0x20000325
 800208c:	200002c0 	.word	0x200002c0
 8002090:	0800b554 	.word	0x0800b554
 8002094:	20000364 	.word	0x20000364
 8002098:	2000036c 	.word	0x2000036c
 800209c:	2000039c 	.word	0x2000039c

080020a0 <HAL_UART_RxCpltCallback>:


//NHAN DU LIEU TU DAU CAN
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
	uint8_t i;
		if(huart->Instance == USART1) //uart1
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a8d      	ldr	r2, [pc, #564]	; (80022e4 <HAL_UART_RxCpltCallback+0x244>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	f040 80b9 	bne.w	8002226 <HAL_UART_RxCpltCallback+0x186>
		{
			if(Rx_indx==0) {for (i=0;i<50;i++) Rx_Buffer[i] = 0;}
 80020b4:	4b8c      	ldr	r3, [pc, #560]	; (80022e8 <HAL_UART_RxCpltCallback+0x248>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10c      	bne.n	80020d6 <HAL_UART_RxCpltCallback+0x36>
 80020bc:	2300      	movs	r3, #0
 80020be:	73fb      	strb	r3, [r7, #15]
 80020c0:	e006      	b.n	80020d0 <HAL_UART_RxCpltCallback+0x30>
 80020c2:	7bfb      	ldrb	r3, [r7, #15]
 80020c4:	4a89      	ldr	r2, [pc, #548]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80020c6:	2100      	movs	r1, #0
 80020c8:	54d1      	strb	r1, [r2, r3]
 80020ca:	7bfb      	ldrb	r3, [r7, #15]
 80020cc:	3301      	adds	r3, #1
 80020ce:	73fb      	strb	r3, [r7, #15]
 80020d0:	7bfb      	ldrb	r3, [r7, #15]
 80020d2:	2b31      	cmp	r3, #49	; 0x31
 80020d4:	d9f5      	bls.n	80020c2 <HAL_UART_RxCpltCallback+0x22>
			if(Rx_data[0] != 13)
 80020d6:	4b86      	ldr	r3, [pc, #536]	; (80022f0 <HAL_UART_RxCpltCallback+0x250>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	2b0d      	cmp	r3, #13
 80020dc:	d00a      	beq.n	80020f4 <HAL_UART_RxCpltCallback+0x54>
			{
				Rx_Buffer[Rx_indx++] = Rx_data[0];
 80020de:	4b82      	ldr	r3, [pc, #520]	; (80022e8 <HAL_UART_RxCpltCallback+0x248>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	b2d1      	uxtb	r1, r2
 80020e6:	4a80      	ldr	r2, [pc, #512]	; (80022e8 <HAL_UART_RxCpltCallback+0x248>)
 80020e8:	7011      	strb	r1, [r2, #0]
 80020ea:	461a      	mov	r2, r3
 80020ec:	4b80      	ldr	r3, [pc, #512]	; (80022f0 <HAL_UART_RxCpltCallback+0x250>)
 80020ee:	7819      	ldrb	r1, [r3, #0]
 80020f0:	4b7e      	ldr	r3, [pc, #504]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80020f2:	5499      	strb	r1, [r3, r2]
			}
			switch(Rx_data[0])
 80020f4:	4b7e      	ldr	r3, [pc, #504]	; (80022f0 <HAL_UART_RxCpltCallback+0x250>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	3b61      	subs	r3, #97	; 0x61
 80020fa:	2b11      	cmp	r3, #17
 80020fc:	f200 808d 	bhi.w	800221a <HAL_UART_RxCpltCallback+0x17a>
 8002100:	a201      	add	r2, pc, #4	; (adr r2, 8002108 <HAL_UART_RxCpltCallback+0x68>)
 8002102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002106:	bf00      	nop
 8002108:	080021a7 	.word	0x080021a7
 800210c:	080021d1 	.word	0x080021d1
 8002110:	0800221b 	.word	0x0800221b
 8002114:	0800221b 	.word	0x0800221b
 8002118:	08002151 	.word	0x08002151
 800211c:	080021fb 	.word	0x080021fb
 8002120:	0800221b 	.word	0x0800221b
 8002124:	0800221b 	.word	0x0800221b
 8002128:	0800221b 	.word	0x0800221b
 800212c:	0800221b 	.word	0x0800221b
 8002130:	0800221b 	.word	0x0800221b
 8002134:	0800221b 	.word	0x0800221b
 8002138:	0800221b 	.word	0x0800221b
 800213c:	0800221b 	.word	0x0800221b
 8002140:	0800221b 	.word	0x0800221b
 8002144:	0800221b 	.word	0x0800221b
 8002148:	0800221b 	.word	0x0800221b
 800214c:	08002177 	.word	0x08002177
			{
				case 'e':
					run = false;
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_UART_RxCpltCallback+0x254>)
 8002152:	2200      	movs	r2, #0
 8002154:	701a      	strb	r2, [r3, #0]
					count = 0;
 8002156:	4b68      	ldr	r3, [pc, #416]	; (80022f8 <HAL_UART_RxCpltCallback+0x258>)
 8002158:	2200      	movs	r2, #0
 800215a:	801a      	strh	r2, [r3, #0]
					LCD_Clear();
 800215c:	f7ff f812 	bl	8001184 <LCD_Clear>
					LCD_PrintString(0, 2, "MACHINE STOP");
 8002160:	4a66      	ldr	r2, [pc, #408]	; (80022fc <HAL_UART_RxCpltCallback+0x25c>)
 8002162:	2102      	movs	r1, #2
 8002164:	2000      	movs	r0, #0
 8002166:	f7ff f883 	bl	8001270 <LCD_PrintString>
					LCD_PrintString(1, 0, "State:   WARNING");
 800216a:	4a65      	ldr	r2, [pc, #404]	; (8002300 <HAL_UART_RxCpltCallback+0x260>)
 800216c:	2100      	movs	r1, #0
 800216e:	2001      	movs	r0, #1
 8002170:	f7ff f87e 	bl	8001270 <LCD_PrintString>
					break;
 8002174:	e052      	b.n	800221c <HAL_UART_RxCpltCallback+0x17c>
				case 'r':
					run = true;
 8002176:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <HAL_UART_RxCpltCallback+0x254>)
 8002178:	2201      	movs	r2, #1
 800217a:	701a      	strb	r2, [r3, #0]
					LCD_Clear();
 800217c:	f7ff f802 	bl	8001184 <LCD_Clear>
					LCD_PrintString(0, 0, "Cycles:");
 8002180:	4a60      	ldr	r2, [pc, #384]	; (8002304 <HAL_UART_RxCpltCallback+0x264>)
 8002182:	2100      	movs	r1, #0
 8002184:	2000      	movs	r0, #0
 8002186:	f7ff f873 	bl	8001270 <LCD_PrintString>
					LCD_PrintNum(0, 10, count);
 800218a:	4b5b      	ldr	r3, [pc, #364]	; (80022f8 <HAL_UART_RxCpltCallback+0x258>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b21b      	sxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	210a      	movs	r1, #10
 8002194:	2000      	movs	r0, #0
 8002196:	f7ff f88b 	bl	80012b0 <LCD_PrintNum>
					LCD_PrintString(1, 0, "State:   RUNNING");
 800219a:	4a5b      	ldr	r2, [pc, #364]	; (8002308 <HAL_UART_RxCpltCallback+0x268>)
 800219c:	2100      	movs	r1, #0
 800219e:	2001      	movs	r0, #1
 80021a0:	f7ff f866 	bl	8001270 <LCD_PrintString>
					break;
 80021a4:	e03a      	b.n	800221c <HAL_UART_RxCpltCallback+0x17c>
				case 'a':
					DesiredForceA = atof(Rx_Buffer);
 80021a6:	4851      	ldr	r0, [pc, #324]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80021a8:	f004 fdfe 	bl	8006da8 <atof>
 80021ac:	ec53 2b10 	vmov	r2, r3, d0
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f7fe fd18 	bl	8000be8 <__aeabi_d2f>
 80021b8:	4603      	mov	r3, r0
 80021ba:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_UART_RxCpltCallback+0x26c>)
 80021bc:	6013      	str	r3, [r2, #0]
					memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80021be:	2232      	movs	r2, #50	; 0x32
 80021c0:	2100      	movs	r1, #0
 80021c2:	484a      	ldr	r0, [pc, #296]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80021c4:	f004 fe38 	bl	8006e38 <memset>
					Rx_indx = 0;
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_UART_RxCpltCallback+0x248>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	701a      	strb	r2, [r3, #0]
					break;
 80021ce:	e025      	b.n	800221c <HAL_UART_RxCpltCallback+0x17c>
				case 'b':
					DesiredForceB = atof(Rx_Buffer);
 80021d0:	4846      	ldr	r0, [pc, #280]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80021d2:	f004 fde9 	bl	8006da8 <atof>
 80021d6:	ec53 2b10 	vmov	r2, r3, d0
 80021da:	4610      	mov	r0, r2
 80021dc:	4619      	mov	r1, r3
 80021de:	f7fe fd03 	bl	8000be8 <__aeabi_d2f>
 80021e2:	4603      	mov	r3, r0
 80021e4:	4a4a      	ldr	r2, [pc, #296]	; (8002310 <HAL_UART_RxCpltCallback+0x270>)
 80021e6:	6013      	str	r3, [r2, #0]
					memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 80021e8:	2232      	movs	r2, #50	; 0x32
 80021ea:	2100      	movs	r1, #0
 80021ec:	483f      	ldr	r0, [pc, #252]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80021ee:	f004 fe23 	bl	8006e38 <memset>
					Rx_indx = 0;
 80021f2:	4b3d      	ldr	r3, [pc, #244]	; (80022e8 <HAL_UART_RxCpltCallback+0x248>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
					break;
 80021f8:	e010      	b.n	800221c <HAL_UART_RxCpltCallback+0x17c>
				case 'f':
					cycles = atoi(Rx_Buffer);
 80021fa:	483c      	ldr	r0, [pc, #240]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 80021fc:	f004 fdd7 	bl	8006dae <atoi>
 8002200:	4603      	mov	r3, r0
 8002202:	461a      	mov	r2, r3
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_UART_RxCpltCallback+0x274>)
 8002206:	601a      	str	r2, [r3, #0]
					memset(Rx_Buffer, 0, sizeof(Rx_Buffer));
 8002208:	2232      	movs	r2, #50	; 0x32
 800220a:	2100      	movs	r1, #0
 800220c:	4837      	ldr	r0, [pc, #220]	; (80022ec <HAL_UART_RxCpltCallback+0x24c>)
 800220e:	f004 fe13 	bl	8006e38 <memset>
					Rx_indx = 0;
 8002212:	4b35      	ldr	r3, [pc, #212]	; (80022e8 <HAL_UART_RxCpltCallback+0x248>)
 8002214:	2200      	movs	r2, #0
 8002216:	701a      	strb	r2, [r3, #0]
					break;
 8002218:	e000      	b.n	800221c <HAL_UART_RxCpltCallback+0x17c>
				default:
					break;
 800221a:	bf00      	nop
			}
			HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data,1);
 800221c:	2201      	movs	r2, #1
 800221e:	4934      	ldr	r1, [pc, #208]	; (80022f0 <HAL_UART_RxCpltCallback+0x250>)
 8002220:	483d      	ldr	r0, [pc, #244]	; (8002318 <HAL_UART_RxCpltCallback+0x278>)
 8002222:	f003 fe28 	bl	8005e76 <HAL_UART_Receive_IT>
		}

		if (huart->Instance == huart3.Instance) //Check Port
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	4b3c      	ldr	r3, [pc, #240]	; (800231c <HAL_UART_RxCpltCallback+0x27c>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	429a      	cmp	r2, r3
 8002230:	d126      	bne.n	8002280 <HAL_UART_RxCpltCallback+0x1e0>
		{
			  if (strncmp(&receivedData_A[dataIndex_A - 2], "\r\n", 2) == 0)
 8002232:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_UART_RxCpltCallback+0x280>)
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	3b02      	subs	r3, #2
 8002238:	4a3a      	ldr	r2, [pc, #232]	; (8002324 <HAL_UART_RxCpltCallback+0x284>)
 800223a:	4413      	add	r3, r2
 800223c:	2202      	movs	r2, #2
 800223e:	493a      	ldr	r1, [pc, #232]	; (8002328 <HAL_UART_RxCpltCallback+0x288>)
 8002240:	4618      	mov	r0, r3
 8002242:	f005 fbd6 	bl	80079f2 <strncmp>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <HAL_UART_RxCpltCallback+0x1b2>
			  {
			    ProcessData_A();
 800224c:	f7ff fe70 	bl	8001f30 <ProcessData_A>
 8002250:	e00c      	b.n	800226c <HAL_UART_RxCpltCallback+0x1cc>
			  }
			  else
			  {
			    receivedData_A[dataIndex_A++] = huart->Instance->DR;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	6859      	ldr	r1, [r3, #4]
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_UART_RxCpltCallback+0x280>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	1c5a      	adds	r2, r3, #1
 800225e:	b2d0      	uxtb	r0, r2
 8002260:	4a2f      	ldr	r2, [pc, #188]	; (8002320 <HAL_UART_RxCpltCallback+0x280>)
 8002262:	7010      	strb	r0, [r2, #0]
 8002264:	461a      	mov	r2, r3
 8002266:	b2c9      	uxtb	r1, r1
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_UART_RxCpltCallback+0x284>)
 800226a:	5499      	strb	r1, [r3, r2]
			  }
			  HAL_UART_Receive_IT(&huart3, (uint8_t *)&receivedData_A[dataIndex_A], 1);
 800226c:	4b2c      	ldr	r3, [pc, #176]	; (8002320 <HAL_UART_RxCpltCallback+0x280>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	461a      	mov	r2, r3
 8002272:	4b2c      	ldr	r3, [pc, #176]	; (8002324 <HAL_UART_RxCpltCallback+0x284>)
 8002274:	4413      	add	r3, r2
 8002276:	2201      	movs	r2, #1
 8002278:	4619      	mov	r1, r3
 800227a:	4828      	ldr	r0, [pc, #160]	; (800231c <HAL_UART_RxCpltCallback+0x27c>)
 800227c:	f003 fdfb 	bl	8005e76 <HAL_UART_Receive_IT>
		}

		if (huart->Instance == huart4.Instance) // Check Port 3
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681a      	ldr	r2, [r3, #0]
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <HAL_UART_RxCpltCallback+0x28c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	429a      	cmp	r2, r3
 800228a:	d126      	bne.n	80022da <HAL_UART_RxCpltCallback+0x23a>
		{
			  if (strncmp(&receivedData_B[dataIndex_B - 2], "\r\n", 2) == 0)
 800228c:	4b28      	ldr	r3, [pc, #160]	; (8002330 <HAL_UART_RxCpltCallback+0x290>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3b02      	subs	r3, #2
 8002292:	4a28      	ldr	r2, [pc, #160]	; (8002334 <HAL_UART_RxCpltCallback+0x294>)
 8002294:	4413      	add	r3, r2
 8002296:	2202      	movs	r2, #2
 8002298:	4923      	ldr	r1, [pc, #140]	; (8002328 <HAL_UART_RxCpltCallback+0x288>)
 800229a:	4618      	mov	r0, r3
 800229c:	f005 fba9 	bl	80079f2 <strncmp>
 80022a0:	4603      	mov	r3, r0
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d102      	bne.n	80022ac <HAL_UART_RxCpltCallback+0x20c>
			  {
			    ProcessData_B();
 80022a6:	f7ff fe9f 	bl	8001fe8 <ProcessData_B>
 80022aa:	e00c      	b.n	80022c6 <HAL_UART_RxCpltCallback+0x226>
			  }
			  else
			  {
			    receivedData_B[dataIndex_B++] = huart->Instance->DR;
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	6859      	ldr	r1, [r3, #4]
 80022b2:	4b1f      	ldr	r3, [pc, #124]	; (8002330 <HAL_UART_RxCpltCallback+0x290>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	1c5a      	adds	r2, r3, #1
 80022b8:	b2d0      	uxtb	r0, r2
 80022ba:	4a1d      	ldr	r2, [pc, #116]	; (8002330 <HAL_UART_RxCpltCallback+0x290>)
 80022bc:	7010      	strb	r0, [r2, #0]
 80022be:	461a      	mov	r2, r3
 80022c0:	b2c9      	uxtb	r1, r1
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <HAL_UART_RxCpltCallback+0x294>)
 80022c4:	5499      	strb	r1, [r3, r2]
			  }
			  HAL_UART_Receive_IT(&huart4, (uint8_t *)&receivedData_B[dataIndex_B], 1);
 80022c6:	4b1a      	ldr	r3, [pc, #104]	; (8002330 <HAL_UART_RxCpltCallback+0x290>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_UART_RxCpltCallback+0x294>)
 80022ce:	4413      	add	r3, r2
 80022d0:	2201      	movs	r2, #1
 80022d2:	4619      	mov	r1, r3
 80022d4:	4815      	ldr	r0, [pc, #84]	; (800232c <HAL_UART_RxCpltCallback+0x28c>)
 80022d6:	f003 fdce 	bl	8005e76 <HAL_UART_Receive_IT>
		}
	}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	40011000 	.word	0x40011000
 80022e8:	20000326 	.word	0x20000326
 80022ec:	20000328 	.word	0x20000328
 80022f0:	2000035c 	.word	0x2000035c
 80022f4:	20000249 	.word	0x20000249
 80022f8:	20000044 	.word	0x20000044
 80022fc:	0800b510 	.word	0x0800b510
 8002300:	0800b520 	.word	0x0800b520
 8002304:	0800b4f4 	.word	0x0800b4f4
 8002308:	0800b4fc 	.word	0x0800b4fc
 800230c:	20000380 	.word	0x20000380
 8002310:	20000398 	.word	0x20000398
 8002314:	200003b4 	.word	0x200003b4
 8002318:	20000544 	.word	0x20000544
 800231c:	20000588 	.word	0x20000588
 8002320:	20000324 	.word	0x20000324
 8002324:	2000025c 	.word	0x2000025c
 8002328:	0800b558 	.word	0x0800b558
 800232c:	20000500 	.word	0x20000500
 8002330:	20000325 	.word	0x20000325
 8002334:	200002c0 	.word	0x200002c0

08002338 <HAL_ADC_ConvCpltCallback>:


//DOC DU LIEU ANALOG (THUOC DIEN TRO)
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	if (hadc->Instance == hadc1.Instance) // check interrupt of ADC 1
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b31      	ldr	r3, [pc, #196]	; (800240c <HAL_ADC_ConvCpltCallback+0xd4>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	429a      	cmp	r2, r3
 800234a:	d12a      	bne.n	80023a2 <HAL_ADC_ConvCpltCallback+0x6a>
	{
		adc1_value = HAL_ADC_GetValue(&hadc1);
 800234c:	482f      	ldr	r0, [pc, #188]	; (800240c <HAL_ADC_ConvCpltCallback+0xd4>)
 800234e:	f001 fd03 	bl	8003d58 <HAL_ADC_GetValue>
 8002352:	4603      	mov	r3, r0
 8002354:	b21a      	sxth	r2, r3
 8002356:	4b2e      	ldr	r3, [pc, #184]	; (8002410 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002358:	801a      	strh	r2, [r3, #0]
		pos1 = 750.0 - (float)(adc1_value*750)/4095;
 800235a:	4b2d      	ldr	r3, [pc, #180]	; (8002410 <HAL_ADC_ConvCpltCallback+0xd8>)
 800235c:	881b      	ldrh	r3, [r3, #0]
 800235e:	b21b      	sxth	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	f240 23ee 	movw	r3, #750	; 0x2ee
 8002366:	fb02 f303 	mul.w	r3, r2, r3
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002372:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002414 <HAL_ADC_ConvCpltCallback+0xdc>
 8002376:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800237a:	ee16 0a90 	vmov	r0, s13
 800237e:	f7fe f8e3 	bl	8000548 <__aeabi_f2d>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	f04f 0000 	mov.w	r0, #0
 800238a:	4923      	ldr	r1, [pc, #140]	; (8002418 <HAL_ADC_ConvCpltCallback+0xe0>)
 800238c:	f7fd ff7c 	bl	8000288 <__aeabi_dsub>
 8002390:	4602      	mov	r2, r0
 8002392:	460b      	mov	r3, r1
 8002394:	4610      	mov	r0, r2
 8002396:	4619      	mov	r1, r3
 8002398:	f7fe fc26 	bl	8000be8 <__aeabi_d2f>
 800239c:	4603      	mov	r3, r0
 800239e:	4a1f      	ldr	r2, [pc, #124]	; (800241c <HAL_ADC_ConvCpltCallback+0xe4>)
 80023a0:	6013      	str	r3, [r2, #0]
	}

	if (hadc->Instance == hadc2.Instance) // check interrupt of ADC 1
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	4b1e      	ldr	r3, [pc, #120]	; (8002420 <HAL_ADC_ConvCpltCallback+0xe8>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d12a      	bne.n	8002404 <HAL_ADC_ConvCpltCallback+0xcc>
	{
		adc2_value = HAL_ADC_GetValue(&hadc2);
 80023ae:	481c      	ldr	r0, [pc, #112]	; (8002420 <HAL_ADC_ConvCpltCallback+0xe8>)
 80023b0:	f001 fcd2 	bl	8003d58 <HAL_ADC_GetValue>
 80023b4:	4603      	mov	r3, r0
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	4b1a      	ldr	r3, [pc, #104]	; (8002424 <HAL_ADC_ConvCpltCallback+0xec>)
 80023ba:	801a      	strh	r2, [r3, #0]
		pos2 = 600.0 - (float)(adc2_value*600)/4095;
 80023bc:	4b19      	ldr	r3, [pc, #100]	; (8002424 <HAL_ADC_ConvCpltCallback+0xec>)
 80023be:	881b      	ldrh	r3, [r3, #0]
 80023c0:	b21b      	sxth	r3, r3
 80023c2:	461a      	mov	r2, r3
 80023c4:	f44f 7316 	mov.w	r3, #600	; 0x258
 80023c8:	fb02 f303 	mul.w	r3, r2, r3
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023d4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002414 <HAL_ADC_ConvCpltCallback+0xdc>
 80023d8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80023dc:	ee16 0a90 	vmov	r0, s13
 80023e0:	f7fe f8b2 	bl	8000548 <__aeabi_f2d>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	f04f 0000 	mov.w	r0, #0
 80023ec:	490e      	ldr	r1, [pc, #56]	; (8002428 <HAL_ADC_ConvCpltCallback+0xf0>)
 80023ee:	f7fd ff4b 	bl	8000288 <__aeabi_dsub>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4610      	mov	r0, r2
 80023f8:	4619      	mov	r1, r3
 80023fa:	f7fe fbf5 	bl	8000be8 <__aeabi_d2f>
 80023fe:	4603      	mov	r3, r0
 8002400:	4a0a      	ldr	r2, [pc, #40]	; (800242c <HAL_ADC_ConvCpltCallback+0xf4>)
 8002402:	6013      	str	r3, [r2, #0]
	}
}
 8002404:	bf00      	nop
 8002406:	3708      	adds	r7, #8
 8002408:	46bd      	mov	sp, r7
 800240a:	bd80      	pop	{r7, pc}
 800240c:	200003cc 	.word	0x200003cc
 8002410:	2000024e 	.word	0x2000024e
 8002414:	457ff000 	.word	0x457ff000
 8002418:	40877000 	.word	0x40877000
 800241c:	20000254 	.word	0x20000254
 8002420:	20000414 	.word	0x20000414
 8002424:	20000250 	.word	0x20000250
 8002428:	4082c000 	.word	0x4082c000
 800242c:	20000258 	.word	0x20000258

08002430 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	if(htim->Instance==htim3.Instance) //TIMER3 GUI DU LIEU DEN STM32F205
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	4b49      	ldr	r3, [pc, #292]	; (8002564 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d169      	bne.n	8002518 <HAL_TIM_PeriodElapsedCallback+0xe8>
	{
		printf("%.2f""a\r\n", F1);
 8002444:	4b48      	ldr	r3, [pc, #288]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4618      	mov	r0, r3
 800244a:	f7fe f87d 	bl	8000548 <__aeabi_f2d>
 800244e:	4602      	mov	r2, r0
 8002450:	460b      	mov	r3, r1
 8002452:	4846      	ldr	r0, [pc, #280]	; (800256c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8002454:	f005 fa42 	bl	80078dc <iprintf>
		printf("%.2f""b\r\n", F2);
 8002458:	4b45      	ldr	r3, [pc, #276]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f873 	bl	8000548 <__aeabi_f2d>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4843      	ldr	r0, [pc, #268]	; (8002574 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8002468:	f005 fa38 	bl	80078dc <iprintf>
		printf("%d""c\r\n", count);
 800246c:	4b42      	ldr	r3, [pc, #264]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800246e:	881b      	ldrh	r3, [r3, #0]
 8002470:	b21b      	sxth	r3, r3
 8002472:	4619      	mov	r1, r3
 8002474:	4841      	ldr	r0, [pc, #260]	; (800257c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8002476:	f005 fa31 	bl	80078dc <iprintf>
		printf("%.2f""d\r\n", DesiredForceA);
 800247a:	4b41      	ldr	r3, [pc, #260]	; (8002580 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f7fe f862 	bl	8000548 <__aeabi_f2d>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	483e      	ldr	r0, [pc, #248]	; (8002584 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800248a:	f005 fa27 	bl	80078dc <iprintf>
		printf("%.2f""e\r\n", DesiredForceB);
 800248e:	4b3e      	ldr	r3, [pc, #248]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f858 	bl	8000548 <__aeabi_f2d>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	483b      	ldr	r0, [pc, #236]	; (800258c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800249e:	f005 fa1d 	bl	80078dc <iprintf>
		printf("%d""f\r\n", cycles);
 80024a2:	4b3b      	ldr	r3, [pc, #236]	; (8002590 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4619      	mov	r1, r3
 80024a8:	483a      	ldr	r0, [pc, #232]	; (8002594 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80024aa:	f005 fa17 	bl	80078dc <iprintf>
		printf("%d""k\r\n", run);
 80024ae:	4b3a      	ldr	r3, [pc, #232]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	4619      	mov	r1, r3
 80024b4:	4839      	ldr	r0, [pc, #228]	; (800259c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80024b6:	f005 fa11 	bl	80078dc <iprintf>
		printf("q%.2f\r\n", F1);
 80024ba:	4b2b      	ldr	r3, [pc, #172]	; (8002568 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4618      	mov	r0, r3
 80024c0:	f7fe f842 	bl	8000548 <__aeabi_f2d>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4835      	ldr	r0, [pc, #212]	; (80025a0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80024ca:	f005 fa07 	bl	80078dc <iprintf>
		printf("w%.2f\r\n", F2);
 80024ce:	4b28      	ldr	r3, [pc, #160]	; (8002570 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7fe f838 	bl	8000548 <__aeabi_f2d>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4831      	ldr	r0, [pc, #196]	; (80025a4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80024de:	f005 f9fd 	bl	80078dc <iprintf>
		printf("i%.2f\r\n", pos1);
 80024e2:	4b31      	ldr	r3, [pc, #196]	; (80025a8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe f82e 	bl	8000548 <__aeabi_f2d>
 80024ec:	4602      	mov	r2, r0
 80024ee:	460b      	mov	r3, r1
 80024f0:	482e      	ldr	r0, [pc, #184]	; (80025ac <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80024f2:	f005 f9f3 	bl	80078dc <iprintf>
		printf("y%.2f\r\n", pos2);
 80024f6:	4b2e      	ldr	r3, [pc, #184]	; (80025b0 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f7fe f824 	bl	8000548 <__aeabi_f2d>
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	482b      	ldr	r0, [pc, #172]	; (80025b4 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002506:	f005 f9e9 	bl	80078dc <iprintf>
		printf("u%d\r\n", count);
 800250a:	4b1b      	ldr	r3, [pc, #108]	; (8002578 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800250c:	881b      	ldrh	r3, [r3, #0]
 800250e:	b21b      	sxth	r3, r3
 8002510:	4619      	mov	r1, r3
 8002512:	4829      	ldr	r0, [pc, #164]	; (80025b8 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002514:	f005 f9e2 	bl	80078dc <iprintf>
	}

	if(htim->Instance==htim4.Instance) //TIMER4 HIEN THI DEN BAO
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681a      	ldr	r2, [r3, #0]
 800251c:	4b27      	ldr	r3, [pc, #156]	; (80025bc <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d11b      	bne.n	800255c <HAL_TIM_PeriodElapsedCallback+0x12c>
	{
		  if (run == 1)
 8002524:	4b1c      	ldr	r3, [pc, #112]	; (8002598 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8002526:	781b      	ldrb	r3, [r3, #0]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00c      	beq.n	8002546 <HAL_TIM_PeriodElapsedCallback+0x116>
		  {
			  HAL_GPIO_WritePin(GPIOD, DO10_Pin, 1);
 800252c:	2201      	movs	r2, #1
 800252e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002532:	4823      	ldr	r0, [pc, #140]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002534:	f002 fa9a 	bl	8004a6c <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOB, DO11_Pin, 0);
 8002538:	2200      	movs	r2, #0
 800253a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800253e:	4821      	ldr	r0, [pc, #132]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002540:	f002 fa94 	bl	8004a6c <HAL_GPIO_WritePin>
		  {
			  HAL_GPIO_TogglePin(GPIOD, DO10_Pin);
			  HAL_GPIO_WritePin(GPIOB, DO11_Pin, 1);
		  }
	}
}
 8002544:	e00a      	b.n	800255c <HAL_TIM_PeriodElapsedCallback+0x12c>
			  HAL_GPIO_TogglePin(GPIOD, DO10_Pin);
 8002546:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800254a:	481d      	ldr	r0, [pc, #116]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x190>)
 800254c:	f002 faa7 	bl	8004a9e <HAL_GPIO_TogglePin>
			  HAL_GPIO_WritePin(GPIOB, DO11_Pin, 1);
 8002550:	2201      	movs	r2, #1
 8002552:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002556:	481b      	ldr	r0, [pc, #108]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002558:	f002 fa88 	bl	8004a6c <HAL_GPIO_WritePin>
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000470 	.word	0x20000470
 8002568:	20000368 	.word	0x20000368
 800256c:	0800b55c 	.word	0x0800b55c
 8002570:	2000036c 	.word	0x2000036c
 8002574:	0800b564 	.word	0x0800b564
 8002578:	20000044 	.word	0x20000044
 800257c:	0800b56c 	.word	0x0800b56c
 8002580:	20000380 	.word	0x20000380
 8002584:	0800b4ac 	.word	0x0800b4ac
 8002588:	20000398 	.word	0x20000398
 800258c:	0800b4b8 	.word	0x0800b4b8
 8002590:	200003b4 	.word	0x200003b4
 8002594:	0800b4c0 	.word	0x0800b4c0
 8002598:	20000249 	.word	0x20000249
 800259c:	0800b574 	.word	0x0800b574
 80025a0:	0800b57c 	.word	0x0800b57c
 80025a4:	0800b584 	.word	0x0800b584
 80025a8:	20000254 	.word	0x20000254
 80025ac:	0800b58c 	.word	0x0800b58c
 80025b0:	20000258 	.word	0x20000258
 80025b4:	0800b594 	.word	0x0800b594
 80025b8:	0800b59c 	.word	0x0800b59c
 80025bc:	200004b8 	.word	0x200004b8
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40020400 	.word	0x40020400

080025c8 <HAL_GPIO_EXTI_Callback>:
//NGAT NGOAI CHO NUT NHAN STOP VA CAM BIEN HANH TRINH
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == DI6_Pin) //CBHT
 80025d2:	88fb      	ldrh	r3, [r7, #6]
 80025d4:	2b80      	cmp	r3, #128	; 0x80
 80025d6:	d106      	bne.n	80025e6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		CBHT = 1;
 80025d8:	4b0b      	ldr	r3, [pc, #44]	; (8002608 <HAL_GPIO_EXTI_Callback+0x40>)
 80025da:	2201      	movs	r2, #1
 80025dc:	701a      	strb	r2, [r3, #0]
		run = 0;
 80025de:	4b0b      	ldr	r3, [pc, #44]	; (800260c <HAL_GPIO_EXTI_Callback+0x44>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
	else if (GPIO_Pin == DI1_Pin) //NUT NHAN STOP
	{
		run = 0;
		count = 0;
	}
}
 80025e4:	e009      	b.n	80025fa <HAL_GPIO_EXTI_Callback+0x32>
	else if (GPIO_Pin == DI1_Pin) //NUT NHAN STOP
 80025e6:	88fb      	ldrh	r3, [r7, #6]
 80025e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ec:	d105      	bne.n	80025fa <HAL_GPIO_EXTI_Callback+0x32>
		run = 0;
 80025ee:	4b07      	ldr	r3, [pc, #28]	; (800260c <HAL_GPIO_EXTI_Callback+0x44>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
		count = 0;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_GPIO_EXTI_Callback+0x48>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	801a      	strh	r2, [r3, #0]
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	20000248 	.word	0x20000248
 800260c:	20000249 	.word	0x20000249
 8002610:	20000044 	.word	0x20000044
 8002614:	00000000 	.word	0x00000000

08002618 <main>:


int main(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  HAL_Init();
 800261c:	f001 f8d4 	bl	80037c8 <HAL_Init>
  SystemClock_Config();
 8002620:	f000 f9cc 	bl	80029bc <SystemClock_Config>
  MX_GPIO_Init();
 8002624:	f000 fc26 	bl	8002e74 <MX_GPIO_Init>
  MX_DAC_Init();
 8002628:	f000 fad6 	bl	8002bd8 <MX_DAC_Init>
  MX_USART1_UART_Init();
 800262c:	f000 fbce 	bl	8002dcc <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8002630:	f000 fa2e 	bl	8002a90 <MX_ADC1_Init>
  MX_UART4_Init();
 8002634:	f000 fba0 	bl	8002d78 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002638:	f000 fbf2 	bl	8002e20 <MX_USART3_UART_Init>
  MX_ADC2_Init();
 800263c:	f000 fa7a 	bl	8002b34 <MX_ADC2_Init>
  MX_TIM4_Init();
 8002640:	f000 fb4c 	bl	8002cdc <MX_TIM4_Init>
  MX_TIM3_Init();
 8002644:	f000 fafc 	bl	8002c40 <MX_TIM3_Init>

  LCD_Init();
 8002648:	f7fe fdca 	bl	80011e0 <LCD_Init>
  HAL_GPIO_WritePin(LCDLED_GPIO_Port,LCDLED_Pin,1);
 800264c:	2201      	movs	r2, #1
 800264e:	2110      	movs	r1, #16
 8002650:	48b3      	ldr	r0, [pc, #716]	; (8002920 <main+0x308>)
 8002652:	f002 fa0b 	bl	8004a6c <HAL_GPIO_WritePin>
  HAL_ADC_Start_IT(&hadc1);
 8002656:	48b3      	ldr	r0, [pc, #716]	; (8002924 <main+0x30c>)
 8002658:	f001 f990 	bl	800397c <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 800265c:	48b2      	ldr	r0, [pc, #712]	; (8002928 <main+0x310>)
 800265e:	f001 f98d 	bl	800397c <HAL_ADC_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8002662:	2100      	movs	r1, #0
 8002664:	48b1      	ldr	r0, [pc, #708]	; (800292c <main+0x314>)
 8002666:	f001 fef4 	bl	8004452 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800266a:	2110      	movs	r1, #16
 800266c:	48af      	ldr	r0, [pc, #700]	; (800292c <main+0x314>)
 800266e:	f001 fef0 	bl	8004452 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8002672:	48af      	ldr	r0, [pc, #700]	; (8002930 <main+0x318>)
 8002674:	f002 feee 	bl	8005454 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim4);
 8002678:	48ae      	ldr	r0, [pc, #696]	; (8002934 <main+0x31c>)
 800267a:	f002 feeb 	bl	8005454 <HAL_TIM_Base_Start_IT>
  HAL_UART_Receive_IT(&huart1,(uint8_t*)Rx_data,1);
 800267e:	2201      	movs	r2, #1
 8002680:	49ad      	ldr	r1, [pc, #692]	; (8002938 <main+0x320>)
 8002682:	48ae      	ldr	r0, [pc, #696]	; (800293c <main+0x324>)
 8002684:	f003 fbf7 	bl	8005e76 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&receivedData_A[dataIndex_A], 1);
 8002688:	4bad      	ldr	r3, [pc, #692]	; (8002940 <main+0x328>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	461a      	mov	r2, r3
 800268e:	4bad      	ldr	r3, [pc, #692]	; (8002944 <main+0x32c>)
 8002690:	4413      	add	r3, r2
 8002692:	2201      	movs	r2, #1
 8002694:	4619      	mov	r1, r3
 8002696:	48ac      	ldr	r0, [pc, #688]	; (8002948 <main+0x330>)
 8002698:	f003 fbed 	bl	8005e76 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart4, (uint8_t *)&receivedData_B[dataIndex_B], 1);
 800269c:	4bab      	ldr	r3, [pc, #684]	; (800294c <main+0x334>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	461a      	mov	r2, r3
 80026a2:	4bab      	ldr	r3, [pc, #684]	; (8002950 <main+0x338>)
 80026a4:	4413      	add	r3, r2
 80026a6:	2201      	movs	r2, #1
 80026a8:	4619      	mov	r1, r3
 80026aa:	48aa      	ldr	r0, [pc, #680]	; (8002954 <main+0x33c>)
 80026ac:	f003 fbe3 	bl	8005e76 <HAL_UART_Receive_IT>
  LCD_Clear();
 80026b0:	f7fe fd68 	bl	8001184 <LCD_Clear>
  LCD_PrintString(0, 2, "Select Mode!");
 80026b4:	4aa8      	ldr	r2, [pc, #672]	; (8002958 <main+0x340>)
 80026b6:	2102      	movs	r1, #2
 80026b8:	2000      	movs	r0, #0
 80026ba:	f7fe fdd9 	bl	8001270 <LCD_PrintString>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1638);
 80026be:	f240 6366 	movw	r3, #1638	; 0x666
 80026c2:	2200      	movs	r2, #0
 80026c4:	2100      	movs	r1, #0
 80026c6:	4899      	ldr	r0, [pc, #612]	; (800292c <main+0x314>)
 80026c8:	f001 ff15 	bl	80044f6 <HAL_DAC_SetValue>
  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1638);
 80026cc:	f240 6366 	movw	r3, #1638	; 0x666
 80026d0:	2200      	movs	r2, #0
 80026d2:	2110      	movs	r1, #16
 80026d4:	4895      	ldr	r0, [pc, #596]	; (800292c <main+0x314>)
 80026d6:	f001 ff0e 	bl	80044f6 <HAL_DAC_SetValue>
  HAL_Delay(2000);
 80026da:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80026de:	f001 f8e5 	bl	80038ac <HAL_Delay>

  while (1)
  {
	 Set_Ctrl();
 80026e2:	f7fe ff6d 	bl	80015c0 <Set_Ctrl>
	 Mode();
 80026e6:	f7fe ffc5 	bl	8001674 <Mode>
	 Set_Start_Stop();
 80026ea:	f7ff f90b 	bl	8001904 <Set_Start_Stop>
	 Tare();
 80026ee:	f7ff facd 	bl	8001c8c <Tare>
	 Up();
 80026f2:	f7ff fb9f 	bl	8001e34 <Up>
	 if (CBHT == 0)
 80026f6:	4b99      	ldr	r3, [pc, #612]	; (800295c <main+0x344>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	f083 0301 	eor.w	r3, r3, #1
 80026fe:	b2db      	uxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 8149 	beq.w	8002998 <main+0x380>
	  {
		 if (auto_mode == 1)
 8002706:	4b96      	ldr	r3, [pc, #600]	; (8002960 <main+0x348>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	f000 80b9 	beq.w	8002882 <main+0x26a>
		 {
			if (run == 1)
 8002710:	4b94      	ldr	r3, [pc, #592]	; (8002964 <main+0x34c>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	2b00      	cmp	r3, #0
 8002716:	f000 80a2 	beq.w	800285e <main+0x246>
			{
			  while (count < cycles)
 800271a:	e070      	b.n	80027fe <main+0x1e6>
				{
					while (pv1 < DesiredForceA)
					{
						PID_Control_A();
 800271c:	f7fe fde4 	bl	80012e8 <PID_Control_A>
						if (run == 0) break;
 8002720:	4b90      	ldr	r3, [pc, #576]	; (8002964 <main+0x34c>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	f083 0301 	eor.w	r3, r3, #1
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10b      	bne.n	8002746 <main+0x12e>
					while (pv1 < DesiredForceA)
 800272e:	4b8e      	ldr	r3, [pc, #568]	; (8002968 <main+0x350>)
 8002730:	ed93 7a00 	vldr	s14, [r3]
 8002734:	4b8d      	ldr	r3, [pc, #564]	; (800296c <main+0x354>)
 8002736:	edd3 7a00 	vldr	s15, [r3]
 800273a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002742:	d4eb      	bmi.n	800271c <main+0x104>
 8002744:	e00a      	b.n	800275c <main+0x144>
						if (run == 0) break;
 8002746:	bf00      	nop
					}
					while (pv2 < DesiredForceB)
 8002748:	e008      	b.n	800275c <main+0x144>
					{
						PID_Control_B();
 800274a:	f7fe fe83 	bl	8001454 <PID_Control_B>
						if (run == 0) break;
 800274e:	4b85      	ldr	r3, [pc, #532]	; (8002964 <main+0x34c>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	f083 0301 	eor.w	r3, r3, #1
 8002756:	b2db      	uxtb	r3, r3
 8002758:	2b00      	cmp	r3, #0
 800275a:	d10b      	bne.n	8002774 <main+0x15c>
					while (pv2 < DesiredForceB)
 800275c:	4b84      	ldr	r3, [pc, #528]	; (8002970 <main+0x358>)
 800275e:	ed93 7a00 	vldr	s14, [r3]
 8002762:	4b84      	ldr	r3, [pc, #528]	; (8002974 <main+0x35c>)
 8002764:	edd3 7a00 	vldr	s15, [r3]
 8002768:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800276c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002770:	d4eb      	bmi.n	800274a <main+0x132>
 8002772:	e008      	b.n	8002786 <main+0x16e>
						if (run == 0) break;
 8002774:	bf00      	nop
					}
					while (pos2 > 290.1)
 8002776:	e006      	b.n	8002786 <main+0x16e>
					{
						HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1230);
 8002778:	f240 43ce 	movw	r3, #1230	; 0x4ce
 800277c:	2200      	movs	r2, #0
 800277e:	2110      	movs	r1, #16
 8002780:	486a      	ldr	r0, [pc, #424]	; (800292c <main+0x314>)
 8002782:	f001 feb8 	bl	80044f6 <HAL_DAC_SetValue>
					while (pos2 > 290.1)
 8002786:	4b7c      	ldr	r3, [pc, #496]	; (8002978 <main+0x360>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fedc 	bl	8000548 <__aeabi_f2d>
 8002790:	a361      	add	r3, pc, #388	; (adr r3, 8002918 <main+0x300>)
 8002792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002796:	f7fe f9bf 	bl	8000b18 <__aeabi_dcmpgt>
 800279a:	4603      	mov	r3, r0
 800279c:	2b00      	cmp	r3, #0
 800279e:	d1eb      	bne.n	8002778 <main+0x160>
					}
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 2048);
 80027a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80027a4:	2200      	movs	r2, #0
 80027a6:	2110      	movs	r1, #16
 80027a8:	4860      	ldr	r0, [pc, #384]	; (800292c <main+0x314>)
 80027aa:	f001 fea4 	bl	80044f6 <HAL_DAC_SetValue>
					HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1638);
 80027ae:	f240 6366 	movw	r3, #1638	; 0x666
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	485d      	ldr	r0, [pc, #372]	; (800292c <main+0x314>)
 80027b8:	f001 fe9d 	bl	80044f6 <HAL_DAC_SetValue>
					count++;
 80027bc:	4b6f      	ldr	r3, [pc, #444]	; (800297c <main+0x364>)
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	3301      	adds	r3, #1
 80027c6:	b29b      	uxth	r3, r3
 80027c8:	b21a      	sxth	r2, r3
 80027ca:	4b6c      	ldr	r3, [pc, #432]	; (800297c <main+0x364>)
 80027cc:	801a      	strh	r2, [r3, #0]
					LCD_PrintString(0, 0, "Cycles:");
 80027ce:	4a6c      	ldr	r2, [pc, #432]	; (8002980 <main+0x368>)
 80027d0:	2100      	movs	r1, #0
 80027d2:	2000      	movs	r0, #0
 80027d4:	f7fe fd4c 	bl	8001270 <LCD_PrintString>
					LCD_PrintNum(0, 10, count);
 80027d8:	4b68      	ldr	r3, [pc, #416]	; (800297c <main+0x364>)
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	b21b      	sxth	r3, r3
 80027de:	461a      	mov	r2, r3
 80027e0:	210a      	movs	r1, #10
 80027e2:	2000      	movs	r0, #0
 80027e4:	f7fe fd64 	bl	80012b0 <LCD_PrintNum>
					HAL_Delay(500);
 80027e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027ec:	f001 f85e 	bl	80038ac <HAL_Delay>
					if (run == 0) break;
 80027f0:	4b5c      	ldr	r3, [pc, #368]	; (8002964 <main+0x34c>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	f083 0301 	eor.w	r3, r3, #1
 80027f8:	b2db      	uxtb	r3, r3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d108      	bne.n	8002810 <main+0x1f8>
			  while (count < cycles)
 80027fe:	4b5f      	ldr	r3, [pc, #380]	; (800297c <main+0x364>)
 8002800:	881b      	ldrh	r3, [r3, #0]
 8002802:	b21b      	sxth	r3, r3
 8002804:	461a      	mov	r2, r3
 8002806:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <main+0x36c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d38f      	bcc.n	800272e <main+0x116>
 800280e:	e000      	b.n	8002812 <main+0x1fa>
					if (run == 0) break;
 8002810:	bf00      	nop
				}
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1230);
 8002812:	f240 43ce 	movw	r3, #1230	; 0x4ce
 8002816:	2200      	movs	r2, #0
 8002818:	2110      	movs	r1, #16
 800281a:	4844      	ldr	r0, [pc, #272]	; (800292c <main+0x314>)
 800281c:	f001 fe6b 	bl	80044f6 <HAL_DAC_SetValue>
			  HAL_Delay(100);
 8002820:	2064      	movs	r0, #100	; 0x64
 8002822:	f001 f843 	bl	80038ac <HAL_Delay>
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1638);
 8002826:	f240 6366 	movw	r3, #1638	; 0x666
 800282a:	2200      	movs	r2, #0
 800282c:	2100      	movs	r1, #0
 800282e:	483f      	ldr	r0, [pc, #252]	; (800292c <main+0x314>)
 8002830:	f001 fe61 	bl	80044f6 <HAL_DAC_SetValue>
			  if (count == cycles)
 8002834:	4b51      	ldr	r3, [pc, #324]	; (800297c <main+0x364>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	b21b      	sxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	4b51      	ldr	r3, [pc, #324]	; (8002984 <main+0x36c>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	f47f af4e 	bne.w	80026e2 <main+0xca>
			  {
				  LCD_Clear();
 8002846:	f7fe fc9d 	bl	8001184 <LCD_Clear>
				  LCD_PrintString(0, 0, "TEST COMPLETTED!");
 800284a:	4a4f      	ldr	r2, [pc, #316]	; (8002988 <main+0x370>)
 800284c:	2100      	movs	r1, #0
 800284e:	2000      	movs	r0, #0
 8002850:	f7fe fd0e 	bl	8001270 <LCD_PrintString>
				  HAL_Delay(500);
 8002854:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002858:	f001 f828 	bl	80038ac <HAL_Delay>
 800285c:	e741      	b.n	80026e2 <main+0xca>
			  }
			}
			else
			{
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1230);
 800285e:	f240 43ce 	movw	r3, #1230	; 0x4ce
 8002862:	2200      	movs	r2, #0
 8002864:	2110      	movs	r1, #16
 8002866:	4831      	ldr	r0, [pc, #196]	; (800292c <main+0x314>)
 8002868:	f001 fe45 	bl	80044f6 <HAL_DAC_SetValue>
			  HAL_Delay(100);
 800286c:	2064      	movs	r0, #100	; 0x64
 800286e:	f001 f81d 	bl	80038ac <HAL_Delay>
			  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1638);
 8002872:	f240 6366 	movw	r3, #1638	; 0x666
 8002876:	2200      	movs	r2, #0
 8002878:	2100      	movs	r1, #0
 800287a:	482c      	ldr	r0, [pc, #176]	; (800292c <main+0x314>)
 800287c:	f001 fe3b 	bl	80044f6 <HAL_DAC_SetValue>
 8002880:	e72f      	b.n	80026e2 <main+0xca>
			}
		 }
		 else if (man_mode == 1)
 8002882:	4b42      	ldr	r3, [pc, #264]	; (800298c <main+0x374>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	f43f af2b 	beq.w	80026e2 <main+0xca>
		 {
			 Manual_A();
 800288c:	f7ff f9a4 	bl	8001bd8 <Manual_A>
			 Manual_B();
 8002890:	f7ff fa76 	bl	8001d80 <Manual_B>
			if (count_s == 1)
 8002894:	4b3e      	ldr	r3, [pc, #248]	; (8002990 <main+0x378>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2b01      	cmp	r3, #1
 800289a:	d106      	bne.n	80028aa <main+0x292>
			{
				PID_Control_A();
 800289c:	f7fe fd24 	bl	80012e8 <PID_Control_A>
				Manual_A();
 80028a0:	f7ff f99a 	bl	8001bd8 <Manual_A>
				Manual_B();
 80028a4:	f7ff fa6c 	bl	8001d80 <Manual_B>
 80028a8:	e015      	b.n	80028d6 <main+0x2be>
			}
			else if ((count_s == 2) && (pv2 < DesiredForceB))
 80028aa:	4b39      	ldr	r3, [pc, #228]	; (8002990 <main+0x378>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d111      	bne.n	80028d6 <main+0x2be>
 80028b2:	4b2f      	ldr	r3, [pc, #188]	; (8002970 <main+0x358>)
 80028b4:	ed93 7a00 	vldr	s14, [r3]
 80028b8:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <main+0x35c>)
 80028ba:	edd3 7a00 	vldr	s15, [r3]
 80028be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028c6:	d506      	bpl.n	80028d6 <main+0x2be>
			{
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1638);
 80028c8:	f240 6366 	movw	r3, #1638	; 0x666
 80028cc:	2200      	movs	r2, #0
 80028ce:	2100      	movs	r1, #0
 80028d0:	4816      	ldr	r0, [pc, #88]	; (800292c <main+0x314>)
 80028d2:	f001 fe10 	bl	80044f6 <HAL_DAC_SetValue>
			}
			if ((count_b == 1) && (pv1 >= DesiredForceA))
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <main+0x37c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10f      	bne.n	80028fe <main+0x2e6>
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <main+0x350>)
 80028e0:	ed93 7a00 	vldr	s14, [r3]
 80028e4:	4b21      	ldr	r3, [pc, #132]	; (800296c <main+0x354>)
 80028e6:	edd3 7a00 	vldr	s15, [r3]
 80028ea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f2:	db04      	blt.n	80028fe <main+0x2e6>
			{
				PID_Control_B();
 80028f4:	f7fe fdae 	bl	8001454 <PID_Control_B>
				Manual_B();
 80028f8:	f7ff fa42 	bl	8001d80 <Manual_B>
 80028fc:	e05a      	b.n	80029b4 <main+0x39c>
			}
			else if (count_b == 2)
 80028fe:	4b25      	ldr	r3, [pc, #148]	; (8002994 <main+0x37c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	2b02      	cmp	r3, #2
 8002904:	f47f aeed 	bne.w	80026e2 <main+0xca>
			{
				HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1638);
 8002908:	f240 6366 	movw	r3, #1638	; 0x666
 800290c:	2200      	movs	r2, #0
 800290e:	2110      	movs	r1, #16
 8002910:	4806      	ldr	r0, [pc, #24]	; (800292c <main+0x314>)
 8002912:	f001 fdf0 	bl	80044f6 <HAL_DAC_SetValue>
 8002916:	e6e4      	b.n	80026e2 <main+0xca>
 8002918:	9999999a 	.word	0x9999999a
 800291c:	40722199 	.word	0x40722199
 8002920:	40020c00 	.word	0x40020c00
 8002924:	200003cc 	.word	0x200003cc
 8002928:	20000414 	.word	0x20000414
 800292c:	2000045c 	.word	0x2000045c
 8002930:	20000470 	.word	0x20000470
 8002934:	200004b8 	.word	0x200004b8
 8002938:	2000035c 	.word	0x2000035c
 800293c:	20000544 	.word	0x20000544
 8002940:	20000324 	.word	0x20000324
 8002944:	2000025c 	.word	0x2000025c
 8002948:	20000588 	.word	0x20000588
 800294c:	20000325 	.word	0x20000325
 8002950:	200002c0 	.word	0x200002c0
 8002954:	20000500 	.word	0x20000500
 8002958:	0800b5a4 	.word	0x0800b5a4
 800295c:	20000248 	.word	0x20000248
 8002960:	2000024c 	.word	0x2000024c
 8002964:	20000249 	.word	0x20000249
 8002968:	20000384 	.word	0x20000384
 800296c:	20000380 	.word	0x20000380
 8002970:	2000039c 	.word	0x2000039c
 8002974:	20000398 	.word	0x20000398
 8002978:	20000258 	.word	0x20000258
 800297c:	20000044 	.word	0x20000044
 8002980:	0800b4f4 	.word	0x0800b4f4
 8002984:	200003b4 	.word	0x200003b4
 8002988:	0800b5b4 	.word	0x0800b5b4
 800298c:	2000024d 	.word	0x2000024d
 8002990:	200003ac 	.word	0x200003ac
 8002994:	200003b0 	.word	0x200003b0
			}
		 }
	  }
	else
	{
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1230);
 8002998:	f240 43ce 	movw	r3, #1230	; 0x4ce
 800299c:	2200      	movs	r2, #0
 800299e:	2100      	movs	r1, #0
 80029a0:	4805      	ldr	r0, [pc, #20]	; (80029b8 <main+0x3a0>)
 80029a2:	f001 fda8 	bl	80044f6 <HAL_DAC_SetValue>
	  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 1638);
 80029a6:	f240 6366 	movw	r3, #1638	; 0x666
 80029aa:	2200      	movs	r2, #0
 80029ac:	2110      	movs	r1, #16
 80029ae:	4802      	ldr	r0, [pc, #8]	; (80029b8 <main+0x3a0>)
 80029b0:	f001 fda1 	bl	80044f6 <HAL_DAC_SetValue>
	 Set_Ctrl();
 80029b4:	e695      	b.n	80026e2 <main+0xca>
 80029b6:	bf00      	nop
 80029b8:	2000045c 	.word	0x2000045c

080029bc <SystemClock_Config>:
  }
}


void SystemClock_Config(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b094      	sub	sp, #80	; 0x50
 80029c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80029c2:	f107 0320 	add.w	r3, r7, #32
 80029c6:	2230      	movs	r2, #48	; 0x30
 80029c8:	2100      	movs	r1, #0
 80029ca:	4618      	mov	r0, r3
 80029cc:	f004 fa34 	bl	8006e38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80029d0:	f107 030c 	add.w	r3, r7, #12
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]
 80029d8:	605a      	str	r2, [r3, #4]
 80029da:	609a      	str	r2, [r3, #8]
 80029dc:	60da      	str	r2, [r3, #12]
 80029de:	611a      	str	r2, [r3, #16]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	60bb      	str	r3, [r7, #8]
 80029e4:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <SystemClock_Config+0xcc>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e8:	4a27      	ldr	r2, [pc, #156]	; (8002a88 <SystemClock_Config+0xcc>)
 80029ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ee:	6413      	str	r3, [r2, #64]	; 0x40
 80029f0:	4b25      	ldr	r3, [pc, #148]	; (8002a88 <SystemClock_Config+0xcc>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029f8:	60bb      	str	r3, [r7, #8]
 80029fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80029fc:	2300      	movs	r3, #0
 80029fe:	607b      	str	r3, [r7, #4]
 8002a00:	4b22      	ldr	r3, [pc, #136]	; (8002a8c <SystemClock_Config+0xd0>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <SystemClock_Config+0xd0>)
 8002a06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	4b1f      	ldr	r3, [pc, #124]	; (8002a8c <SystemClock_Config+0xd0>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a14:	607b      	str	r3, [r7, #4]
 8002a16:	687b      	ldr	r3, [r7, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a18:	2302      	movs	r3, #2
 8002a1a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a20:	2310      	movs	r3, #16
 8002a22:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a24:	2302      	movs	r3, #2
 8002a26:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002a2c:	2308      	movs	r3, #8
 8002a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002a30:	23a8      	movs	r3, #168	; 0xa8
 8002a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002a34:	2302      	movs	r3, #2
 8002a36:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002a38:	2304      	movs	r3, #4
 8002a3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a3c:	f107 0320 	add.w	r3, r7, #32
 8002a40:	4618      	mov	r0, r3
 8002a42:	f002 f85f 	bl	8004b04 <HAL_RCC_OscConfig>
 8002a46:	4603      	mov	r3, r0
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d001      	beq.n	8002a50 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002a4c:	f000 fb36 	bl	80030bc <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a50:	230f      	movs	r3, #15
 8002a52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a54:	2302      	movs	r3, #2
 8002a56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002a5c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002a60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002a62:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a66:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002a68:	f107 030c 	add.w	r3, r7, #12
 8002a6c:	2105      	movs	r1, #5
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f002 fac0 	bl	8004ff4 <HAL_RCC_ClockConfig>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d001      	beq.n	8002a7e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002a7a:	f000 fb1f 	bl	80030bc <Error_Handler>
  }
}
 8002a7e:	bf00      	nop
 8002a80:	3750      	adds	r7, #80	; 0x50
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
 8002a86:	bf00      	nop
 8002a88:	40023800 	.word	0x40023800
 8002a8c:	40007000 	.word	0x40007000

08002a90 <MX_ADC1_Init>:
static void MX_ADC1_Init(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002a96:	463b      	mov	r3, r7
 8002a98:	2200      	movs	r2, #0
 8002a9a:	601a      	str	r2, [r3, #0]
 8002a9c:	605a      	str	r2, [r3, #4]
 8002a9e:	609a      	str	r2, [r3, #8]
 8002aa0:	60da      	str	r2, [r3, #12]
  hadc1.Instance = ADC1;
 8002aa2:	4b21      	ldr	r3, [pc, #132]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002aa4:	4a21      	ldr	r2, [pc, #132]	; (8002b2c <MX_ADC1_Init+0x9c>)
 8002aa6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002aae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002abe:	2201      	movs	r2, #1
 8002ac0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ad2:	4a17      	ldr	r2, [pc, #92]	; (8002b30 <MX_ADC1_Init+0xa0>)
 8002ad4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002aea:	4b0f      	ldr	r3, [pc, #60]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002af0:	480d      	ldr	r0, [pc, #52]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002af2:	f000 feff 	bl	80038f4 <HAL_ADC_Init>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8002afc:	f000 fade 	bl	80030bc <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_12;
 8002b00:	230c      	movs	r3, #12
 8002b02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002b04:	2301      	movs	r3, #1
 8002b06:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002b0c:	463b      	mov	r3, r7
 8002b0e:	4619      	mov	r1, r3
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <MX_ADC1_Init+0x98>)
 8002b12:	f001 f943 	bl	8003d9c <HAL_ADC_ConfigChannel>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d001      	beq.n	8002b20 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8002b1c:	f000 face 	bl	80030bc <Error_Handler>
  }
}
 8002b20:	bf00      	nop
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200003cc 	.word	0x200003cc
 8002b2c:	40012000 	.word	0x40012000
 8002b30:	0f000001 	.word	0x0f000001

08002b34 <MX_ADC2_Init>:
static void MX_ADC2_Init(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8002b3a:	463b      	mov	r3, r7
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	605a      	str	r2, [r3, #4]
 8002b42:	609a      	str	r2, [r3, #8]
 8002b44:	60da      	str	r2, [r3, #12]
  hadc2.Instance = ADC2;
 8002b46:	4b21      	ldr	r3, [pc, #132]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b48:	4a21      	ldr	r2, [pc, #132]	; (8002bd0 <MX_ADC2_Init+0x9c>)
 8002b4a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8002b4c:	4b1f      	ldr	r3, [pc, #124]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b4e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002b52:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8002b54:	4b1d      	ldr	r3, [pc, #116]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8002b5a:	4b1c      	ldr	r3, [pc, #112]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8002b66:	4b19      	ldr	r3, [pc, #100]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002b6e:	4b17      	ldr	r3, [pc, #92]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b76:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <MX_ADC2_Init+0xa0>)
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8002b80:	4b12      	ldr	r3, [pc, #72]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b82:	2201      	movs	r2, #1
 8002b84:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8002b86:	4b11      	ldr	r3, [pc, #68]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b8e:	4b0f      	ldr	r3, [pc, #60]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b90:	2201      	movs	r2, #1
 8002b92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8002b94:	480d      	ldr	r0, [pc, #52]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002b96:	f000 fead 	bl	80038f4 <HAL_ADC_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 8002ba0:	f000 fa8c 	bl	80030bc <Error_Handler>
  }
  sConfig.Channel = ADC_CHANNEL_13;
 8002ba4:	230d      	movs	r3, #13
 8002ba6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002bac:	2307      	movs	r3, #7
 8002bae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8002bb0:	463b      	mov	r3, r7
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	4805      	ldr	r0, [pc, #20]	; (8002bcc <MX_ADC2_Init+0x98>)
 8002bb6:	f001 f8f1 	bl	8003d9c <HAL_ADC_ConfigChannel>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 8002bc0:	f000 fa7c 	bl	80030bc <Error_Handler>
  }
}
 8002bc4:	bf00      	nop
 8002bc6:	3710      	adds	r7, #16
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	bd80      	pop	{r7, pc}
 8002bcc:	20000414 	.word	0x20000414
 8002bd0:	40012100 	.word	0x40012100
 8002bd4:	0f000001 	.word	0x0f000001

08002bd8 <MX_DAC_Init>:
static void MX_DAC_Init(void)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8002bde:	463b      	mov	r3, r7
 8002be0:	2200      	movs	r2, #0
 8002be2:	601a      	str	r2, [r3, #0]
 8002be4:	605a      	str	r2, [r3, #4]
  hdac.Instance = DAC;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <MX_DAC_Init+0x60>)
 8002be8:	4a14      	ldr	r2, [pc, #80]	; (8002c3c <MX_DAC_Init+0x64>)
 8002bea:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002bec:	4812      	ldr	r0, [pc, #72]	; (8002c38 <MX_DAC_Init+0x60>)
 8002bee:	f001 fc0e 	bl	800440e <HAL_DAC_Init>
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d001      	beq.n	8002bfc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8002bf8:	f000 fa60 	bl	80030bc <Error_Handler>
  }
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002c00:	2300      	movs	r3, #0
 8002c02:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002c04:	463b      	mov	r3, r7
 8002c06:	2200      	movs	r2, #0
 8002c08:	4619      	mov	r1, r3
 8002c0a:	480b      	ldr	r0, [pc, #44]	; (8002c38 <MX_DAC_Init+0x60>)
 8002c0c:	f001 fc98 	bl	8004540 <HAL_DAC_ConfigChannel>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8002c16:	f000 fa51 	bl	80030bc <Error_Handler>
  }
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002c1a:	463b      	mov	r3, r7
 8002c1c:	2210      	movs	r2, #16
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_DAC_Init+0x60>)
 8002c22:	f001 fc8d 	bl	8004540 <HAL_DAC_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 8002c2c:	f000 fa46 	bl	80030bc <Error_Handler>
  }
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	2000045c 	.word	0x2000045c
 8002c3c:	40007400 	.word	0x40007400

08002c40 <MX_TIM3_Init>:
static void MX_TIM3_Init(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c46:	f107 0308 	add.w	r3, r7, #8
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	605a      	str	r2, [r3, #4]
 8002c50:	609a      	str	r2, [r3, #8]
 8002c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c54:	463b      	mov	r3, r7
 8002c56:	2200      	movs	r2, #0
 8002c58:	601a      	str	r2, [r3, #0]
 8002c5a:	605a      	str	r2, [r3, #4]
  htim3.Instance = TIM3;
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c5e:	4a1e      	ldr	r2, [pc, #120]	; (8002cd8 <MX_TIM3_Init+0x98>)
 8002c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 16800;
 8002c62:	4b1c      	ldr	r3, [pc, #112]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c64:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8002c68:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c6a:	4b1a      	ldr	r3, [pc, #104]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 199;
 8002c70:	4b18      	ldr	r3, [pc, #96]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c72:	22c7      	movs	r2, #199	; 0xc7
 8002c74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c76:	4b17      	ldr	r3, [pc, #92]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002c7c:	4b15      	ldr	r3, [pc, #84]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c7e:	2280      	movs	r2, #128	; 0x80
 8002c80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002c82:	4814      	ldr	r0, [pc, #80]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002c84:	f002 fb96 	bl	80053b4 <HAL_TIM_Base_Init>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d001      	beq.n	8002c92 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002c8e:	f000 fa15 	bl	80030bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c96:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002c98:	f107 0308 	add.w	r3, r7, #8
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	480d      	ldr	r0, [pc, #52]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002ca0:	f002 fd50 	bl	8005744 <HAL_TIM_ConfigClockSource>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002caa:	f000 fa07 	bl	80030bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cb6:	463b      	mov	r3, r7
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4806      	ldr	r0, [pc, #24]	; (8002cd4 <MX_TIM3_Init+0x94>)
 8002cbc:	f002 ff6c 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002cc6:	f000 f9f9 	bl	80030bc <Error_Handler>
  }
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	20000470 	.word	0x20000470
 8002cd8:	40000400 	.word	0x40000400

08002cdc <MX_TIM4_Init>:

static void MX_TIM4_Init(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ce2:	f107 0308 	add.w	r3, r7, #8
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]
 8002cee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002cf0:	463b      	mov	r3, r7
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
 8002cf6:	605a      	str	r2, [r3, #4]
  htim4.Instance = TIM4;
 8002cf8:	4b1d      	ldr	r3, [pc, #116]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <MX_TIM4_Init+0x98>)
 8002cfc:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16800;
 8002cfe:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d00:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8002d04:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d06:	4b1a      	ldr	r3, [pc, #104]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 2999;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d0e:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8002d12:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d14:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002d1a:	4b15      	ldr	r3, [pc, #84]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d1c:	2280      	movs	r2, #128	; 0x80
 8002d1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d20:	4813      	ldr	r0, [pc, #76]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d22:	f002 fb47 	bl	80053b4 <HAL_TIM_Base_Init>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002d2c:	f000 f9c6 	bl	80030bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d36:	f107 0308 	add.w	r3, r7, #8
 8002d3a:	4619      	mov	r1, r3
 8002d3c:	480c      	ldr	r0, [pc, #48]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d3e:	f002 fd01 	bl	8005744 <HAL_TIM_ConfigClockSource>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002d48:	f000 f9b8 	bl	80030bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d54:	463b      	mov	r3, r7
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM4_Init+0x94>)
 8002d5a:	f002 ff1d 	bl	8005b98 <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002d64:	f000 f9aa 	bl	80030bc <Error_Handler>
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200004b8 	.word	0x200004b8
 8002d74:	40000800 	.word	0x40000800

08002d78 <MX_UART4_Init>:

static void MX_UART4_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  huart4.Instance = UART4;
 8002d7c:	4b11      	ldr	r3, [pc, #68]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002d7e:	4a12      	ldr	r2, [pc, #72]	; (8002dc8 <MX_UART4_Init+0x50>)
 8002d80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002d82:	4b10      	ldr	r3, [pc, #64]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002d84:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002d88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002d8a:	4b0e      	ldr	r3, [pc, #56]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002d90:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002d96:	4b0b      	ldr	r3, [pc, #44]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002d9c:	4b09      	ldr	r3, [pc, #36]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002d9e:	220c      	movs	r2, #12
 8002da0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002da2:	4b08      	ldr	r3, [pc, #32]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002da8:	4b06      	ldr	r3, [pc, #24]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002daa:	2200      	movs	r2, #0
 8002dac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002dae:	4805      	ldr	r0, [pc, #20]	; (8002dc4 <MX_UART4_Init+0x4c>)
 8002db0:	f002 ff82 	bl	8005cb8 <HAL_UART_Init>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d001      	beq.n	8002dbe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8002dba:	f000 f97f 	bl	80030bc <Error_Handler>
  }
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000500 	.word	0x20000500
 8002dc8:	40004c00 	.word	0x40004c00

08002dcc <MX_USART1_UART_Init>:

static void MX_USART1_UART_Init(void)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	af00      	add	r7, sp, #0
  huart1.Instance = USART1;
 8002dd0:	4b11      	ldr	r3, [pc, #68]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002dd2:	4a12      	ldr	r2, [pc, #72]	; (8002e1c <MX_USART1_UART_Init+0x50>)
 8002dd4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002dd6:	4b10      	ldr	r3, [pc, #64]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002dd8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ddc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002dde:	4b0e      	ldr	r3, [pc, #56]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002de4:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002df0:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002df2:	220c      	movs	r2, #12
 8002df4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002dfc:	4b06      	ldr	r3, [pc, #24]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002e02:	4805      	ldr	r0, [pc, #20]	; (8002e18 <MX_USART1_UART_Init+0x4c>)
 8002e04:	f002 ff58 	bl	8005cb8 <HAL_UART_Init>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002e0e:	f000 f955 	bl	80030bc <Error_Handler>
  }
}
 8002e12:	bf00      	nop
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	20000544 	.word	0x20000544
 8002e1c:	40011000 	.word	0x40011000

08002e20 <MX_USART3_UART_Init>:

static void MX_USART3_UART_Init(void)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002e24:	4b11      	ldr	r3, [pc, #68]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e26:	4a12      	ldr	r2, [pc, #72]	; (8002e70 <MX_USART3_UART_Init+0x50>)
 8002e28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e2c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002e30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e46:	220c      	movs	r2, #12
 8002e48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_USART3_UART_Init+0x4c>)
 8002e58:	f002 ff2e 	bl	8005cb8 <HAL_UART_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8002e62:	f000 f92b 	bl	80030bc <Error_Handler>
  }
}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000588 	.word	0x20000588
 8002e70:	40004800 	.word	0x40004800

08002e74 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e7a:	f107 0314 	add.w	r3, r7, #20
 8002e7e:	2200      	movs	r2, #0
 8002e80:	601a      	str	r2, [r3, #0]
 8002e82:	605a      	str	r2, [r3, #4]
 8002e84:	609a      	str	r2, [r3, #8]
 8002e86:	60da      	str	r2, [r3, #12]
 8002e88:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	4b85      	ldr	r3, [pc, #532]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e92:	4a84      	ldr	r2, [pc, #528]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002e94:	f043 0310 	orr.w	r3, r3, #16
 8002e98:	6313      	str	r3, [r2, #48]	; 0x30
 8002e9a:	4b82      	ldr	r3, [pc, #520]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	f003 0310 	and.w	r3, r3, #16
 8002ea2:	613b      	str	r3, [r7, #16]
 8002ea4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	60fb      	str	r3, [r7, #12]
 8002eaa:	4b7e      	ldr	r3, [pc, #504]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eae:	4a7d      	ldr	r2, [pc, #500]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002eb0:	f043 0304 	orr.w	r3, r3, #4
 8002eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8002eb6:	4b7b      	ldr	r3, [pc, #492]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eba:	f003 0304 	and.w	r3, r3, #4
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	4b77      	ldr	r3, [pc, #476]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	4a76      	ldr	r2, [pc, #472]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ed2:	4b74      	ldr	r3, [pc, #464]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
 8002edc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	4b70      	ldr	r3, [pc, #448]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee6:	4a6f      	ldr	r2, [pc, #444]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002ee8:	f043 0302 	orr.w	r3, r3, #2
 8002eec:	6313      	str	r3, [r2, #48]	; 0x30
 8002eee:	4b6d      	ldr	r3, [pc, #436]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	607b      	str	r3, [r7, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	603b      	str	r3, [r7, #0]
 8002efe:	4b69      	ldr	r3, [pc, #420]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a68      	ldr	r2, [pc, #416]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002f04:	f043 0308 	orr.w	r3, r3, #8
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b66      	ldr	r3, [pc, #408]	; (80030a4 <MX_GPIO_Init+0x230>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0308 	and.w	r3, r3, #8
 8002f12:	603b      	str	r3, [r7, #0]
 8002f14:	683b      	ldr	r3, [r7, #0]

  HAL_GPIO_WritePin(GPIOE, Buzzer_Pin|DE2_RE2_Pin, GPIO_PIN_RESET);
 8002f16:	2200      	movs	r2, #0
 8002f18:	f248 0108 	movw	r1, #32776	; 0x8008
 8002f1c:	4862      	ldr	r0, [pc, #392]	; (80030a8 <MX_GPIO_Init+0x234>)
 8002f1e:	f001 fda5 	bl	8004a6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOA, DE3_RE3_Pin|DO0_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 7184 	mov.w	r1, #264	; 0x108
 8002f28:	4860      	ldr	r0, [pc, #384]	; (80030ac <MX_GPIO_Init+0x238>)
 8002f2a:	f001 fd9f 	bl	8004a6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DO11_GPIO_Port, DO11_Pin, GPIO_PIN_SET);
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f34:	485e      	ldr	r0, [pc, #376]	; (80030b0 <MX_GPIO_Init+0x23c>)
 8002f36:	f001 fd99 	bl	8004a6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(DO10_GPIO_Port, DO10_Pin, GPIO_PIN_SET);
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f40:	485c      	ldr	r0, [pc, #368]	; (80030b4 <MX_GPIO_Init+0x240>)
 8002f42:	f001 fd93 	bl	8004a6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOD, DO9_Pin|DO8_Pin|DO7_Pin|DO6_Pin
 8002f46:	2200      	movs	r2, #0
 8002f48:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8002f4c:	4859      	ldr	r0, [pc, #356]	; (80030b4 <MX_GPIO_Init+0x240>)
 8002f4e:	f001 fd8d 	bl	8004a6c <HAL_GPIO_WritePin>
                          |DO5_Pin|LCDD4_Pin|LCDD5_Pin|LCDD6_Pin
                          |LCDD7_Pin|LCDLED_Pin|LCDEN_Pin|LCDRW_Pin
                          |LCDRS_Pin, GPIO_PIN_RESET);

  HAL_GPIO_WritePin(GPIOC, DO4_Pin|DO3_Pin|DO2_Pin|DO1_Pin, GPIO_PIN_RESET);
 8002f52:	2200      	movs	r2, #0
 8002f54:	f44f 7170 	mov.w	r1, #960	; 0x3c0
 8002f58:	4857      	ldr	r0, [pc, #348]	; (80030b8 <MX_GPIO_Init+0x244>)
 8002f5a:	f001 fd87 	bl	8004a6c <HAL_GPIO_WritePin>

  HAL_GPIO_WritePin(GPIOB, BT_CLK_Pin|LED_DATA_Pin, GPIO_PIN_RESET);
 8002f5e:	2200      	movs	r2, #0
 8002f60:	2128      	movs	r1, #40	; 0x28
 8002f62:	4853      	ldr	r0, [pc, #332]	; (80030b0 <MX_GPIO_Init+0x23c>)
 8002f64:	f001 fd82 	bl	8004a6c <HAL_GPIO_WritePin>

  GPIO_InitStruct.Pin = Buzzer_Pin|DE2_RE2_Pin;
 8002f68:	f248 0308 	movw	r3, #32776	; 0x8008
 8002f6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002f7a:	f107 0314 	add.w	r3, r7, #20
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4849      	ldr	r0, [pc, #292]	; (80030a8 <MX_GPIO_Init+0x234>)
 8002f82:	f001 fbbf 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DI13_Pin|DI12_Pin|DI11_Pin|DI10_Pin
 8002f86:	23c7      	movs	r3, #199	; 0xc7
 8002f88:	617b      	str	r3, [r7, #20]
                          |DI9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f92:	f107 0314 	add.w	r3, r7, #20
 8002f96:	4619      	mov	r1, r3
 8002f98:	4844      	ldr	r0, [pc, #272]	; (80030ac <MX_GPIO_Init+0x238>)
 8002f9a:	f001 fbb3 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DE3_RE3_Pin|DO0_Pin;
 8002f9e:	f44f 7384 	mov.w	r3, #264	; 0x108
 8002fa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fac:	2300      	movs	r3, #0
 8002fae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fb0:	f107 0314 	add.w	r3, r7, #20
 8002fb4:	4619      	mov	r1, r3
 8002fb6:	483d      	ldr	r0, [pc, #244]	; (80030ac <MX_GPIO_Init+0x238>)
 8002fb8:	f001 fba4 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DI8_Pin;
 8002fbc:	2310      	movs	r3, #16
 8002fbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI8_GPIO_Port, &GPIO_InitStruct);
 8002fc8:	f107 0314 	add.w	r3, r7, #20
 8002fcc:	4619      	mov	r1, r3
 8002fce:	483a      	ldr	r0, [pc, #232]	; (80030b8 <MX_GPIO_Init+0x244>)
 8002fd0:	f001 fb98 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DI7_Pin;
 8002fd4:	2304      	movs	r3, #4
 8002fd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DI7_GPIO_Port, &GPIO_InitStruct);
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	4832      	ldr	r0, [pc, #200]	; (80030b0 <MX_GPIO_Init+0x23c>)
 8002fe8:	f001 fb8c 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DI6_Pin|DI1_Pin;
 8002fec:	f44f 5384 	mov.w	r3, #4224	; 0x1080
 8002ff0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002ff2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002ff6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ffc:	f107 0314 	add.w	r3, r7, #20
 8003000:	4619      	mov	r1, r3
 8003002:	4829      	ldr	r0, [pc, #164]	; (80030a8 <MX_GPIO_Init+0x234>)
 8003004:	f001 fb7e 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DI5_Pin|DI4_Pin|DI3_Pin|DI2_Pin
 8003008:	f44f 533c 	mov.w	r3, #12032	; 0x2f00
 800300c:	617b      	str	r3, [r7, #20]
                          |DI0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800300e:	2300      	movs	r3, #0
 8003010:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003012:	2300      	movs	r3, #0
 8003014:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003016:	f107 0314 	add.w	r3, r7, #20
 800301a:	4619      	mov	r1, r3
 800301c:	4822      	ldr	r0, [pc, #136]	; (80030a8 <MX_GPIO_Init+0x234>)
 800301e:	f001 fb71 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DO11_Pin|BT_CLK_Pin|LED_DATA_Pin;
 8003022:	f241 0328 	movw	r3, #4136	; 0x1028
 8003026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003028:	2301      	movs	r3, #1
 800302a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302c:	2300      	movs	r3, #0
 800302e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003030:	2300      	movs	r3, #0
 8003032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003034:	f107 0314 	add.w	r3, r7, #20
 8003038:	4619      	mov	r1, r3
 800303a:	481d      	ldr	r0, [pc, #116]	; (80030b0 <MX_GPIO_Init+0x23c>)
 800303c:	f001 fb62 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DO10_Pin|DO9_Pin|DO8_Pin|DO7_Pin
 8003040:	f64f 43ff 	movw	r3, #64767	; 0xfcff
 8003044:	617b      	str	r3, [r7, #20]
                          |DO6_Pin|DO5_Pin|LCDD4_Pin|LCDD5_Pin
                          |LCDD6_Pin|LCDD7_Pin|LCDLED_Pin|LCDEN_Pin
                          |LCDRW_Pin|LCDRS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003046:	2301      	movs	r3, #1
 8003048:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800304a:	2300      	movs	r3, #0
 800304c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800304e:	2300      	movs	r3, #0
 8003050:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003052:	f107 0314 	add.w	r3, r7, #20
 8003056:	4619      	mov	r1, r3
 8003058:	4816      	ldr	r0, [pc, #88]	; (80030b4 <MX_GPIO_Init+0x240>)
 800305a:	f001 fb53 	bl	8004704 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = DO4_Pin|DO3_Pin|DO2_Pin|DO1_Pin;
 800305e:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003064:	2301      	movs	r3, #1
 8003066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003068:	2300      	movs	r3, #0
 800306a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800306c:	2300      	movs	r3, #0
 800306e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003070:	f107 0314 	add.w	r3, r7, #20
 8003074:	4619      	mov	r1, r3
 8003076:	4810      	ldr	r0, [pc, #64]	; (80030b8 <MX_GPIO_Init+0x244>)
 8003078:	f001 fb44 	bl	8004704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800307c:	2200      	movs	r2, #0
 800307e:	2100      	movs	r1, #0
 8003080:	2017      	movs	r0, #23
 8003082:	f001 f98e 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003086:	2017      	movs	r0, #23
 8003088:	f001 f9a7 	bl	80043da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800308c:	2200      	movs	r2, #0
 800308e:	2100      	movs	r1, #0
 8003090:	2028      	movs	r0, #40	; 0x28
 8003092:	f001 f986 	bl	80043a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003096:	2028      	movs	r0, #40	; 0x28
 8003098:	f001 f99f 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 800309c:	bf00      	nop
 800309e:	3728      	adds	r7, #40	; 0x28
 80030a0:	46bd      	mov	sp, r7
 80030a2:	bd80      	pop	{r7, pc}
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40021000 	.word	0x40021000
 80030ac:	40020000 	.word	0x40020000
 80030b0:	40020400 	.word	0x40020400
 80030b4:	40020c00 	.word	0x40020c00
 80030b8:	40020800 	.word	0x40020800

080030bc <Error_Handler>:

void Error_Handler(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80030c0:	b672      	cpsid	i
}
 80030c2:	bf00      	nop
  __disable_irq();
  while (1)
 80030c4:	e7fe      	b.n	80030c4 <Error_Handler+0x8>
	...

080030c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
 80030d2:	4b10      	ldr	r3, [pc, #64]	; (8003114 <HAL_MspInit+0x4c>)
 80030d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d6:	4a0f      	ldr	r2, [pc, #60]	; (8003114 <HAL_MspInit+0x4c>)
 80030d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030dc:	6453      	str	r3, [r2, #68]	; 0x44
 80030de:	4b0d      	ldr	r3, [pc, #52]	; (8003114 <HAL_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030e6:	607b      	str	r3, [r7, #4]
 80030e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	603b      	str	r3, [r7, #0]
 80030ee:	4b09      	ldr	r3, [pc, #36]	; (8003114 <HAL_MspInit+0x4c>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a08      	ldr	r2, [pc, #32]	; (8003114 <HAL_MspInit+0x4c>)
 80030f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b06      	ldr	r3, [pc, #24]	; (8003114 <HAL_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003106:	bf00      	nop
 8003108:	370c      	adds	r7, #12
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800

08003118 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b08c      	sub	sp, #48	; 0x30
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003120:	f107 031c 	add.w	r3, r7, #28
 8003124:	2200      	movs	r2, #0
 8003126:	601a      	str	r2, [r3, #0]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	609a      	str	r2, [r3, #8]
 800312c:	60da      	str	r2, [r3, #12]
 800312e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a36      	ldr	r2, [pc, #216]	; (8003210 <HAL_ADC_MspInit+0xf8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d130      	bne.n	800319c <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800313a:	2300      	movs	r3, #0
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	4b35      	ldr	r3, [pc, #212]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	4a34      	ldr	r2, [pc, #208]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 8003144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003148:	6453      	str	r3, [r2, #68]	; 0x44
 800314a:	4b32      	ldr	r3, [pc, #200]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 800314c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003152:	61bb      	str	r3, [r7, #24]
 8003154:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003156:	2300      	movs	r3, #0
 8003158:	617b      	str	r3, [r7, #20]
 800315a:	4b2e      	ldr	r3, [pc, #184]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 800315c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315e:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 8003160:	f043 0304 	orr.w	r3, r3, #4
 8003164:	6313      	str	r3, [r2, #48]	; 0x30
 8003166:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	617b      	str	r3, [r7, #20]
 8003170:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = AI0_Pin;
 8003172:	2304      	movs	r3, #4
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003176:	2303      	movs	r3, #3
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800317a:	2300      	movs	r3, #0
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AI0_GPIO_Port, &GPIO_InitStruct);
 800317e:	f107 031c 	add.w	r3, r7, #28
 8003182:	4619      	mov	r1, r3
 8003184:	4824      	ldr	r0, [pc, #144]	; (8003218 <HAL_ADC_MspInit+0x100>)
 8003186:	f001 fabd 	bl	8004704 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800318a:	2200      	movs	r2, #0
 800318c:	2100      	movs	r1, #0
 800318e:	2012      	movs	r0, #18
 8003190:	f001 f907 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003194:	2012      	movs	r0, #18
 8003196:	f001 f920 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800319a:	e034      	b.n	8003206 <HAL_ADC_MspInit+0xee>
  else if(hadc->Instance==ADC2)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a1e      	ldr	r2, [pc, #120]	; (800321c <HAL_ADC_MspInit+0x104>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d12f      	bne.n	8003206 <HAL_ADC_MspInit+0xee>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
 80031aa:	4b1a      	ldr	r3, [pc, #104]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 80031ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ae:	4a19      	ldr	r2, [pc, #100]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 80031b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b4:	6453      	str	r3, [r2, #68]	; 0x44
 80031b6:	4b17      	ldr	r3, [pc, #92]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031be:	613b      	str	r3, [r7, #16]
 80031c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	4b13      	ldr	r3, [pc, #76]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 80031c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ca:	4a12      	ldr	r2, [pc, #72]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 80031cc:	f043 0304 	orr.w	r3, r3, #4
 80031d0:	6313      	str	r3, [r2, #48]	; 0x30
 80031d2:	4b10      	ldr	r3, [pc, #64]	; (8003214 <HAL_ADC_MspInit+0xfc>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	60fb      	str	r3, [r7, #12]
 80031dc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = AI1_Pin;
 80031de:	2308      	movs	r3, #8
 80031e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80031e2:	2303      	movs	r3, #3
 80031e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031e6:	2300      	movs	r3, #0
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AI1_GPIO_Port, &GPIO_InitStruct);
 80031ea:	f107 031c 	add.w	r3, r7, #28
 80031ee:	4619      	mov	r1, r3
 80031f0:	4809      	ldr	r0, [pc, #36]	; (8003218 <HAL_ADC_MspInit+0x100>)
 80031f2:	f001 fa87 	bl	8004704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80031f6:	2200      	movs	r2, #0
 80031f8:	2100      	movs	r1, #0
 80031fa:	2012      	movs	r0, #18
 80031fc:	f001 f8d1 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8003200:	2012      	movs	r0, #18
 8003202:	f001 f8ea 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 8003206:	bf00      	nop
 8003208:	3730      	adds	r7, #48	; 0x30
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40012000 	.word	0x40012000
 8003214:	40023800 	.word	0x40023800
 8003218:	40020800 	.word	0x40020800
 800321c:	40012100 	.word	0x40012100

08003220 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b08a      	sub	sp, #40	; 0x28
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003228:	f107 0314 	add.w	r3, r7, #20
 800322c:	2200      	movs	r2, #0
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	609a      	str	r2, [r3, #8]
 8003234:	60da      	str	r2, [r3, #12]
 8003236:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a17      	ldr	r2, [pc, #92]	; (800329c <HAL_DAC_MspInit+0x7c>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d127      	bne.n	8003292 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
 8003246:	4b16      	ldr	r3, [pc, #88]	; (80032a0 <HAL_DAC_MspInit+0x80>)
 8003248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324a:	4a15      	ldr	r2, [pc, #84]	; (80032a0 <HAL_DAC_MspInit+0x80>)
 800324c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003250:	6413      	str	r3, [r2, #64]	; 0x40
 8003252:	4b13      	ldr	r3, [pc, #76]	; (80032a0 <HAL_DAC_MspInit+0x80>)
 8003254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003256:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800325a:	613b      	str	r3, [r7, #16]
 800325c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800325e:	2300      	movs	r3, #0
 8003260:	60fb      	str	r3, [r7, #12]
 8003262:	4b0f      	ldr	r3, [pc, #60]	; (80032a0 <HAL_DAC_MspInit+0x80>)
 8003264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003266:	4a0e      	ldr	r2, [pc, #56]	; (80032a0 <HAL_DAC_MspInit+0x80>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6313      	str	r3, [r2, #48]	; 0x30
 800326e:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <HAL_DAC_MspInit+0x80>)
 8003270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = AO1_Pin|AO2_Pin;
 800327a:	2330      	movs	r3, #48	; 0x30
 800327c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800327e:	2303      	movs	r3, #3
 8003280:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003282:	2300      	movs	r3, #0
 8003284:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	4619      	mov	r1, r3
 800328c:	4805      	ldr	r0, [pc, #20]	; (80032a4 <HAL_DAC_MspInit+0x84>)
 800328e:	f001 fa39 	bl	8004704 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003292:	bf00      	nop
 8003294:	3728      	adds	r7, #40	; 0x28
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	40007400 	.word	0x40007400
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40020000 	.word	0x40020000

080032a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a1c      	ldr	r2, [pc, #112]	; (8003328 <HAL_TIM_Base_MspInit+0x80>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d116      	bne.n	80032e8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	60fb      	str	r3, [r7, #12]
 80032be:	4b1b      	ldr	r3, [pc, #108]	; (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	4a1a      	ldr	r2, [pc, #104]	; (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032c4:	f043 0302 	orr.w	r3, r3, #2
 80032c8:	6413      	str	r3, [r2, #64]	; 0x40
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	f003 0302 	and.w	r3, r3, #2
 80032d2:	60fb      	str	r3, [r7, #12]
 80032d4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 80032d6:	2200      	movs	r2, #0
 80032d8:	2101      	movs	r1, #1
 80032da:	201d      	movs	r0, #29
 80032dc:	f001 f861 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80032e0:	201d      	movs	r0, #29
 80032e2:	f001 f87a 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80032e6:	e01a      	b.n	800331e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM4)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_TIM_Base_MspInit+0x88>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d115      	bne.n	800331e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80032f2:	2300      	movs	r3, #0
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	4b0d      	ldr	r3, [pc, #52]	; (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	4a0c      	ldr	r2, [pc, #48]	; (800332c <HAL_TIM_Base_MspInit+0x84>)
 80032fc:	f043 0304 	orr.w	r3, r3, #4
 8003300:	6413      	str	r3, [r2, #64]	; 0x40
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <HAL_TIM_Base_MspInit+0x84>)
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	f003 0304 	and.w	r3, r3, #4
 800330a:	60bb      	str	r3, [r7, #8]
 800330c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 800330e:	2200      	movs	r2, #0
 8003310:	2102      	movs	r1, #2
 8003312:	201e      	movs	r0, #30
 8003314:	f001 f845 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003318:	201e      	movs	r0, #30
 800331a:	f001 f85e 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40000400 	.word	0x40000400
 800332c:	40023800 	.word	0x40023800
 8003330:	40000800 	.word	0x40000800

08003334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b08e      	sub	sp, #56	; 0x38
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800333c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]
 8003344:	605a      	str	r2, [r3, #4]
 8003346:	609a      	str	r2, [r3, #8]
 8003348:	60da      	str	r2, [r3, #12]
 800334a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a58      	ldr	r2, [pc, #352]	; (80034b4 <HAL_UART_MspInit+0x180>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d135      	bne.n	80033c2 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003356:	2300      	movs	r3, #0
 8003358:	623b      	str	r3, [r7, #32]
 800335a:	4b57      	ldr	r3, [pc, #348]	; (80034b8 <HAL_UART_MspInit+0x184>)
 800335c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335e:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003360:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003364:	6413      	str	r3, [r2, #64]	; 0x40
 8003366:	4b54      	ldr	r3, [pc, #336]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800336e:	623b      	str	r3, [r7, #32]
 8003370:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	61fb      	str	r3, [r7, #28]
 8003376:	4b50      	ldr	r3, [pc, #320]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	4a4f      	ldr	r2, [pc, #316]	; (80034b8 <HAL_UART_MspInit+0x184>)
 800337c:	f043 0304 	orr.w	r3, r3, #4
 8003380:	6313      	str	r3, [r2, #48]	; 0x30
 8003382:	4b4d      	ldr	r3, [pc, #308]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003386:	f003 0304 	and.w	r3, r3, #4
 800338a:	61fb      	str	r3, [r7, #28]
 800338c:	69fb      	ldr	r3, [r7, #28]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = TX3_Pin|RX3_Pin;
 800338e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003394:	2302      	movs	r3, #2
 8003396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003398:	2300      	movs	r3, #0
 800339a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339c:	2303      	movs	r3, #3
 800339e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80033a0:	2308      	movs	r3, #8
 80033a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80033a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033a8:	4619      	mov	r1, r3
 80033aa:	4844      	ldr	r0, [pc, #272]	; (80034bc <HAL_UART_MspInit+0x188>)
 80033ac:	f001 f9aa 	bl	8004704 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80033b0:	2200      	movs	r2, #0
 80033b2:	2100      	movs	r1, #0
 80033b4:	2034      	movs	r0, #52	; 0x34
 80033b6:	f000 fff4 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80033ba:	2034      	movs	r0, #52	; 0x34
 80033bc:	f001 f80d 	bl	80043da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80033c0:	e074      	b.n	80034ac <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART1)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a3e      	ldr	r2, [pc, #248]	; (80034c0 <HAL_UART_MspInit+0x18c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d135      	bne.n	8003438 <HAL_UART_MspInit+0x104>
    __HAL_RCC_USART1_CLK_ENABLE();
 80033cc:	2300      	movs	r3, #0
 80033ce:	61bb      	str	r3, [r7, #24]
 80033d0:	4b39      	ldr	r3, [pc, #228]	; (80034b8 <HAL_UART_MspInit+0x184>)
 80033d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033d4:	4a38      	ldr	r2, [pc, #224]	; (80034b8 <HAL_UART_MspInit+0x184>)
 80033d6:	f043 0310 	orr.w	r3, r3, #16
 80033da:	6453      	str	r3, [r2, #68]	; 0x44
 80033dc:	4b36      	ldr	r3, [pc, #216]	; (80034b8 <HAL_UART_MspInit+0x184>)
 80033de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033e0:	f003 0310 	and.w	r3, r3, #16
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033e8:	2300      	movs	r3, #0
 80033ea:	617b      	str	r3, [r7, #20]
 80033ec:	4b32      	ldr	r3, [pc, #200]	; (80034b8 <HAL_UART_MspInit+0x184>)
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	4a31      	ldr	r2, [pc, #196]	; (80034b8 <HAL_UART_MspInit+0x184>)
 80033f2:	f043 0301 	orr.w	r3, r3, #1
 80033f6:	6313      	str	r3, [r2, #48]	; 0x30
 80033f8:	4b2f      	ldr	r3, [pc, #188]	; (80034b8 <HAL_UART_MspInit+0x184>)
 80033fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fc:	f003 0301 	and.w	r3, r3, #1
 8003400:	617b      	str	r3, [r7, #20]
 8003402:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = TX1_Pin|RX1_Pin;
 8003404:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800340a:	2302      	movs	r3, #2
 800340c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800340e:	2300      	movs	r3, #0
 8003410:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003412:	2303      	movs	r3, #3
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003416:	2307      	movs	r3, #7
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800341a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800341e:	4619      	mov	r1, r3
 8003420:	4828      	ldr	r0, [pc, #160]	; (80034c4 <HAL_UART_MspInit+0x190>)
 8003422:	f001 f96f 	bl	8004704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003426:	2200      	movs	r2, #0
 8003428:	2100      	movs	r1, #0
 800342a:	2025      	movs	r0, #37	; 0x25
 800342c:	f000 ffb9 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003430:	2025      	movs	r0, #37	; 0x25
 8003432:	f000 ffd2 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 8003436:	e039      	b.n	80034ac <HAL_UART_MspInit+0x178>
  else if(huart->Instance==USART3)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a22      	ldr	r2, [pc, #136]	; (80034c8 <HAL_UART_MspInit+0x194>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d134      	bne.n	80034ac <HAL_UART_MspInit+0x178>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003442:	2300      	movs	r3, #0
 8003444:	613b      	str	r3, [r7, #16]
 8003446:	4b1c      	ldr	r3, [pc, #112]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344a:	4a1b      	ldr	r2, [pc, #108]	; (80034b8 <HAL_UART_MspInit+0x184>)
 800344c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003450:	6413      	str	r3, [r2, #64]	; 0x40
 8003452:	4b19      	ldr	r3, [pc, #100]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800345a:	613b      	str	r3, [r7, #16]
 800345c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800345e:	2300      	movs	r3, #0
 8003460:	60fb      	str	r3, [r7, #12]
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003466:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003468:	f043 0302 	orr.w	r3, r3, #2
 800346c:	6313      	str	r3, [r2, #48]	; 0x30
 800346e:	4b12      	ldr	r3, [pc, #72]	; (80034b8 <HAL_UART_MspInit+0x184>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	60fb      	str	r3, [r7, #12]
 8003478:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TX2_Pin|RX2_Pin;
 800347a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800347e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003480:	2302      	movs	r3, #2
 8003482:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003484:	2300      	movs	r3, #0
 8003486:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003488:	2303      	movs	r3, #3
 800348a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800348c:	2307      	movs	r3, #7
 800348e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003490:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003494:	4619      	mov	r1, r3
 8003496:	480d      	ldr	r0, [pc, #52]	; (80034cc <HAL_UART_MspInit+0x198>)
 8003498:	f001 f934 	bl	8004704 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800349c:	2200      	movs	r2, #0
 800349e:	2100      	movs	r1, #0
 80034a0:	2027      	movs	r0, #39	; 0x27
 80034a2:	f000 ff7e 	bl	80043a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80034a6:	2027      	movs	r0, #39	; 0x27
 80034a8:	f000 ff97 	bl	80043da <HAL_NVIC_EnableIRQ>
}
 80034ac:	bf00      	nop
 80034ae:	3738      	adds	r7, #56	; 0x38
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	40004c00 	.word	0x40004c00
 80034b8:	40023800 	.word	0x40023800
 80034bc:	40020800 	.word	0x40020800
 80034c0:	40011000 	.word	0x40011000
 80034c4:	40020000 	.word	0x40020000
 80034c8:	40004800 	.word	0x40004800
 80034cc:	40020400 	.word	0x40020400

080034d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034d4:	e7fe      	b.n	80034d4 <NMI_Handler+0x4>

080034d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034d6:	b480      	push	{r7}
 80034d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034da:	e7fe      	b.n	80034da <HardFault_Handler+0x4>

080034dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034dc:	b480      	push	{r7}
 80034de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034e0:	e7fe      	b.n	80034e0 <MemManage_Handler+0x4>

080034e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034e2:	b480      	push	{r7}
 80034e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034e6:	e7fe      	b.n	80034e6 <BusFault_Handler+0x4>

080034e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034ec:	e7fe      	b.n	80034ec <UsageFault_Handler+0x4>

080034ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800350a:	b480      	push	{r7}
 800350c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800350e:	bf00      	nop
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800351c:	f000 f9a6 	bl	800386c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003520:	bf00      	nop
 8003522:	bd80      	pop	{r7, pc}

08003524 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8003528:	4803      	ldr	r0, [pc, #12]	; (8003538 <ADC_IRQHandler+0x14>)
 800352a:	f000 fb05 	bl	8003b38 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800352e:	4803      	ldr	r0, [pc, #12]	; (800353c <ADC_IRQHandler+0x18>)
 8003530:	f000 fb02 	bl	8003b38 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003534:	bf00      	nop
 8003536:	bd80      	pop	{r7, pc}
 8003538:	200003cc 	.word	0x200003cc
 800353c:	20000414 	.word	0x20000414

08003540 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI6_Pin);
 8003544:	2080      	movs	r0, #128	; 0x80
 8003546:	f001 fac5 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800354a:	bf00      	nop
 800354c:	bd80      	pop	{r7, pc}
	...

08003550 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003554:	4802      	ldr	r0, [pc, #8]	; (8003560 <TIM3_IRQHandler+0x10>)
 8003556:	f001 ffed 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800355a:	bf00      	nop
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	20000470 	.word	0x20000470

08003564 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003568:	4802      	ldr	r0, [pc, #8]	; (8003574 <TIM4_IRQHandler+0x10>)
 800356a:	f001 ffe3 	bl	8005534 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800356e:	bf00      	nop
 8003570:	bd80      	pop	{r7, pc}
 8003572:	bf00      	nop
 8003574:	200004b8 	.word	0x200004b8

08003578 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800357c:	4802      	ldr	r0, [pc, #8]	; (8003588 <USART1_IRQHandler+0x10>)
 800357e:	f002 fcab 	bl	8005ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003582:	bf00      	nop
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	20000544 	.word	0x20000544

0800358c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003590:	4802      	ldr	r0, [pc, #8]	; (800359c <USART3_IRQHandler+0x10>)
 8003592:	f002 fca1 	bl	8005ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000588 	.word	0x20000588

080035a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DI1_Pin);
 80035a4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80035a8:	f001 fa94 	bl	8004ad4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80035ac:	bf00      	nop
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80035b4:	4802      	ldr	r0, [pc, #8]	; (80035c0 <UART4_IRQHandler+0x10>)
 80035b6:	f002 fc8f 	bl	8005ed8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80035ba:	bf00      	nop
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	20000500 	.word	0x20000500

080035c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  return 1;
 80035c8:	2301      	movs	r3, #1
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <_kill>:

int _kill(int pid, int sig)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80035de:	f003 fbeb 	bl	8006db8 <__errno>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2216      	movs	r2, #22
 80035e6:	601a      	str	r2, [r3, #0]
  return -1;
 80035e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <_exit>:

void _exit (int status)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80035fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff ffe7 	bl	80035d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003606:	e7fe      	b.n	8003606 <_exit+0x12>

08003608 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b086      	sub	sp, #24
 800360c:	af00      	add	r7, sp, #0
 800360e:	60f8      	str	r0, [r7, #12]
 8003610:	60b9      	str	r1, [r7, #8]
 8003612:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003614:	2300      	movs	r3, #0
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e00a      	b.n	8003630 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800361a:	f3af 8000 	nop.w
 800361e:	4601      	mov	r1, r0
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	1c5a      	adds	r2, r3, #1
 8003624:	60ba      	str	r2, [r7, #8]
 8003626:	b2ca      	uxtb	r2, r1
 8003628:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	3301      	adds	r3, #1
 800362e:	617b      	str	r3, [r7, #20]
 8003630:	697a      	ldr	r2, [r7, #20]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	429a      	cmp	r2, r3
 8003636:	dbf0      	blt.n	800361a <_read+0x12>
  }

  return len;
 8003638:	687b      	ldr	r3, [r7, #4]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b086      	sub	sp, #24
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800364e:	2300      	movs	r3, #0
 8003650:	617b      	str	r3, [r7, #20]
 8003652:	e009      	b.n	8003668 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	1c5a      	adds	r2, r3, #1
 8003658:	60ba      	str	r2, [r7, #8]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe fc55 	bl	8001f0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	3301      	adds	r3, #1
 8003666:	617b      	str	r3, [r7, #20]
 8003668:	697a      	ldr	r2, [r7, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	429a      	cmp	r2, r3
 800366e:	dbf1      	blt.n	8003654 <_write+0x12>
  }
  return len;
 8003670:	687b      	ldr	r3, [r7, #4]
}
 8003672:	4618      	mov	r0, r3
 8003674:	3718      	adds	r7, #24
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <_close>:

int _close(int file)
{
 800367a:	b480      	push	{r7}
 800367c:	b083      	sub	sp, #12
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003686:	4618      	mov	r0, r3
 8003688:	370c      	adds	r7, #12
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr

08003692 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003692:	b480      	push	{r7}
 8003694:	b083      	sub	sp, #12
 8003696:	af00      	add	r7, sp, #0
 8003698:	6078      	str	r0, [r7, #4]
 800369a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80036a2:	605a      	str	r2, [r3, #4]
  return 0;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <_isatty>:

int _isatty(int file)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3714      	adds	r7, #20
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
	...

080036e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80036ec:	4a14      	ldr	r2, [pc, #80]	; (8003740 <_sbrk+0x5c>)
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <_sbrk+0x60>)
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80036f8:	4b13      	ldr	r3, [pc, #76]	; (8003748 <_sbrk+0x64>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d102      	bne.n	8003706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003700:	4b11      	ldr	r3, [pc, #68]	; (8003748 <_sbrk+0x64>)
 8003702:	4a12      	ldr	r2, [pc, #72]	; (800374c <_sbrk+0x68>)
 8003704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003706:	4b10      	ldr	r3, [pc, #64]	; (8003748 <_sbrk+0x64>)
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	4413      	add	r3, r2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	429a      	cmp	r2, r3
 8003712:	d207      	bcs.n	8003724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003714:	f003 fb50 	bl	8006db8 <__errno>
 8003718:	4603      	mov	r3, r0
 800371a:	220c      	movs	r2, #12
 800371c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800371e:	f04f 33ff 	mov.w	r3, #4294967295
 8003722:	e009      	b.n	8003738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <_sbrk+0x64>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800372a:	4b07      	ldr	r3, [pc, #28]	; (8003748 <_sbrk+0x64>)
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	4413      	add	r3, r2
 8003732:	4a05      	ldr	r2, [pc, #20]	; (8003748 <_sbrk+0x64>)
 8003734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003736:	68fb      	ldr	r3, [r7, #12]
}
 8003738:	4618      	mov	r0, r3
 800373a:	3718      	adds	r7, #24
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	20020000 	.word	0x20020000
 8003744:	00000400 	.word	0x00000400
 8003748:	200005cc 	.word	0x200005cc
 800374c:	200005e8 	.word	0x200005e8

08003750 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003750:	b480      	push	{r7}
 8003752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003754:	4b06      	ldr	r3, [pc, #24]	; (8003770 <SystemInit+0x20>)
 8003756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800375a:	4a05      	ldr	r2, [pc, #20]	; (8003770 <SystemInit+0x20>)
 800375c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003764:	bf00      	nop
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	e000ed00 	.word	0xe000ed00

08003774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003774:	f8df d034 	ldr.w	sp, [pc, #52]	; 80037ac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003778:	480d      	ldr	r0, [pc, #52]	; (80037b0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800377a:	490e      	ldr	r1, [pc, #56]	; (80037b4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800377c:	4a0e      	ldr	r2, [pc, #56]	; (80037b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800377e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003780:	e002      	b.n	8003788 <LoopCopyDataInit>

08003782 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003782:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003784:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003786:	3304      	adds	r3, #4

08003788 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003788:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800378a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800378c:	d3f9      	bcc.n	8003782 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800378e:	4a0b      	ldr	r2, [pc, #44]	; (80037bc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003790:	4c0b      	ldr	r4, [pc, #44]	; (80037c0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003792:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003794:	e001      	b.n	800379a <LoopFillZerobss>

08003796 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003796:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003798:	3204      	adds	r2, #4

0800379a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800379a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800379c:	d3fb      	bcc.n	8003796 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800379e:	f7ff ffd7 	bl	8003750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80037a2:	f003 fb0f 	bl	8006dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80037a6:	f7fe ff37 	bl	8002618 <main>
  bx  lr    
 80037aa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80037ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80037b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80037b4:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 80037b8:	0800baf8 	.word	0x0800baf8
  ldr r2, =_sbss
 80037bc:	2000022c 	.word	0x2000022c
  ldr r4, =_ebss
 80037c0:	200005e4 	.word	0x200005e4

080037c4 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80037c4:	e7fe      	b.n	80037c4 <CAN1_RX0_IRQHandler>
	...

080037c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037cc:	4b0e      	ldr	r3, [pc, #56]	; (8003808 <HAL_Init+0x40>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a0d      	ldr	r2, [pc, #52]	; (8003808 <HAL_Init+0x40>)
 80037d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037d8:	4b0b      	ldr	r3, [pc, #44]	; (8003808 <HAL_Init+0x40>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a0a      	ldr	r2, [pc, #40]	; (8003808 <HAL_Init+0x40>)
 80037de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037e4:	4b08      	ldr	r3, [pc, #32]	; (8003808 <HAL_Init+0x40>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a07      	ldr	r2, [pc, #28]	; (8003808 <HAL_Init+0x40>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037f0:	2003      	movs	r0, #3
 80037f2:	f000 fdcb 	bl	800438c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80037f6:	200f      	movs	r0, #15
 80037f8:	f000 f808 	bl	800380c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80037fc:	f7ff fc64 	bl	80030c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023c00 	.word	0x40023c00

0800380c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003814:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_InitTick+0x54>)
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <HAL_InitTick+0x58>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	4619      	mov	r1, r3
 800381e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003822:	fbb3 f3f1 	udiv	r3, r3, r1
 8003826:	fbb2 f3f3 	udiv	r3, r2, r3
 800382a:	4618      	mov	r0, r3
 800382c:	f000 fde3 	bl	80043f6 <HAL_SYSTICK_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003836:	2301      	movs	r3, #1
 8003838:	e00e      	b.n	8003858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2b0f      	cmp	r3, #15
 800383e:	d80a      	bhi.n	8003856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003840:	2200      	movs	r2, #0
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	f04f 30ff 	mov.w	r0, #4294967295
 8003848:	f000 fdab 	bl	80043a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800384c:	4a06      	ldr	r2, [pc, #24]	; (8003868 <HAL_InitTick+0x5c>)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	e000      	b.n	8003858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
}
 8003858:	4618      	mov	r0, r3
 800385a:	3708      	adds	r7, #8
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	2000004c 	.word	0x2000004c
 8003864:	20000054 	.word	0x20000054
 8003868:	20000050 	.word	0x20000050

0800386c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800386c:	b480      	push	{r7}
 800386e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003870:	4b06      	ldr	r3, [pc, #24]	; (800388c <HAL_IncTick+0x20>)
 8003872:	781b      	ldrb	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	4b06      	ldr	r3, [pc, #24]	; (8003890 <HAL_IncTick+0x24>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4413      	add	r3, r2
 800387c:	4a04      	ldr	r2, [pc, #16]	; (8003890 <HAL_IncTick+0x24>)
 800387e:	6013      	str	r3, [r2, #0]
}
 8003880:	bf00      	nop
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr
 800388a:	bf00      	nop
 800388c:	20000054 	.word	0x20000054
 8003890:	200005d0 	.word	0x200005d0

08003894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  return uwTick;
 8003898:	4b03      	ldr	r3, [pc, #12]	; (80038a8 <HAL_GetTick+0x14>)
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	46bd      	mov	sp, r7
 80038a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a4:	4770      	bx	lr
 80038a6:	bf00      	nop
 80038a8:	200005d0 	.word	0x200005d0

080038ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038b4:	f7ff ffee 	bl	8003894 <HAL_GetTick>
 80038b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038c4:	d005      	beq.n	80038d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038c6:	4b0a      	ldr	r3, [pc, #40]	; (80038f0 <HAL_Delay+0x44>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	461a      	mov	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4413      	add	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038d2:	bf00      	nop
 80038d4:	f7ff ffde 	bl	8003894 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d8f7      	bhi.n	80038d4 <HAL_Delay+0x28>
  {
  }
}
 80038e4:	bf00      	nop
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	20000054 	.word	0x20000054

080038f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d101      	bne.n	800390a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e033      	b.n	8003972 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f7ff fc00 	bl	8003118 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392a:	f003 0310 	and.w	r3, r3, #16
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003936:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800393a:	f023 0302 	bic.w	r3, r3, #2
 800393e:	f043 0202 	orr.w	r2, r3, #2
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 fb4a 	bl	8003fe0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2200      	movs	r2, #0
 8003950:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f023 0303 	bic.w	r3, r3, #3
 800395a:	f043 0201 	orr.w	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	641a      	str	r2, [r3, #64]	; 0x40
 8003962:	e001      	b.n	8003968 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003970:	7bfb      	ldrb	r3, [r7, #15]
}
 8003972:	4618      	mov	r0, r3
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
	...

0800397c <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800397c:	b480      	push	{r7}
 800397e:	b085      	sub	sp, #20
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003984:	2300      	movs	r3, #0
 8003986:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800398e:	2b01      	cmp	r3, #1
 8003990:	d101      	bne.n	8003996 <HAL_ADC_Start_IT+0x1a>
 8003992:	2302      	movs	r3, #2
 8003994:	e0bd      	b.n	8003b12 <HAL_ADC_Start_IT+0x196>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2201      	movs	r2, #1
 800399a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 0301 	and.w	r3, r3, #1
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	d018      	beq.n	80039de <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689a      	ldr	r2, [r3, #8]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f042 0201 	orr.w	r2, r2, #1
 80039ba:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80039bc:	4b58      	ldr	r3, [pc, #352]	; (8003b20 <HAL_ADC_Start_IT+0x1a4>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a58      	ldr	r2, [pc, #352]	; (8003b24 <HAL_ADC_Start_IT+0x1a8>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0c9a      	lsrs	r2, r3, #18
 80039c8:	4613      	mov	r3, r2
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4413      	add	r3, r2
 80039ce:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039d0:	e002      	b.n	80039d8 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	3b01      	subs	r3, #1
 80039d6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1f9      	bne.n	80039d2 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	f040 8085 	bne.w	8003af8 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80039f6:	f023 0301 	bic.w	r3, r3, #1
 80039fa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d007      	beq.n	8003a20 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a14:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a18:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a24:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a2c:	d106      	bne.n	8003a3c <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a32:	f023 0206 	bic.w	r2, r3, #6
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	645a      	str	r2, [r3, #68]	; 0x44
 8003a3a:	e002      	b.n	8003a42 <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a4a:	4b37      	ldr	r3, [pc, #220]	; (8003b28 <HAL_ADC_Start_IT+0x1ac>)
 8003a4c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003a56:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	6812      	ldr	r2, [r2, #0]
 8003a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a66:	f043 0320 	orr.w	r3, r3, #32
 8003a6a:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	f003 031f 	and.w	r3, r3, #31
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d12a      	bne.n	8003ace <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a2b      	ldr	r2, [pc, #172]	; (8003b2c <HAL_ADC_Start_IT+0x1b0>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d015      	beq.n	8003aae <HAL_ADC_Start_IT+0x132>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	4a2a      	ldr	r2, [pc, #168]	; (8003b30 <HAL_ADC_Start_IT+0x1b4>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d105      	bne.n	8003a98 <HAL_ADC_Start_IT+0x11c>
 8003a8c:	4b26      	ldr	r3, [pc, #152]	; (8003b28 <HAL_ADC_Start_IT+0x1ac>)
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	f003 031f 	and.w	r3, r3, #31
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d00a      	beq.n	8003aae <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a25      	ldr	r2, [pc, #148]	; (8003b34 <HAL_ADC_Start_IT+0x1b8>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d136      	bne.n	8003b10 <HAL_ADC_Start_IT+0x194>
 8003aa2:	4b21      	ldr	r3, [pc, #132]	; (8003b28 <HAL_ADC_Start_IT+0x1ac>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d130      	bne.n	8003b10 <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d129      	bne.n	8003b10 <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689a      	ldr	r2, [r3, #8]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003aca:	609a      	str	r2, [r3, #8]
 8003acc:	e020      	b.n	8003b10 <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a16      	ldr	r2, [pc, #88]	; (8003b2c <HAL_ADC_Start_IT+0x1b0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d11b      	bne.n	8003b10 <HAL_ADC_Start_IT+0x194>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d114      	bne.n	8003b10 <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003af4:	609a      	str	r2, [r3, #8]
 8003af6:	e00b      	b.n	8003b10 <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	2000004c 	.word	0x2000004c
 8003b24:	431bde83 	.word	0x431bde83
 8003b28:	40012300 	.word	0x40012300
 8003b2c:	40012000 	.word	0x40012000
 8003b30:	40012100 	.word	0x40012100
 8003b34:	40012200 	.word	0x40012200

08003b38 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8003b40:	2300      	movs	r3, #0
 8003b42:	617b      	str	r3, [r7, #20]
 8003b44:	2300      	movs	r3, #0
 8003b46:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d049      	beq.n	8003c02 <HAL_ADC_IRQHandler+0xca>
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d046      	beq.n	8003c02 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d105      	bne.n	8003b8c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d12b      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d127      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d119      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 0220 	bic.w	r2, r2, #32
 8003bcc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d105      	bne.n	8003bf2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bea:	f043 0201 	orr.w	r2, r3, #1
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe fba0 	bl	8002338 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f06f 0212 	mvn.w	r2, #18
 8003c00:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f003 0304 	and.w	r3, r3, #4
 8003c08:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c10:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d057      	beq.n	8003cc8 <HAL_ADC_IRQHandler+0x190>
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d054      	beq.n	8003cc8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c22:	f003 0310 	and.w	r3, r3, #16
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d105      	bne.n	8003c36 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d139      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d12b      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d124      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d11d      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d119      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	685a      	ldr	r2, [r3, #4]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c92:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c98:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d105      	bne.n	8003cb8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb0:	f043 0201 	orr.w	r2, r3, #1
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	f000 fa8d 	bl	80041d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f06f 020c 	mvn.w	r2, #12
 8003cc6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f003 0301 	and.w	r3, r3, #1
 8003cce:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d017      	beq.n	8003d0e <HAL_ADC_IRQHandler+0x1d6>
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d014      	beq.n	8003d0e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d10d      	bne.n	8003d0e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f837 	bl	8003d72 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f06f 0201 	mvn.w	r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8003d16:	68bb      	ldr	r3, [r7, #8]
 8003d18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d1c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d015      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x218>
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d012      	beq.n	8003d50 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2e:	f043 0202 	orr.w	r2, r3, #2
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f06f 0220 	mvn.w	r2, #32
 8003d3e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f820 	bl	8003d86 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f06f 0220 	mvn.w	r2, #32
 8003d4e:	601a      	str	r2, [r3, #0]
  }
}
 8003d50:	bf00      	nop
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003d7a:	bf00      	nop
 8003d7c:	370c      	adds	r7, #12
 8003d7e:	46bd      	mov	sp, r7
 8003d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d84:	4770      	bx	lr

08003d86 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d86:	b480      	push	{r7}
 8003d88:	b083      	sub	sp, #12
 8003d8a:	af00      	add	r7, sp, #0
 8003d8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
	...

08003d9c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
 8003da4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d101      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x1c>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e105      	b.n	8003fc4 <HAL_ADC_ConfigChannel+0x228>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	2b09      	cmp	r3, #9
 8003dc6:	d925      	bls.n	8003e14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68d9      	ldr	r1, [r3, #12]
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	b29b      	uxth	r3, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	005b      	lsls	r3, r3, #1
 8003dda:	4413      	add	r3, r2
 8003ddc:	3b1e      	subs	r3, #30
 8003dde:	2207      	movs	r2, #7
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	43da      	mvns	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	400a      	ands	r2, r1
 8003dec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68d9      	ldr	r1, [r3, #12]
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	689a      	ldr	r2, [r3, #8]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	b29b      	uxth	r3, r3
 8003dfe:	4618      	mov	r0, r3
 8003e00:	4603      	mov	r3, r0
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	4403      	add	r3, r0
 8003e06:	3b1e      	subs	r3, #30
 8003e08:	409a      	lsls	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	430a      	orrs	r2, r1
 8003e10:	60da      	str	r2, [r3, #12]
 8003e12:	e022      	b.n	8003e5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	6919      	ldr	r1, [r3, #16]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	461a      	mov	r2, r3
 8003e22:	4613      	mov	r3, r2
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4413      	add	r3, r2
 8003e28:	2207      	movs	r2, #7
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	400a      	ands	r2, r1
 8003e36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	6919      	ldr	r1, [r3, #16]
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	4618      	mov	r0, r3
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	4403      	add	r3, r0
 8003e50:	409a      	lsls	r2, r3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	430a      	orrs	r2, r1
 8003e58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b06      	cmp	r3, #6
 8003e60:	d824      	bhi.n	8003eac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	685a      	ldr	r2, [r3, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	3b05      	subs	r3, #5
 8003e74:	221f      	movs	r2, #31
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	43da      	mvns	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	400a      	ands	r2, r1
 8003e82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	4618      	mov	r0, r3
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	3b05      	subs	r3, #5
 8003e9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	635a      	str	r2, [r3, #52]	; 0x34
 8003eaa:	e04c      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	d824      	bhi.n	8003efe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3b23      	subs	r3, #35	; 0x23
 8003ec6:	221f      	movs	r2, #31
 8003ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ecc:	43da      	mvns	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	400a      	ands	r2, r1
 8003ed4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	685a      	ldr	r2, [r3, #4]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	009b      	lsls	r3, r3, #2
 8003eec:	4413      	add	r3, r2
 8003eee:	3b23      	subs	r3, #35	; 0x23
 8003ef0:	fa00 f203 	lsl.w	r2, r0, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	631a      	str	r2, [r3, #48]	; 0x30
 8003efc:	e023      	b.n	8003f46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685a      	ldr	r2, [r3, #4]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	009b      	lsls	r3, r3, #2
 8003f0c:	4413      	add	r3, r2
 8003f0e:	3b41      	subs	r3, #65	; 0x41
 8003f10:	221f      	movs	r2, #31
 8003f12:	fa02 f303 	lsl.w	r3, r2, r3
 8003f16:	43da      	mvns	r2, r3
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	400a      	ands	r2, r1
 8003f1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685a      	ldr	r2, [r3, #4]
 8003f32:	4613      	mov	r3, r2
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	4413      	add	r3, r2
 8003f38:	3b41      	subs	r3, #65	; 0x41
 8003f3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	430a      	orrs	r2, r1
 8003f44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003f46:	4b22      	ldr	r3, [pc, #136]	; (8003fd0 <HAL_ADC_ConfigChannel+0x234>)
 8003f48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <HAL_ADC_ConfigChannel+0x238>)
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d109      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x1cc>
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2b12      	cmp	r3, #18
 8003f5a:	d105      	bne.n	8003f68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a19      	ldr	r2, [pc, #100]	; (8003fd4 <HAL_ADC_ConfigChannel+0x238>)
 8003f6e:	4293      	cmp	r3, r2
 8003f70:	d123      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x21e>
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	2b10      	cmp	r3, #16
 8003f78:	d003      	beq.n	8003f82 <HAL_ADC_ConfigChannel+0x1e6>
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2b11      	cmp	r3, #17
 8003f80:	d11b      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2b10      	cmp	r3, #16
 8003f94:	d111      	bne.n	8003fba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003f96:	4b10      	ldr	r3, [pc, #64]	; (8003fd8 <HAL_ADC_ConfigChannel+0x23c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a10      	ldr	r2, [pc, #64]	; (8003fdc <HAL_ADC_ConfigChannel+0x240>)
 8003f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa0:	0c9a      	lsrs	r2, r3, #18
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	009b      	lsls	r3, r3, #2
 8003fa6:	4413      	add	r3, r2
 8003fa8:	005b      	lsls	r3, r3, #1
 8003faa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fac:	e002      	b.n	8003fb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1f9      	bne.n	8003fae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr
 8003fd0:	40012300 	.word	0x40012300
 8003fd4:	40012000 	.word	0x40012000
 8003fd8:	2000004c 	.word	0x2000004c
 8003fdc:	431bde83 	.word	0x431bde83

08003fe0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003fe8:	4b79      	ldr	r3, [pc, #484]	; (80041d0 <ADC_Init+0x1f0>)
 8003fea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	431a      	orrs	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	685a      	ldr	r2, [r3, #4]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004014:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	6859      	ldr	r1, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	691b      	ldr	r3, [r3, #16]
 8004020:	021a      	lsls	r2, r3, #8
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004038:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6859      	ldr	r1, [r3, #4]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	430a      	orrs	r2, r1
 800404a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	689a      	ldr	r2, [r3, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800405a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	6899      	ldr	r1, [r3, #8]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68da      	ldr	r2, [r3, #12]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	430a      	orrs	r2, r1
 800406c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004072:	4a58      	ldr	r2, [pc, #352]	; (80041d4 <ADC_Init+0x1f4>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d022      	beq.n	80040be <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004086:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	6899      	ldr	r1, [r3, #8]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040a8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	6899      	ldr	r1, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	430a      	orrs	r2, r1
 80040ba:	609a      	str	r2, [r3, #8]
 80040bc:	e00f      	b.n	80040de <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	689a      	ldr	r2, [r3, #8]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80040cc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689a      	ldr	r2, [r3, #8]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80040dc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0202 	bic.w	r2, r2, #2
 80040ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6899      	ldr	r1, [r3, #8]
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	7e1b      	ldrb	r3, [r3, #24]
 80040f8:	005a      	lsls	r2, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d01b      	beq.n	8004144 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685a      	ldr	r2, [r3, #4]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685a      	ldr	r2, [r3, #4]
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800412a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004136:	3b01      	subs	r3, #1
 8004138:	035a      	lsls	r2, r3, #13
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
 8004142:	e007      	b.n	8004154 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004152:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004162:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	69db      	ldr	r3, [r3, #28]
 800416e:	3b01      	subs	r3, #1
 8004170:	051a      	lsls	r2, r3, #20
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	430a      	orrs	r2, r1
 8004178:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	689a      	ldr	r2, [r3, #8]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004188:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6899      	ldr	r1, [r3, #8]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004196:	025a      	lsls	r2, r3, #9
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	029a      	lsls	r2, r3, #10
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	609a      	str	r2, [r3, #8]
}
 80041c4:	bf00      	nop
 80041c6:	3714      	adds	r7, #20
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr
 80041d0:	40012300 	.word	0x40012300
 80041d4:	0f000001 	.word	0x0f000001

080041d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	f003 0307 	and.w	r3, r3, #7
 80041fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041fc:	4b0c      	ldr	r3, [pc, #48]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 80041fe:	68db      	ldr	r3, [r3, #12]
 8004200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004208:	4013      	ands	r3, r2
 800420a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004210:	68bb      	ldr	r3, [r7, #8]
 8004212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800421e:	4a04      	ldr	r2, [pc, #16]	; (8004230 <__NVIC_SetPriorityGrouping+0x44>)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	60d3      	str	r3, [r2, #12]
}
 8004224:	bf00      	nop
 8004226:	3714      	adds	r7, #20
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004234:	b480      	push	{r7}
 8004236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004238:	4b04      	ldr	r3, [pc, #16]	; (800424c <__NVIC_GetPriorityGrouping+0x18>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	f003 0307 	and.w	r3, r3, #7
}
 8004242:	4618      	mov	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr
 800424c:	e000ed00 	.word	0xe000ed00

08004250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800425a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425e:	2b00      	cmp	r3, #0
 8004260:	db0b      	blt.n	800427a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004262:	79fb      	ldrb	r3, [r7, #7]
 8004264:	f003 021f 	and.w	r2, r3, #31
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <__NVIC_EnableIRQ+0x38>)
 800426a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800426e:	095b      	lsrs	r3, r3, #5
 8004270:	2001      	movs	r0, #1
 8004272:	fa00 f202 	lsl.w	r2, r0, r2
 8004276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800427a:	bf00      	nop
 800427c:	370c      	adds	r7, #12
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	e000e100 	.word	0xe000e100

0800428c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	6039      	str	r1, [r7, #0]
 8004296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800429c:	2b00      	cmp	r3, #0
 800429e:	db0a      	blt.n	80042b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	490c      	ldr	r1, [pc, #48]	; (80042d8 <__NVIC_SetPriority+0x4c>)
 80042a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042aa:	0112      	lsls	r2, r2, #4
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	440b      	add	r3, r1
 80042b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80042b4:	e00a      	b.n	80042cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	b2da      	uxtb	r2, r3
 80042ba:	4908      	ldr	r1, [pc, #32]	; (80042dc <__NVIC_SetPriority+0x50>)
 80042bc:	79fb      	ldrb	r3, [r7, #7]
 80042be:	f003 030f 	and.w	r3, r3, #15
 80042c2:	3b04      	subs	r3, #4
 80042c4:	0112      	lsls	r2, r2, #4
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	440b      	add	r3, r1
 80042ca:	761a      	strb	r2, [r3, #24]
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr
 80042d8:	e000e100 	.word	0xe000e100
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b089      	sub	sp, #36	; 0x24
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	f1c3 0307 	rsb	r3, r3, #7
 80042fa:	2b04      	cmp	r3, #4
 80042fc:	bf28      	it	cs
 80042fe:	2304      	movcs	r3, #4
 8004300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	3304      	adds	r3, #4
 8004306:	2b06      	cmp	r3, #6
 8004308:	d902      	bls.n	8004310 <NVIC_EncodePriority+0x30>
 800430a:	69fb      	ldr	r3, [r7, #28]
 800430c:	3b03      	subs	r3, #3
 800430e:	e000      	b.n	8004312 <NVIC_EncodePriority+0x32>
 8004310:	2300      	movs	r3, #0
 8004312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004314:	f04f 32ff 	mov.w	r2, #4294967295
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	fa02 f303 	lsl.w	r3, r2, r3
 800431e:	43da      	mvns	r2, r3
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	401a      	ands	r2, r3
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004328:	f04f 31ff 	mov.w	r1, #4294967295
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa01 f303 	lsl.w	r3, r1, r3
 8004332:	43d9      	mvns	r1, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	4313      	orrs	r3, r2
         );
}
 800433a:	4618      	mov	r0, r3
 800433c:	3724      	adds	r7, #36	; 0x24
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3b01      	subs	r3, #1
 8004354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004358:	d301      	bcc.n	800435e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800435a:	2301      	movs	r3, #1
 800435c:	e00f      	b.n	800437e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800435e:	4a0a      	ldr	r2, [pc, #40]	; (8004388 <SysTick_Config+0x40>)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	3b01      	subs	r3, #1
 8004364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004366:	210f      	movs	r1, #15
 8004368:	f04f 30ff 	mov.w	r0, #4294967295
 800436c:	f7ff ff8e 	bl	800428c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004370:	4b05      	ldr	r3, [pc, #20]	; (8004388 <SysTick_Config+0x40>)
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004376:	4b04      	ldr	r3, [pc, #16]	; (8004388 <SysTick_Config+0x40>)
 8004378:	2207      	movs	r2, #7
 800437a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	e000e010 	.word	0xe000e010

0800438c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b082      	sub	sp, #8
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff29 	bl	80041ec <__NVIC_SetPriorityGrouping>
}
 800439a:	bf00      	nop
 800439c:	3708      	adds	r7, #8
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b086      	sub	sp, #24
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	4603      	mov	r3, r0
 80043aa:	60b9      	str	r1, [r7, #8]
 80043ac:	607a      	str	r2, [r7, #4]
 80043ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80043b0:	2300      	movs	r3, #0
 80043b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043b4:	f7ff ff3e 	bl	8004234 <__NVIC_GetPriorityGrouping>
 80043b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68b9      	ldr	r1, [r7, #8]
 80043be:	6978      	ldr	r0, [r7, #20]
 80043c0:	f7ff ff8e 	bl	80042e0 <NVIC_EncodePriority>
 80043c4:	4602      	mov	r2, r0
 80043c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ca:	4611      	mov	r1, r2
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff5d 	bl	800428c <__NVIC_SetPriority>
}
 80043d2:	bf00      	nop
 80043d4:	3718      	adds	r7, #24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	4603      	mov	r3, r0
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	4618      	mov	r0, r3
 80043ea:	f7ff ff31 	bl	8004250 <__NVIC_EnableIRQ>
}
 80043ee:	bf00      	nop
 80043f0:	3708      	adds	r7, #8
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b082      	sub	sp, #8
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7ff ffa2 	bl	8004348 <SysTick_Config>
 8004404:	4603      	mov	r3, r0
}
 8004406:	4618      	mov	r0, r3
 8004408:	3708      	adds	r7, #8
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}

0800440e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b082      	sub	sp, #8
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d101      	bne.n	8004420 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e014      	b.n	800444a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	791b      	ldrb	r3, [r3, #4]
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d105      	bne.n	8004436 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	2200      	movs	r2, #0
 800442e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f7fe fef5 	bl	8003220 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2202      	movs	r2, #2
 800443a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2201      	movs	r2, #1
 8004446:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004448:	2300      	movs	r3, #0
}
 800444a:	4618      	mov	r0, r3
 800444c:	3708      	adds	r7, #8
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}

08004452 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004452:	b480      	push	{r7}
 8004454:	b083      	sub	sp, #12
 8004456:	af00      	add	r7, sp, #0
 8004458:	6078      	str	r0, [r7, #4]
 800445a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	795b      	ldrb	r3, [r3, #5]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_DAC_Start+0x16>
 8004464:	2302      	movs	r3, #2
 8004466:	e040      	b.n	80044ea <HAL_DAC_Start+0x98>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2202      	movs	r2, #2
 8004472:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	6819      	ldr	r1, [r3, #0]
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	f003 0310 	and.w	r3, r3, #16
 8004480:	2201      	movs	r2, #1
 8004482:	409a      	lsls	r2, r3
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	430a      	orrs	r2, r1
 800448a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10f      	bne.n	80044b2 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800449c:	2b3c      	cmp	r3, #60	; 0x3c
 800449e:	d11d      	bne.n	80044dc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	685a      	ldr	r2, [r3, #4]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	f042 0201 	orr.w	r2, r2, #1
 80044ae:	605a      	str	r2, [r3, #4]
 80044b0:	e014      	b.n	80044dc <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	213c      	movs	r1, #60	; 0x3c
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d107      	bne.n	80044dc <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0202 	orr.w	r2, r2, #2
 80044da:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2200      	movs	r2, #0
 80044e6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044e8:	2300      	movs	r3, #0
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	370c      	adds	r7, #12
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b087      	sub	sp, #28
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	60f8      	str	r0, [r7, #12]
 80044fe:	60b9      	str	r1, [r7, #8]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004504:	2300      	movs	r3, #0
 8004506:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d105      	bne.n	8004520 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004514:	697a      	ldr	r2, [r7, #20]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	4413      	add	r3, r2
 800451a:	3308      	adds	r3, #8
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	e004      	b.n	800452a <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4413      	add	r3, r2
 8004526:	3314      	adds	r3, #20
 8004528:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	461a      	mov	r2, r3
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	371c      	adds	r7, #28
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr

08004540 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004540:	b480      	push	{r7}
 8004542:	b087      	sub	sp, #28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	795b      	ldrb	r3, [r3, #5]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d101      	bne.n	8004558 <HAL_DAC_ConfigChannel+0x18>
 8004554:	2302      	movs	r3, #2
 8004556:	e03c      	b.n	80045d2 <HAL_DAC_ConfigChannel+0x92>
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2201      	movs	r2, #1
 800455c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2202      	movs	r2, #2
 8004562:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004576:	fa02 f303 	lsl.w	r3, r2, r3
 800457a:	43db      	mvns	r3, r3
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4013      	ands	r3, r2
 8004580:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4313      	orrs	r3, r2
 800458c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	fa02 f303 	lsl.w	r3, r2, r3
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	6819      	ldr	r1, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f003 0310 	and.w	r3, r3, #16
 80045b4:	22c0      	movs	r2, #192	; 0xc0
 80045b6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ba:	43da      	mvns	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	400a      	ands	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2201      	movs	r2, #1
 80045c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr

080045de <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045de:	b580      	push	{r7, lr}
 80045e0:	b084      	sub	sp, #16
 80045e2:	af00      	add	r7, sp, #0
 80045e4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ea:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80045ec:	f7ff f952 	bl	8003894 <HAL_GetTick>
 80045f0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b02      	cmp	r3, #2
 80045fc:	d008      	beq.n	8004610 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2280      	movs	r2, #128	; 0x80
 8004602:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e052      	b.n	80046b6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0216 	bic.w	r2, r2, #22
 800461e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695a      	ldr	r2, [r3, #20]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800462e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <HAL_DMA_Abort+0x62>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800463c:	2b00      	cmp	r3, #0
 800463e:	d007      	beq.n	8004650 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0208 	bic.w	r2, r2, #8
 800464e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 0201 	bic.w	r2, r2, #1
 800465e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004660:	e013      	b.n	800468a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004662:	f7ff f917 	bl	8003894 <HAL_GetTick>
 8004666:	4602      	mov	r2, r0
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	1ad3      	subs	r3, r2, r3
 800466c:	2b05      	cmp	r3, #5
 800466e:	d90c      	bls.n	800468a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2203      	movs	r2, #3
 800467a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2200      	movs	r2, #0
 8004682:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e015      	b.n	80046b6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0301 	and.w	r3, r3, #1
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1e4      	bne.n	8004662 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800469c:	223f      	movs	r2, #63	; 0x3f
 800469e:	409a      	lsls	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2200      	movs	r2, #0
 80046b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80046b4:	2300      	movs	r3, #0
}
 80046b6:	4618      	mov	r0, r3
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d004      	beq.n	80046dc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2280      	movs	r2, #128	; 0x80
 80046d6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80046d8:	2301      	movs	r3, #1
 80046da:	e00c      	b.n	80046f6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2205      	movs	r2, #5
 80046e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f022 0201 	bic.w	r2, r2, #1
 80046f2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	370c      	adds	r7, #12
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
	...

08004704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004704:	b480      	push	{r7}
 8004706:	b089      	sub	sp, #36	; 0x24
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800470e:	2300      	movs	r3, #0
 8004710:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004712:	2300      	movs	r3, #0
 8004714:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004716:	2300      	movs	r3, #0
 8004718:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
 800471e:	e16b      	b.n	80049f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004720:	2201      	movs	r2, #1
 8004722:	69fb      	ldr	r3, [r7, #28]
 8004724:	fa02 f303 	lsl.w	r3, r2, r3
 8004728:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	697a      	ldr	r2, [r7, #20]
 8004730:	4013      	ands	r3, r2
 8004732:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	429a      	cmp	r2, r3
 800473a:	f040 815a 	bne.w	80049f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b01      	cmp	r3, #1
 8004748:	d005      	beq.n	8004756 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685b      	ldr	r3, [r3, #4]
 800474e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004752:	2b02      	cmp	r3, #2
 8004754:	d130      	bne.n	80047b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	005b      	lsls	r3, r3, #1
 8004760:	2203      	movs	r2, #3
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	68da      	ldr	r2, [r3, #12]
 8004772:	69fb      	ldr	r3, [r7, #28]
 8004774:	005b      	lsls	r3, r3, #1
 8004776:	fa02 f303 	lsl.w	r3, r2, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4313      	orrs	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	69ba      	ldr	r2, [r7, #24]
 8004784:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800478c:	2201      	movs	r2, #1
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	fa02 f303 	lsl.w	r3, r2, r3
 8004794:	43db      	mvns	r3, r3
 8004796:	69ba      	ldr	r2, [r7, #24]
 8004798:	4013      	ands	r3, r2
 800479a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	091b      	lsrs	r3, r3, #4
 80047a2:	f003 0201 	and.w	r2, r3, #1
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ac:	69ba      	ldr	r2, [r7, #24]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	69ba      	ldr	r2, [r7, #24]
 80047b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f003 0303 	and.w	r3, r3, #3
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d017      	beq.n	80047f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	2203      	movs	r2, #3
 80047d0:	fa02 f303 	lsl.w	r3, r2, r3
 80047d4:	43db      	mvns	r3, r3
 80047d6:	69ba      	ldr	r2, [r7, #24]
 80047d8:	4013      	ands	r3, r2
 80047da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	689a      	ldr	r2, [r3, #8]
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	005b      	lsls	r3, r3, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	4313      	orrs	r3, r2
 80047ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	f003 0303 	and.w	r3, r3, #3
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d123      	bne.n	8004848 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	08da      	lsrs	r2, r3, #3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	3208      	adds	r2, #8
 8004808:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800480c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	220f      	movs	r2, #15
 8004818:	fa02 f303 	lsl.w	r3, r2, r3
 800481c:	43db      	mvns	r3, r3
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	4013      	ands	r3, r2
 8004822:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691a      	ldr	r2, [r3, #16]
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4313      	orrs	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	08da      	lsrs	r2, r3, #3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	3208      	adds	r2, #8
 8004842:	69b9      	ldr	r1, [r7, #24]
 8004844:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	005b      	lsls	r3, r3, #1
 8004852:	2203      	movs	r2, #3
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f003 0203 	and.w	r2, r3, #3
 8004868:	69fb      	ldr	r3, [r7, #28]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004884:	2b00      	cmp	r3, #0
 8004886:	f000 80b4 	beq.w	80049f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	4b60      	ldr	r3, [pc, #384]	; (8004a10 <HAL_GPIO_Init+0x30c>)
 8004890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004892:	4a5f      	ldr	r2, [pc, #380]	; (8004a10 <HAL_GPIO_Init+0x30c>)
 8004894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004898:	6453      	str	r3, [r2, #68]	; 0x44
 800489a:	4b5d      	ldr	r3, [pc, #372]	; (8004a10 <HAL_GPIO_Init+0x30c>)
 800489c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048a2:	60fb      	str	r3, [r7, #12]
 80048a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048a6:	4a5b      	ldr	r2, [pc, #364]	; (8004a14 <HAL_GPIO_Init+0x310>)
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	3302      	adds	r3, #2
 80048ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0303 	and.w	r3, r3, #3
 80048ba:	009b      	lsls	r3, r3, #2
 80048bc:	220f      	movs	r2, #15
 80048be:	fa02 f303 	lsl.w	r3, r2, r3
 80048c2:	43db      	mvns	r3, r3
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	4013      	ands	r3, r2
 80048c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a52      	ldr	r2, [pc, #328]	; (8004a18 <HAL_GPIO_Init+0x314>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d02b      	beq.n	800492a <HAL_GPIO_Init+0x226>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	4a51      	ldr	r2, [pc, #324]	; (8004a1c <HAL_GPIO_Init+0x318>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d025      	beq.n	8004926 <HAL_GPIO_Init+0x222>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a50      	ldr	r2, [pc, #320]	; (8004a20 <HAL_GPIO_Init+0x31c>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d01f      	beq.n	8004922 <HAL_GPIO_Init+0x21e>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	4a4f      	ldr	r2, [pc, #316]	; (8004a24 <HAL_GPIO_Init+0x320>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d019      	beq.n	800491e <HAL_GPIO_Init+0x21a>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a4e      	ldr	r2, [pc, #312]	; (8004a28 <HAL_GPIO_Init+0x324>)
 80048ee:	4293      	cmp	r3, r2
 80048f0:	d013      	beq.n	800491a <HAL_GPIO_Init+0x216>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	4a4d      	ldr	r2, [pc, #308]	; (8004a2c <HAL_GPIO_Init+0x328>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d00d      	beq.n	8004916 <HAL_GPIO_Init+0x212>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	4a4c      	ldr	r2, [pc, #304]	; (8004a30 <HAL_GPIO_Init+0x32c>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d007      	beq.n	8004912 <HAL_GPIO_Init+0x20e>
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	4a4b      	ldr	r2, [pc, #300]	; (8004a34 <HAL_GPIO_Init+0x330>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_GPIO_Init+0x20a>
 800490a:	2307      	movs	r3, #7
 800490c:	e00e      	b.n	800492c <HAL_GPIO_Init+0x228>
 800490e:	2308      	movs	r3, #8
 8004910:	e00c      	b.n	800492c <HAL_GPIO_Init+0x228>
 8004912:	2306      	movs	r3, #6
 8004914:	e00a      	b.n	800492c <HAL_GPIO_Init+0x228>
 8004916:	2305      	movs	r3, #5
 8004918:	e008      	b.n	800492c <HAL_GPIO_Init+0x228>
 800491a:	2304      	movs	r3, #4
 800491c:	e006      	b.n	800492c <HAL_GPIO_Init+0x228>
 800491e:	2303      	movs	r3, #3
 8004920:	e004      	b.n	800492c <HAL_GPIO_Init+0x228>
 8004922:	2302      	movs	r3, #2
 8004924:	e002      	b.n	800492c <HAL_GPIO_Init+0x228>
 8004926:	2301      	movs	r3, #1
 8004928:	e000      	b.n	800492c <HAL_GPIO_Init+0x228>
 800492a:	2300      	movs	r3, #0
 800492c:	69fa      	ldr	r2, [r7, #28]
 800492e:	f002 0203 	and.w	r2, r2, #3
 8004932:	0092      	lsls	r2, r2, #2
 8004934:	4093      	lsls	r3, r2
 8004936:	69ba      	ldr	r2, [r7, #24]
 8004938:	4313      	orrs	r3, r2
 800493a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800493c:	4935      	ldr	r1, [pc, #212]	; (8004a14 <HAL_GPIO_Init+0x310>)
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	089b      	lsrs	r3, r3, #2
 8004942:	3302      	adds	r3, #2
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800494a:	4b3b      	ldr	r3, [pc, #236]	; (8004a38 <HAL_GPIO_Init+0x334>)
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004950:	693b      	ldr	r3, [r7, #16]
 8004952:	43db      	mvns	r3, r3
 8004954:	69ba      	ldr	r2, [r7, #24]
 8004956:	4013      	ands	r3, r2
 8004958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d003      	beq.n	800496e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004966:	69ba      	ldr	r2, [r7, #24]
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4313      	orrs	r3, r2
 800496c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800496e:	4a32      	ldr	r2, [pc, #200]	; (8004a38 <HAL_GPIO_Init+0x334>)
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004974:	4b30      	ldr	r3, [pc, #192]	; (8004a38 <HAL_GPIO_Init+0x334>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	43db      	mvns	r3, r3
 800497e:	69ba      	ldr	r2, [r7, #24]
 8004980:	4013      	ands	r3, r2
 8004982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004998:	4a27      	ldr	r2, [pc, #156]	; (8004a38 <HAL_GPIO_Init+0x334>)
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800499e:	4b26      	ldr	r3, [pc, #152]	; (8004a38 <HAL_GPIO_Init+0x334>)
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	43db      	mvns	r3, r3
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4013      	ands	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049c2:	4a1d      	ldr	r2, [pc, #116]	; (8004a38 <HAL_GPIO_Init+0x334>)
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	; (8004a38 <HAL_GPIO_Init+0x334>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	43db      	mvns	r3, r3
 80049d2:	69ba      	ldr	r2, [r7, #24]
 80049d4:	4013      	ands	r3, r2
 80049d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049ec:	4a12      	ldr	r2, [pc, #72]	; (8004a38 <HAL_GPIO_Init+0x334>)
 80049ee:	69bb      	ldr	r3, [r7, #24]
 80049f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3301      	adds	r3, #1
 80049f6:	61fb      	str	r3, [r7, #28]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	f67f ae90 	bls.w	8004720 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3724      	adds	r7, #36	; 0x24
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr
 8004a0e:	bf00      	nop
 8004a10:	40023800 	.word	0x40023800
 8004a14:	40013800 	.word	0x40013800
 8004a18:	40020000 	.word	0x40020000
 8004a1c:	40020400 	.word	0x40020400
 8004a20:	40020800 	.word	0x40020800
 8004a24:	40020c00 	.word	0x40020c00
 8004a28:	40021000 	.word	0x40021000
 8004a2c:	40021400 	.word	0x40021400
 8004a30:	40021800 	.word	0x40021800
 8004a34:	40021c00 	.word	0x40021c00
 8004a38:	40013c00 	.word	0x40013c00

08004a3c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691a      	ldr	r2, [r3, #16]
 8004a4c:	887b      	ldrh	r3, [r7, #2]
 8004a4e:	4013      	ands	r3, r2
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004a54:	2301      	movs	r3, #1
 8004a56:	73fb      	strb	r3, [r7, #15]
 8004a58:	e001      	b.n	8004a5e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a60:	4618      	mov	r0, r3
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr

08004a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b083      	sub	sp, #12
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	460b      	mov	r3, r1
 8004a76:	807b      	strh	r3, [r7, #2]
 8004a78:	4613      	mov	r3, r2
 8004a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a7c:	787b      	ldrb	r3, [r7, #1]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d003      	beq.n	8004a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a82:	887a      	ldrh	r2, [r7, #2]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a88:	e003      	b.n	8004a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a8a:	887b      	ldrh	r3, [r7, #2]
 8004a8c:	041a      	lsls	r2, r3, #16
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	619a      	str	r2, [r3, #24]
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b085      	sub	sp, #20
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
 8004aa6:	460b      	mov	r3, r1
 8004aa8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	4013      	ands	r3, r2
 8004ab6:	041a      	lsls	r2, r3, #16
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	43d9      	mvns	r1, r3
 8004abc:	887b      	ldrh	r3, [r7, #2]
 8004abe:	400b      	ands	r3, r1
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	619a      	str	r2, [r3, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	4603      	mov	r3, r0
 8004adc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ade:	4b08      	ldr	r3, [pc, #32]	; (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae0:	695a      	ldr	r2, [r3, #20]
 8004ae2:	88fb      	ldrh	r3, [r7, #6]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d006      	beq.n	8004af8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aea:	4a05      	ldr	r2, [pc, #20]	; (8004b00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aec:	88fb      	ldrh	r3, [r7, #6]
 8004aee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004af0:	88fb      	ldrh	r3, [r7, #6]
 8004af2:	4618      	mov	r0, r3
 8004af4:	f7fd fd68 	bl	80025c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004af8:	bf00      	nop
 8004afa:	3708      	adds	r7, #8
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	40013c00 	.word	0x40013c00

08004b04 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d101      	bne.n	8004b16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b12:	2301      	movs	r3, #1
 8004b14:	e267      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d075      	beq.n	8004c0e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b22:	4b88      	ldr	r3, [pc, #544]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	f003 030c 	and.w	r3, r3, #12
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d00c      	beq.n	8004b48 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b2e:	4b85      	ldr	r3, [pc, #532]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d112      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b3a:	4b82      	ldr	r3, [pc, #520]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b46:	d10b      	bne.n	8004b60 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b48:	4b7e      	ldr	r3, [pc, #504]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d05b      	beq.n	8004c0c <HAL_RCC_OscConfig+0x108>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d157      	bne.n	8004c0c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e242      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d106      	bne.n	8004b78 <HAL_RCC_OscConfig+0x74>
 8004b6a:	4b76      	ldr	r3, [pc, #472]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a75      	ldr	r2, [pc, #468]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b74:	6013      	str	r3, [r2, #0]
 8004b76:	e01d      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b80:	d10c      	bne.n	8004b9c <HAL_RCC_OscConfig+0x98>
 8004b82:	4b70      	ldr	r3, [pc, #448]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a6f      	ldr	r2, [pc, #444]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b8c:	6013      	str	r3, [r2, #0]
 8004b8e:	4b6d      	ldr	r3, [pc, #436]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a6c      	ldr	r2, [pc, #432]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b98:	6013      	str	r3, [r2, #0]
 8004b9a:	e00b      	b.n	8004bb4 <HAL_RCC_OscConfig+0xb0>
 8004b9c:	4b69      	ldr	r3, [pc, #420]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	4a68      	ldr	r2, [pc, #416]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ba6:	6013      	str	r3, [r2, #0]
 8004ba8:	4b66      	ldr	r3, [pc, #408]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a65      	ldr	r2, [pc, #404]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bb2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d013      	beq.n	8004be4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bbc:	f7fe fe6a 	bl	8003894 <HAL_GetTick>
 8004bc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bc2:	e008      	b.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bc4:	f7fe fe66 	bl	8003894 <HAL_GetTick>
 8004bc8:	4602      	mov	r2, r0
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	2b64      	cmp	r3, #100	; 0x64
 8004bd0:	d901      	bls.n	8004bd6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bd2:	2303      	movs	r3, #3
 8004bd4:	e207      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bd6:	4b5b      	ldr	r3, [pc, #364]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d0f0      	beq.n	8004bc4 <HAL_RCC_OscConfig+0xc0>
 8004be2:	e014      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be4:	f7fe fe56 	bl	8003894 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004bec:	f7fe fe52 	bl	8003894 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b64      	cmp	r3, #100	; 0x64
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e1f3      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bfe:	4b51      	ldr	r3, [pc, #324]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0xe8>
 8004c0a:	e000      	b.n	8004c0e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d063      	beq.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c1a:	4b4a      	ldr	r3, [pc, #296]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	f003 030c 	and.w	r3, r3, #12
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00b      	beq.n	8004c3e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c26:	4b47      	ldr	r3, [pc, #284]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c2e:	2b08      	cmp	r3, #8
 8004c30:	d11c      	bne.n	8004c6c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c32:	4b44      	ldr	r3, [pc, #272]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d116      	bne.n	8004c6c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c3e:	4b41      	ldr	r3, [pc, #260]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d005      	beq.n	8004c56 <HAL_RCC_OscConfig+0x152>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d001      	beq.n	8004c56 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	e1c7      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c56:	4b3b      	ldr	r3, [pc, #236]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	691b      	ldr	r3, [r3, #16]
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	4937      	ldr	r1, [pc, #220]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c66:	4313      	orrs	r3, r2
 8004c68:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c6a:	e03a      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d020      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c74:	4b34      	ldr	r3, [pc, #208]	; (8004d48 <HAL_RCC_OscConfig+0x244>)
 8004c76:	2201      	movs	r2, #1
 8004c78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7a:	f7fe fe0b 	bl	8003894 <HAL_GetTick>
 8004c7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c80:	e008      	b.n	8004c94 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c82:	f7fe fe07 	bl	8003894 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e1a8      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c94:	4b2b      	ldr	r3, [pc, #172]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d0f0      	beq.n	8004c82 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b28      	ldr	r3, [pc, #160]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	00db      	lsls	r3, r3, #3
 8004cae:	4925      	ldr	r1, [pc, #148]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	600b      	str	r3, [r1, #0]
 8004cb4:	e015      	b.n	8004ce2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cb6:	4b24      	ldr	r3, [pc, #144]	; (8004d48 <HAL_RCC_OscConfig+0x244>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cbc:	f7fe fdea 	bl	8003894 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cc2:	e008      	b.n	8004cd6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cc4:	f7fe fde6 	bl	8003894 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	2b02      	cmp	r3, #2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e187      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d1f0      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 0308 	and.w	r3, r3, #8
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d036      	beq.n	8004d5c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d016      	beq.n	8004d24 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cf6:	4b15      	ldr	r3, [pc, #84]	; (8004d4c <HAL_RCC_OscConfig+0x248>)
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cfc:	f7fe fdca 	bl	8003894 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d04:	f7fe fdc6 	bl	8003894 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e167      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d16:	4b0b      	ldr	r3, [pc, #44]	; (8004d44 <HAL_RCC_OscConfig+0x240>)
 8004d18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d1a:	f003 0302 	and.w	r3, r3, #2
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d0f0      	beq.n	8004d04 <HAL_RCC_OscConfig+0x200>
 8004d22:	e01b      	b.n	8004d5c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d24:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <HAL_RCC_OscConfig+0x248>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d2a:	f7fe fdb3 	bl	8003894 <HAL_GetTick>
 8004d2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d30:	e00e      	b.n	8004d50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d32:	f7fe fdaf 	bl	8003894 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d907      	bls.n	8004d50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e150      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
 8004d44:	40023800 	.word	0x40023800
 8004d48:	42470000 	.word	0x42470000
 8004d4c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d50:	4b88      	ldr	r3, [pc, #544]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d54:	f003 0302 	and.w	r3, r3, #2
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1ea      	bne.n	8004d32 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0304 	and.w	r3, r3, #4
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f000 8097 	beq.w	8004e98 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d6e:	4b81      	ldr	r3, [pc, #516]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d10f      	bne.n	8004d9a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	60bb      	str	r3, [r7, #8]
 8004d7e:	4b7d      	ldr	r3, [pc, #500]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d82:	4a7c      	ldr	r2, [pc, #496]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d88:	6413      	str	r3, [r2, #64]	; 0x40
 8004d8a:	4b7a      	ldr	r3, [pc, #488]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d92:	60bb      	str	r3, [r7, #8]
 8004d94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d96:	2301      	movs	r3, #1
 8004d98:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d9a:	4b77      	ldr	r3, [pc, #476]	; (8004f78 <HAL_RCC_OscConfig+0x474>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d118      	bne.n	8004dd8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004da6:	4b74      	ldr	r3, [pc, #464]	; (8004f78 <HAL_RCC_OscConfig+0x474>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a73      	ldr	r2, [pc, #460]	; (8004f78 <HAL_RCC_OscConfig+0x474>)
 8004dac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004db0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004db2:	f7fe fd6f 	bl	8003894 <HAL_GetTick>
 8004db6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004db8:	e008      	b.n	8004dcc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004dba:	f7fe fd6b 	bl	8003894 <HAL_GetTick>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	693b      	ldr	r3, [r7, #16]
 8004dc2:	1ad3      	subs	r3, r2, r3
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d901      	bls.n	8004dcc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e10c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	4b6a      	ldr	r3, [pc, #424]	; (8004f78 <HAL_RCC_OscConfig+0x474>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d0f0      	beq.n	8004dba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d106      	bne.n	8004dee <HAL_RCC_OscConfig+0x2ea>
 8004de0:	4b64      	ldr	r3, [pc, #400]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004de2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de4:	4a63      	ldr	r2, [pc, #396]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70
 8004dec:	e01c      	b.n	8004e28 <HAL_RCC_OscConfig+0x324>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	2b05      	cmp	r3, #5
 8004df4:	d10c      	bne.n	8004e10 <HAL_RCC_OscConfig+0x30c>
 8004df6:	4b5f      	ldr	r3, [pc, #380]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dfa:	4a5e      	ldr	r2, [pc, #376]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004dfc:	f043 0304 	orr.w	r3, r3, #4
 8004e00:	6713      	str	r3, [r2, #112]	; 0x70
 8004e02:	4b5c      	ldr	r3, [pc, #368]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e06:	4a5b      	ldr	r2, [pc, #364]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e08:	f043 0301 	orr.w	r3, r3, #1
 8004e0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0e:	e00b      	b.n	8004e28 <HAL_RCC_OscConfig+0x324>
 8004e10:	4b58      	ldr	r3, [pc, #352]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	4a57      	ldr	r2, [pc, #348]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004e1c:	4b55      	ldr	r3, [pc, #340]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4a54      	ldr	r2, [pc, #336]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e22:	f023 0304 	bic.w	r3, r3, #4
 8004e26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d015      	beq.n	8004e5c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e30:	f7fe fd30 	bl	8003894 <HAL_GetTick>
 8004e34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e36:	e00a      	b.n	8004e4e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e38:	f7fe fd2c 	bl	8003894 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	693b      	ldr	r3, [r7, #16]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e0cb      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e4e:	4b49      	ldr	r3, [pc, #292]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	f003 0302 	and.w	r3, r3, #2
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d0ee      	beq.n	8004e38 <HAL_RCC_OscConfig+0x334>
 8004e5a:	e014      	b.n	8004e86 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e5c:	f7fe fd1a 	bl	8003894 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e62:	e00a      	b.n	8004e7a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e64:	f7fe fd16 	bl	8003894 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e72:	4293      	cmp	r3, r2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e0b5      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e7a:	4b3e      	ldr	r3, [pc, #248]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1ee      	bne.n	8004e64 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e86:	7dfb      	ldrb	r3, [r7, #23]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d105      	bne.n	8004e98 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e8c:	4b39      	ldr	r3, [pc, #228]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e90:	4a38      	ldr	r2, [pc, #224]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004e92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e96:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80a1 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ea2:	4b34      	ldr	r3, [pc, #208]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004ea4:	689b      	ldr	r3, [r3, #8]
 8004ea6:	f003 030c 	and.w	r3, r3, #12
 8004eaa:	2b08      	cmp	r3, #8
 8004eac:	d05c      	beq.n	8004f68 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	699b      	ldr	r3, [r3, #24]
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d141      	bne.n	8004f3a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eb6:	4b31      	ldr	r3, [pc, #196]	; (8004f7c <HAL_RCC_OscConfig+0x478>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ebc:	f7fe fcea 	bl	8003894 <HAL_GetTick>
 8004ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ec2:	e008      	b.n	8004ed6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ec4:	f7fe fce6 	bl	8003894 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b02      	cmp	r3, #2
 8004ed0:	d901      	bls.n	8004ed6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ed2:	2303      	movs	r3, #3
 8004ed4:	e087      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ed6:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1f0      	bne.n	8004ec4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	69da      	ldr	r2, [r3, #28]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6a1b      	ldr	r3, [r3, #32]
 8004eea:	431a      	orrs	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	019b      	lsls	r3, r3, #6
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ef8:	085b      	lsrs	r3, r3, #1
 8004efa:	3b01      	subs	r3, #1
 8004efc:	041b      	lsls	r3, r3, #16
 8004efe:	431a      	orrs	r2, r3
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f04:	061b      	lsls	r3, r3, #24
 8004f06:	491b      	ldr	r1, [pc, #108]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	; (8004f7c <HAL_RCC_OscConfig+0x478>)
 8004f0e:	2201      	movs	r2, #1
 8004f10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f12:	f7fe fcbf 	bl	8003894 <HAL_GetTick>
 8004f16:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f18:	e008      	b.n	8004f2c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f1a:	f7fe fcbb 	bl	8003894 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	2b02      	cmp	r3, #2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e05c      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2c:	4b11      	ldr	r3, [pc, #68]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0f0      	beq.n	8004f1a <HAL_RCC_OscConfig+0x416>
 8004f38:	e054      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b10      	ldr	r3, [pc, #64]	; (8004f7c <HAL_RCC_OscConfig+0x478>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fe fca8 	bl	8003894 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fe fca4 	bl	8003894 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e045      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b06      	ldr	r3, [pc, #24]	; (8004f74 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x444>
 8004f66:	e03d      	b.n	8004fe4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	699b      	ldr	r3, [r3, #24]
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d107      	bne.n	8004f80 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e038      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
 8004f74:	40023800 	.word	0x40023800
 8004f78:	40007000 	.word	0x40007000
 8004f7c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f80:	4b1b      	ldr	r3, [pc, #108]	; (8004ff0 <HAL_RCC_OscConfig+0x4ec>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	699b      	ldr	r3, [r3, #24]
 8004f8a:	2b01      	cmp	r3, #1
 8004f8c:	d028      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d121      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d11a      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fb6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d111      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc6:	085b      	lsrs	r3, r3, #1
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d107      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fda:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e000      	b.n	8004fe6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40023800 	.word	0x40023800

08004ff4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005004:	2301      	movs	r3, #1
 8005006:	e0cc      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005008:	4b68      	ldr	r3, [pc, #416]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0307 	and.w	r3, r3, #7
 8005010:	683a      	ldr	r2, [r7, #0]
 8005012:	429a      	cmp	r2, r3
 8005014:	d90c      	bls.n	8005030 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005016:	4b65      	ldr	r3, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005018:	683a      	ldr	r2, [r7, #0]
 800501a:	b2d2      	uxtb	r2, r2
 800501c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d044      	beq.n	8005114 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d119      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d003      	beq.n	80050b2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050b2:	4b3f      	ldr	r3, [pc, #252]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d109      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e06f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050c2:	4b3b      	ldr	r3, [pc, #236]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0302 	and.w	r3, r3, #2
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d101      	bne.n	80050d2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e067      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050d2:	4b37      	ldr	r3, [pc, #220]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f023 0203 	bic.w	r2, r3, #3
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	4934      	ldr	r1, [pc, #208]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	4313      	orrs	r3, r2
 80050e2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80050e4:	f7fe fbd6 	bl	8003894 <HAL_GetTick>
 80050e8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050ea:	e00a      	b.n	8005102 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050ec:	f7fe fbd2 	bl	8003894 <HAL_GetTick>
 80050f0:	4602      	mov	r2, r0
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d901      	bls.n	8005102 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80050fe:	2303      	movs	r3, #3
 8005100:	e04f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005102:	4b2b      	ldr	r3, [pc, #172]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 020c 	and.w	r2, r3, #12
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	009b      	lsls	r3, r3, #2
 8005110:	429a      	cmp	r2, r3
 8005112:	d1eb      	bne.n	80050ec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005114:	4b25      	ldr	r3, [pc, #148]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f003 0307 	and.w	r3, r3, #7
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	429a      	cmp	r2, r3
 8005120:	d20c      	bcs.n	800513c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005122:	4b22      	ldr	r3, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 8005124:	683a      	ldr	r2, [r7, #0]
 8005126:	b2d2      	uxtb	r2, r2
 8005128:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1b8>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0307 	and.w	r3, r3, #7
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1bc>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1c0>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1c4>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1c8>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe fb36 	bl	800380c <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	0800b5c8 	.word	0x0800b5c8
 80051b8:	2000004c 	.word	0x2000004c
 80051bc:	20000050 	.word	0x20000050

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b090      	sub	sp, #64	; 0x40
 80051c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	637b      	str	r3, [r7, #52]	; 0x34
 80051cc:	2300      	movs	r3, #0
 80051ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051d0:	2300      	movs	r3, #0
 80051d2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	4b59      	ldr	r3, [pc, #356]	; (8005340 <HAL_RCC_GetSysClockFreq+0x180>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d00d      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 80a1 	bhi.w	800532c <HAL_RCC_GetSysClockFreq+0x16c>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x3a>
 80051f2:	e09b      	b.n	800532c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b53      	ldr	r3, [pc, #332]	; (8005344 <HAL_RCC_GetSysClockFreq+0x184>)
 80051f6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80051f8:	e09b      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fa:	4b53      	ldr	r3, [pc, #332]	; (8005348 <HAL_RCC_GetSysClockFreq+0x188>)
 80051fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80051fe:	e098      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005200:	4b4f      	ldr	r3, [pc, #316]	; (8005340 <HAL_RCC_GetSysClockFreq+0x180>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800520a:	4b4d      	ldr	r3, [pc, #308]	; (8005340 <HAL_RCC_GetSysClockFreq+0x180>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d028      	beq.n	8005268 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b4a      	ldr	r3, [pc, #296]	; (8005340 <HAL_RCC_GetSysClockFreq+0x180>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	2200      	movs	r2, #0
 800521e:	623b      	str	r3, [r7, #32]
 8005220:	627a      	str	r2, [r7, #36]	; 0x24
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005228:	2100      	movs	r1, #0
 800522a:	4b47      	ldr	r3, [pc, #284]	; (8005348 <HAL_RCC_GetSysClockFreq+0x188>)
 800522c:	fb03 f201 	mul.w	r2, r3, r1
 8005230:	2300      	movs	r3, #0
 8005232:	fb00 f303 	mul.w	r3, r0, r3
 8005236:	4413      	add	r3, r2
 8005238:	4a43      	ldr	r2, [pc, #268]	; (8005348 <HAL_RCC_GetSysClockFreq+0x188>)
 800523a:	fba0 1202 	umull	r1, r2, r0, r2
 800523e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005240:	460a      	mov	r2, r1
 8005242:	62ba      	str	r2, [r7, #40]	; 0x28
 8005244:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005246:	4413      	add	r3, r2
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
 800524a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524c:	2200      	movs	r2, #0
 800524e:	61bb      	str	r3, [r7, #24]
 8005250:	61fa      	str	r2, [r7, #28]
 8005252:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005256:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800525a:	f7fb fd15 	bl	8000c88 <__aeabi_uldivmod>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4613      	mov	r3, r2
 8005264:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005266:	e053      	b.n	8005310 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005268:	4b35      	ldr	r3, [pc, #212]	; (8005340 <HAL_RCC_GetSysClockFreq+0x180>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	099b      	lsrs	r3, r3, #6
 800526e:	2200      	movs	r2, #0
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	617a      	str	r2, [r7, #20]
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800527a:	f04f 0b00 	mov.w	fp, #0
 800527e:	4652      	mov	r2, sl
 8005280:	465b      	mov	r3, fp
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	0159      	lsls	r1, r3, #5
 800528c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005290:	0150      	lsls	r0, r2, #5
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	ebb2 080a 	subs.w	r8, r2, sl
 800529a:	eb63 090b 	sbc.w	r9, r3, fp
 800529e:	f04f 0200 	mov.w	r2, #0
 80052a2:	f04f 0300 	mov.w	r3, #0
 80052a6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80052aa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80052ae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80052b2:	ebb2 0408 	subs.w	r4, r2, r8
 80052b6:	eb63 0509 	sbc.w	r5, r3, r9
 80052ba:	f04f 0200 	mov.w	r2, #0
 80052be:	f04f 0300 	mov.w	r3, #0
 80052c2:	00eb      	lsls	r3, r5, #3
 80052c4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052c8:	00e2      	lsls	r2, r4, #3
 80052ca:	4614      	mov	r4, r2
 80052cc:	461d      	mov	r5, r3
 80052ce:	eb14 030a 	adds.w	r3, r4, sl
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	eb45 030b 	adc.w	r3, r5, fp
 80052d8:	607b      	str	r3, [r7, #4]
 80052da:	f04f 0200 	mov.w	r2, #0
 80052de:	f04f 0300 	mov.w	r3, #0
 80052e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052e6:	4629      	mov	r1, r5
 80052e8:	028b      	lsls	r3, r1, #10
 80052ea:	4621      	mov	r1, r4
 80052ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052f0:	4621      	mov	r1, r4
 80052f2:	028a      	lsls	r2, r1, #10
 80052f4:	4610      	mov	r0, r2
 80052f6:	4619      	mov	r1, r3
 80052f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052fa:	2200      	movs	r2, #0
 80052fc:	60bb      	str	r3, [r7, #8]
 80052fe:	60fa      	str	r2, [r7, #12]
 8005300:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005304:	f7fb fcc0 	bl	8000c88 <__aeabi_uldivmod>
 8005308:	4602      	mov	r2, r0
 800530a:	460b      	mov	r3, r1
 800530c:	4613      	mov	r3, r2
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <HAL_RCC_GetSysClockFreq+0x180>)
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	0c1b      	lsrs	r3, r3, #16
 8005316:	f003 0303 	and.w	r3, r3, #3
 800531a:	3301      	adds	r3, #1
 800531c:	005b      	lsls	r3, r3, #1
 800531e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005320:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005324:	fbb2 f3f3 	udiv	r3, r2, r3
 8005328:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800532a:	e002      	b.n	8005332 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800532c:	4b05      	ldr	r3, [pc, #20]	; (8005344 <HAL_RCC_GetSysClockFreq+0x184>)
 800532e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005330:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005334:	4618      	mov	r0, r3
 8005336:	3740      	adds	r7, #64	; 0x40
 8005338:	46bd      	mov	sp, r7
 800533a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800533e:	bf00      	nop
 8005340:	40023800 	.word	0x40023800
 8005344:	00f42400 	.word	0x00f42400
 8005348:	017d7840 	.word	0x017d7840

0800534c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800534c:	b480      	push	{r7}
 800534e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005350:	4b03      	ldr	r3, [pc, #12]	; (8005360 <HAL_RCC_GetHCLKFreq+0x14>)
 8005352:	681b      	ldr	r3, [r3, #0]
}
 8005354:	4618      	mov	r0, r3
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	2000004c 	.word	0x2000004c

08005364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005368:	f7ff fff0 	bl	800534c <HAL_RCC_GetHCLKFreq>
 800536c:	4602      	mov	r2, r0
 800536e:	4b05      	ldr	r3, [pc, #20]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	0a9b      	lsrs	r3, r3, #10
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	4903      	ldr	r1, [pc, #12]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x24>)
 800537a:	5ccb      	ldrb	r3, [r1, r3]
 800537c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005380:	4618      	mov	r0, r3
 8005382:	bd80      	pop	{r7, pc}
 8005384:	40023800 	.word	0x40023800
 8005388:	0800b5d8 	.word	0x0800b5d8

0800538c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005390:	f7ff ffdc 	bl	800534c <HAL_RCC_GetHCLKFreq>
 8005394:	4602      	mov	r2, r0
 8005396:	4b05      	ldr	r3, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	0b5b      	lsrs	r3, r3, #13
 800539c:	f003 0307 	and.w	r3, r3, #7
 80053a0:	4903      	ldr	r1, [pc, #12]	; (80053b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053a2:	5ccb      	ldrb	r3, [r1, r3]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40023800 	.word	0x40023800
 80053b0:	0800b5d8 	.word	0x0800b5d8

080053b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d101      	bne.n	80053c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	e041      	b.n	800544a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d106      	bne.n	80053e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f7fd ff64 	bl	80032a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2202      	movs	r2, #2
 80053e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	3304      	adds	r3, #4
 80053f0:	4619      	mov	r1, r3
 80053f2:	4610      	mov	r0, r2
 80053f4:	f000 fa96 	bl	8005924 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2201      	movs	r2, #1
 800540c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2201      	movs	r2, #1
 800541c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2201      	movs	r2, #1
 8005424:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2201      	movs	r2, #1
 8005434:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2201      	movs	r2, #1
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005448:	2300      	movs	r3, #0
}
 800544a:	4618      	mov	r0, r3
 800544c:	3708      	adds	r7, #8
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
	...

08005454 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005462:	b2db      	uxtb	r3, r3
 8005464:	2b01      	cmp	r3, #1
 8005466:	d001      	beq.n	800546c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e04e      	b.n	800550a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2202      	movs	r2, #2
 8005470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f042 0201 	orr.w	r2, r2, #1
 8005482:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a23      	ldr	r2, [pc, #140]	; (8005518 <HAL_TIM_Base_Start_IT+0xc4>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d022      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005496:	d01d      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a1f      	ldr	r2, [pc, #124]	; (800551c <HAL_TIM_Base_Start_IT+0xc8>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d018      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a1e      	ldr	r2, [pc, #120]	; (8005520 <HAL_TIM_Base_Start_IT+0xcc>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d013      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a1c      	ldr	r2, [pc, #112]	; (8005524 <HAL_TIM_Base_Start_IT+0xd0>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d00e      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a1b      	ldr	r2, [pc, #108]	; (8005528 <HAL_TIM_Base_Start_IT+0xd4>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d009      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a19      	ldr	r2, [pc, #100]	; (800552c <HAL_TIM_Base_Start_IT+0xd8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d004      	beq.n	80054d4 <HAL_TIM_Base_Start_IT+0x80>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a18      	ldr	r2, [pc, #96]	; (8005530 <HAL_TIM_Base_Start_IT+0xdc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d111      	bne.n	80054f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 0307 	and.w	r3, r3, #7
 80054de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	2b06      	cmp	r3, #6
 80054e4:	d010      	beq.n	8005508 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f042 0201 	orr.w	r2, r2, #1
 80054f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054f6:	e007      	b.n	8005508 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f042 0201 	orr.w	r2, r2, #1
 8005506:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3714      	adds	r7, #20
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr
 8005516:	bf00      	nop
 8005518:	40010000 	.word	0x40010000
 800551c:	40000400 	.word	0x40000400
 8005520:	40000800 	.word	0x40000800
 8005524:	40000c00 	.word	0x40000c00
 8005528:	40010400 	.word	0x40010400
 800552c:	40014000 	.word	0x40014000
 8005530:	40001800 	.word	0x40001800

08005534 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	f003 0302 	and.w	r3, r3, #2
 8005546:	2b02      	cmp	r3, #2
 8005548:	d122      	bne.n	8005590 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	f003 0302 	and.w	r3, r3, #2
 8005554:	2b02      	cmp	r3, #2
 8005556:	d11b      	bne.n	8005590 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f06f 0202 	mvn.w	r2, #2
 8005560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2201      	movs	r2, #1
 8005566:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	f003 0303 	and.w	r3, r3, #3
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005576:	6878      	ldr	r0, [r7, #4]
 8005578:	f000 f9b5 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 800557c:	e005      	b.n	800558a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f9a7 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005584:	6878      	ldr	r0, [r7, #4]
 8005586:	f000 f9b8 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2200      	movs	r2, #0
 800558e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	f003 0304 	and.w	r3, r3, #4
 800559a:	2b04      	cmp	r3, #4
 800559c:	d122      	bne.n	80055e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b04      	cmp	r3, #4
 80055aa:	d11b      	bne.n	80055e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f06f 0204 	mvn.w	r2, #4
 80055b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2202      	movs	r2, #2
 80055ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d003      	beq.n	80055d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 f98b 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 80055d0:	e005      	b.n	80055de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f97d 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f000 f98e 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	f003 0308 	and.w	r3, r3, #8
 80055ee:	2b08      	cmp	r3, #8
 80055f0:	d122      	bne.n	8005638 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	f003 0308 	and.w	r3, r3, #8
 80055fc:	2b08      	cmp	r3, #8
 80055fe:	d11b      	bne.n	8005638 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f06f 0208 	mvn.w	r2, #8
 8005608:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2204      	movs	r2, #4
 800560e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	f003 0303 	and.w	r3, r3, #3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800561e:	6878      	ldr	r0, [r7, #4]
 8005620:	f000 f961 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 8005624:	e005      	b.n	8005632 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 f953 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800562c:	6878      	ldr	r0, [r7, #4]
 800562e:	f000 f964 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2200      	movs	r2, #0
 8005636:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b10      	cmp	r3, #16
 8005644:	d122      	bne.n	800568c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
 800564c:	f003 0310 	and.w	r3, r3, #16
 8005650:	2b10      	cmp	r3, #16
 8005652:	d11b      	bne.n	800568c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f06f 0210 	mvn.w	r2, #16
 800565c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2208      	movs	r2, #8
 8005662:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	69db      	ldr	r3, [r3, #28]
 800566a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800566e:	2b00      	cmp	r3, #0
 8005670:	d003      	beq.n	800567a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f937 	bl	80058e6 <HAL_TIM_IC_CaptureCallback>
 8005678:	e005      	b.n	8005686 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 f929 	bl	80058d2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005680:	6878      	ldr	r0, [r7, #4]
 8005682:	f000 f93a 	bl	80058fa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	f003 0301 	and.w	r3, r3, #1
 8005696:	2b01      	cmp	r3, #1
 8005698:	d10e      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	f003 0301 	and.w	r3, r3, #1
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d107      	bne.n	80056b8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	f06f 0201 	mvn.w	r2, #1
 80056b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fc febc 	bl	8002430 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056c2:	2b80      	cmp	r3, #128	; 0x80
 80056c4:	d10e      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056d0:	2b80      	cmp	r3, #128	; 0x80
 80056d2:	d107      	bne.n	80056e4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80056dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fae0 	bl	8005ca4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ee:	2b40      	cmp	r3, #64	; 0x40
 80056f0:	d10e      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056fc:	2b40      	cmp	r3, #64	; 0x40
 80056fe:	d107      	bne.n	8005710 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f8ff 	bl	800590e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	f003 0320 	and.w	r3, r3, #32
 800571a:	2b20      	cmp	r3, #32
 800571c:	d10e      	bne.n	800573c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	68db      	ldr	r3, [r3, #12]
 8005724:	f003 0320 	and.w	r3, r3, #32
 8005728:	2b20      	cmp	r3, #32
 800572a:	d107      	bne.n	800573c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f06f 0220 	mvn.w	r2, #32
 8005734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 faaa 	bl	8005c90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800573c:	bf00      	nop
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}

08005744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005758:	2b01      	cmp	r3, #1
 800575a:	d101      	bne.n	8005760 <HAL_TIM_ConfigClockSource+0x1c>
 800575c:	2302      	movs	r3, #2
 800575e:	e0b4      	b.n	80058ca <HAL_TIM_ConfigClockSource+0x186>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2201      	movs	r2, #1
 8005764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	689b      	ldr	r3, [r3, #8]
 8005776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800577e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005798:	d03e      	beq.n	8005818 <HAL_TIM_ConfigClockSource+0xd4>
 800579a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800579e:	f200 8087 	bhi.w	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057a6:	f000 8086 	beq.w	80058b6 <HAL_TIM_ConfigClockSource+0x172>
 80057aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ae:	d87f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b0:	2b70      	cmp	r3, #112	; 0x70
 80057b2:	d01a      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0xa6>
 80057b4:	2b70      	cmp	r3, #112	; 0x70
 80057b6:	d87b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b8:	2b60      	cmp	r3, #96	; 0x60
 80057ba:	d050      	beq.n	800585e <HAL_TIM_ConfigClockSource+0x11a>
 80057bc:	2b60      	cmp	r3, #96	; 0x60
 80057be:	d877      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c0:	2b50      	cmp	r3, #80	; 0x50
 80057c2:	d03c      	beq.n	800583e <HAL_TIM_ConfigClockSource+0xfa>
 80057c4:	2b50      	cmp	r3, #80	; 0x50
 80057c6:	d873      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057c8:	2b40      	cmp	r3, #64	; 0x40
 80057ca:	d058      	beq.n	800587e <HAL_TIM_ConfigClockSource+0x13a>
 80057cc:	2b40      	cmp	r3, #64	; 0x40
 80057ce:	d86f      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d0:	2b30      	cmp	r3, #48	; 0x30
 80057d2:	d064      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057d4:	2b30      	cmp	r3, #48	; 0x30
 80057d6:	d86b      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057d8:	2b20      	cmp	r3, #32
 80057da:	d060      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057dc:	2b20      	cmp	r3, #32
 80057de:	d867      	bhi.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d05c      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e4:	2b10      	cmp	r3, #16
 80057e6:	d05a      	beq.n	800589e <HAL_TIM_ConfigClockSource+0x15a>
 80057e8:	e062      	b.n	80058b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6899      	ldr	r1, [r3, #8]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	685a      	ldr	r2, [r3, #4]
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	f000 f9ad 	bl	8005b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	689b      	ldr	r3, [r3, #8]
 8005804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800580c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	609a      	str	r2, [r3, #8]
      break;
 8005816:	e04f      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6818      	ldr	r0, [r3, #0]
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	6899      	ldr	r1, [r3, #8]
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	685a      	ldr	r2, [r3, #4]
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f000 f996 	bl	8005b58 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800583a:	609a      	str	r2, [r3, #8]
      break;
 800583c:	e03c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6818      	ldr	r0, [r3, #0]
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	6859      	ldr	r1, [r3, #4]
 8005846:	683b      	ldr	r3, [r7, #0]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	461a      	mov	r2, r3
 800584c:	f000 f90a 	bl	8005a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2150      	movs	r1, #80	; 0x50
 8005856:	4618      	mov	r0, r3
 8005858:	f000 f963 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800585c:	e02c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6818      	ldr	r0, [r3, #0]
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	6859      	ldr	r1, [r3, #4]
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	461a      	mov	r2, r3
 800586c:	f000 f929 	bl	8005ac2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2160      	movs	r1, #96	; 0x60
 8005876:	4618      	mov	r0, r3
 8005878:	f000 f953 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800587c:	e01c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6818      	ldr	r0, [r3, #0]
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	6859      	ldr	r1, [r3, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	68db      	ldr	r3, [r3, #12]
 800588a:	461a      	mov	r2, r3
 800588c:	f000 f8ea 	bl	8005a64 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	2140      	movs	r1, #64	; 0x40
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f943 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 800589c:	e00c      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 f93a 	bl	8005b22 <TIM_ITRx_SetConfig>
      break;
 80058ae:	e003      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
      break;
 80058b4:	e000      	b.n	80058b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80058b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}

080058d2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058d2:	b480      	push	{r7}
 80058d4:	b083      	sub	sp, #12
 80058d6:	af00      	add	r7, sp, #0
 80058d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058da:	bf00      	nop
 80058dc:	370c      	adds	r7, #12
 80058de:	46bd      	mov	sp, r7
 80058e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e4:	4770      	bx	lr

080058e6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058e6:	b480      	push	{r7}
 80058e8:	b083      	sub	sp, #12
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058ee:	bf00      	nop
 80058f0:	370c      	adds	r7, #12
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b083      	sub	sp, #12
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005902:	bf00      	nop
 8005904:	370c      	adds	r7, #12
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr

0800590e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800590e:	b480      	push	{r7}
 8005910:	b083      	sub	sp, #12
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005916:	bf00      	nop
 8005918:	370c      	adds	r7, #12
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr
	...

08005924 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005924:	b480      	push	{r7}
 8005926:	b085      	sub	sp, #20
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
 800592c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a40      	ldr	r2, [pc, #256]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a3d      	ldr	r2, [pc, #244]	; (8005a3c <TIM_Base_SetConfig+0x118>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3c      	ldr	r2, [pc, #240]	; (8005a40 <TIM_Base_SetConfig+0x11c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3b      	ldr	r2, [pc, #236]	; (8005a44 <TIM_Base_SetConfig+0x120>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3a      	ldr	r2, [pc, #232]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d108      	bne.n	8005976 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800596a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	685b      	ldr	r3, [r3, #4]
 8005970:	68fa      	ldr	r2, [r7, #12]
 8005972:	4313      	orrs	r3, r2
 8005974:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	4a2f      	ldr	r2, [pc, #188]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d02b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005984:	d027      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a2c      	ldr	r2, [pc, #176]	; (8005a3c <TIM_Base_SetConfig+0x118>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d023      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2b      	ldr	r2, [pc, #172]	; (8005a40 <TIM_Base_SetConfig+0x11c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d01f      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2a      	ldr	r2, [pc, #168]	; (8005a44 <TIM_Base_SetConfig+0x120>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a29      	ldr	r2, [pc, #164]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d017      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a28      	ldr	r2, [pc, #160]	; (8005a4c <TIM_Base_SetConfig+0x128>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d013      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a27      	ldr	r2, [pc, #156]	; (8005a50 <TIM_Base_SetConfig+0x12c>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d00f      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a26      	ldr	r2, [pc, #152]	; (8005a54 <TIM_Base_SetConfig+0x130>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00b      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a25      	ldr	r2, [pc, #148]	; (8005a58 <TIM_Base_SetConfig+0x134>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d007      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a24      	ldr	r2, [pc, #144]	; (8005a5c <TIM_Base_SetConfig+0x138>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d003      	beq.n	80059d6 <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a23      	ldr	r2, [pc, #140]	; (8005a60 <TIM_Base_SetConfig+0x13c>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d108      	bne.n	80059e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	68db      	ldr	r3, [r3, #12]
 80059e2:	68fa      	ldr	r2, [r7, #12]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	689a      	ldr	r2, [r3, #8]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a0a      	ldr	r2, [pc, #40]	; (8005a38 <TIM_Base_SetConfig+0x114>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d003      	beq.n	8005a1c <TIM_Base_SetConfig+0xf8>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0c      	ldr	r2, [pc, #48]	; (8005a48 <TIM_Base_SetConfig+0x124>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d103      	bne.n	8005a24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	691a      	ldr	r2, [r3, #16]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	615a      	str	r2, [r3, #20]
}
 8005a2a:	bf00      	nop
 8005a2c:	3714      	adds	r7, #20
 8005a2e:	46bd      	mov	sp, r7
 8005a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	40010000 	.word	0x40010000
 8005a3c:	40000400 	.word	0x40000400
 8005a40:	40000800 	.word	0x40000800
 8005a44:	40000c00 	.word	0x40000c00
 8005a48:	40010400 	.word	0x40010400
 8005a4c:	40014000 	.word	0x40014000
 8005a50:	40014400 	.word	0x40014400
 8005a54:	40014800 	.word	0x40014800
 8005a58:	40001800 	.word	0x40001800
 8005a5c:	40001c00 	.word	0x40001c00
 8005a60:	40002000 	.word	0x40002000

08005a64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6a1b      	ldr	r3, [r3, #32]
 8005a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	699b      	ldr	r3, [r3, #24]
 8005a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	011b      	lsls	r3, r3, #4
 8005a94:	693a      	ldr	r2, [r7, #16]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f023 030a 	bic.w	r3, r3, #10
 8005aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa2:	697a      	ldr	r2, [r7, #20]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	693a      	ldr	r2, [r7, #16]
 8005aae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	621a      	str	r2, [r3, #32]
}
 8005ab6:	bf00      	nop
 8005ab8:	371c      	adds	r7, #28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b087      	sub	sp, #28
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	60f8      	str	r0, [r7, #12]
 8005aca:	60b9      	str	r1, [r7, #8]
 8005acc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	f023 0210 	bic.w	r2, r3, #16
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	6a1b      	ldr	r3, [r3, #32]
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005aec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005af8:	693b      	ldr	r3, [r7, #16]
 8005afa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005afe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	693a      	ldr	r2, [r7, #16]
 8005b14:	621a      	str	r2, [r3, #32]
}
 8005b16:	bf00      	nop
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr

08005b22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b22:	b480      	push	{r7}
 8005b24:	b085      	sub	sp, #20
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	6078      	str	r0, [r7, #4]
 8005b2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b3a:	683a      	ldr	r2, [r7, #0]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f043 0307 	orr.w	r3, r3, #7
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68fa      	ldr	r2, [r7, #12]
 8005b4a:	609a      	str	r2, [r3, #8]
}
 8005b4c:	bf00      	nop
 8005b4e:	3714      	adds	r7, #20
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b087      	sub	sp, #28
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	60f8      	str	r0, [r7, #12]
 8005b60:	60b9      	str	r1, [r7, #8]
 8005b62:	607a      	str	r2, [r7, #4]
 8005b64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	021a      	lsls	r2, r3, #8
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	371c      	adds	r7, #28
 8005b90:	46bd      	mov	sp, r7
 8005b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b96:	4770      	bx	lr

08005b98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b98:	b480      	push	{r7}
 8005b9a:	b085      	sub	sp, #20
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bac:	2302      	movs	r3, #2
 8005bae:	e05a      	b.n	8005c66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2202      	movs	r2, #2
 8005bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	689b      	ldr	r3, [r3, #8]
 8005bce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d022      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfc:	d01d      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d018      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	; (8005c7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d013      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a1a      	ldr	r2, [pc, #104]	; (8005c80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00e      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a18      	ldr	r2, [pc, #96]	; (8005c84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d009      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a17      	ldr	r2, [pc, #92]	; (8005c88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d004      	beq.n	8005c3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d10c      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c3a:	68bb      	ldr	r3, [r7, #8]
 8005c3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	68ba      	ldr	r2, [r7, #8]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	40010400 	.word	0x40010400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40001800 	.word	0x40001800

08005c90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005cac:	bf00      	nop
 8005cae:	370c      	adds	r7, #12
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr

08005cb8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d101      	bne.n	8005cca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e03f      	b.n	8005d4a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d106      	bne.n	8005ce4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	2200      	movs	r2, #0
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f7fd fb28 	bl	8003334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2224      	movs	r2, #36	; 0x24
 8005ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cfa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fddf 	bl	80068c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	691a      	ldr	r2, [r3, #16]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d10:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695a      	ldr	r2, [r3, #20]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d20:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68da      	ldr	r2, [r3, #12]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005d30:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2220      	movs	r2, #32
 8005d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3708      	adds	r7, #8
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}

08005d52 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d52:	b580      	push	{r7, lr}
 8005d54:	b08a      	sub	sp, #40	; 0x28
 8005d56:	af02      	add	r7, sp, #8
 8005d58:	60f8      	str	r0, [r7, #12]
 8005d5a:	60b9      	str	r1, [r7, #8]
 8005d5c:	603b      	str	r3, [r7, #0]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	2b20      	cmp	r3, #32
 8005d70:	d17c      	bne.n	8005e6c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d72:	68bb      	ldr	r3, [r7, #8]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d002      	beq.n	8005d7e <HAL_UART_Transmit+0x2c>
 8005d78:	88fb      	ldrh	r3, [r7, #6]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e075      	b.n	8005e6e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d101      	bne.n	8005d90 <HAL_UART_Transmit+0x3e>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	e06e      	b.n	8005e6e <HAL_UART_Transmit+0x11c>
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2221      	movs	r2, #33	; 0x21
 8005da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005da6:	f7fd fd75 	bl	8003894 <HAL_GetTick>
 8005daa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	88fa      	ldrh	r2, [r7, #6]
 8005db0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	88fa      	ldrh	r2, [r7, #6]
 8005db6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dc0:	d108      	bne.n	8005dd4 <HAL_UART_Transmit+0x82>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	61bb      	str	r3, [r7, #24]
 8005dd2:	e003      	b.n	8005ddc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2200      	movs	r2, #0
 8005de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005de4:	e02a      	b.n	8005e3c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	9300      	str	r3, [sp, #0]
 8005dea:	697b      	ldr	r3, [r7, #20]
 8005dec:	2200      	movs	r2, #0
 8005dee:	2180      	movs	r1, #128	; 0x80
 8005df0:	68f8      	ldr	r0, [r7, #12]
 8005df2:	f000 fb1f 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d001      	beq.n	8005e00 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e036      	b.n	8005e6e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10b      	bne.n	8005e1e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e06:	69bb      	ldr	r3, [r7, #24]
 8005e08:	881b      	ldrh	r3, [r3, #0]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e14:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	3302      	adds	r3, #2
 8005e1a:	61bb      	str	r3, [r7, #24]
 8005e1c:	e007      	b.n	8005e2e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	781a      	ldrb	r2, [r3, #0]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e32:	b29b      	uxth	r3, r3
 8005e34:	3b01      	subs	r3, #1
 8005e36:	b29a      	uxth	r2, r3
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e40:	b29b      	uxth	r3, r3
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d1cf      	bne.n	8005de6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	9300      	str	r3, [sp, #0]
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	2140      	movs	r1, #64	; 0x40
 8005e50:	68f8      	ldr	r0, [r7, #12]
 8005e52:	f000 faef 	bl	8006434 <UART_WaitOnFlagUntilTimeout>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d001      	beq.n	8005e60 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e006      	b.n	8005e6e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	2220      	movs	r2, #32
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	e000      	b.n	8005e6e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005e6c:	2302      	movs	r3, #2
  }
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3720      	adds	r7, #32
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b084      	sub	sp, #16
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	4613      	mov	r3, r2
 8005e82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d11d      	bne.n	8005ecc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d002      	beq.n	8005e9c <HAL_UART_Receive_IT+0x26>
 8005e96:	88fb      	ldrh	r3, [r7, #6]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d101      	bne.n	8005ea0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	e016      	b.n	8005ece <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d101      	bne.n	8005eae <HAL_UART_Receive_IT+0x38>
 8005eaa:	2302      	movs	r3, #2
 8005eac:	e00f      	b.n	8005ece <HAL_UART_Receive_IT+0x58>
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005ebc:	88fb      	ldrh	r3, [r7, #6]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	68b9      	ldr	r1, [r7, #8]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	f000 fb24 	bl	8006510 <UART_Start_Receive_IT>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	e000      	b.n	8005ece <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ecc:	2302      	movs	r3, #2
  }
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
	...

08005ed8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b0ba      	sub	sp, #232	; 0xe8
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005efe:	2300      	movs	r3, #0
 8005f00:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f0e:	f003 030f 	and.w	r3, r3, #15
 8005f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005f16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10f      	bne.n	8005f3e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d009      	beq.n	8005f3e <HAL_UART_IRQHandler+0x66>
 8005f2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f2e:	f003 0320 	and.w	r3, r3, #32
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d003      	beq.n	8005f3e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fc07 	bl	800674a <UART_Receive_IT>
      return;
 8005f3c:	e256      	b.n	80063ec <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	f000 80de 	beq.w	8006104 <HAL_UART_IRQHandler+0x22c>
 8005f48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f4c:	f003 0301 	and.w	r3, r3, #1
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d106      	bne.n	8005f62 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f58:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80d1 	beq.w	8006104 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f66:	f003 0301 	and.w	r3, r3, #1
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00b      	beq.n	8005f86 <HAL_UART_IRQHandler+0xae>
 8005f6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	f043 0201 	orr.w	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f8a:	f003 0304 	and.w	r3, r3, #4
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00b      	beq.n	8005faa <HAL_UART_IRQHandler+0xd2>
 8005f92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d005      	beq.n	8005faa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa2:	f043 0202 	orr.w	r2, r3, #2
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005faa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fae:	f003 0302 	and.w	r3, r3, #2
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_UART_IRQHandler+0xf6>
 8005fb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fba:	f003 0301 	and.w	r3, r3, #1
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d005      	beq.n	8005fce <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fc6:	f043 0204 	orr.w	r2, r3, #4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fd2:	f003 0308 	and.w	r3, r3, #8
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d011      	beq.n	8005ffe <HAL_UART_IRQHandler+0x126>
 8005fda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fde:	f003 0320 	and.w	r3, r3, #32
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d105      	bne.n	8005ff2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fe6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d005      	beq.n	8005ffe <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ff6:	f043 0208 	orr.w	r2, r3, #8
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006002:	2b00      	cmp	r3, #0
 8006004:	f000 81ed 	beq.w	80063e2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006008:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800600c:	f003 0320 	and.w	r3, r3, #32
 8006010:	2b00      	cmp	r3, #0
 8006012:	d008      	beq.n	8006026 <HAL_UART_IRQHandler+0x14e>
 8006014:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006018:	f003 0320 	and.w	r3, r3, #32
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fb92 	bl	800674a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	695b      	ldr	r3, [r3, #20]
 800602c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006030:	2b40      	cmp	r3, #64	; 0x40
 8006032:	bf0c      	ite	eq
 8006034:	2301      	moveq	r3, #1
 8006036:	2300      	movne	r3, #0
 8006038:	b2db      	uxtb	r3, r3
 800603a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	f003 0308 	and.w	r3, r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	d103      	bne.n	8006052 <HAL_UART_IRQHandler+0x17a>
 800604a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800604e:	2b00      	cmp	r3, #0
 8006050:	d04f      	beq.n	80060f2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 fa9a 	bl	800658c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006062:	2b40      	cmp	r3, #64	; 0x40
 8006064:	d141      	bne.n	80060ea <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	3314      	adds	r3, #20
 800606c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006070:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006074:	e853 3f00 	ldrex	r3, [r3]
 8006078:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800607c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006080:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006084:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3314      	adds	r3, #20
 800608e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006092:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006096:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800609a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800609e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060a2:	e841 2300 	strex	r3, r2, [r1]
 80060a6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060aa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1d9      	bne.n	8006066 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d013      	beq.n	80060e2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	4a7d      	ldr	r2, [pc, #500]	; (80062b4 <HAL_UART_IRQHandler+0x3dc>)
 80060c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe faf9 	bl	80046be <HAL_DMA_Abort_IT>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d016      	beq.n	8006100 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060dc:	4610      	mov	r0, r2
 80060de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00e      	b.n	8006100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f990 	bl	8006408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e00a      	b.n	8006100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f98c 	bl	8006408 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060f0:	e006      	b.n	8006100 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060f2:	6878      	ldr	r0, [r7, #4]
 80060f4:	f000 f988 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	2200      	movs	r2, #0
 80060fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80060fe:	e170      	b.n	80063e2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006100:	bf00      	nop
    return;
 8006102:	e16e      	b.n	80063e2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006108:	2b01      	cmp	r3, #1
 800610a:	f040 814a 	bne.w	80063a2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800610e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006112:	f003 0310 	and.w	r3, r3, #16
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 8143 	beq.w	80063a2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800611c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006120:	f003 0310 	and.w	r3, r3, #16
 8006124:	2b00      	cmp	r3, #0
 8006126:	f000 813c 	beq.w	80063a2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800612a:	2300      	movs	r3, #0
 800612c:	60bb      	str	r3, [r7, #8]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	60bb      	str	r3, [r7, #8]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	60bb      	str	r3, [r7, #8]
 800613e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	695b      	ldr	r3, [r3, #20]
 8006146:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800614a:	2b40      	cmp	r3, #64	; 0x40
 800614c:	f040 80b4 	bne.w	80062b8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800615c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006160:	2b00      	cmp	r3, #0
 8006162:	f000 8140 	beq.w	80063e6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800616a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800616e:	429a      	cmp	r2, r3
 8006170:	f080 8139 	bcs.w	80063e6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800617a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006180:	69db      	ldr	r3, [r3, #28]
 8006182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006186:	f000 8088 	beq.w	800629a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	330c      	adds	r3, #12
 8006190:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006194:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006198:	e853 3f00 	ldrex	r3, [r3]
 800619c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	330c      	adds	r3, #12
 80061b2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80061b6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061c6:	e841 2300 	strex	r3, r2, [r1]
 80061ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d1d9      	bne.n	800618a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3314      	adds	r3, #20
 80061dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061e0:	e853 3f00 	ldrex	r3, [r3]
 80061e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80061e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80061e8:	f023 0301 	bic.w	r3, r3, #1
 80061ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	3314      	adds	r3, #20
 80061f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80061fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80061fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006200:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006206:	e841 2300 	strex	r3, r2, [r1]
 800620a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800620c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620e:	2b00      	cmp	r3, #0
 8006210:	d1e1      	bne.n	80061d6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	3314      	adds	r3, #20
 8006218:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800621a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800621c:	e853 3f00 	ldrex	r3, [r3]
 8006220:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006222:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006224:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006228:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	3314      	adds	r3, #20
 8006232:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006236:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006238:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800623c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800623e:	e841 2300 	strex	r3, r2, [r1]
 8006242:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006244:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006246:	2b00      	cmp	r3, #0
 8006248:	d1e3      	bne.n	8006212 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2220      	movs	r2, #32
 800624e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	330c      	adds	r3, #12
 800625e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006268:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800626a:	f023 0310 	bic.w	r3, r3, #16
 800626e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	330c      	adds	r3, #12
 8006278:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800627c:	65ba      	str	r2, [r7, #88]	; 0x58
 800627e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006282:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800628a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e3      	bne.n	8006258 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006294:	4618      	mov	r0, r3
 8006296:	f7fe f9a2 	bl	80045de <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f8b6 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80062b0:	e099      	b.n	80063e6 <HAL_UART_IRQHandler+0x50e>
 80062b2:	bf00      	nop
 80062b4:	08006653 	.word	0x08006653
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	1ad3      	subs	r3, r2, r3
 80062c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 808b 	beq.w	80063ea <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80062d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 8086 	beq.w	80063ea <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	330c      	adds	r3, #12
 80062e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80062e8:	e853 3f00 	ldrex	r3, [r3]
 80062ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80062ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80062f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80062f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006302:	647a      	str	r2, [r7, #68]	; 0x44
 8006304:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006306:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006308:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800630a:	e841 2300 	strex	r3, r2, [r1]
 800630e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006312:	2b00      	cmp	r3, #0
 8006314:	d1e3      	bne.n	80062de <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3314      	adds	r3, #20
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006320:	e853 3f00 	ldrex	r3, [r3]
 8006324:	623b      	str	r3, [r7, #32]
   return(result);
 8006326:	6a3b      	ldr	r3, [r7, #32]
 8006328:	f023 0301 	bic.w	r3, r3, #1
 800632c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	3314      	adds	r3, #20
 8006336:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800633a:	633a      	str	r2, [r7, #48]	; 0x30
 800633c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006342:	e841 2300 	strex	r3, r2, [r1]
 8006346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1e3      	bne.n	8006316 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2220      	movs	r2, #32
 8006352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	330c      	adds	r3, #12
 8006362:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	e853 3f00 	ldrex	r3, [r3]
 800636a:	60fb      	str	r3, [r7, #12]
   return(result);
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	f023 0310 	bic.w	r3, r3, #16
 8006372:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	330c      	adds	r3, #12
 800637c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006380:	61fa      	str	r2, [r7, #28]
 8006382:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006384:	69b9      	ldr	r1, [r7, #24]
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	e841 2300 	strex	r3, r2, [r1]
 800638c:	617b      	str	r3, [r7, #20]
   return(result);
 800638e:	697b      	ldr	r3, [r7, #20]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d1e3      	bne.n	800635c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006394:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006398:	4619      	mov	r1, r3
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f83e 	bl	800641c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a0:	e023      	b.n	80063ea <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d009      	beq.n	80063c2 <HAL_UART_IRQHandler+0x4ea>
 80063ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 f95d 	bl	800667a <UART_Transmit_IT>
    return;
 80063c0:	e014      	b.n	80063ec <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d00e      	beq.n	80063ec <HAL_UART_IRQHandler+0x514>
 80063ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d008      	beq.n	80063ec <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f99d 	bl	800671a <UART_EndTransmit_IT>
    return;
 80063e0:	e004      	b.n	80063ec <HAL_UART_IRQHandler+0x514>
    return;
 80063e2:	bf00      	nop
 80063e4:	e002      	b.n	80063ec <HAL_UART_IRQHandler+0x514>
      return;
 80063e6:	bf00      	nop
 80063e8:	e000      	b.n	80063ec <HAL_UART_IRQHandler+0x514>
      return;
 80063ea:	bf00      	nop
  }
}
 80063ec:	37e8      	adds	r7, #232	; 0xe8
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	460b      	mov	r3, r1
 8006426:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b090      	sub	sp, #64	; 0x40
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	603b      	str	r3, [r7, #0]
 8006440:	4613      	mov	r3, r2
 8006442:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006444:	e050      	b.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006446:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006448:	f1b3 3fff 	cmp.w	r3, #4294967295
 800644c:	d04c      	beq.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800644e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006450:	2b00      	cmp	r3, #0
 8006452:	d007      	beq.n	8006464 <UART_WaitOnFlagUntilTimeout+0x30>
 8006454:	f7fd fa1e 	bl	8003894 <HAL_GetTick>
 8006458:	4602      	mov	r2, r0
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	1ad3      	subs	r3, r2, r3
 800645e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006460:	429a      	cmp	r2, r3
 8006462:	d241      	bcs.n	80064e8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	330c      	adds	r3, #12
 800646a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646e:	e853 3f00 	ldrex	r3, [r3]
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006476:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	330c      	adds	r3, #12
 8006482:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006484:	637a      	str	r2, [r7, #52]	; 0x34
 8006486:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006488:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800648a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800648c:	e841 2300 	strex	r3, r2, [r1]
 8006490:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d1e5      	bne.n	8006464 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	3314      	adds	r3, #20
 800649e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	e853 3f00 	ldrex	r3, [r3]
 80064a6:	613b      	str	r3, [r7, #16]
   return(result);
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	f023 0301 	bic.w	r3, r3, #1
 80064ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	3314      	adds	r3, #20
 80064b6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80064b8:	623a      	str	r2, [r7, #32]
 80064ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064bc:	69f9      	ldr	r1, [r7, #28]
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	e841 2300 	strex	r3, r2, [r1]
 80064c4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d1e5      	bne.n	8006498 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2220      	movs	r2, #32
 80064d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2220      	movs	r2, #32
 80064d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2200      	movs	r2, #0
 80064e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e00f      	b.n	8006508 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4013      	ands	r3, r2
 80064f2:	68ba      	ldr	r2, [r7, #8]
 80064f4:	429a      	cmp	r2, r3
 80064f6:	bf0c      	ite	eq
 80064f8:	2301      	moveq	r3, #1
 80064fa:	2300      	movne	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	461a      	mov	r2, r3
 8006500:	79fb      	ldrb	r3, [r7, #7]
 8006502:	429a      	cmp	r2, r3
 8006504:	d09f      	beq.n	8006446 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3740      	adds	r7, #64	; 0x40
 800650c:	46bd      	mov	sp, r7
 800650e:	bd80      	pop	{r7, pc}

08006510 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	4613      	mov	r3, r2
 800651c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	88fa      	ldrh	r2, [r7, #6]
 800652e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2200      	movs	r2, #0
 8006534:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2222      	movs	r2, #34	; 0x22
 800653a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d007      	beq.n	800655e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68da      	ldr	r2, [r3, #12]
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800655c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695a      	ldr	r2, [r3, #20]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f042 0201 	orr.w	r2, r2, #1
 800656c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68da      	ldr	r2, [r3, #12]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	f042 0220 	orr.w	r2, r2, #32
 800657c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800658c:	b480      	push	{r7}
 800658e:	b095      	sub	sp, #84	; 0x54
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	330c      	adds	r3, #12
 800659a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800659c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659e:	e853 3f00 	ldrex	r3, [r3]
 80065a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80065aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	330c      	adds	r3, #12
 80065b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80065b4:	643a      	str	r2, [r7, #64]	; 0x40
 80065b6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80065ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80065bc:	e841 2300 	strex	r3, r2, [r1]
 80065c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80065c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d1e5      	bne.n	8006594 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	3314      	adds	r3, #20
 80065ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	6a3b      	ldr	r3, [r7, #32]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	f023 0301 	bic.w	r3, r3, #1
 80065de:	64bb      	str	r3, [r7, #72]	; 0x48
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3314      	adds	r3, #20
 80065e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80065e8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80065ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e5      	bne.n	80065c8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006600:	2b01      	cmp	r3, #1
 8006602:	d119      	bne.n	8006638 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	330c      	adds	r3, #12
 800660a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	e853 3f00 	ldrex	r3, [r3]
 8006612:	60bb      	str	r3, [r7, #8]
   return(result);
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	f023 0310 	bic.w	r3, r3, #16
 800661a:	647b      	str	r3, [r7, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	330c      	adds	r3, #12
 8006622:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006624:	61ba      	str	r2, [r7, #24]
 8006626:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006628:	6979      	ldr	r1, [r7, #20]
 800662a:	69ba      	ldr	r2, [r7, #24]
 800662c:	e841 2300 	strex	r3, r2, [r1]
 8006630:	613b      	str	r3, [r7, #16]
   return(result);
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d1e5      	bne.n	8006604 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2200      	movs	r2, #0
 8006644:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006646:	bf00      	nop
 8006648:	3754      	adds	r7, #84	; 0x54
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006652:	b580      	push	{r7, lr}
 8006654:	b084      	sub	sp, #16
 8006656:	af00      	add	r7, sp, #0
 8006658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2200      	movs	r2, #0
 800666a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800666c:	68f8      	ldr	r0, [r7, #12]
 800666e:	f7ff fecb 	bl	8006408 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006672:	bf00      	nop
 8006674:	3710      	adds	r7, #16
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800667a:	b480      	push	{r7}
 800667c:	b085      	sub	sp, #20
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006688:	b2db      	uxtb	r3, r3
 800668a:	2b21      	cmp	r3, #33	; 0x21
 800668c:	d13e      	bne.n	800670c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006696:	d114      	bne.n	80066c2 <UART_Transmit_IT+0x48>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d110      	bne.n	80066c2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a1b      	ldr	r3, [r3, #32]
 80066a4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	881b      	ldrh	r3, [r3, #0]
 80066aa:	461a      	mov	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066b4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	1c9a      	adds	r2, r3, #2
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	621a      	str	r2, [r3, #32]
 80066c0:	e008      	b.n	80066d4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	6a1b      	ldr	r3, [r3, #32]
 80066c6:	1c59      	adds	r1, r3, #1
 80066c8:	687a      	ldr	r2, [r7, #4]
 80066ca:	6211      	str	r1, [r2, #32]
 80066cc:	781a      	ldrb	r2, [r3, #0]
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80066d8:	b29b      	uxth	r3, r3
 80066da:	3b01      	subs	r3, #1
 80066dc:	b29b      	uxth	r3, r3
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	4619      	mov	r1, r3
 80066e2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10f      	bne.n	8006708 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68da      	ldr	r2, [r3, #12]
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80066f6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68da      	ldr	r2, [r3, #12]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006706:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006708:	2300      	movs	r3, #0
 800670a:	e000      	b.n	800670e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800670c:	2302      	movs	r3, #2
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3714      	adds	r7, #20
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr

0800671a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b082      	sub	sp, #8
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	68da      	ldr	r2, [r3, #12]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006730:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f7ff fe5a 	bl	80063f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006740:	2300      	movs	r3, #0
}
 8006742:	4618      	mov	r0, r3
 8006744:	3708      	adds	r7, #8
 8006746:	46bd      	mov	sp, r7
 8006748:	bd80      	pop	{r7, pc}

0800674a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b08c      	sub	sp, #48	; 0x30
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b22      	cmp	r3, #34	; 0x22
 800675c:	f040 80ab 	bne.w	80068b6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006768:	d117      	bne.n	800679a <UART_Receive_IT+0x50>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	691b      	ldr	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d113      	bne.n	800679a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006772:	2300      	movs	r3, #0
 8006774:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800677a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	685b      	ldr	r3, [r3, #4]
 8006782:	b29b      	uxth	r3, r3
 8006784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006788:	b29a      	uxth	r2, r3
 800678a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800678c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006792:	1c9a      	adds	r2, r3, #2
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	629a      	str	r2, [r3, #40]	; 0x28
 8006798:	e026      	b.n	80067e8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80067a0:	2300      	movs	r3, #0
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	689b      	ldr	r3, [r3, #8]
 80067a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067ac:	d007      	beq.n	80067be <UART_Receive_IT+0x74>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d10a      	bne.n	80067cc <UART_Receive_IT+0x82>
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	691b      	ldr	r3, [r3, #16]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d106      	bne.n	80067cc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c8:	701a      	strb	r2, [r3, #0]
 80067ca:	e008      	b.n	80067de <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	b2db      	uxtb	r3, r3
 80067d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067d8:	b2da      	uxtb	r2, r3
 80067da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067dc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e2:	1c5a      	adds	r2, r3, #1
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	3b01      	subs	r3, #1
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	4619      	mov	r1, r3
 80067f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d15a      	bne.n	80068b2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	68da      	ldr	r2, [r3, #12]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f022 0220 	bic.w	r2, r2, #32
 800680a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800681a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	695a      	ldr	r2, [r3, #20]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f022 0201 	bic.w	r2, r2, #1
 800682a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2220      	movs	r2, #32
 8006830:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006838:	2b01      	cmp	r3, #1
 800683a:	d135      	bne.n	80068a8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	330c      	adds	r3, #12
 8006848:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	613b      	str	r3, [r7, #16]
   return(result);
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	f023 0310 	bic.w	r3, r3, #16
 8006858:	627b      	str	r3, [r7, #36]	; 0x24
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	330c      	adds	r3, #12
 8006860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006862:	623a      	str	r2, [r7, #32]
 8006864:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	69f9      	ldr	r1, [r7, #28]
 8006868:	6a3a      	ldr	r2, [r7, #32]
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006870:	69bb      	ldr	r3, [r7, #24]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	2b10      	cmp	r3, #16
 8006882:	d10a      	bne.n	800689a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006884:	2300      	movs	r3, #0
 8006886:	60fb      	str	r3, [r7, #12]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	60fb      	str	r3, [r7, #12]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	60fb      	str	r3, [r7, #12]
 8006898:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800689e:	4619      	mov	r1, r3
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff fdbb 	bl	800641c <HAL_UARTEx_RxEventCallback>
 80068a6:	e002      	b.n	80068ae <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f7fb fbf9 	bl	80020a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068ae:	2300      	movs	r3, #0
 80068b0:	e002      	b.n	80068b8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80068b2:	2300      	movs	r3, #0
 80068b4:	e000      	b.n	80068b8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80068b6:	2302      	movs	r3, #2
  }
}
 80068b8:	4618      	mov	r0, r3
 80068ba:	3730      	adds	r7, #48	; 0x30
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c4:	b0c0      	sub	sp, #256	; 0x100
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	68d9      	ldr	r1, [r3, #12]
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	ea40 0301 	orr.w	r3, r0, r1
 80068e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	431a      	orrs	r2, r3
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006918:	f021 010c 	bic.w	r1, r1, #12
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006926:	430b      	orrs	r3, r1
 8006928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693a:	6999      	ldr	r1, [r3, #24]
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	ea40 0301 	orr.w	r3, r0, r1
 8006946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b8f      	ldr	r3, [pc, #572]	; (8006b8c <UART_SetConfig+0x2cc>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d005      	beq.n	8006960 <UART_SetConfig+0xa0>
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b8d      	ldr	r3, [pc, #564]	; (8006b90 <UART_SetConfig+0x2d0>)
 800695c:	429a      	cmp	r2, r3
 800695e:	d104      	bne.n	800696a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006960:	f7fe fd14 	bl	800538c <HAL_RCC_GetPCLK2Freq>
 8006964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006968:	e003      	b.n	8006972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800696a:	f7fe fcfb 	bl	8005364 <HAL_RCC_GetPCLK1Freq>
 800696e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697c:	f040 810c 	bne.w	8006b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006984:	2200      	movs	r2, #0
 8006986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800698a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800698e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	1891      	adds	r1, r2, r2
 8006998:	65b9      	str	r1, [r7, #88]	; 0x58
 800699a:	415b      	adcs	r3, r3
 800699c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069a2:	4621      	mov	r1, r4
 80069a4:	eb12 0801 	adds.w	r8, r2, r1
 80069a8:	4629      	mov	r1, r5
 80069aa:	eb43 0901 	adc.w	r9, r3, r1
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069c2:	4690      	mov	r8, r2
 80069c4:	4699      	mov	r9, r3
 80069c6:	4623      	mov	r3, r4
 80069c8:	eb18 0303 	adds.w	r3, r8, r3
 80069cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069d0:	462b      	mov	r3, r5
 80069d2:	eb49 0303 	adc.w	r3, r9, r3
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069ee:	460b      	mov	r3, r1
 80069f0:	18db      	adds	r3, r3, r3
 80069f2:	653b      	str	r3, [r7, #80]	; 0x50
 80069f4:	4613      	mov	r3, r2
 80069f6:	eb42 0303 	adc.w	r3, r2, r3
 80069fa:	657b      	str	r3, [r7, #84]	; 0x54
 80069fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a04:	f7fa f940 	bl	8000c88 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	011c      	lsls	r4, r3, #4
 8006a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	1891      	adds	r1, r2, r2
 8006a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a30:	415b      	adcs	r3, r3
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a38:	4641      	mov	r1, r8
 8006a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a3e:	4649      	mov	r1, r9
 8006a40:	eb43 0b01 	adc.w	fp, r3, r1
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a58:	4692      	mov	sl, r2
 8006a5a:	469b      	mov	fp, r3
 8006a5c:	4643      	mov	r3, r8
 8006a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a66:	464b      	mov	r3, r9
 8006a68:	eb4b 0303 	adc.w	r3, fp, r3
 8006a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a84:	460b      	mov	r3, r1
 8006a86:	18db      	adds	r3, r3, r3
 8006a88:	643b      	str	r3, [r7, #64]	; 0x40
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
 8006a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a9a:	f7fa f8f5 	bl	8000c88 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2264      	movs	r2, #100	; 0x64
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	1acb      	subs	r3, r1, r3
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006abc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ac8:	441c      	add	r4, r3
 8006aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	1891      	adds	r1, r2, r2
 8006ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ae4:	415b      	adcs	r3, r3
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006aec:	4641      	mov	r1, r8
 8006aee:	1851      	adds	r1, r2, r1
 8006af0:	6339      	str	r1, [r7, #48]	; 0x30
 8006af2:	4649      	mov	r1, r9
 8006af4:	414b      	adcs	r3, r1
 8006af6:	637b      	str	r3, [r7, #52]	; 0x34
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b04:	4659      	mov	r1, fp
 8006b06:	00cb      	lsls	r3, r1, #3
 8006b08:	4651      	mov	r1, sl
 8006b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b0e:	4651      	mov	r1, sl
 8006b10:	00ca      	lsls	r2, r1, #3
 8006b12:	4610      	mov	r0, r2
 8006b14:	4619      	mov	r1, r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	4642      	mov	r2, r8
 8006b1a:	189b      	adds	r3, r3, r2
 8006b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b20:	464b      	mov	r3, r9
 8006b22:	460a      	mov	r2, r1
 8006b24:	eb42 0303 	adc.w	r3, r2, r3
 8006b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b40:	460b      	mov	r3, r1
 8006b42:	18db      	adds	r3, r3, r3
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b46:	4613      	mov	r3, r2
 8006b48:	eb42 0303 	adc.w	r3, r2, r3
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b56:	f7fa f897 	bl	8000c88 <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006b60:	fba3 1302 	umull	r1, r3, r3, r2
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	2164      	movs	r1, #100	; 0x64
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	3332      	adds	r3, #50	; 0x32
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	f003 0207 	and.w	r2, r3, #7
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4422      	add	r2, r4
 8006b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b88:	e105      	b.n	8006d96 <UART_SetConfig+0x4d6>
 8006b8a:	bf00      	nop
 8006b8c:	40011000 	.word	0x40011000
 8006b90:	40011400 	.word	0x40011400
 8006b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006baa:	4642      	mov	r2, r8
 8006bac:	464b      	mov	r3, r9
 8006bae:	1891      	adds	r1, r2, r2
 8006bb0:	6239      	str	r1, [r7, #32]
 8006bb2:	415b      	adcs	r3, r3
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bba:	4641      	mov	r1, r8
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	eb43 0501 	adc.w	r5, r3, r1
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	00eb      	lsls	r3, r5, #3
 8006bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bd2:	00e2      	lsls	r2, r4, #3
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	4643      	mov	r3, r8
 8006bda:	18e3      	adds	r3, r4, r3
 8006bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006be0:	464b      	mov	r3, r9
 8006be2:	eb45 0303 	adc.w	r3, r5, r3
 8006be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c06:	4629      	mov	r1, r5
 8006c08:	008b      	lsls	r3, r1, #2
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c10:	4621      	mov	r1, r4
 8006c12:	008a      	lsls	r2, r1, #2
 8006c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c18:	f7fa f836 	bl	8000c88 <__aeabi_uldivmod>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4b60      	ldr	r3, [pc, #384]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006c22:	fba3 2302 	umull	r2, r3, r3, r2
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	011c      	lsls	r4, r3, #4
 8006c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	464b      	mov	r3, r9
 8006c40:	1891      	adds	r1, r2, r2
 8006c42:	61b9      	str	r1, [r7, #24]
 8006c44:	415b      	adcs	r3, r3
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	1851      	adds	r1, r2, r1
 8006c50:	6139      	str	r1, [r7, #16]
 8006c52:	4649      	mov	r1, r9
 8006c54:	414b      	adcs	r3, r1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c64:	4659      	mov	r1, fp
 8006c66:	00cb      	lsls	r3, r1, #3
 8006c68:	4651      	mov	r1, sl
 8006c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6e:	4651      	mov	r1, sl
 8006c70:	00ca      	lsls	r2, r1, #3
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	4642      	mov	r2, r8
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c80:	464b      	mov	r3, r9
 8006c82:	460a      	mov	r2, r1
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	008b      	lsls	r3, r1, #2
 8006ca8:	4641      	mov	r1, r8
 8006caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cae:	4641      	mov	r1, r8
 8006cb0:	008a      	lsls	r2, r1, #2
 8006cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cb6:	f7f9 ffe7 	bl	8000c88 <__aeabi_uldivmod>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4b39      	ldr	r3, [pc, #228]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cc4:	095b      	lsrs	r3, r3, #5
 8006cc6:	2164      	movs	r1, #100	; 0x64
 8006cc8:	fb01 f303 	mul.w	r3, r1, r3
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	011b      	lsls	r3, r3, #4
 8006cd0:	3332      	adds	r3, #50	; 0x32
 8006cd2:	4a34      	ldr	r2, [pc, #208]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd8:	095b      	lsrs	r3, r3, #5
 8006cda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cde:	441c      	add	r4, r3
 8006ce0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	673b      	str	r3, [r7, #112]	; 0x70
 8006ce8:	677a      	str	r2, [r7, #116]	; 0x74
 8006cea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cee:	4642      	mov	r2, r8
 8006cf0:	464b      	mov	r3, r9
 8006cf2:	1891      	adds	r1, r2, r2
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	415b      	adcs	r3, r3
 8006cf8:	60fb      	str	r3, [r7, #12]
 8006cfa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cfe:	4641      	mov	r1, r8
 8006d00:	1851      	adds	r1, r2, r1
 8006d02:	6039      	str	r1, [r7, #0]
 8006d04:	4649      	mov	r1, r9
 8006d06:	414b      	adcs	r3, r1
 8006d08:	607b      	str	r3, [r7, #4]
 8006d0a:	f04f 0200 	mov.w	r2, #0
 8006d0e:	f04f 0300 	mov.w	r3, #0
 8006d12:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d16:	4659      	mov	r1, fp
 8006d18:	00cb      	lsls	r3, r1, #3
 8006d1a:	4651      	mov	r1, sl
 8006d1c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d20:	4651      	mov	r1, sl
 8006d22:	00ca      	lsls	r2, r1, #3
 8006d24:	4610      	mov	r0, r2
 8006d26:	4619      	mov	r1, r3
 8006d28:	4603      	mov	r3, r0
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	189b      	adds	r3, r3, r2
 8006d2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d30:	464b      	mov	r3, r9
 8006d32:	460a      	mov	r2, r1
 8006d34:	eb42 0303 	adc.w	r3, r2, r3
 8006d38:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	2200      	movs	r2, #0
 8006d42:	663b      	str	r3, [r7, #96]	; 0x60
 8006d44:	667a      	str	r2, [r7, #100]	; 0x64
 8006d46:	f04f 0200 	mov.w	r2, #0
 8006d4a:	f04f 0300 	mov.w	r3, #0
 8006d4e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d52:	4649      	mov	r1, r9
 8006d54:	008b      	lsls	r3, r1, #2
 8006d56:	4641      	mov	r1, r8
 8006d58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	008a      	lsls	r2, r1, #2
 8006d60:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d64:	f7f9 ff90 	bl	8000c88 <__aeabi_uldivmod>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	460b      	mov	r3, r1
 8006d6c:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006d6e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d72:	095b      	lsrs	r3, r3, #5
 8006d74:	2164      	movs	r1, #100	; 0x64
 8006d76:	fb01 f303 	mul.w	r3, r1, r3
 8006d7a:	1ad3      	subs	r3, r2, r3
 8006d7c:	011b      	lsls	r3, r3, #4
 8006d7e:	3332      	adds	r3, #50	; 0x32
 8006d80:	4a08      	ldr	r2, [pc, #32]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006d82:	fba2 2303 	umull	r2, r3, r2, r3
 8006d86:	095b      	lsrs	r3, r3, #5
 8006d88:	f003 020f 	and.w	r2, r3, #15
 8006d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4422      	add	r2, r4
 8006d94:	609a      	str	r2, [r3, #8]
}
 8006d96:	bf00      	nop
 8006d98:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da2:	bf00      	nop
 8006da4:	51eb851f 	.word	0x51eb851f

08006da8 <atof>:
 8006da8:	2100      	movs	r1, #0
 8006daa:	f001 bc6b 	b.w	8008684 <strtod>

08006dae <atoi>:
 8006dae:	220a      	movs	r2, #10
 8006db0:	2100      	movs	r1, #0
 8006db2:	f001 bd51 	b.w	8008858 <strtol>
	...

08006db8 <__errno>:
 8006db8:	4b01      	ldr	r3, [pc, #4]	; (8006dc0 <__errno+0x8>)
 8006dba:	6818      	ldr	r0, [r3, #0]
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	20000058 	.word	0x20000058

08006dc4 <__libc_init_array>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	4d0d      	ldr	r5, [pc, #52]	; (8006dfc <__libc_init_array+0x38>)
 8006dc8:	4c0d      	ldr	r4, [pc, #52]	; (8006e00 <__libc_init_array+0x3c>)
 8006dca:	1b64      	subs	r4, r4, r5
 8006dcc:	10a4      	asrs	r4, r4, #2
 8006dce:	2600      	movs	r6, #0
 8006dd0:	42a6      	cmp	r6, r4
 8006dd2:	d109      	bne.n	8006de8 <__libc_init_array+0x24>
 8006dd4:	4d0b      	ldr	r5, [pc, #44]	; (8006e04 <__libc_init_array+0x40>)
 8006dd6:	4c0c      	ldr	r4, [pc, #48]	; (8006e08 <__libc_init_array+0x44>)
 8006dd8:	f004 fb10 	bl	800b3fc <_init>
 8006ddc:	1b64      	subs	r4, r4, r5
 8006dde:	10a4      	asrs	r4, r4, #2
 8006de0:	2600      	movs	r6, #0
 8006de2:	42a6      	cmp	r6, r4
 8006de4:	d105      	bne.n	8006df2 <__libc_init_array+0x2e>
 8006de6:	bd70      	pop	{r4, r5, r6, pc}
 8006de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006dec:	4798      	blx	r3
 8006dee:	3601      	adds	r6, #1
 8006df0:	e7ee      	b.n	8006dd0 <__libc_init_array+0xc>
 8006df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006df6:	4798      	blx	r3
 8006df8:	3601      	adds	r6, #1
 8006dfa:	e7f2      	b.n	8006de2 <__libc_init_array+0x1e>
 8006dfc:	0800baf0 	.word	0x0800baf0
 8006e00:	0800baf0 	.word	0x0800baf0
 8006e04:	0800baf0 	.word	0x0800baf0
 8006e08:	0800baf4 	.word	0x0800baf4

08006e0c <malloc>:
 8006e0c:	4b02      	ldr	r3, [pc, #8]	; (8006e18 <malloc+0xc>)
 8006e0e:	4601      	mov	r1, r0
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f000 b885 	b.w	8006f20 <_malloc_r>
 8006e16:	bf00      	nop
 8006e18:	20000058 	.word	0x20000058

08006e1c <memcpy>:
 8006e1c:	440a      	add	r2, r1
 8006e1e:	4291      	cmp	r1, r2
 8006e20:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e24:	d100      	bne.n	8006e28 <memcpy+0xc>
 8006e26:	4770      	bx	lr
 8006e28:	b510      	push	{r4, lr}
 8006e2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e32:	4291      	cmp	r1, r2
 8006e34:	d1f9      	bne.n	8006e2a <memcpy+0xe>
 8006e36:	bd10      	pop	{r4, pc}

08006e38 <memset>:
 8006e38:	4402      	add	r2, r0
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	d100      	bne.n	8006e42 <memset+0xa>
 8006e40:	4770      	bx	lr
 8006e42:	f803 1b01 	strb.w	r1, [r3], #1
 8006e46:	e7f9      	b.n	8006e3c <memset+0x4>

08006e48 <_free_r>:
 8006e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e4a:	2900      	cmp	r1, #0
 8006e4c:	d044      	beq.n	8006ed8 <_free_r+0x90>
 8006e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e52:	9001      	str	r0, [sp, #4]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	f1a1 0404 	sub.w	r4, r1, #4
 8006e5a:	bfb8      	it	lt
 8006e5c:	18e4      	addlt	r4, r4, r3
 8006e5e:	f003 f863 	bl	8009f28 <__malloc_lock>
 8006e62:	4a1e      	ldr	r2, [pc, #120]	; (8006edc <_free_r+0x94>)
 8006e64:	9801      	ldr	r0, [sp, #4]
 8006e66:	6813      	ldr	r3, [r2, #0]
 8006e68:	b933      	cbnz	r3, 8006e78 <_free_r+0x30>
 8006e6a:	6063      	str	r3, [r4, #4]
 8006e6c:	6014      	str	r4, [r2, #0]
 8006e6e:	b003      	add	sp, #12
 8006e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e74:	f003 b85e 	b.w	8009f34 <__malloc_unlock>
 8006e78:	42a3      	cmp	r3, r4
 8006e7a:	d908      	bls.n	8006e8e <_free_r+0x46>
 8006e7c:	6825      	ldr	r5, [r4, #0]
 8006e7e:	1961      	adds	r1, r4, r5
 8006e80:	428b      	cmp	r3, r1
 8006e82:	bf01      	itttt	eq
 8006e84:	6819      	ldreq	r1, [r3, #0]
 8006e86:	685b      	ldreq	r3, [r3, #4]
 8006e88:	1949      	addeq	r1, r1, r5
 8006e8a:	6021      	streq	r1, [r4, #0]
 8006e8c:	e7ed      	b.n	8006e6a <_free_r+0x22>
 8006e8e:	461a      	mov	r2, r3
 8006e90:	685b      	ldr	r3, [r3, #4]
 8006e92:	b10b      	cbz	r3, 8006e98 <_free_r+0x50>
 8006e94:	42a3      	cmp	r3, r4
 8006e96:	d9fa      	bls.n	8006e8e <_free_r+0x46>
 8006e98:	6811      	ldr	r1, [r2, #0]
 8006e9a:	1855      	adds	r5, r2, r1
 8006e9c:	42a5      	cmp	r5, r4
 8006e9e:	d10b      	bne.n	8006eb8 <_free_r+0x70>
 8006ea0:	6824      	ldr	r4, [r4, #0]
 8006ea2:	4421      	add	r1, r4
 8006ea4:	1854      	adds	r4, r2, r1
 8006ea6:	42a3      	cmp	r3, r4
 8006ea8:	6011      	str	r1, [r2, #0]
 8006eaa:	d1e0      	bne.n	8006e6e <_free_r+0x26>
 8006eac:	681c      	ldr	r4, [r3, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	6053      	str	r3, [r2, #4]
 8006eb2:	4421      	add	r1, r4
 8006eb4:	6011      	str	r1, [r2, #0]
 8006eb6:	e7da      	b.n	8006e6e <_free_r+0x26>
 8006eb8:	d902      	bls.n	8006ec0 <_free_r+0x78>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	e7d6      	b.n	8006e6e <_free_r+0x26>
 8006ec0:	6825      	ldr	r5, [r4, #0]
 8006ec2:	1961      	adds	r1, r4, r5
 8006ec4:	428b      	cmp	r3, r1
 8006ec6:	bf04      	itt	eq
 8006ec8:	6819      	ldreq	r1, [r3, #0]
 8006eca:	685b      	ldreq	r3, [r3, #4]
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	bf04      	itt	eq
 8006ed0:	1949      	addeq	r1, r1, r5
 8006ed2:	6021      	streq	r1, [r4, #0]
 8006ed4:	6054      	str	r4, [r2, #4]
 8006ed6:	e7ca      	b.n	8006e6e <_free_r+0x26>
 8006ed8:	b003      	add	sp, #12
 8006eda:	bd30      	pop	{r4, r5, pc}
 8006edc:	200005d4 	.word	0x200005d4

08006ee0 <sbrk_aligned>:
 8006ee0:	b570      	push	{r4, r5, r6, lr}
 8006ee2:	4e0e      	ldr	r6, [pc, #56]	; (8006f1c <sbrk_aligned+0x3c>)
 8006ee4:	460c      	mov	r4, r1
 8006ee6:	6831      	ldr	r1, [r6, #0]
 8006ee8:	4605      	mov	r5, r0
 8006eea:	b911      	cbnz	r1, 8006ef2 <sbrk_aligned+0x12>
 8006eec:	f000 fd0e 	bl	800790c <_sbrk_r>
 8006ef0:	6030      	str	r0, [r6, #0]
 8006ef2:	4621      	mov	r1, r4
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f000 fd09 	bl	800790c <_sbrk_r>
 8006efa:	1c43      	adds	r3, r0, #1
 8006efc:	d00a      	beq.n	8006f14 <sbrk_aligned+0x34>
 8006efe:	1cc4      	adds	r4, r0, #3
 8006f00:	f024 0403 	bic.w	r4, r4, #3
 8006f04:	42a0      	cmp	r0, r4
 8006f06:	d007      	beq.n	8006f18 <sbrk_aligned+0x38>
 8006f08:	1a21      	subs	r1, r4, r0
 8006f0a:	4628      	mov	r0, r5
 8006f0c:	f000 fcfe 	bl	800790c <_sbrk_r>
 8006f10:	3001      	adds	r0, #1
 8006f12:	d101      	bne.n	8006f18 <sbrk_aligned+0x38>
 8006f14:	f04f 34ff 	mov.w	r4, #4294967295
 8006f18:	4620      	mov	r0, r4
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	200005d8 	.word	0x200005d8

08006f20 <_malloc_r>:
 8006f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f24:	1ccd      	adds	r5, r1, #3
 8006f26:	f025 0503 	bic.w	r5, r5, #3
 8006f2a:	3508      	adds	r5, #8
 8006f2c:	2d0c      	cmp	r5, #12
 8006f2e:	bf38      	it	cc
 8006f30:	250c      	movcc	r5, #12
 8006f32:	2d00      	cmp	r5, #0
 8006f34:	4607      	mov	r7, r0
 8006f36:	db01      	blt.n	8006f3c <_malloc_r+0x1c>
 8006f38:	42a9      	cmp	r1, r5
 8006f3a:	d905      	bls.n	8006f48 <_malloc_r+0x28>
 8006f3c:	230c      	movs	r3, #12
 8006f3e:	603b      	str	r3, [r7, #0]
 8006f40:	2600      	movs	r6, #0
 8006f42:	4630      	mov	r0, r6
 8006f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f48:	4e2e      	ldr	r6, [pc, #184]	; (8007004 <_malloc_r+0xe4>)
 8006f4a:	f002 ffed 	bl	8009f28 <__malloc_lock>
 8006f4e:	6833      	ldr	r3, [r6, #0]
 8006f50:	461c      	mov	r4, r3
 8006f52:	bb34      	cbnz	r4, 8006fa2 <_malloc_r+0x82>
 8006f54:	4629      	mov	r1, r5
 8006f56:	4638      	mov	r0, r7
 8006f58:	f7ff ffc2 	bl	8006ee0 <sbrk_aligned>
 8006f5c:	1c43      	adds	r3, r0, #1
 8006f5e:	4604      	mov	r4, r0
 8006f60:	d14d      	bne.n	8006ffe <_malloc_r+0xde>
 8006f62:	6834      	ldr	r4, [r6, #0]
 8006f64:	4626      	mov	r6, r4
 8006f66:	2e00      	cmp	r6, #0
 8006f68:	d140      	bne.n	8006fec <_malloc_r+0xcc>
 8006f6a:	6823      	ldr	r3, [r4, #0]
 8006f6c:	4631      	mov	r1, r6
 8006f6e:	4638      	mov	r0, r7
 8006f70:	eb04 0803 	add.w	r8, r4, r3
 8006f74:	f000 fcca 	bl	800790c <_sbrk_r>
 8006f78:	4580      	cmp	r8, r0
 8006f7a:	d13a      	bne.n	8006ff2 <_malloc_r+0xd2>
 8006f7c:	6821      	ldr	r1, [r4, #0]
 8006f7e:	3503      	adds	r5, #3
 8006f80:	1a6d      	subs	r5, r5, r1
 8006f82:	f025 0503 	bic.w	r5, r5, #3
 8006f86:	3508      	adds	r5, #8
 8006f88:	2d0c      	cmp	r5, #12
 8006f8a:	bf38      	it	cc
 8006f8c:	250c      	movcc	r5, #12
 8006f8e:	4629      	mov	r1, r5
 8006f90:	4638      	mov	r0, r7
 8006f92:	f7ff ffa5 	bl	8006ee0 <sbrk_aligned>
 8006f96:	3001      	adds	r0, #1
 8006f98:	d02b      	beq.n	8006ff2 <_malloc_r+0xd2>
 8006f9a:	6823      	ldr	r3, [r4, #0]
 8006f9c:	442b      	add	r3, r5
 8006f9e:	6023      	str	r3, [r4, #0]
 8006fa0:	e00e      	b.n	8006fc0 <_malloc_r+0xa0>
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	1b52      	subs	r2, r2, r5
 8006fa6:	d41e      	bmi.n	8006fe6 <_malloc_r+0xc6>
 8006fa8:	2a0b      	cmp	r2, #11
 8006faa:	d916      	bls.n	8006fda <_malloc_r+0xba>
 8006fac:	1961      	adds	r1, r4, r5
 8006fae:	42a3      	cmp	r3, r4
 8006fb0:	6025      	str	r5, [r4, #0]
 8006fb2:	bf18      	it	ne
 8006fb4:	6059      	strne	r1, [r3, #4]
 8006fb6:	6863      	ldr	r3, [r4, #4]
 8006fb8:	bf08      	it	eq
 8006fba:	6031      	streq	r1, [r6, #0]
 8006fbc:	5162      	str	r2, [r4, r5]
 8006fbe:	604b      	str	r3, [r1, #4]
 8006fc0:	4638      	mov	r0, r7
 8006fc2:	f104 060b 	add.w	r6, r4, #11
 8006fc6:	f002 ffb5 	bl	8009f34 <__malloc_unlock>
 8006fca:	f026 0607 	bic.w	r6, r6, #7
 8006fce:	1d23      	adds	r3, r4, #4
 8006fd0:	1af2      	subs	r2, r6, r3
 8006fd2:	d0b6      	beq.n	8006f42 <_malloc_r+0x22>
 8006fd4:	1b9b      	subs	r3, r3, r6
 8006fd6:	50a3      	str	r3, [r4, r2]
 8006fd8:	e7b3      	b.n	8006f42 <_malloc_r+0x22>
 8006fda:	6862      	ldr	r2, [r4, #4]
 8006fdc:	42a3      	cmp	r3, r4
 8006fde:	bf0c      	ite	eq
 8006fe0:	6032      	streq	r2, [r6, #0]
 8006fe2:	605a      	strne	r2, [r3, #4]
 8006fe4:	e7ec      	b.n	8006fc0 <_malloc_r+0xa0>
 8006fe6:	4623      	mov	r3, r4
 8006fe8:	6864      	ldr	r4, [r4, #4]
 8006fea:	e7b2      	b.n	8006f52 <_malloc_r+0x32>
 8006fec:	4634      	mov	r4, r6
 8006fee:	6876      	ldr	r6, [r6, #4]
 8006ff0:	e7b9      	b.n	8006f66 <_malloc_r+0x46>
 8006ff2:	230c      	movs	r3, #12
 8006ff4:	603b      	str	r3, [r7, #0]
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	f002 ff9c 	bl	8009f34 <__malloc_unlock>
 8006ffc:	e7a1      	b.n	8006f42 <_malloc_r+0x22>
 8006ffe:	6025      	str	r5, [r4, #0]
 8007000:	e7de      	b.n	8006fc0 <_malloc_r+0xa0>
 8007002:	bf00      	nop
 8007004:	200005d4 	.word	0x200005d4

08007008 <__cvt>:
 8007008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800700c:	ec55 4b10 	vmov	r4, r5, d0
 8007010:	2d00      	cmp	r5, #0
 8007012:	460e      	mov	r6, r1
 8007014:	4619      	mov	r1, r3
 8007016:	462b      	mov	r3, r5
 8007018:	bfbb      	ittet	lt
 800701a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800701e:	461d      	movlt	r5, r3
 8007020:	2300      	movge	r3, #0
 8007022:	232d      	movlt	r3, #45	; 0x2d
 8007024:	700b      	strb	r3, [r1, #0]
 8007026:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007028:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800702c:	4691      	mov	r9, r2
 800702e:	f023 0820 	bic.w	r8, r3, #32
 8007032:	bfbc      	itt	lt
 8007034:	4622      	movlt	r2, r4
 8007036:	4614      	movlt	r4, r2
 8007038:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800703c:	d005      	beq.n	800704a <__cvt+0x42>
 800703e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007042:	d100      	bne.n	8007046 <__cvt+0x3e>
 8007044:	3601      	adds	r6, #1
 8007046:	2102      	movs	r1, #2
 8007048:	e000      	b.n	800704c <__cvt+0x44>
 800704a:	2103      	movs	r1, #3
 800704c:	ab03      	add	r3, sp, #12
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	ab02      	add	r3, sp, #8
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	ec45 4b10 	vmov	d0, r4, r5
 8007058:	4653      	mov	r3, sl
 800705a:	4632      	mov	r2, r6
 800705c:	f001 fcd4 	bl	8008a08 <_dtoa_r>
 8007060:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007064:	4607      	mov	r7, r0
 8007066:	d102      	bne.n	800706e <__cvt+0x66>
 8007068:	f019 0f01 	tst.w	r9, #1
 800706c:	d022      	beq.n	80070b4 <__cvt+0xac>
 800706e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007072:	eb07 0906 	add.w	r9, r7, r6
 8007076:	d110      	bne.n	800709a <__cvt+0x92>
 8007078:	783b      	ldrb	r3, [r7, #0]
 800707a:	2b30      	cmp	r3, #48	; 0x30
 800707c:	d10a      	bne.n	8007094 <__cvt+0x8c>
 800707e:	2200      	movs	r2, #0
 8007080:	2300      	movs	r3, #0
 8007082:	4620      	mov	r0, r4
 8007084:	4629      	mov	r1, r5
 8007086:	f7f9 fd1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800708a:	b918      	cbnz	r0, 8007094 <__cvt+0x8c>
 800708c:	f1c6 0601 	rsb	r6, r6, #1
 8007090:	f8ca 6000 	str.w	r6, [sl]
 8007094:	f8da 3000 	ldr.w	r3, [sl]
 8007098:	4499      	add	r9, r3
 800709a:	2200      	movs	r2, #0
 800709c:	2300      	movs	r3, #0
 800709e:	4620      	mov	r0, r4
 80070a0:	4629      	mov	r1, r5
 80070a2:	f7f9 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80070a6:	b108      	cbz	r0, 80070ac <__cvt+0xa4>
 80070a8:	f8cd 900c 	str.w	r9, [sp, #12]
 80070ac:	2230      	movs	r2, #48	; 0x30
 80070ae:	9b03      	ldr	r3, [sp, #12]
 80070b0:	454b      	cmp	r3, r9
 80070b2:	d307      	bcc.n	80070c4 <__cvt+0xbc>
 80070b4:	9b03      	ldr	r3, [sp, #12]
 80070b6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80070b8:	1bdb      	subs	r3, r3, r7
 80070ba:	4638      	mov	r0, r7
 80070bc:	6013      	str	r3, [r2, #0]
 80070be:	b004      	add	sp, #16
 80070c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070c4:	1c59      	adds	r1, r3, #1
 80070c6:	9103      	str	r1, [sp, #12]
 80070c8:	701a      	strb	r2, [r3, #0]
 80070ca:	e7f0      	b.n	80070ae <__cvt+0xa6>

080070cc <__exponent>:
 80070cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80070ce:	4603      	mov	r3, r0
 80070d0:	2900      	cmp	r1, #0
 80070d2:	bfb8      	it	lt
 80070d4:	4249      	neglt	r1, r1
 80070d6:	f803 2b02 	strb.w	r2, [r3], #2
 80070da:	bfb4      	ite	lt
 80070dc:	222d      	movlt	r2, #45	; 0x2d
 80070de:	222b      	movge	r2, #43	; 0x2b
 80070e0:	2909      	cmp	r1, #9
 80070e2:	7042      	strb	r2, [r0, #1]
 80070e4:	dd2a      	ble.n	800713c <__exponent+0x70>
 80070e6:	f10d 0407 	add.w	r4, sp, #7
 80070ea:	46a4      	mov	ip, r4
 80070ec:	270a      	movs	r7, #10
 80070ee:	46a6      	mov	lr, r4
 80070f0:	460a      	mov	r2, r1
 80070f2:	fb91 f6f7 	sdiv	r6, r1, r7
 80070f6:	fb07 1516 	mls	r5, r7, r6, r1
 80070fa:	3530      	adds	r5, #48	; 0x30
 80070fc:	2a63      	cmp	r2, #99	; 0x63
 80070fe:	f104 34ff 	add.w	r4, r4, #4294967295
 8007102:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007106:	4631      	mov	r1, r6
 8007108:	dcf1      	bgt.n	80070ee <__exponent+0x22>
 800710a:	3130      	adds	r1, #48	; 0x30
 800710c:	f1ae 0502 	sub.w	r5, lr, #2
 8007110:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007114:	1c44      	adds	r4, r0, #1
 8007116:	4629      	mov	r1, r5
 8007118:	4561      	cmp	r1, ip
 800711a:	d30a      	bcc.n	8007132 <__exponent+0x66>
 800711c:	f10d 0209 	add.w	r2, sp, #9
 8007120:	eba2 020e 	sub.w	r2, r2, lr
 8007124:	4565      	cmp	r5, ip
 8007126:	bf88      	it	hi
 8007128:	2200      	movhi	r2, #0
 800712a:	4413      	add	r3, r2
 800712c:	1a18      	subs	r0, r3, r0
 800712e:	b003      	add	sp, #12
 8007130:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007132:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007136:	f804 2f01 	strb.w	r2, [r4, #1]!
 800713a:	e7ed      	b.n	8007118 <__exponent+0x4c>
 800713c:	2330      	movs	r3, #48	; 0x30
 800713e:	3130      	adds	r1, #48	; 0x30
 8007140:	7083      	strb	r3, [r0, #2]
 8007142:	70c1      	strb	r1, [r0, #3]
 8007144:	1d03      	adds	r3, r0, #4
 8007146:	e7f1      	b.n	800712c <__exponent+0x60>

08007148 <_printf_float>:
 8007148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800714c:	ed2d 8b02 	vpush	{d8}
 8007150:	b08d      	sub	sp, #52	; 0x34
 8007152:	460c      	mov	r4, r1
 8007154:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007158:	4616      	mov	r6, r2
 800715a:	461f      	mov	r7, r3
 800715c:	4605      	mov	r5, r0
 800715e:	f002 feb7 	bl	8009ed0 <_localeconv_r>
 8007162:	f8d0 a000 	ldr.w	sl, [r0]
 8007166:	4650      	mov	r0, sl
 8007168:	f7f9 f832 	bl	80001d0 <strlen>
 800716c:	2300      	movs	r3, #0
 800716e:	930a      	str	r3, [sp, #40]	; 0x28
 8007170:	6823      	ldr	r3, [r4, #0]
 8007172:	9305      	str	r3, [sp, #20]
 8007174:	f8d8 3000 	ldr.w	r3, [r8]
 8007178:	f894 b018 	ldrb.w	fp, [r4, #24]
 800717c:	3307      	adds	r3, #7
 800717e:	f023 0307 	bic.w	r3, r3, #7
 8007182:	f103 0208 	add.w	r2, r3, #8
 8007186:	f8c8 2000 	str.w	r2, [r8]
 800718a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800718e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007192:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007196:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800719a:	9307      	str	r3, [sp, #28]
 800719c:	f8cd 8018 	str.w	r8, [sp, #24]
 80071a0:	ee08 0a10 	vmov	s16, r0
 80071a4:	4b9f      	ldr	r3, [pc, #636]	; (8007424 <_printf_float+0x2dc>)
 80071a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071aa:	f04f 32ff 	mov.w	r2, #4294967295
 80071ae:	f7f9 fcbd 	bl	8000b2c <__aeabi_dcmpun>
 80071b2:	bb88      	cbnz	r0, 8007218 <_printf_float+0xd0>
 80071b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80071b8:	4b9a      	ldr	r3, [pc, #616]	; (8007424 <_printf_float+0x2dc>)
 80071ba:	f04f 32ff 	mov.w	r2, #4294967295
 80071be:	f7f9 fc97 	bl	8000af0 <__aeabi_dcmple>
 80071c2:	bb48      	cbnz	r0, 8007218 <_printf_float+0xd0>
 80071c4:	2200      	movs	r2, #0
 80071c6:	2300      	movs	r3, #0
 80071c8:	4640      	mov	r0, r8
 80071ca:	4649      	mov	r1, r9
 80071cc:	f7f9 fc86 	bl	8000adc <__aeabi_dcmplt>
 80071d0:	b110      	cbz	r0, 80071d8 <_printf_float+0x90>
 80071d2:	232d      	movs	r3, #45	; 0x2d
 80071d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071d8:	4b93      	ldr	r3, [pc, #588]	; (8007428 <_printf_float+0x2e0>)
 80071da:	4894      	ldr	r0, [pc, #592]	; (800742c <_printf_float+0x2e4>)
 80071dc:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80071e0:	bf94      	ite	ls
 80071e2:	4698      	movls	r8, r3
 80071e4:	4680      	movhi	r8, r0
 80071e6:	2303      	movs	r3, #3
 80071e8:	6123      	str	r3, [r4, #16]
 80071ea:	9b05      	ldr	r3, [sp, #20]
 80071ec:	f023 0204 	bic.w	r2, r3, #4
 80071f0:	6022      	str	r2, [r4, #0]
 80071f2:	f04f 0900 	mov.w	r9, #0
 80071f6:	9700      	str	r7, [sp, #0]
 80071f8:	4633      	mov	r3, r6
 80071fa:	aa0b      	add	r2, sp, #44	; 0x2c
 80071fc:	4621      	mov	r1, r4
 80071fe:	4628      	mov	r0, r5
 8007200:	f000 f9d8 	bl	80075b4 <_printf_common>
 8007204:	3001      	adds	r0, #1
 8007206:	f040 8090 	bne.w	800732a <_printf_float+0x1e2>
 800720a:	f04f 30ff 	mov.w	r0, #4294967295
 800720e:	b00d      	add	sp, #52	; 0x34
 8007210:	ecbd 8b02 	vpop	{d8}
 8007214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007218:	4642      	mov	r2, r8
 800721a:	464b      	mov	r3, r9
 800721c:	4640      	mov	r0, r8
 800721e:	4649      	mov	r1, r9
 8007220:	f7f9 fc84 	bl	8000b2c <__aeabi_dcmpun>
 8007224:	b140      	cbz	r0, 8007238 <_printf_float+0xf0>
 8007226:	464b      	mov	r3, r9
 8007228:	2b00      	cmp	r3, #0
 800722a:	bfbc      	itt	lt
 800722c:	232d      	movlt	r3, #45	; 0x2d
 800722e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007232:	487f      	ldr	r0, [pc, #508]	; (8007430 <_printf_float+0x2e8>)
 8007234:	4b7f      	ldr	r3, [pc, #508]	; (8007434 <_printf_float+0x2ec>)
 8007236:	e7d1      	b.n	80071dc <_printf_float+0x94>
 8007238:	6863      	ldr	r3, [r4, #4]
 800723a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800723e:	9206      	str	r2, [sp, #24]
 8007240:	1c5a      	adds	r2, r3, #1
 8007242:	d13f      	bne.n	80072c4 <_printf_float+0x17c>
 8007244:	2306      	movs	r3, #6
 8007246:	6063      	str	r3, [r4, #4]
 8007248:	9b05      	ldr	r3, [sp, #20]
 800724a:	6861      	ldr	r1, [r4, #4]
 800724c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007250:	2300      	movs	r3, #0
 8007252:	9303      	str	r3, [sp, #12]
 8007254:	ab0a      	add	r3, sp, #40	; 0x28
 8007256:	e9cd b301 	strd	fp, r3, [sp, #4]
 800725a:	ab09      	add	r3, sp, #36	; 0x24
 800725c:	ec49 8b10 	vmov	d0, r8, r9
 8007260:	9300      	str	r3, [sp, #0]
 8007262:	6022      	str	r2, [r4, #0]
 8007264:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007268:	4628      	mov	r0, r5
 800726a:	f7ff fecd 	bl	8007008 <__cvt>
 800726e:	9b06      	ldr	r3, [sp, #24]
 8007270:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007272:	2b47      	cmp	r3, #71	; 0x47
 8007274:	4680      	mov	r8, r0
 8007276:	d108      	bne.n	800728a <_printf_float+0x142>
 8007278:	1cc8      	adds	r0, r1, #3
 800727a:	db02      	blt.n	8007282 <_printf_float+0x13a>
 800727c:	6863      	ldr	r3, [r4, #4]
 800727e:	4299      	cmp	r1, r3
 8007280:	dd41      	ble.n	8007306 <_printf_float+0x1be>
 8007282:	f1ab 0b02 	sub.w	fp, fp, #2
 8007286:	fa5f fb8b 	uxtb.w	fp, fp
 800728a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800728e:	d820      	bhi.n	80072d2 <_printf_float+0x18a>
 8007290:	3901      	subs	r1, #1
 8007292:	465a      	mov	r2, fp
 8007294:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007298:	9109      	str	r1, [sp, #36]	; 0x24
 800729a:	f7ff ff17 	bl	80070cc <__exponent>
 800729e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80072a0:	1813      	adds	r3, r2, r0
 80072a2:	2a01      	cmp	r2, #1
 80072a4:	4681      	mov	r9, r0
 80072a6:	6123      	str	r3, [r4, #16]
 80072a8:	dc02      	bgt.n	80072b0 <_printf_float+0x168>
 80072aa:	6822      	ldr	r2, [r4, #0]
 80072ac:	07d2      	lsls	r2, r2, #31
 80072ae:	d501      	bpl.n	80072b4 <_printf_float+0x16c>
 80072b0:	3301      	adds	r3, #1
 80072b2:	6123      	str	r3, [r4, #16]
 80072b4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d09c      	beq.n	80071f6 <_printf_float+0xae>
 80072bc:	232d      	movs	r3, #45	; 0x2d
 80072be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80072c2:	e798      	b.n	80071f6 <_printf_float+0xae>
 80072c4:	9a06      	ldr	r2, [sp, #24]
 80072c6:	2a47      	cmp	r2, #71	; 0x47
 80072c8:	d1be      	bne.n	8007248 <_printf_float+0x100>
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d1bc      	bne.n	8007248 <_printf_float+0x100>
 80072ce:	2301      	movs	r3, #1
 80072d0:	e7b9      	b.n	8007246 <_printf_float+0xfe>
 80072d2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80072d6:	d118      	bne.n	800730a <_printf_float+0x1c2>
 80072d8:	2900      	cmp	r1, #0
 80072da:	6863      	ldr	r3, [r4, #4]
 80072dc:	dd0b      	ble.n	80072f6 <_printf_float+0x1ae>
 80072de:	6121      	str	r1, [r4, #16]
 80072e0:	b913      	cbnz	r3, 80072e8 <_printf_float+0x1a0>
 80072e2:	6822      	ldr	r2, [r4, #0]
 80072e4:	07d0      	lsls	r0, r2, #31
 80072e6:	d502      	bpl.n	80072ee <_printf_float+0x1a6>
 80072e8:	3301      	adds	r3, #1
 80072ea:	440b      	add	r3, r1
 80072ec:	6123      	str	r3, [r4, #16]
 80072ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80072f0:	f04f 0900 	mov.w	r9, #0
 80072f4:	e7de      	b.n	80072b4 <_printf_float+0x16c>
 80072f6:	b913      	cbnz	r3, 80072fe <_printf_float+0x1b6>
 80072f8:	6822      	ldr	r2, [r4, #0]
 80072fa:	07d2      	lsls	r2, r2, #31
 80072fc:	d501      	bpl.n	8007302 <_printf_float+0x1ba>
 80072fe:	3302      	adds	r3, #2
 8007300:	e7f4      	b.n	80072ec <_printf_float+0x1a4>
 8007302:	2301      	movs	r3, #1
 8007304:	e7f2      	b.n	80072ec <_printf_float+0x1a4>
 8007306:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800730a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800730c:	4299      	cmp	r1, r3
 800730e:	db05      	blt.n	800731c <_printf_float+0x1d4>
 8007310:	6823      	ldr	r3, [r4, #0]
 8007312:	6121      	str	r1, [r4, #16]
 8007314:	07d8      	lsls	r0, r3, #31
 8007316:	d5ea      	bpl.n	80072ee <_printf_float+0x1a6>
 8007318:	1c4b      	adds	r3, r1, #1
 800731a:	e7e7      	b.n	80072ec <_printf_float+0x1a4>
 800731c:	2900      	cmp	r1, #0
 800731e:	bfd4      	ite	le
 8007320:	f1c1 0202 	rsble	r2, r1, #2
 8007324:	2201      	movgt	r2, #1
 8007326:	4413      	add	r3, r2
 8007328:	e7e0      	b.n	80072ec <_printf_float+0x1a4>
 800732a:	6823      	ldr	r3, [r4, #0]
 800732c:	055a      	lsls	r2, r3, #21
 800732e:	d407      	bmi.n	8007340 <_printf_float+0x1f8>
 8007330:	6923      	ldr	r3, [r4, #16]
 8007332:	4642      	mov	r2, r8
 8007334:	4631      	mov	r1, r6
 8007336:	4628      	mov	r0, r5
 8007338:	47b8      	blx	r7
 800733a:	3001      	adds	r0, #1
 800733c:	d12c      	bne.n	8007398 <_printf_float+0x250>
 800733e:	e764      	b.n	800720a <_printf_float+0xc2>
 8007340:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007344:	f240 80e0 	bls.w	8007508 <_printf_float+0x3c0>
 8007348:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800734c:	2200      	movs	r2, #0
 800734e:	2300      	movs	r3, #0
 8007350:	f7f9 fbba 	bl	8000ac8 <__aeabi_dcmpeq>
 8007354:	2800      	cmp	r0, #0
 8007356:	d034      	beq.n	80073c2 <_printf_float+0x27a>
 8007358:	4a37      	ldr	r2, [pc, #220]	; (8007438 <_printf_float+0x2f0>)
 800735a:	2301      	movs	r3, #1
 800735c:	4631      	mov	r1, r6
 800735e:	4628      	mov	r0, r5
 8007360:	47b8      	blx	r7
 8007362:	3001      	adds	r0, #1
 8007364:	f43f af51 	beq.w	800720a <_printf_float+0xc2>
 8007368:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800736c:	429a      	cmp	r2, r3
 800736e:	db02      	blt.n	8007376 <_printf_float+0x22e>
 8007370:	6823      	ldr	r3, [r4, #0]
 8007372:	07d8      	lsls	r0, r3, #31
 8007374:	d510      	bpl.n	8007398 <_printf_float+0x250>
 8007376:	ee18 3a10 	vmov	r3, s16
 800737a:	4652      	mov	r2, sl
 800737c:	4631      	mov	r1, r6
 800737e:	4628      	mov	r0, r5
 8007380:	47b8      	blx	r7
 8007382:	3001      	adds	r0, #1
 8007384:	f43f af41 	beq.w	800720a <_printf_float+0xc2>
 8007388:	f04f 0800 	mov.w	r8, #0
 800738c:	f104 091a 	add.w	r9, r4, #26
 8007390:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007392:	3b01      	subs	r3, #1
 8007394:	4543      	cmp	r3, r8
 8007396:	dc09      	bgt.n	80073ac <_printf_float+0x264>
 8007398:	6823      	ldr	r3, [r4, #0]
 800739a:	079b      	lsls	r3, r3, #30
 800739c:	f100 8105 	bmi.w	80075aa <_printf_float+0x462>
 80073a0:	68e0      	ldr	r0, [r4, #12]
 80073a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073a4:	4298      	cmp	r0, r3
 80073a6:	bfb8      	it	lt
 80073a8:	4618      	movlt	r0, r3
 80073aa:	e730      	b.n	800720e <_printf_float+0xc6>
 80073ac:	2301      	movs	r3, #1
 80073ae:	464a      	mov	r2, r9
 80073b0:	4631      	mov	r1, r6
 80073b2:	4628      	mov	r0, r5
 80073b4:	47b8      	blx	r7
 80073b6:	3001      	adds	r0, #1
 80073b8:	f43f af27 	beq.w	800720a <_printf_float+0xc2>
 80073bc:	f108 0801 	add.w	r8, r8, #1
 80073c0:	e7e6      	b.n	8007390 <_printf_float+0x248>
 80073c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	dc39      	bgt.n	800743c <_printf_float+0x2f4>
 80073c8:	4a1b      	ldr	r2, [pc, #108]	; (8007438 <_printf_float+0x2f0>)
 80073ca:	2301      	movs	r3, #1
 80073cc:	4631      	mov	r1, r6
 80073ce:	4628      	mov	r0, r5
 80073d0:	47b8      	blx	r7
 80073d2:	3001      	adds	r0, #1
 80073d4:	f43f af19 	beq.w	800720a <_printf_float+0xc2>
 80073d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073dc:	4313      	orrs	r3, r2
 80073de:	d102      	bne.n	80073e6 <_printf_float+0x29e>
 80073e0:	6823      	ldr	r3, [r4, #0]
 80073e2:	07d9      	lsls	r1, r3, #31
 80073e4:	d5d8      	bpl.n	8007398 <_printf_float+0x250>
 80073e6:	ee18 3a10 	vmov	r3, s16
 80073ea:	4652      	mov	r2, sl
 80073ec:	4631      	mov	r1, r6
 80073ee:	4628      	mov	r0, r5
 80073f0:	47b8      	blx	r7
 80073f2:	3001      	adds	r0, #1
 80073f4:	f43f af09 	beq.w	800720a <_printf_float+0xc2>
 80073f8:	f04f 0900 	mov.w	r9, #0
 80073fc:	f104 0a1a 	add.w	sl, r4, #26
 8007400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007402:	425b      	negs	r3, r3
 8007404:	454b      	cmp	r3, r9
 8007406:	dc01      	bgt.n	800740c <_printf_float+0x2c4>
 8007408:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800740a:	e792      	b.n	8007332 <_printf_float+0x1ea>
 800740c:	2301      	movs	r3, #1
 800740e:	4652      	mov	r2, sl
 8007410:	4631      	mov	r1, r6
 8007412:	4628      	mov	r0, r5
 8007414:	47b8      	blx	r7
 8007416:	3001      	adds	r0, #1
 8007418:	f43f aef7 	beq.w	800720a <_printf_float+0xc2>
 800741c:	f109 0901 	add.w	r9, r9, #1
 8007420:	e7ee      	b.n	8007400 <_printf_float+0x2b8>
 8007422:	bf00      	nop
 8007424:	7fefffff 	.word	0x7fefffff
 8007428:	0800b6e8 	.word	0x0800b6e8
 800742c:	0800b6ec 	.word	0x0800b6ec
 8007430:	0800b6f4 	.word	0x0800b6f4
 8007434:	0800b6f0 	.word	0x0800b6f0
 8007438:	0800b6f8 	.word	0x0800b6f8
 800743c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800743e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007440:	429a      	cmp	r2, r3
 8007442:	bfa8      	it	ge
 8007444:	461a      	movge	r2, r3
 8007446:	2a00      	cmp	r2, #0
 8007448:	4691      	mov	r9, r2
 800744a:	dc37      	bgt.n	80074bc <_printf_float+0x374>
 800744c:	f04f 0b00 	mov.w	fp, #0
 8007450:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007454:	f104 021a 	add.w	r2, r4, #26
 8007458:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800745a:	9305      	str	r3, [sp, #20]
 800745c:	eba3 0309 	sub.w	r3, r3, r9
 8007460:	455b      	cmp	r3, fp
 8007462:	dc33      	bgt.n	80074cc <_printf_float+0x384>
 8007464:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007468:	429a      	cmp	r2, r3
 800746a:	db3b      	blt.n	80074e4 <_printf_float+0x39c>
 800746c:	6823      	ldr	r3, [r4, #0]
 800746e:	07da      	lsls	r2, r3, #31
 8007470:	d438      	bmi.n	80074e4 <_printf_float+0x39c>
 8007472:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007474:	9a05      	ldr	r2, [sp, #20]
 8007476:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007478:	1a9a      	subs	r2, r3, r2
 800747a:	eba3 0901 	sub.w	r9, r3, r1
 800747e:	4591      	cmp	r9, r2
 8007480:	bfa8      	it	ge
 8007482:	4691      	movge	r9, r2
 8007484:	f1b9 0f00 	cmp.w	r9, #0
 8007488:	dc35      	bgt.n	80074f6 <_printf_float+0x3ae>
 800748a:	f04f 0800 	mov.w	r8, #0
 800748e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007492:	f104 0a1a 	add.w	sl, r4, #26
 8007496:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800749a:	1a9b      	subs	r3, r3, r2
 800749c:	eba3 0309 	sub.w	r3, r3, r9
 80074a0:	4543      	cmp	r3, r8
 80074a2:	f77f af79 	ble.w	8007398 <_printf_float+0x250>
 80074a6:	2301      	movs	r3, #1
 80074a8:	4652      	mov	r2, sl
 80074aa:	4631      	mov	r1, r6
 80074ac:	4628      	mov	r0, r5
 80074ae:	47b8      	blx	r7
 80074b0:	3001      	adds	r0, #1
 80074b2:	f43f aeaa 	beq.w	800720a <_printf_float+0xc2>
 80074b6:	f108 0801 	add.w	r8, r8, #1
 80074ba:	e7ec      	b.n	8007496 <_printf_float+0x34e>
 80074bc:	4613      	mov	r3, r2
 80074be:	4631      	mov	r1, r6
 80074c0:	4642      	mov	r2, r8
 80074c2:	4628      	mov	r0, r5
 80074c4:	47b8      	blx	r7
 80074c6:	3001      	adds	r0, #1
 80074c8:	d1c0      	bne.n	800744c <_printf_float+0x304>
 80074ca:	e69e      	b.n	800720a <_printf_float+0xc2>
 80074cc:	2301      	movs	r3, #1
 80074ce:	4631      	mov	r1, r6
 80074d0:	4628      	mov	r0, r5
 80074d2:	9205      	str	r2, [sp, #20]
 80074d4:	47b8      	blx	r7
 80074d6:	3001      	adds	r0, #1
 80074d8:	f43f ae97 	beq.w	800720a <_printf_float+0xc2>
 80074dc:	9a05      	ldr	r2, [sp, #20]
 80074de:	f10b 0b01 	add.w	fp, fp, #1
 80074e2:	e7b9      	b.n	8007458 <_printf_float+0x310>
 80074e4:	ee18 3a10 	vmov	r3, s16
 80074e8:	4652      	mov	r2, sl
 80074ea:	4631      	mov	r1, r6
 80074ec:	4628      	mov	r0, r5
 80074ee:	47b8      	blx	r7
 80074f0:	3001      	adds	r0, #1
 80074f2:	d1be      	bne.n	8007472 <_printf_float+0x32a>
 80074f4:	e689      	b.n	800720a <_printf_float+0xc2>
 80074f6:	9a05      	ldr	r2, [sp, #20]
 80074f8:	464b      	mov	r3, r9
 80074fa:	4442      	add	r2, r8
 80074fc:	4631      	mov	r1, r6
 80074fe:	4628      	mov	r0, r5
 8007500:	47b8      	blx	r7
 8007502:	3001      	adds	r0, #1
 8007504:	d1c1      	bne.n	800748a <_printf_float+0x342>
 8007506:	e680      	b.n	800720a <_printf_float+0xc2>
 8007508:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800750a:	2a01      	cmp	r2, #1
 800750c:	dc01      	bgt.n	8007512 <_printf_float+0x3ca>
 800750e:	07db      	lsls	r3, r3, #31
 8007510:	d538      	bpl.n	8007584 <_printf_float+0x43c>
 8007512:	2301      	movs	r3, #1
 8007514:	4642      	mov	r2, r8
 8007516:	4631      	mov	r1, r6
 8007518:	4628      	mov	r0, r5
 800751a:	47b8      	blx	r7
 800751c:	3001      	adds	r0, #1
 800751e:	f43f ae74 	beq.w	800720a <_printf_float+0xc2>
 8007522:	ee18 3a10 	vmov	r3, s16
 8007526:	4652      	mov	r2, sl
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f ae6b 	beq.w	800720a <_printf_float+0xc2>
 8007534:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007538:	2200      	movs	r2, #0
 800753a:	2300      	movs	r3, #0
 800753c:	f7f9 fac4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007540:	b9d8      	cbnz	r0, 800757a <_printf_float+0x432>
 8007542:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007544:	f108 0201 	add.w	r2, r8, #1
 8007548:	3b01      	subs	r3, #1
 800754a:	4631      	mov	r1, r6
 800754c:	4628      	mov	r0, r5
 800754e:	47b8      	blx	r7
 8007550:	3001      	adds	r0, #1
 8007552:	d10e      	bne.n	8007572 <_printf_float+0x42a>
 8007554:	e659      	b.n	800720a <_printf_float+0xc2>
 8007556:	2301      	movs	r3, #1
 8007558:	4652      	mov	r2, sl
 800755a:	4631      	mov	r1, r6
 800755c:	4628      	mov	r0, r5
 800755e:	47b8      	blx	r7
 8007560:	3001      	adds	r0, #1
 8007562:	f43f ae52 	beq.w	800720a <_printf_float+0xc2>
 8007566:	f108 0801 	add.w	r8, r8, #1
 800756a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800756c:	3b01      	subs	r3, #1
 800756e:	4543      	cmp	r3, r8
 8007570:	dcf1      	bgt.n	8007556 <_printf_float+0x40e>
 8007572:	464b      	mov	r3, r9
 8007574:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007578:	e6dc      	b.n	8007334 <_printf_float+0x1ec>
 800757a:	f04f 0800 	mov.w	r8, #0
 800757e:	f104 0a1a 	add.w	sl, r4, #26
 8007582:	e7f2      	b.n	800756a <_printf_float+0x422>
 8007584:	2301      	movs	r3, #1
 8007586:	4642      	mov	r2, r8
 8007588:	e7df      	b.n	800754a <_printf_float+0x402>
 800758a:	2301      	movs	r3, #1
 800758c:	464a      	mov	r2, r9
 800758e:	4631      	mov	r1, r6
 8007590:	4628      	mov	r0, r5
 8007592:	47b8      	blx	r7
 8007594:	3001      	adds	r0, #1
 8007596:	f43f ae38 	beq.w	800720a <_printf_float+0xc2>
 800759a:	f108 0801 	add.w	r8, r8, #1
 800759e:	68e3      	ldr	r3, [r4, #12]
 80075a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80075a2:	1a5b      	subs	r3, r3, r1
 80075a4:	4543      	cmp	r3, r8
 80075a6:	dcf0      	bgt.n	800758a <_printf_float+0x442>
 80075a8:	e6fa      	b.n	80073a0 <_printf_float+0x258>
 80075aa:	f04f 0800 	mov.w	r8, #0
 80075ae:	f104 0919 	add.w	r9, r4, #25
 80075b2:	e7f4      	b.n	800759e <_printf_float+0x456>

080075b4 <_printf_common>:
 80075b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b8:	4616      	mov	r6, r2
 80075ba:	4699      	mov	r9, r3
 80075bc:	688a      	ldr	r2, [r1, #8]
 80075be:	690b      	ldr	r3, [r1, #16]
 80075c0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80075c4:	4293      	cmp	r3, r2
 80075c6:	bfb8      	it	lt
 80075c8:	4613      	movlt	r3, r2
 80075ca:	6033      	str	r3, [r6, #0]
 80075cc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80075d0:	4607      	mov	r7, r0
 80075d2:	460c      	mov	r4, r1
 80075d4:	b10a      	cbz	r2, 80075da <_printf_common+0x26>
 80075d6:	3301      	adds	r3, #1
 80075d8:	6033      	str	r3, [r6, #0]
 80075da:	6823      	ldr	r3, [r4, #0]
 80075dc:	0699      	lsls	r1, r3, #26
 80075de:	bf42      	ittt	mi
 80075e0:	6833      	ldrmi	r3, [r6, #0]
 80075e2:	3302      	addmi	r3, #2
 80075e4:	6033      	strmi	r3, [r6, #0]
 80075e6:	6825      	ldr	r5, [r4, #0]
 80075e8:	f015 0506 	ands.w	r5, r5, #6
 80075ec:	d106      	bne.n	80075fc <_printf_common+0x48>
 80075ee:	f104 0a19 	add.w	sl, r4, #25
 80075f2:	68e3      	ldr	r3, [r4, #12]
 80075f4:	6832      	ldr	r2, [r6, #0]
 80075f6:	1a9b      	subs	r3, r3, r2
 80075f8:	42ab      	cmp	r3, r5
 80075fa:	dc26      	bgt.n	800764a <_printf_common+0x96>
 80075fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007600:	1e13      	subs	r3, r2, #0
 8007602:	6822      	ldr	r2, [r4, #0]
 8007604:	bf18      	it	ne
 8007606:	2301      	movne	r3, #1
 8007608:	0692      	lsls	r2, r2, #26
 800760a:	d42b      	bmi.n	8007664 <_printf_common+0xb0>
 800760c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007610:	4649      	mov	r1, r9
 8007612:	4638      	mov	r0, r7
 8007614:	47c0      	blx	r8
 8007616:	3001      	adds	r0, #1
 8007618:	d01e      	beq.n	8007658 <_printf_common+0xa4>
 800761a:	6823      	ldr	r3, [r4, #0]
 800761c:	68e5      	ldr	r5, [r4, #12]
 800761e:	6832      	ldr	r2, [r6, #0]
 8007620:	f003 0306 	and.w	r3, r3, #6
 8007624:	2b04      	cmp	r3, #4
 8007626:	bf08      	it	eq
 8007628:	1aad      	subeq	r5, r5, r2
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	6922      	ldr	r2, [r4, #16]
 800762e:	bf0c      	ite	eq
 8007630:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007634:	2500      	movne	r5, #0
 8007636:	4293      	cmp	r3, r2
 8007638:	bfc4      	itt	gt
 800763a:	1a9b      	subgt	r3, r3, r2
 800763c:	18ed      	addgt	r5, r5, r3
 800763e:	2600      	movs	r6, #0
 8007640:	341a      	adds	r4, #26
 8007642:	42b5      	cmp	r5, r6
 8007644:	d11a      	bne.n	800767c <_printf_common+0xc8>
 8007646:	2000      	movs	r0, #0
 8007648:	e008      	b.n	800765c <_printf_common+0xa8>
 800764a:	2301      	movs	r3, #1
 800764c:	4652      	mov	r2, sl
 800764e:	4649      	mov	r1, r9
 8007650:	4638      	mov	r0, r7
 8007652:	47c0      	blx	r8
 8007654:	3001      	adds	r0, #1
 8007656:	d103      	bne.n	8007660 <_printf_common+0xac>
 8007658:	f04f 30ff 	mov.w	r0, #4294967295
 800765c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007660:	3501      	adds	r5, #1
 8007662:	e7c6      	b.n	80075f2 <_printf_common+0x3e>
 8007664:	18e1      	adds	r1, r4, r3
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	2030      	movs	r0, #48	; 0x30
 800766a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800766e:	4422      	add	r2, r4
 8007670:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007674:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007678:	3302      	adds	r3, #2
 800767a:	e7c7      	b.n	800760c <_printf_common+0x58>
 800767c:	2301      	movs	r3, #1
 800767e:	4622      	mov	r2, r4
 8007680:	4649      	mov	r1, r9
 8007682:	4638      	mov	r0, r7
 8007684:	47c0      	blx	r8
 8007686:	3001      	adds	r0, #1
 8007688:	d0e6      	beq.n	8007658 <_printf_common+0xa4>
 800768a:	3601      	adds	r6, #1
 800768c:	e7d9      	b.n	8007642 <_printf_common+0x8e>
	...

08007690 <_printf_i>:
 8007690:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007694:	7e0f      	ldrb	r7, [r1, #24]
 8007696:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007698:	2f78      	cmp	r7, #120	; 0x78
 800769a:	4691      	mov	r9, r2
 800769c:	4680      	mov	r8, r0
 800769e:	460c      	mov	r4, r1
 80076a0:	469a      	mov	sl, r3
 80076a2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80076a6:	d807      	bhi.n	80076b8 <_printf_i+0x28>
 80076a8:	2f62      	cmp	r7, #98	; 0x62
 80076aa:	d80a      	bhi.n	80076c2 <_printf_i+0x32>
 80076ac:	2f00      	cmp	r7, #0
 80076ae:	f000 80d8 	beq.w	8007862 <_printf_i+0x1d2>
 80076b2:	2f58      	cmp	r7, #88	; 0x58
 80076b4:	f000 80a3 	beq.w	80077fe <_printf_i+0x16e>
 80076b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80076bc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80076c0:	e03a      	b.n	8007738 <_printf_i+0xa8>
 80076c2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80076c6:	2b15      	cmp	r3, #21
 80076c8:	d8f6      	bhi.n	80076b8 <_printf_i+0x28>
 80076ca:	a101      	add	r1, pc, #4	; (adr r1, 80076d0 <_printf_i+0x40>)
 80076cc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80076d0:	08007729 	.word	0x08007729
 80076d4:	0800773d 	.word	0x0800773d
 80076d8:	080076b9 	.word	0x080076b9
 80076dc:	080076b9 	.word	0x080076b9
 80076e0:	080076b9 	.word	0x080076b9
 80076e4:	080076b9 	.word	0x080076b9
 80076e8:	0800773d 	.word	0x0800773d
 80076ec:	080076b9 	.word	0x080076b9
 80076f0:	080076b9 	.word	0x080076b9
 80076f4:	080076b9 	.word	0x080076b9
 80076f8:	080076b9 	.word	0x080076b9
 80076fc:	08007849 	.word	0x08007849
 8007700:	0800776d 	.word	0x0800776d
 8007704:	0800782b 	.word	0x0800782b
 8007708:	080076b9 	.word	0x080076b9
 800770c:	080076b9 	.word	0x080076b9
 8007710:	0800786b 	.word	0x0800786b
 8007714:	080076b9 	.word	0x080076b9
 8007718:	0800776d 	.word	0x0800776d
 800771c:	080076b9 	.word	0x080076b9
 8007720:	080076b9 	.word	0x080076b9
 8007724:	08007833 	.word	0x08007833
 8007728:	682b      	ldr	r3, [r5, #0]
 800772a:	1d1a      	adds	r2, r3, #4
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	602a      	str	r2, [r5, #0]
 8007730:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007734:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007738:	2301      	movs	r3, #1
 800773a:	e0a3      	b.n	8007884 <_printf_i+0x1f4>
 800773c:	6820      	ldr	r0, [r4, #0]
 800773e:	6829      	ldr	r1, [r5, #0]
 8007740:	0606      	lsls	r6, r0, #24
 8007742:	f101 0304 	add.w	r3, r1, #4
 8007746:	d50a      	bpl.n	800775e <_printf_i+0xce>
 8007748:	680e      	ldr	r6, [r1, #0]
 800774a:	602b      	str	r3, [r5, #0]
 800774c:	2e00      	cmp	r6, #0
 800774e:	da03      	bge.n	8007758 <_printf_i+0xc8>
 8007750:	232d      	movs	r3, #45	; 0x2d
 8007752:	4276      	negs	r6, r6
 8007754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007758:	485e      	ldr	r0, [pc, #376]	; (80078d4 <_printf_i+0x244>)
 800775a:	230a      	movs	r3, #10
 800775c:	e019      	b.n	8007792 <_printf_i+0x102>
 800775e:	680e      	ldr	r6, [r1, #0]
 8007760:	602b      	str	r3, [r5, #0]
 8007762:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007766:	bf18      	it	ne
 8007768:	b236      	sxthne	r6, r6
 800776a:	e7ef      	b.n	800774c <_printf_i+0xbc>
 800776c:	682b      	ldr	r3, [r5, #0]
 800776e:	6820      	ldr	r0, [r4, #0]
 8007770:	1d19      	adds	r1, r3, #4
 8007772:	6029      	str	r1, [r5, #0]
 8007774:	0601      	lsls	r1, r0, #24
 8007776:	d501      	bpl.n	800777c <_printf_i+0xec>
 8007778:	681e      	ldr	r6, [r3, #0]
 800777a:	e002      	b.n	8007782 <_printf_i+0xf2>
 800777c:	0646      	lsls	r6, r0, #25
 800777e:	d5fb      	bpl.n	8007778 <_printf_i+0xe8>
 8007780:	881e      	ldrh	r6, [r3, #0]
 8007782:	4854      	ldr	r0, [pc, #336]	; (80078d4 <_printf_i+0x244>)
 8007784:	2f6f      	cmp	r7, #111	; 0x6f
 8007786:	bf0c      	ite	eq
 8007788:	2308      	moveq	r3, #8
 800778a:	230a      	movne	r3, #10
 800778c:	2100      	movs	r1, #0
 800778e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007792:	6865      	ldr	r5, [r4, #4]
 8007794:	60a5      	str	r5, [r4, #8]
 8007796:	2d00      	cmp	r5, #0
 8007798:	bfa2      	ittt	ge
 800779a:	6821      	ldrge	r1, [r4, #0]
 800779c:	f021 0104 	bicge.w	r1, r1, #4
 80077a0:	6021      	strge	r1, [r4, #0]
 80077a2:	b90e      	cbnz	r6, 80077a8 <_printf_i+0x118>
 80077a4:	2d00      	cmp	r5, #0
 80077a6:	d04d      	beq.n	8007844 <_printf_i+0x1b4>
 80077a8:	4615      	mov	r5, r2
 80077aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80077ae:	fb03 6711 	mls	r7, r3, r1, r6
 80077b2:	5dc7      	ldrb	r7, [r0, r7]
 80077b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80077b8:	4637      	mov	r7, r6
 80077ba:	42bb      	cmp	r3, r7
 80077bc:	460e      	mov	r6, r1
 80077be:	d9f4      	bls.n	80077aa <_printf_i+0x11a>
 80077c0:	2b08      	cmp	r3, #8
 80077c2:	d10b      	bne.n	80077dc <_printf_i+0x14c>
 80077c4:	6823      	ldr	r3, [r4, #0]
 80077c6:	07de      	lsls	r6, r3, #31
 80077c8:	d508      	bpl.n	80077dc <_printf_i+0x14c>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	6861      	ldr	r1, [r4, #4]
 80077ce:	4299      	cmp	r1, r3
 80077d0:	bfde      	ittt	le
 80077d2:	2330      	movle	r3, #48	; 0x30
 80077d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80077d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80077dc:	1b52      	subs	r2, r2, r5
 80077de:	6122      	str	r2, [r4, #16]
 80077e0:	f8cd a000 	str.w	sl, [sp]
 80077e4:	464b      	mov	r3, r9
 80077e6:	aa03      	add	r2, sp, #12
 80077e8:	4621      	mov	r1, r4
 80077ea:	4640      	mov	r0, r8
 80077ec:	f7ff fee2 	bl	80075b4 <_printf_common>
 80077f0:	3001      	adds	r0, #1
 80077f2:	d14c      	bne.n	800788e <_printf_i+0x1fe>
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	b004      	add	sp, #16
 80077fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077fe:	4835      	ldr	r0, [pc, #212]	; (80078d4 <_printf_i+0x244>)
 8007800:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007804:	6829      	ldr	r1, [r5, #0]
 8007806:	6823      	ldr	r3, [r4, #0]
 8007808:	f851 6b04 	ldr.w	r6, [r1], #4
 800780c:	6029      	str	r1, [r5, #0]
 800780e:	061d      	lsls	r5, r3, #24
 8007810:	d514      	bpl.n	800783c <_printf_i+0x1ac>
 8007812:	07df      	lsls	r7, r3, #31
 8007814:	bf44      	itt	mi
 8007816:	f043 0320 	orrmi.w	r3, r3, #32
 800781a:	6023      	strmi	r3, [r4, #0]
 800781c:	b91e      	cbnz	r6, 8007826 <_printf_i+0x196>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	f023 0320 	bic.w	r3, r3, #32
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	2310      	movs	r3, #16
 8007828:	e7b0      	b.n	800778c <_printf_i+0xfc>
 800782a:	6823      	ldr	r3, [r4, #0]
 800782c:	f043 0320 	orr.w	r3, r3, #32
 8007830:	6023      	str	r3, [r4, #0]
 8007832:	2378      	movs	r3, #120	; 0x78
 8007834:	4828      	ldr	r0, [pc, #160]	; (80078d8 <_printf_i+0x248>)
 8007836:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800783a:	e7e3      	b.n	8007804 <_printf_i+0x174>
 800783c:	0659      	lsls	r1, r3, #25
 800783e:	bf48      	it	mi
 8007840:	b2b6      	uxthmi	r6, r6
 8007842:	e7e6      	b.n	8007812 <_printf_i+0x182>
 8007844:	4615      	mov	r5, r2
 8007846:	e7bb      	b.n	80077c0 <_printf_i+0x130>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	6826      	ldr	r6, [r4, #0]
 800784c:	6961      	ldr	r1, [r4, #20]
 800784e:	1d18      	adds	r0, r3, #4
 8007850:	6028      	str	r0, [r5, #0]
 8007852:	0635      	lsls	r5, r6, #24
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	d501      	bpl.n	800785c <_printf_i+0x1cc>
 8007858:	6019      	str	r1, [r3, #0]
 800785a:	e002      	b.n	8007862 <_printf_i+0x1d2>
 800785c:	0670      	lsls	r0, r6, #25
 800785e:	d5fb      	bpl.n	8007858 <_printf_i+0x1c8>
 8007860:	8019      	strh	r1, [r3, #0]
 8007862:	2300      	movs	r3, #0
 8007864:	6123      	str	r3, [r4, #16]
 8007866:	4615      	mov	r5, r2
 8007868:	e7ba      	b.n	80077e0 <_printf_i+0x150>
 800786a:	682b      	ldr	r3, [r5, #0]
 800786c:	1d1a      	adds	r2, r3, #4
 800786e:	602a      	str	r2, [r5, #0]
 8007870:	681d      	ldr	r5, [r3, #0]
 8007872:	6862      	ldr	r2, [r4, #4]
 8007874:	2100      	movs	r1, #0
 8007876:	4628      	mov	r0, r5
 8007878:	f7f8 fcb2 	bl	80001e0 <memchr>
 800787c:	b108      	cbz	r0, 8007882 <_printf_i+0x1f2>
 800787e:	1b40      	subs	r0, r0, r5
 8007880:	6060      	str	r0, [r4, #4]
 8007882:	6863      	ldr	r3, [r4, #4]
 8007884:	6123      	str	r3, [r4, #16]
 8007886:	2300      	movs	r3, #0
 8007888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800788c:	e7a8      	b.n	80077e0 <_printf_i+0x150>
 800788e:	6923      	ldr	r3, [r4, #16]
 8007890:	462a      	mov	r2, r5
 8007892:	4649      	mov	r1, r9
 8007894:	4640      	mov	r0, r8
 8007896:	47d0      	blx	sl
 8007898:	3001      	adds	r0, #1
 800789a:	d0ab      	beq.n	80077f4 <_printf_i+0x164>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	079b      	lsls	r3, r3, #30
 80078a0:	d413      	bmi.n	80078ca <_printf_i+0x23a>
 80078a2:	68e0      	ldr	r0, [r4, #12]
 80078a4:	9b03      	ldr	r3, [sp, #12]
 80078a6:	4298      	cmp	r0, r3
 80078a8:	bfb8      	it	lt
 80078aa:	4618      	movlt	r0, r3
 80078ac:	e7a4      	b.n	80077f8 <_printf_i+0x168>
 80078ae:	2301      	movs	r3, #1
 80078b0:	4632      	mov	r2, r6
 80078b2:	4649      	mov	r1, r9
 80078b4:	4640      	mov	r0, r8
 80078b6:	47d0      	blx	sl
 80078b8:	3001      	adds	r0, #1
 80078ba:	d09b      	beq.n	80077f4 <_printf_i+0x164>
 80078bc:	3501      	adds	r5, #1
 80078be:	68e3      	ldr	r3, [r4, #12]
 80078c0:	9903      	ldr	r1, [sp, #12]
 80078c2:	1a5b      	subs	r3, r3, r1
 80078c4:	42ab      	cmp	r3, r5
 80078c6:	dcf2      	bgt.n	80078ae <_printf_i+0x21e>
 80078c8:	e7eb      	b.n	80078a2 <_printf_i+0x212>
 80078ca:	2500      	movs	r5, #0
 80078cc:	f104 0619 	add.w	r6, r4, #25
 80078d0:	e7f5      	b.n	80078be <_printf_i+0x22e>
 80078d2:	bf00      	nop
 80078d4:	0800b6fa 	.word	0x0800b6fa
 80078d8:	0800b70b 	.word	0x0800b70b

080078dc <iprintf>:
 80078dc:	b40f      	push	{r0, r1, r2, r3}
 80078de:	4b0a      	ldr	r3, [pc, #40]	; (8007908 <iprintf+0x2c>)
 80078e0:	b513      	push	{r0, r1, r4, lr}
 80078e2:	681c      	ldr	r4, [r3, #0]
 80078e4:	b124      	cbz	r4, 80078f0 <iprintf+0x14>
 80078e6:	69a3      	ldr	r3, [r4, #24]
 80078e8:	b913      	cbnz	r3, 80078f0 <iprintf+0x14>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f001 fed2 	bl	8009694 <__sinit>
 80078f0:	ab05      	add	r3, sp, #20
 80078f2:	9a04      	ldr	r2, [sp, #16]
 80078f4:	68a1      	ldr	r1, [r4, #8]
 80078f6:	9301      	str	r3, [sp, #4]
 80078f8:	4620      	mov	r0, r4
 80078fa:	f003 f9ad 	bl	800ac58 <_vfiprintf_r>
 80078fe:	b002      	add	sp, #8
 8007900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007904:	b004      	add	sp, #16
 8007906:	4770      	bx	lr
 8007908:	20000058 	.word	0x20000058

0800790c <_sbrk_r>:
 800790c:	b538      	push	{r3, r4, r5, lr}
 800790e:	4d06      	ldr	r5, [pc, #24]	; (8007928 <_sbrk_r+0x1c>)
 8007910:	2300      	movs	r3, #0
 8007912:	4604      	mov	r4, r0
 8007914:	4608      	mov	r0, r1
 8007916:	602b      	str	r3, [r5, #0]
 8007918:	f7fb fee4 	bl	80036e4 <_sbrk>
 800791c:	1c43      	adds	r3, r0, #1
 800791e:	d102      	bne.n	8007926 <_sbrk_r+0x1a>
 8007920:	682b      	ldr	r3, [r5, #0]
 8007922:	b103      	cbz	r3, 8007926 <_sbrk_r+0x1a>
 8007924:	6023      	str	r3, [r4, #0]
 8007926:	bd38      	pop	{r3, r4, r5, pc}
 8007928:	200005e0 	.word	0x200005e0

0800792c <siprintf>:
 800792c:	b40e      	push	{r1, r2, r3}
 800792e:	b500      	push	{lr}
 8007930:	b09c      	sub	sp, #112	; 0x70
 8007932:	ab1d      	add	r3, sp, #116	; 0x74
 8007934:	9002      	str	r0, [sp, #8]
 8007936:	9006      	str	r0, [sp, #24]
 8007938:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800793c:	4809      	ldr	r0, [pc, #36]	; (8007964 <siprintf+0x38>)
 800793e:	9107      	str	r1, [sp, #28]
 8007940:	9104      	str	r1, [sp, #16]
 8007942:	4909      	ldr	r1, [pc, #36]	; (8007968 <siprintf+0x3c>)
 8007944:	f853 2b04 	ldr.w	r2, [r3], #4
 8007948:	9105      	str	r1, [sp, #20]
 800794a:	6800      	ldr	r0, [r0, #0]
 800794c:	9301      	str	r3, [sp, #4]
 800794e:	a902      	add	r1, sp, #8
 8007950:	f003 f858 	bl	800aa04 <_svfiprintf_r>
 8007954:	9b02      	ldr	r3, [sp, #8]
 8007956:	2200      	movs	r2, #0
 8007958:	701a      	strb	r2, [r3, #0]
 800795a:	b01c      	add	sp, #112	; 0x70
 800795c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007960:	b003      	add	sp, #12
 8007962:	4770      	bx	lr
 8007964:	20000058 	.word	0x20000058
 8007968:	ffff0208 	.word	0xffff0208

0800796c <__sread>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	f003 faa0 	bl	800aeb8 <_read_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	bfab      	itete	ge
 800797c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800797e:	89a3      	ldrhlt	r3, [r4, #12]
 8007980:	181b      	addge	r3, r3, r0
 8007982:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007986:	bfac      	ite	ge
 8007988:	6563      	strge	r3, [r4, #84]	; 0x54
 800798a:	81a3      	strhlt	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__swrite>:
 800798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007992:	461f      	mov	r7, r3
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	05db      	lsls	r3, r3, #23
 8007998:	4605      	mov	r5, r0
 800799a:	460c      	mov	r4, r1
 800799c:	4616      	mov	r6, r2
 800799e:	d505      	bpl.n	80079ac <__swrite+0x1e>
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	2302      	movs	r3, #2
 80079a6:	2200      	movs	r2, #0
 80079a8:	f002 fa9a 	bl	8009ee0 <_lseek_r>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	f000 bf53 	b.w	800886c <_write_r>

080079c6 <__sseek>:
 80079c6:	b510      	push	{r4, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ce:	f002 fa87 	bl	8009ee0 <_lseek_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	bf15      	itete	ne
 80079d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80079da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079e2:	81a3      	strheq	r3, [r4, #12]
 80079e4:	bf18      	it	ne
 80079e6:	81a3      	strhne	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__sclose>:
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 bf6d 	b.w	80088cc <_close_r>

080079f2 <strncmp>:
 80079f2:	b510      	push	{r4, lr}
 80079f4:	b17a      	cbz	r2, 8007a16 <strncmp+0x24>
 80079f6:	4603      	mov	r3, r0
 80079f8:	3901      	subs	r1, #1
 80079fa:	1884      	adds	r4, r0, r2
 80079fc:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007a00:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8007a04:	4290      	cmp	r0, r2
 8007a06:	d101      	bne.n	8007a0c <strncmp+0x1a>
 8007a08:	42a3      	cmp	r3, r4
 8007a0a:	d101      	bne.n	8007a10 <strncmp+0x1e>
 8007a0c:	1a80      	subs	r0, r0, r2
 8007a0e:	bd10      	pop	{r4, pc}
 8007a10:	2800      	cmp	r0, #0
 8007a12:	d1f3      	bne.n	80079fc <strncmp+0xa>
 8007a14:	e7fa      	b.n	8007a0c <strncmp+0x1a>
 8007a16:	4610      	mov	r0, r2
 8007a18:	e7f9      	b.n	8007a0e <strncmp+0x1c>

08007a1a <strncpy>:
 8007a1a:	b510      	push	{r4, lr}
 8007a1c:	3901      	subs	r1, #1
 8007a1e:	4603      	mov	r3, r0
 8007a20:	b132      	cbz	r2, 8007a30 <strncpy+0x16>
 8007a22:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007a26:	f803 4b01 	strb.w	r4, [r3], #1
 8007a2a:	3a01      	subs	r2, #1
 8007a2c:	2c00      	cmp	r4, #0
 8007a2e:	d1f7      	bne.n	8007a20 <strncpy+0x6>
 8007a30:	441a      	add	r2, r3
 8007a32:	2100      	movs	r1, #0
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d100      	bne.n	8007a3a <strncpy+0x20>
 8007a38:	bd10      	pop	{r4, pc}
 8007a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3e:	e7f9      	b.n	8007a34 <strncpy+0x1a>

08007a40 <sulp>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	ec45 4b10 	vmov	d0, r4, r5
 8007a4a:	4616      	mov	r6, r2
 8007a4c:	f002 fdea 	bl	800a624 <__ulp>
 8007a50:	ec51 0b10 	vmov	r0, r1, d0
 8007a54:	b17e      	cbz	r6, 8007a76 <sulp+0x36>
 8007a56:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007a5a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	dd09      	ble.n	8007a76 <sulp+0x36>
 8007a62:	051b      	lsls	r3, r3, #20
 8007a64:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007a68:	2400      	movs	r4, #0
 8007a6a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007a6e:	4622      	mov	r2, r4
 8007a70:	462b      	mov	r3, r5
 8007a72:	f7f8 fdc1 	bl	80005f8 <__aeabi_dmul>
 8007a76:	bd70      	pop	{r4, r5, r6, pc}

08007a78 <_strtod_l>:
 8007a78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a7c:	ed2d 8b02 	vpush	{d8}
 8007a80:	b09d      	sub	sp, #116	; 0x74
 8007a82:	461f      	mov	r7, r3
 8007a84:	2300      	movs	r3, #0
 8007a86:	9318      	str	r3, [sp, #96]	; 0x60
 8007a88:	4ba2      	ldr	r3, [pc, #648]	; (8007d14 <_strtod_l+0x29c>)
 8007a8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	9305      	str	r3, [sp, #20]
 8007a90:	4604      	mov	r4, r0
 8007a92:	4618      	mov	r0, r3
 8007a94:	4688      	mov	r8, r1
 8007a96:	f7f8 fb9b 	bl	80001d0 <strlen>
 8007a9a:	f04f 0a00 	mov.w	sl, #0
 8007a9e:	4605      	mov	r5, r0
 8007aa0:	f04f 0b00 	mov.w	fp, #0
 8007aa4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007aa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007aaa:	781a      	ldrb	r2, [r3, #0]
 8007aac:	2a2b      	cmp	r2, #43	; 0x2b
 8007aae:	d04e      	beq.n	8007b4e <_strtod_l+0xd6>
 8007ab0:	d83b      	bhi.n	8007b2a <_strtod_l+0xb2>
 8007ab2:	2a0d      	cmp	r2, #13
 8007ab4:	d834      	bhi.n	8007b20 <_strtod_l+0xa8>
 8007ab6:	2a08      	cmp	r2, #8
 8007ab8:	d834      	bhi.n	8007b24 <_strtod_l+0xac>
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	d03e      	beq.n	8007b3c <_strtod_l+0xc4>
 8007abe:	2300      	movs	r3, #0
 8007ac0:	930a      	str	r3, [sp, #40]	; 0x28
 8007ac2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007ac4:	7833      	ldrb	r3, [r6, #0]
 8007ac6:	2b30      	cmp	r3, #48	; 0x30
 8007ac8:	f040 80b0 	bne.w	8007c2c <_strtod_l+0x1b4>
 8007acc:	7873      	ldrb	r3, [r6, #1]
 8007ace:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007ad2:	2b58      	cmp	r3, #88	; 0x58
 8007ad4:	d168      	bne.n	8007ba8 <_strtod_l+0x130>
 8007ad6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ad8:	9301      	str	r3, [sp, #4]
 8007ada:	ab18      	add	r3, sp, #96	; 0x60
 8007adc:	9702      	str	r7, [sp, #8]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	4a8d      	ldr	r2, [pc, #564]	; (8007d18 <_strtod_l+0x2a0>)
 8007ae2:	ab19      	add	r3, sp, #100	; 0x64
 8007ae4:	a917      	add	r1, sp, #92	; 0x5c
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f001 feea 	bl	80098c0 <__gethex>
 8007aec:	f010 0707 	ands.w	r7, r0, #7
 8007af0:	4605      	mov	r5, r0
 8007af2:	d005      	beq.n	8007b00 <_strtod_l+0x88>
 8007af4:	2f06      	cmp	r7, #6
 8007af6:	d12c      	bne.n	8007b52 <_strtod_l+0xda>
 8007af8:	3601      	adds	r6, #1
 8007afa:	2300      	movs	r3, #0
 8007afc:	9617      	str	r6, [sp, #92]	; 0x5c
 8007afe:	930a      	str	r3, [sp, #40]	; 0x28
 8007b00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	f040 8590 	bne.w	8008628 <_strtod_l+0xbb0>
 8007b08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b0a:	b1eb      	cbz	r3, 8007b48 <_strtod_l+0xd0>
 8007b0c:	4652      	mov	r2, sl
 8007b0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007b12:	ec43 2b10 	vmov	d0, r2, r3
 8007b16:	b01d      	add	sp, #116	; 0x74
 8007b18:	ecbd 8b02 	vpop	{d8}
 8007b1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b20:	2a20      	cmp	r2, #32
 8007b22:	d1cc      	bne.n	8007abe <_strtod_l+0x46>
 8007b24:	3301      	adds	r3, #1
 8007b26:	9317      	str	r3, [sp, #92]	; 0x5c
 8007b28:	e7be      	b.n	8007aa8 <_strtod_l+0x30>
 8007b2a:	2a2d      	cmp	r2, #45	; 0x2d
 8007b2c:	d1c7      	bne.n	8007abe <_strtod_l+0x46>
 8007b2e:	2201      	movs	r2, #1
 8007b30:	920a      	str	r2, [sp, #40]	; 0x28
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	9217      	str	r2, [sp, #92]	; 0x5c
 8007b36:	785b      	ldrb	r3, [r3, #1]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1c2      	bne.n	8007ac2 <_strtod_l+0x4a>
 8007b3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007b3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f040 856e 	bne.w	8008624 <_strtod_l+0xbac>
 8007b48:	4652      	mov	r2, sl
 8007b4a:	465b      	mov	r3, fp
 8007b4c:	e7e1      	b.n	8007b12 <_strtod_l+0x9a>
 8007b4e:	2200      	movs	r2, #0
 8007b50:	e7ee      	b.n	8007b30 <_strtod_l+0xb8>
 8007b52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007b54:	b13a      	cbz	r2, 8007b66 <_strtod_l+0xee>
 8007b56:	2135      	movs	r1, #53	; 0x35
 8007b58:	a81a      	add	r0, sp, #104	; 0x68
 8007b5a:	f002 fe6e 	bl	800a83a <__copybits>
 8007b5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007b60:	4620      	mov	r0, r4
 8007b62:	f002 fa2d 	bl	8009fc0 <_Bfree>
 8007b66:	3f01      	subs	r7, #1
 8007b68:	2f04      	cmp	r7, #4
 8007b6a:	d806      	bhi.n	8007b7a <_strtod_l+0x102>
 8007b6c:	e8df f007 	tbb	[pc, r7]
 8007b70:	1714030a 	.word	0x1714030a
 8007b74:	0a          	.byte	0x0a
 8007b75:	00          	.byte	0x00
 8007b76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8007b7a:	0728      	lsls	r0, r5, #28
 8007b7c:	d5c0      	bpl.n	8007b00 <_strtod_l+0x88>
 8007b7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8007b82:	e7bd      	b.n	8007b00 <_strtod_l+0x88>
 8007b84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8007b88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8007b8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007b8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007b92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007b96:	e7f0      	b.n	8007b7a <_strtod_l+0x102>
 8007b98:	f8df b180 	ldr.w	fp, [pc, #384]	; 8007d1c <_strtod_l+0x2a4>
 8007b9c:	e7ed      	b.n	8007b7a <_strtod_l+0x102>
 8007b9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8007ba2:	f04f 3aff 	mov.w	sl, #4294967295
 8007ba6:	e7e8      	b.n	8007b7a <_strtod_l+0x102>
 8007ba8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007baa:	1c5a      	adds	r2, r3, #1
 8007bac:	9217      	str	r2, [sp, #92]	; 0x5c
 8007bae:	785b      	ldrb	r3, [r3, #1]
 8007bb0:	2b30      	cmp	r3, #48	; 0x30
 8007bb2:	d0f9      	beq.n	8007ba8 <_strtod_l+0x130>
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d0a3      	beq.n	8007b00 <_strtod_l+0x88>
 8007bb8:	2301      	movs	r3, #1
 8007bba:	f04f 0900 	mov.w	r9, #0
 8007bbe:	9304      	str	r3, [sp, #16]
 8007bc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007bc2:	9308      	str	r3, [sp, #32]
 8007bc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8007bc8:	464f      	mov	r7, r9
 8007bca:	220a      	movs	r2, #10
 8007bcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007bce:	7806      	ldrb	r6, [r0, #0]
 8007bd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8007bd4:	b2d9      	uxtb	r1, r3
 8007bd6:	2909      	cmp	r1, #9
 8007bd8:	d92a      	bls.n	8007c30 <_strtod_l+0x1b8>
 8007bda:	9905      	ldr	r1, [sp, #20]
 8007bdc:	462a      	mov	r2, r5
 8007bde:	f7ff ff08 	bl	80079f2 <strncmp>
 8007be2:	b398      	cbz	r0, 8007c4c <_strtod_l+0x1d4>
 8007be4:	2000      	movs	r0, #0
 8007be6:	4632      	mov	r2, r6
 8007be8:	463d      	mov	r5, r7
 8007bea:	9005      	str	r0, [sp, #20]
 8007bec:	4603      	mov	r3, r0
 8007bee:	2a65      	cmp	r2, #101	; 0x65
 8007bf0:	d001      	beq.n	8007bf6 <_strtod_l+0x17e>
 8007bf2:	2a45      	cmp	r2, #69	; 0x45
 8007bf4:	d118      	bne.n	8007c28 <_strtod_l+0x1b0>
 8007bf6:	b91d      	cbnz	r5, 8007c00 <_strtod_l+0x188>
 8007bf8:	9a04      	ldr	r2, [sp, #16]
 8007bfa:	4302      	orrs	r2, r0
 8007bfc:	d09e      	beq.n	8007b3c <_strtod_l+0xc4>
 8007bfe:	2500      	movs	r5, #0
 8007c00:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007c04:	f108 0201 	add.w	r2, r8, #1
 8007c08:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c0a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8007c0e:	2a2b      	cmp	r2, #43	; 0x2b
 8007c10:	d075      	beq.n	8007cfe <_strtod_l+0x286>
 8007c12:	2a2d      	cmp	r2, #45	; 0x2d
 8007c14:	d07b      	beq.n	8007d0e <_strtod_l+0x296>
 8007c16:	f04f 0c00 	mov.w	ip, #0
 8007c1a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007c1e:	2909      	cmp	r1, #9
 8007c20:	f240 8082 	bls.w	8007d28 <_strtod_l+0x2b0>
 8007c24:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007c28:	2600      	movs	r6, #0
 8007c2a:	e09d      	b.n	8007d68 <_strtod_l+0x2f0>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	e7c4      	b.n	8007bba <_strtod_l+0x142>
 8007c30:	2f08      	cmp	r7, #8
 8007c32:	bfd8      	it	le
 8007c34:	9907      	ldrle	r1, [sp, #28]
 8007c36:	f100 0001 	add.w	r0, r0, #1
 8007c3a:	bfda      	itte	le
 8007c3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007c40:	9307      	strle	r3, [sp, #28]
 8007c42:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007c46:	3701      	adds	r7, #1
 8007c48:	9017      	str	r0, [sp, #92]	; 0x5c
 8007c4a:	e7bf      	b.n	8007bcc <_strtod_l+0x154>
 8007c4c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c4e:	195a      	adds	r2, r3, r5
 8007c50:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c52:	5d5a      	ldrb	r2, [r3, r5]
 8007c54:	2f00      	cmp	r7, #0
 8007c56:	d037      	beq.n	8007cc8 <_strtod_l+0x250>
 8007c58:	9005      	str	r0, [sp, #20]
 8007c5a:	463d      	mov	r5, r7
 8007c5c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007c60:	2b09      	cmp	r3, #9
 8007c62:	d912      	bls.n	8007c8a <_strtod_l+0x212>
 8007c64:	2301      	movs	r3, #1
 8007c66:	e7c2      	b.n	8007bee <_strtod_l+0x176>
 8007c68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c6a:	1c5a      	adds	r2, r3, #1
 8007c6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8007c6e:	785a      	ldrb	r2, [r3, #1]
 8007c70:	3001      	adds	r0, #1
 8007c72:	2a30      	cmp	r2, #48	; 0x30
 8007c74:	d0f8      	beq.n	8007c68 <_strtod_l+0x1f0>
 8007c76:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007c7a:	2b08      	cmp	r3, #8
 8007c7c:	f200 84d9 	bhi.w	8008632 <_strtod_l+0xbba>
 8007c80:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007c82:	9005      	str	r0, [sp, #20]
 8007c84:	2000      	movs	r0, #0
 8007c86:	9308      	str	r3, [sp, #32]
 8007c88:	4605      	mov	r5, r0
 8007c8a:	3a30      	subs	r2, #48	; 0x30
 8007c8c:	f100 0301 	add.w	r3, r0, #1
 8007c90:	d014      	beq.n	8007cbc <_strtod_l+0x244>
 8007c92:	9905      	ldr	r1, [sp, #20]
 8007c94:	4419      	add	r1, r3
 8007c96:	9105      	str	r1, [sp, #20]
 8007c98:	462b      	mov	r3, r5
 8007c9a:	eb00 0e05 	add.w	lr, r0, r5
 8007c9e:	210a      	movs	r1, #10
 8007ca0:	4573      	cmp	r3, lr
 8007ca2:	d113      	bne.n	8007ccc <_strtod_l+0x254>
 8007ca4:	182b      	adds	r3, r5, r0
 8007ca6:	2b08      	cmp	r3, #8
 8007ca8:	f105 0501 	add.w	r5, r5, #1
 8007cac:	4405      	add	r5, r0
 8007cae:	dc1c      	bgt.n	8007cea <_strtod_l+0x272>
 8007cb0:	9907      	ldr	r1, [sp, #28]
 8007cb2:	230a      	movs	r3, #10
 8007cb4:	fb03 2301 	mla	r3, r3, r1, r2
 8007cb8:	9307      	str	r3, [sp, #28]
 8007cba:	2300      	movs	r3, #0
 8007cbc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007cbe:	1c51      	adds	r1, r2, #1
 8007cc0:	9117      	str	r1, [sp, #92]	; 0x5c
 8007cc2:	7852      	ldrb	r2, [r2, #1]
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	e7c9      	b.n	8007c5c <_strtod_l+0x1e4>
 8007cc8:	4638      	mov	r0, r7
 8007cca:	e7d2      	b.n	8007c72 <_strtod_l+0x1fa>
 8007ccc:	2b08      	cmp	r3, #8
 8007cce:	dc04      	bgt.n	8007cda <_strtod_l+0x262>
 8007cd0:	9e07      	ldr	r6, [sp, #28]
 8007cd2:	434e      	muls	r6, r1
 8007cd4:	9607      	str	r6, [sp, #28]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	e7e2      	b.n	8007ca0 <_strtod_l+0x228>
 8007cda:	f103 0c01 	add.w	ip, r3, #1
 8007cde:	f1bc 0f10 	cmp.w	ip, #16
 8007ce2:	bfd8      	it	le
 8007ce4:	fb01 f909 	mulle.w	r9, r1, r9
 8007ce8:	e7f5      	b.n	8007cd6 <_strtod_l+0x25e>
 8007cea:	2d10      	cmp	r5, #16
 8007cec:	bfdc      	itt	le
 8007cee:	230a      	movle	r3, #10
 8007cf0:	fb03 2909 	mlale	r9, r3, r9, r2
 8007cf4:	e7e1      	b.n	8007cba <_strtod_l+0x242>
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	9305      	str	r3, [sp, #20]
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e77c      	b.n	8007bf8 <_strtod_l+0x180>
 8007cfe:	f04f 0c00 	mov.w	ip, #0
 8007d02:	f108 0202 	add.w	r2, r8, #2
 8007d06:	9217      	str	r2, [sp, #92]	; 0x5c
 8007d08:	f898 2002 	ldrb.w	r2, [r8, #2]
 8007d0c:	e785      	b.n	8007c1a <_strtod_l+0x1a2>
 8007d0e:	f04f 0c01 	mov.w	ip, #1
 8007d12:	e7f6      	b.n	8007d02 <_strtod_l+0x28a>
 8007d14:	0800b964 	.word	0x0800b964
 8007d18:	0800b71c 	.word	0x0800b71c
 8007d1c:	7ff00000 	.word	0x7ff00000
 8007d20:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d22:	1c51      	adds	r1, r2, #1
 8007d24:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d26:	7852      	ldrb	r2, [r2, #1]
 8007d28:	2a30      	cmp	r2, #48	; 0x30
 8007d2a:	d0f9      	beq.n	8007d20 <_strtod_l+0x2a8>
 8007d2c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007d30:	2908      	cmp	r1, #8
 8007d32:	f63f af79 	bhi.w	8007c28 <_strtod_l+0x1b0>
 8007d36:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007d3a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d3c:	9206      	str	r2, [sp, #24]
 8007d3e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007d40:	1c51      	adds	r1, r2, #1
 8007d42:	9117      	str	r1, [sp, #92]	; 0x5c
 8007d44:	7852      	ldrb	r2, [r2, #1]
 8007d46:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8007d4a:	2e09      	cmp	r6, #9
 8007d4c:	d937      	bls.n	8007dbe <_strtod_l+0x346>
 8007d4e:	9e06      	ldr	r6, [sp, #24]
 8007d50:	1b89      	subs	r1, r1, r6
 8007d52:	2908      	cmp	r1, #8
 8007d54:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007d58:	dc02      	bgt.n	8007d60 <_strtod_l+0x2e8>
 8007d5a:	4576      	cmp	r6, lr
 8007d5c:	bfa8      	it	ge
 8007d5e:	4676      	movge	r6, lr
 8007d60:	f1bc 0f00 	cmp.w	ip, #0
 8007d64:	d000      	beq.n	8007d68 <_strtod_l+0x2f0>
 8007d66:	4276      	negs	r6, r6
 8007d68:	2d00      	cmp	r5, #0
 8007d6a:	d14d      	bne.n	8007e08 <_strtod_l+0x390>
 8007d6c:	9904      	ldr	r1, [sp, #16]
 8007d6e:	4301      	orrs	r1, r0
 8007d70:	f47f aec6 	bne.w	8007b00 <_strtod_l+0x88>
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f47f aee1 	bne.w	8007b3c <_strtod_l+0xc4>
 8007d7a:	2a69      	cmp	r2, #105	; 0x69
 8007d7c:	d027      	beq.n	8007dce <_strtod_l+0x356>
 8007d7e:	dc24      	bgt.n	8007dca <_strtod_l+0x352>
 8007d80:	2a49      	cmp	r2, #73	; 0x49
 8007d82:	d024      	beq.n	8007dce <_strtod_l+0x356>
 8007d84:	2a4e      	cmp	r2, #78	; 0x4e
 8007d86:	f47f aed9 	bne.w	8007b3c <_strtod_l+0xc4>
 8007d8a:	499f      	ldr	r1, [pc, #636]	; (8008008 <_strtod_l+0x590>)
 8007d8c:	a817      	add	r0, sp, #92	; 0x5c
 8007d8e:	f001 ffef 	bl	8009d70 <__match>
 8007d92:	2800      	cmp	r0, #0
 8007d94:	f43f aed2 	beq.w	8007b3c <_strtod_l+0xc4>
 8007d98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	2b28      	cmp	r3, #40	; 0x28
 8007d9e:	d12d      	bne.n	8007dfc <_strtod_l+0x384>
 8007da0:	499a      	ldr	r1, [pc, #616]	; (800800c <_strtod_l+0x594>)
 8007da2:	aa1a      	add	r2, sp, #104	; 0x68
 8007da4:	a817      	add	r0, sp, #92	; 0x5c
 8007da6:	f001 fff7 	bl	8009d98 <__hexnan>
 8007daa:	2805      	cmp	r0, #5
 8007dac:	d126      	bne.n	8007dfc <_strtod_l+0x384>
 8007dae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007db0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8007db4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007db8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007dbc:	e6a0      	b.n	8007b00 <_strtod_l+0x88>
 8007dbe:	210a      	movs	r1, #10
 8007dc0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8007dc4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007dc8:	e7b9      	b.n	8007d3e <_strtod_l+0x2c6>
 8007dca:	2a6e      	cmp	r2, #110	; 0x6e
 8007dcc:	e7db      	b.n	8007d86 <_strtod_l+0x30e>
 8007dce:	4990      	ldr	r1, [pc, #576]	; (8008010 <_strtod_l+0x598>)
 8007dd0:	a817      	add	r0, sp, #92	; 0x5c
 8007dd2:	f001 ffcd 	bl	8009d70 <__match>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f43f aeb0 	beq.w	8007b3c <_strtod_l+0xc4>
 8007ddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dde:	498d      	ldr	r1, [pc, #564]	; (8008014 <_strtod_l+0x59c>)
 8007de0:	3b01      	subs	r3, #1
 8007de2:	a817      	add	r0, sp, #92	; 0x5c
 8007de4:	9317      	str	r3, [sp, #92]	; 0x5c
 8007de6:	f001 ffc3 	bl	8009d70 <__match>
 8007dea:	b910      	cbnz	r0, 8007df2 <_strtod_l+0x37a>
 8007dec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007dee:	3301      	adds	r3, #1
 8007df0:	9317      	str	r3, [sp, #92]	; 0x5c
 8007df2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008024 <_strtod_l+0x5ac>
 8007df6:	f04f 0a00 	mov.w	sl, #0
 8007dfa:	e681      	b.n	8007b00 <_strtod_l+0x88>
 8007dfc:	4886      	ldr	r0, [pc, #536]	; (8008018 <_strtod_l+0x5a0>)
 8007dfe:	f003 f86f 	bl	800aee0 <nan>
 8007e02:	ec5b ab10 	vmov	sl, fp, d0
 8007e06:	e67b      	b.n	8007b00 <_strtod_l+0x88>
 8007e08:	9b05      	ldr	r3, [sp, #20]
 8007e0a:	9807      	ldr	r0, [sp, #28]
 8007e0c:	1af3      	subs	r3, r6, r3
 8007e0e:	2f00      	cmp	r7, #0
 8007e10:	bf08      	it	eq
 8007e12:	462f      	moveq	r7, r5
 8007e14:	2d10      	cmp	r5, #16
 8007e16:	9306      	str	r3, [sp, #24]
 8007e18:	46a8      	mov	r8, r5
 8007e1a:	bfa8      	it	ge
 8007e1c:	f04f 0810 	movge.w	r8, #16
 8007e20:	f7f8 fb70 	bl	8000504 <__aeabi_ui2d>
 8007e24:	2d09      	cmp	r5, #9
 8007e26:	4682      	mov	sl, r0
 8007e28:	468b      	mov	fp, r1
 8007e2a:	dd13      	ble.n	8007e54 <_strtod_l+0x3dc>
 8007e2c:	4b7b      	ldr	r3, [pc, #492]	; (800801c <_strtod_l+0x5a4>)
 8007e2e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007e32:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007e36:	f7f8 fbdf 	bl	80005f8 <__aeabi_dmul>
 8007e3a:	4682      	mov	sl, r0
 8007e3c:	4648      	mov	r0, r9
 8007e3e:	468b      	mov	fp, r1
 8007e40:	f7f8 fb60 	bl	8000504 <__aeabi_ui2d>
 8007e44:	4602      	mov	r2, r0
 8007e46:	460b      	mov	r3, r1
 8007e48:	4650      	mov	r0, sl
 8007e4a:	4659      	mov	r1, fp
 8007e4c:	f7f8 fa1e 	bl	800028c <__adddf3>
 8007e50:	4682      	mov	sl, r0
 8007e52:	468b      	mov	fp, r1
 8007e54:	2d0f      	cmp	r5, #15
 8007e56:	dc38      	bgt.n	8007eca <_strtod_l+0x452>
 8007e58:	9b06      	ldr	r3, [sp, #24]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	f43f ae50 	beq.w	8007b00 <_strtod_l+0x88>
 8007e60:	dd24      	ble.n	8007eac <_strtod_l+0x434>
 8007e62:	2b16      	cmp	r3, #22
 8007e64:	dc0b      	bgt.n	8007e7e <_strtod_l+0x406>
 8007e66:	496d      	ldr	r1, [pc, #436]	; (800801c <_strtod_l+0x5a4>)
 8007e68:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007e6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e70:	4652      	mov	r2, sl
 8007e72:	465b      	mov	r3, fp
 8007e74:	f7f8 fbc0 	bl	80005f8 <__aeabi_dmul>
 8007e78:	4682      	mov	sl, r0
 8007e7a:	468b      	mov	fp, r1
 8007e7c:	e640      	b.n	8007b00 <_strtod_l+0x88>
 8007e7e:	9a06      	ldr	r2, [sp, #24]
 8007e80:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007e84:	4293      	cmp	r3, r2
 8007e86:	db20      	blt.n	8007eca <_strtod_l+0x452>
 8007e88:	4c64      	ldr	r4, [pc, #400]	; (800801c <_strtod_l+0x5a4>)
 8007e8a:	f1c5 050f 	rsb	r5, r5, #15
 8007e8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007e92:	4652      	mov	r2, sl
 8007e94:	465b      	mov	r3, fp
 8007e96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007e9a:	f7f8 fbad 	bl	80005f8 <__aeabi_dmul>
 8007e9e:	9b06      	ldr	r3, [sp, #24]
 8007ea0:	1b5d      	subs	r5, r3, r5
 8007ea2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007ea6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007eaa:	e7e3      	b.n	8007e74 <_strtod_l+0x3fc>
 8007eac:	9b06      	ldr	r3, [sp, #24]
 8007eae:	3316      	adds	r3, #22
 8007eb0:	db0b      	blt.n	8007eca <_strtod_l+0x452>
 8007eb2:	9b05      	ldr	r3, [sp, #20]
 8007eb4:	1b9e      	subs	r6, r3, r6
 8007eb6:	4b59      	ldr	r3, [pc, #356]	; (800801c <_strtod_l+0x5a4>)
 8007eb8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8007ebc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007ec0:	4650      	mov	r0, sl
 8007ec2:	4659      	mov	r1, fp
 8007ec4:	f7f8 fcc2 	bl	800084c <__aeabi_ddiv>
 8007ec8:	e7d6      	b.n	8007e78 <_strtod_l+0x400>
 8007eca:	9b06      	ldr	r3, [sp, #24]
 8007ecc:	eba5 0808 	sub.w	r8, r5, r8
 8007ed0:	4498      	add	r8, r3
 8007ed2:	f1b8 0f00 	cmp.w	r8, #0
 8007ed6:	dd74      	ble.n	8007fc2 <_strtod_l+0x54a>
 8007ed8:	f018 030f 	ands.w	r3, r8, #15
 8007edc:	d00a      	beq.n	8007ef4 <_strtod_l+0x47c>
 8007ede:	494f      	ldr	r1, [pc, #316]	; (800801c <_strtod_l+0x5a4>)
 8007ee0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	465b      	mov	r3, fp
 8007ee8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007eec:	f7f8 fb84 	bl	80005f8 <__aeabi_dmul>
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	468b      	mov	fp, r1
 8007ef4:	f038 080f 	bics.w	r8, r8, #15
 8007ef8:	d04f      	beq.n	8007f9a <_strtod_l+0x522>
 8007efa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007efe:	dd22      	ble.n	8007f46 <_strtod_l+0x4ce>
 8007f00:	2500      	movs	r5, #0
 8007f02:	462e      	mov	r6, r5
 8007f04:	9507      	str	r5, [sp, #28]
 8007f06:	9505      	str	r5, [sp, #20]
 8007f08:	2322      	movs	r3, #34	; 0x22
 8007f0a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008024 <_strtod_l+0x5ac>
 8007f0e:	6023      	str	r3, [r4, #0]
 8007f10:	f04f 0a00 	mov.w	sl, #0
 8007f14:	9b07      	ldr	r3, [sp, #28]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	f43f adf2 	beq.w	8007b00 <_strtod_l+0x88>
 8007f1c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007f1e:	4620      	mov	r0, r4
 8007f20:	f002 f84e 	bl	8009fc0 <_Bfree>
 8007f24:	9905      	ldr	r1, [sp, #20]
 8007f26:	4620      	mov	r0, r4
 8007f28:	f002 f84a 	bl	8009fc0 <_Bfree>
 8007f2c:	4631      	mov	r1, r6
 8007f2e:	4620      	mov	r0, r4
 8007f30:	f002 f846 	bl	8009fc0 <_Bfree>
 8007f34:	9907      	ldr	r1, [sp, #28]
 8007f36:	4620      	mov	r0, r4
 8007f38:	f002 f842 	bl	8009fc0 <_Bfree>
 8007f3c:	4629      	mov	r1, r5
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f002 f83e 	bl	8009fc0 <_Bfree>
 8007f44:	e5dc      	b.n	8007b00 <_strtod_l+0x88>
 8007f46:	4b36      	ldr	r3, [pc, #216]	; (8008020 <_strtod_l+0x5a8>)
 8007f48:	9304      	str	r3, [sp, #16]
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007f50:	4650      	mov	r0, sl
 8007f52:	4659      	mov	r1, fp
 8007f54:	4699      	mov	r9, r3
 8007f56:	f1b8 0f01 	cmp.w	r8, #1
 8007f5a:	dc21      	bgt.n	8007fa0 <_strtod_l+0x528>
 8007f5c:	b10b      	cbz	r3, 8007f62 <_strtod_l+0x4ea>
 8007f5e:	4682      	mov	sl, r0
 8007f60:	468b      	mov	fp, r1
 8007f62:	4b2f      	ldr	r3, [pc, #188]	; (8008020 <_strtod_l+0x5a8>)
 8007f64:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007f68:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	465b      	mov	r3, fp
 8007f70:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007f74:	f7f8 fb40 	bl	80005f8 <__aeabi_dmul>
 8007f78:	4b2a      	ldr	r3, [pc, #168]	; (8008024 <_strtod_l+0x5ac>)
 8007f7a:	460a      	mov	r2, r1
 8007f7c:	400b      	ands	r3, r1
 8007f7e:	492a      	ldr	r1, [pc, #168]	; (8008028 <_strtod_l+0x5b0>)
 8007f80:	428b      	cmp	r3, r1
 8007f82:	4682      	mov	sl, r0
 8007f84:	d8bc      	bhi.n	8007f00 <_strtod_l+0x488>
 8007f86:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007f8a:	428b      	cmp	r3, r1
 8007f8c:	bf86      	itte	hi
 8007f8e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800802c <_strtod_l+0x5b4>
 8007f92:	f04f 3aff 	movhi.w	sl, #4294967295
 8007f96:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	9304      	str	r3, [sp, #16]
 8007f9e:	e084      	b.n	80080aa <_strtod_l+0x632>
 8007fa0:	f018 0f01 	tst.w	r8, #1
 8007fa4:	d005      	beq.n	8007fb2 <_strtod_l+0x53a>
 8007fa6:	9b04      	ldr	r3, [sp, #16]
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fb24 	bl	80005f8 <__aeabi_dmul>
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	9a04      	ldr	r2, [sp, #16]
 8007fb4:	3208      	adds	r2, #8
 8007fb6:	f109 0901 	add.w	r9, r9, #1
 8007fba:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007fbe:	9204      	str	r2, [sp, #16]
 8007fc0:	e7c9      	b.n	8007f56 <_strtod_l+0x4de>
 8007fc2:	d0ea      	beq.n	8007f9a <_strtod_l+0x522>
 8007fc4:	f1c8 0800 	rsb	r8, r8, #0
 8007fc8:	f018 020f 	ands.w	r2, r8, #15
 8007fcc:	d00a      	beq.n	8007fe4 <_strtod_l+0x56c>
 8007fce:	4b13      	ldr	r3, [pc, #76]	; (800801c <_strtod_l+0x5a4>)
 8007fd0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007fd4:	4650      	mov	r0, sl
 8007fd6:	4659      	mov	r1, fp
 8007fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fdc:	f7f8 fc36 	bl	800084c <__aeabi_ddiv>
 8007fe0:	4682      	mov	sl, r0
 8007fe2:	468b      	mov	fp, r1
 8007fe4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8007fe8:	d0d7      	beq.n	8007f9a <_strtod_l+0x522>
 8007fea:	f1b8 0f1f 	cmp.w	r8, #31
 8007fee:	dd1f      	ble.n	8008030 <_strtod_l+0x5b8>
 8007ff0:	2500      	movs	r5, #0
 8007ff2:	462e      	mov	r6, r5
 8007ff4:	9507      	str	r5, [sp, #28]
 8007ff6:	9505      	str	r5, [sp, #20]
 8007ff8:	2322      	movs	r3, #34	; 0x22
 8007ffa:	f04f 0a00 	mov.w	sl, #0
 8007ffe:	f04f 0b00 	mov.w	fp, #0
 8008002:	6023      	str	r3, [r4, #0]
 8008004:	e786      	b.n	8007f14 <_strtod_l+0x49c>
 8008006:	bf00      	nop
 8008008:	0800b6f5 	.word	0x0800b6f5
 800800c:	0800b730 	.word	0x0800b730
 8008010:	0800b6ed 	.word	0x0800b6ed
 8008014:	0800b823 	.word	0x0800b823
 8008018:	0800b81f 	.word	0x0800b81f
 800801c:	0800ba00 	.word	0x0800ba00
 8008020:	0800b9d8 	.word	0x0800b9d8
 8008024:	7ff00000 	.word	0x7ff00000
 8008028:	7ca00000 	.word	0x7ca00000
 800802c:	7fefffff 	.word	0x7fefffff
 8008030:	f018 0310 	ands.w	r3, r8, #16
 8008034:	bf18      	it	ne
 8008036:	236a      	movne	r3, #106	; 0x6a
 8008038:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80083e8 <_strtod_l+0x970>
 800803c:	9304      	str	r3, [sp, #16]
 800803e:	4650      	mov	r0, sl
 8008040:	4659      	mov	r1, fp
 8008042:	2300      	movs	r3, #0
 8008044:	f018 0f01 	tst.w	r8, #1
 8008048:	d004      	beq.n	8008054 <_strtod_l+0x5dc>
 800804a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800804e:	f7f8 fad3 	bl	80005f8 <__aeabi_dmul>
 8008052:	2301      	movs	r3, #1
 8008054:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008058:	f109 0908 	add.w	r9, r9, #8
 800805c:	d1f2      	bne.n	8008044 <_strtod_l+0x5cc>
 800805e:	b10b      	cbz	r3, 8008064 <_strtod_l+0x5ec>
 8008060:	4682      	mov	sl, r0
 8008062:	468b      	mov	fp, r1
 8008064:	9b04      	ldr	r3, [sp, #16]
 8008066:	b1c3      	cbz	r3, 800809a <_strtod_l+0x622>
 8008068:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800806c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008070:	2b00      	cmp	r3, #0
 8008072:	4659      	mov	r1, fp
 8008074:	dd11      	ble.n	800809a <_strtod_l+0x622>
 8008076:	2b1f      	cmp	r3, #31
 8008078:	f340 8124 	ble.w	80082c4 <_strtod_l+0x84c>
 800807c:	2b34      	cmp	r3, #52	; 0x34
 800807e:	bfde      	ittt	le
 8008080:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008084:	f04f 33ff 	movle.w	r3, #4294967295
 8008088:	fa03 f202 	lslle.w	r2, r3, r2
 800808c:	f04f 0a00 	mov.w	sl, #0
 8008090:	bfcc      	ite	gt
 8008092:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008096:	ea02 0b01 	andle.w	fp, r2, r1
 800809a:	2200      	movs	r2, #0
 800809c:	2300      	movs	r3, #0
 800809e:	4650      	mov	r0, sl
 80080a0:	4659      	mov	r1, fp
 80080a2:	f7f8 fd11 	bl	8000ac8 <__aeabi_dcmpeq>
 80080a6:	2800      	cmp	r0, #0
 80080a8:	d1a2      	bne.n	8007ff0 <_strtod_l+0x578>
 80080aa:	9b07      	ldr	r3, [sp, #28]
 80080ac:	9300      	str	r3, [sp, #0]
 80080ae:	9908      	ldr	r1, [sp, #32]
 80080b0:	462b      	mov	r3, r5
 80080b2:	463a      	mov	r2, r7
 80080b4:	4620      	mov	r0, r4
 80080b6:	f001 ffeb 	bl	800a090 <__s2b>
 80080ba:	9007      	str	r0, [sp, #28]
 80080bc:	2800      	cmp	r0, #0
 80080be:	f43f af1f 	beq.w	8007f00 <_strtod_l+0x488>
 80080c2:	9b05      	ldr	r3, [sp, #20]
 80080c4:	1b9e      	subs	r6, r3, r6
 80080c6:	9b06      	ldr	r3, [sp, #24]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	bfb4      	ite	lt
 80080cc:	4633      	movlt	r3, r6
 80080ce:	2300      	movge	r3, #0
 80080d0:	930c      	str	r3, [sp, #48]	; 0x30
 80080d2:	9b06      	ldr	r3, [sp, #24]
 80080d4:	2500      	movs	r5, #0
 80080d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80080da:	9312      	str	r3, [sp, #72]	; 0x48
 80080dc:	462e      	mov	r6, r5
 80080de:	9b07      	ldr	r3, [sp, #28]
 80080e0:	4620      	mov	r0, r4
 80080e2:	6859      	ldr	r1, [r3, #4]
 80080e4:	f001 ff2c 	bl	8009f40 <_Balloc>
 80080e8:	9005      	str	r0, [sp, #20]
 80080ea:	2800      	cmp	r0, #0
 80080ec:	f43f af0c 	beq.w	8007f08 <_strtod_l+0x490>
 80080f0:	9b07      	ldr	r3, [sp, #28]
 80080f2:	691a      	ldr	r2, [r3, #16]
 80080f4:	3202      	adds	r2, #2
 80080f6:	f103 010c 	add.w	r1, r3, #12
 80080fa:	0092      	lsls	r2, r2, #2
 80080fc:	300c      	adds	r0, #12
 80080fe:	f7fe fe8d 	bl	8006e1c <memcpy>
 8008102:	ec4b ab10 	vmov	d0, sl, fp
 8008106:	aa1a      	add	r2, sp, #104	; 0x68
 8008108:	a919      	add	r1, sp, #100	; 0x64
 800810a:	4620      	mov	r0, r4
 800810c:	f002 fb06 	bl	800a71c <__d2b>
 8008110:	ec4b ab18 	vmov	d8, sl, fp
 8008114:	9018      	str	r0, [sp, #96]	; 0x60
 8008116:	2800      	cmp	r0, #0
 8008118:	f43f aef6 	beq.w	8007f08 <_strtod_l+0x490>
 800811c:	2101      	movs	r1, #1
 800811e:	4620      	mov	r0, r4
 8008120:	f002 f850 	bl	800a1c4 <__i2b>
 8008124:	4606      	mov	r6, r0
 8008126:	2800      	cmp	r0, #0
 8008128:	f43f aeee 	beq.w	8007f08 <_strtod_l+0x490>
 800812c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800812e:	9904      	ldr	r1, [sp, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	bfab      	itete	ge
 8008134:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008136:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008138:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800813a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800813e:	bfac      	ite	ge
 8008140:	eb03 0902 	addge.w	r9, r3, r2
 8008144:	1ad7      	sublt	r7, r2, r3
 8008146:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008148:	eba3 0801 	sub.w	r8, r3, r1
 800814c:	4490      	add	r8, r2
 800814e:	4ba1      	ldr	r3, [pc, #644]	; (80083d4 <_strtod_l+0x95c>)
 8008150:	f108 38ff 	add.w	r8, r8, #4294967295
 8008154:	4598      	cmp	r8, r3
 8008156:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800815a:	f280 80c7 	bge.w	80082ec <_strtod_l+0x874>
 800815e:	eba3 0308 	sub.w	r3, r3, r8
 8008162:	2b1f      	cmp	r3, #31
 8008164:	eba2 0203 	sub.w	r2, r2, r3
 8008168:	f04f 0101 	mov.w	r1, #1
 800816c:	f300 80b1 	bgt.w	80082d2 <_strtod_l+0x85a>
 8008170:	fa01 f303 	lsl.w	r3, r1, r3
 8008174:	930d      	str	r3, [sp, #52]	; 0x34
 8008176:	2300      	movs	r3, #0
 8008178:	9308      	str	r3, [sp, #32]
 800817a:	eb09 0802 	add.w	r8, r9, r2
 800817e:	9b04      	ldr	r3, [sp, #16]
 8008180:	45c1      	cmp	r9, r8
 8008182:	4417      	add	r7, r2
 8008184:	441f      	add	r7, r3
 8008186:	464b      	mov	r3, r9
 8008188:	bfa8      	it	ge
 800818a:	4643      	movge	r3, r8
 800818c:	42bb      	cmp	r3, r7
 800818e:	bfa8      	it	ge
 8008190:	463b      	movge	r3, r7
 8008192:	2b00      	cmp	r3, #0
 8008194:	bfc2      	ittt	gt
 8008196:	eba8 0803 	subgt.w	r8, r8, r3
 800819a:	1aff      	subgt	r7, r7, r3
 800819c:	eba9 0903 	subgt.w	r9, r9, r3
 80081a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	dd17      	ble.n	80081d6 <_strtod_l+0x75e>
 80081a6:	4631      	mov	r1, r6
 80081a8:	461a      	mov	r2, r3
 80081aa:	4620      	mov	r0, r4
 80081ac:	f002 f8ca 	bl	800a344 <__pow5mult>
 80081b0:	4606      	mov	r6, r0
 80081b2:	2800      	cmp	r0, #0
 80081b4:	f43f aea8 	beq.w	8007f08 <_strtod_l+0x490>
 80081b8:	4601      	mov	r1, r0
 80081ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80081bc:	4620      	mov	r0, r4
 80081be:	f002 f817 	bl	800a1f0 <__multiply>
 80081c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80081c4:	2800      	cmp	r0, #0
 80081c6:	f43f ae9f 	beq.w	8007f08 <_strtod_l+0x490>
 80081ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80081cc:	4620      	mov	r0, r4
 80081ce:	f001 fef7 	bl	8009fc0 <_Bfree>
 80081d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081d4:	9318      	str	r3, [sp, #96]	; 0x60
 80081d6:	f1b8 0f00 	cmp.w	r8, #0
 80081da:	f300 808c 	bgt.w	80082f6 <_strtod_l+0x87e>
 80081de:	9b06      	ldr	r3, [sp, #24]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	dd08      	ble.n	80081f6 <_strtod_l+0x77e>
 80081e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80081e6:	9905      	ldr	r1, [sp, #20]
 80081e8:	4620      	mov	r0, r4
 80081ea:	f002 f8ab 	bl	800a344 <__pow5mult>
 80081ee:	9005      	str	r0, [sp, #20]
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f43f ae89 	beq.w	8007f08 <_strtod_l+0x490>
 80081f6:	2f00      	cmp	r7, #0
 80081f8:	dd08      	ble.n	800820c <_strtod_l+0x794>
 80081fa:	9905      	ldr	r1, [sp, #20]
 80081fc:	463a      	mov	r2, r7
 80081fe:	4620      	mov	r0, r4
 8008200:	f002 f8fa 	bl	800a3f8 <__lshift>
 8008204:	9005      	str	r0, [sp, #20]
 8008206:	2800      	cmp	r0, #0
 8008208:	f43f ae7e 	beq.w	8007f08 <_strtod_l+0x490>
 800820c:	f1b9 0f00 	cmp.w	r9, #0
 8008210:	dd08      	ble.n	8008224 <_strtod_l+0x7ac>
 8008212:	4631      	mov	r1, r6
 8008214:	464a      	mov	r2, r9
 8008216:	4620      	mov	r0, r4
 8008218:	f002 f8ee 	bl	800a3f8 <__lshift>
 800821c:	4606      	mov	r6, r0
 800821e:	2800      	cmp	r0, #0
 8008220:	f43f ae72 	beq.w	8007f08 <_strtod_l+0x490>
 8008224:	9a05      	ldr	r2, [sp, #20]
 8008226:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008228:	4620      	mov	r0, r4
 800822a:	f002 f971 	bl	800a510 <__mdiff>
 800822e:	4605      	mov	r5, r0
 8008230:	2800      	cmp	r0, #0
 8008232:	f43f ae69 	beq.w	8007f08 <_strtod_l+0x490>
 8008236:	68c3      	ldr	r3, [r0, #12]
 8008238:	930b      	str	r3, [sp, #44]	; 0x2c
 800823a:	2300      	movs	r3, #0
 800823c:	60c3      	str	r3, [r0, #12]
 800823e:	4631      	mov	r1, r6
 8008240:	f002 f94a 	bl	800a4d8 <__mcmp>
 8008244:	2800      	cmp	r0, #0
 8008246:	da60      	bge.n	800830a <_strtod_l+0x892>
 8008248:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800824a:	ea53 030a 	orrs.w	r3, r3, sl
 800824e:	f040 8082 	bne.w	8008356 <_strtod_l+0x8de>
 8008252:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008256:	2b00      	cmp	r3, #0
 8008258:	d17d      	bne.n	8008356 <_strtod_l+0x8de>
 800825a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800825e:	0d1b      	lsrs	r3, r3, #20
 8008260:	051b      	lsls	r3, r3, #20
 8008262:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008266:	d976      	bls.n	8008356 <_strtod_l+0x8de>
 8008268:	696b      	ldr	r3, [r5, #20]
 800826a:	b913      	cbnz	r3, 8008272 <_strtod_l+0x7fa>
 800826c:	692b      	ldr	r3, [r5, #16]
 800826e:	2b01      	cmp	r3, #1
 8008270:	dd71      	ble.n	8008356 <_strtod_l+0x8de>
 8008272:	4629      	mov	r1, r5
 8008274:	2201      	movs	r2, #1
 8008276:	4620      	mov	r0, r4
 8008278:	f002 f8be 	bl	800a3f8 <__lshift>
 800827c:	4631      	mov	r1, r6
 800827e:	4605      	mov	r5, r0
 8008280:	f002 f92a 	bl	800a4d8 <__mcmp>
 8008284:	2800      	cmp	r0, #0
 8008286:	dd66      	ble.n	8008356 <_strtod_l+0x8de>
 8008288:	9904      	ldr	r1, [sp, #16]
 800828a:	4a53      	ldr	r2, [pc, #332]	; (80083d8 <_strtod_l+0x960>)
 800828c:	465b      	mov	r3, fp
 800828e:	2900      	cmp	r1, #0
 8008290:	f000 8081 	beq.w	8008396 <_strtod_l+0x91e>
 8008294:	ea02 010b 	and.w	r1, r2, fp
 8008298:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800829c:	dc7b      	bgt.n	8008396 <_strtod_l+0x91e>
 800829e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80082a2:	f77f aea9 	ble.w	8007ff8 <_strtod_l+0x580>
 80082a6:	4b4d      	ldr	r3, [pc, #308]	; (80083dc <_strtod_l+0x964>)
 80082a8:	4650      	mov	r0, sl
 80082aa:	4659      	mov	r1, fp
 80082ac:	2200      	movs	r2, #0
 80082ae:	f7f8 f9a3 	bl	80005f8 <__aeabi_dmul>
 80082b2:	460b      	mov	r3, r1
 80082b4:	4303      	orrs	r3, r0
 80082b6:	bf08      	it	eq
 80082b8:	2322      	moveq	r3, #34	; 0x22
 80082ba:	4682      	mov	sl, r0
 80082bc:	468b      	mov	fp, r1
 80082be:	bf08      	it	eq
 80082c0:	6023      	streq	r3, [r4, #0]
 80082c2:	e62b      	b.n	8007f1c <_strtod_l+0x4a4>
 80082c4:	f04f 32ff 	mov.w	r2, #4294967295
 80082c8:	fa02 f303 	lsl.w	r3, r2, r3
 80082cc:	ea03 0a0a 	and.w	sl, r3, sl
 80082d0:	e6e3      	b.n	800809a <_strtod_l+0x622>
 80082d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80082d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80082da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80082de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80082e2:	fa01 f308 	lsl.w	r3, r1, r8
 80082e6:	9308      	str	r3, [sp, #32]
 80082e8:	910d      	str	r1, [sp, #52]	; 0x34
 80082ea:	e746      	b.n	800817a <_strtod_l+0x702>
 80082ec:	2300      	movs	r3, #0
 80082ee:	9308      	str	r3, [sp, #32]
 80082f0:	2301      	movs	r3, #1
 80082f2:	930d      	str	r3, [sp, #52]	; 0x34
 80082f4:	e741      	b.n	800817a <_strtod_l+0x702>
 80082f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80082f8:	4642      	mov	r2, r8
 80082fa:	4620      	mov	r0, r4
 80082fc:	f002 f87c 	bl	800a3f8 <__lshift>
 8008300:	9018      	str	r0, [sp, #96]	; 0x60
 8008302:	2800      	cmp	r0, #0
 8008304:	f47f af6b 	bne.w	80081de <_strtod_l+0x766>
 8008308:	e5fe      	b.n	8007f08 <_strtod_l+0x490>
 800830a:	465f      	mov	r7, fp
 800830c:	d16e      	bne.n	80083ec <_strtod_l+0x974>
 800830e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008310:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008314:	b342      	cbz	r2, 8008368 <_strtod_l+0x8f0>
 8008316:	4a32      	ldr	r2, [pc, #200]	; (80083e0 <_strtod_l+0x968>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d128      	bne.n	800836e <_strtod_l+0x8f6>
 800831c:	9b04      	ldr	r3, [sp, #16]
 800831e:	4651      	mov	r1, sl
 8008320:	b1eb      	cbz	r3, 800835e <_strtod_l+0x8e6>
 8008322:	4b2d      	ldr	r3, [pc, #180]	; (80083d8 <_strtod_l+0x960>)
 8008324:	403b      	ands	r3, r7
 8008326:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800832a:	f04f 32ff 	mov.w	r2, #4294967295
 800832e:	d819      	bhi.n	8008364 <_strtod_l+0x8ec>
 8008330:	0d1b      	lsrs	r3, r3, #20
 8008332:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008336:	fa02 f303 	lsl.w	r3, r2, r3
 800833a:	4299      	cmp	r1, r3
 800833c:	d117      	bne.n	800836e <_strtod_l+0x8f6>
 800833e:	4b29      	ldr	r3, [pc, #164]	; (80083e4 <_strtod_l+0x96c>)
 8008340:	429f      	cmp	r7, r3
 8008342:	d102      	bne.n	800834a <_strtod_l+0x8d2>
 8008344:	3101      	adds	r1, #1
 8008346:	f43f addf 	beq.w	8007f08 <_strtod_l+0x490>
 800834a:	4b23      	ldr	r3, [pc, #140]	; (80083d8 <_strtod_l+0x960>)
 800834c:	403b      	ands	r3, r7
 800834e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008352:	f04f 0a00 	mov.w	sl, #0
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d1a4      	bne.n	80082a6 <_strtod_l+0x82e>
 800835c:	e5de      	b.n	8007f1c <_strtod_l+0x4a4>
 800835e:	f04f 33ff 	mov.w	r3, #4294967295
 8008362:	e7ea      	b.n	800833a <_strtod_l+0x8c2>
 8008364:	4613      	mov	r3, r2
 8008366:	e7e8      	b.n	800833a <_strtod_l+0x8c2>
 8008368:	ea53 030a 	orrs.w	r3, r3, sl
 800836c:	d08c      	beq.n	8008288 <_strtod_l+0x810>
 800836e:	9b08      	ldr	r3, [sp, #32]
 8008370:	b1db      	cbz	r3, 80083aa <_strtod_l+0x932>
 8008372:	423b      	tst	r3, r7
 8008374:	d0ef      	beq.n	8008356 <_strtod_l+0x8de>
 8008376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008378:	9a04      	ldr	r2, [sp, #16]
 800837a:	4650      	mov	r0, sl
 800837c:	4659      	mov	r1, fp
 800837e:	b1c3      	cbz	r3, 80083b2 <_strtod_l+0x93a>
 8008380:	f7ff fb5e 	bl	8007a40 <sulp>
 8008384:	4602      	mov	r2, r0
 8008386:	460b      	mov	r3, r1
 8008388:	ec51 0b18 	vmov	r0, r1, d8
 800838c:	f7f7 ff7e 	bl	800028c <__adddf3>
 8008390:	4682      	mov	sl, r0
 8008392:	468b      	mov	fp, r1
 8008394:	e7df      	b.n	8008356 <_strtod_l+0x8de>
 8008396:	4013      	ands	r3, r2
 8008398:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800839c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80083a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80083a4:	f04f 3aff 	mov.w	sl, #4294967295
 80083a8:	e7d5      	b.n	8008356 <_strtod_l+0x8de>
 80083aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80083ac:	ea13 0f0a 	tst.w	r3, sl
 80083b0:	e7e0      	b.n	8008374 <_strtod_l+0x8fc>
 80083b2:	f7ff fb45 	bl	8007a40 <sulp>
 80083b6:	4602      	mov	r2, r0
 80083b8:	460b      	mov	r3, r1
 80083ba:	ec51 0b18 	vmov	r0, r1, d8
 80083be:	f7f7 ff63 	bl	8000288 <__aeabi_dsub>
 80083c2:	2200      	movs	r2, #0
 80083c4:	2300      	movs	r3, #0
 80083c6:	4682      	mov	sl, r0
 80083c8:	468b      	mov	fp, r1
 80083ca:	f7f8 fb7d 	bl	8000ac8 <__aeabi_dcmpeq>
 80083ce:	2800      	cmp	r0, #0
 80083d0:	d0c1      	beq.n	8008356 <_strtod_l+0x8de>
 80083d2:	e611      	b.n	8007ff8 <_strtod_l+0x580>
 80083d4:	fffffc02 	.word	0xfffffc02
 80083d8:	7ff00000 	.word	0x7ff00000
 80083dc:	39500000 	.word	0x39500000
 80083e0:	000fffff 	.word	0x000fffff
 80083e4:	7fefffff 	.word	0x7fefffff
 80083e8:	0800b748 	.word	0x0800b748
 80083ec:	4631      	mov	r1, r6
 80083ee:	4628      	mov	r0, r5
 80083f0:	f002 f9f0 	bl	800a7d4 <__ratio>
 80083f4:	ec59 8b10 	vmov	r8, r9, d0
 80083f8:	ee10 0a10 	vmov	r0, s0
 80083fc:	2200      	movs	r2, #0
 80083fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008402:	4649      	mov	r1, r9
 8008404:	f7f8 fb74 	bl	8000af0 <__aeabi_dcmple>
 8008408:	2800      	cmp	r0, #0
 800840a:	d07a      	beq.n	8008502 <_strtod_l+0xa8a>
 800840c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800840e:	2b00      	cmp	r3, #0
 8008410:	d04a      	beq.n	80084a8 <_strtod_l+0xa30>
 8008412:	4b95      	ldr	r3, [pc, #596]	; (8008668 <_strtod_l+0xbf0>)
 8008414:	2200      	movs	r2, #0
 8008416:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800841a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008668 <_strtod_l+0xbf0>
 800841e:	f04f 0800 	mov.w	r8, #0
 8008422:	4b92      	ldr	r3, [pc, #584]	; (800866c <_strtod_l+0xbf4>)
 8008424:	403b      	ands	r3, r7
 8008426:	930d      	str	r3, [sp, #52]	; 0x34
 8008428:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800842a:	4b91      	ldr	r3, [pc, #580]	; (8008670 <_strtod_l+0xbf8>)
 800842c:	429a      	cmp	r2, r3
 800842e:	f040 80b0 	bne.w	8008592 <_strtod_l+0xb1a>
 8008432:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008436:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800843a:	ec4b ab10 	vmov	d0, sl, fp
 800843e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008442:	f002 f8ef 	bl	800a624 <__ulp>
 8008446:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800844a:	ec53 2b10 	vmov	r2, r3, d0
 800844e:	f7f8 f8d3 	bl	80005f8 <__aeabi_dmul>
 8008452:	4652      	mov	r2, sl
 8008454:	465b      	mov	r3, fp
 8008456:	f7f7 ff19 	bl	800028c <__adddf3>
 800845a:	460b      	mov	r3, r1
 800845c:	4983      	ldr	r1, [pc, #524]	; (800866c <_strtod_l+0xbf4>)
 800845e:	4a85      	ldr	r2, [pc, #532]	; (8008674 <_strtod_l+0xbfc>)
 8008460:	4019      	ands	r1, r3
 8008462:	4291      	cmp	r1, r2
 8008464:	4682      	mov	sl, r0
 8008466:	d960      	bls.n	800852a <_strtod_l+0xab2>
 8008468:	ee18 3a90 	vmov	r3, s17
 800846c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008470:	4293      	cmp	r3, r2
 8008472:	d104      	bne.n	800847e <_strtod_l+0xa06>
 8008474:	ee18 3a10 	vmov	r3, s16
 8008478:	3301      	adds	r3, #1
 800847a:	f43f ad45 	beq.w	8007f08 <_strtod_l+0x490>
 800847e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008680 <_strtod_l+0xc08>
 8008482:	f04f 3aff 	mov.w	sl, #4294967295
 8008486:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008488:	4620      	mov	r0, r4
 800848a:	f001 fd99 	bl	8009fc0 <_Bfree>
 800848e:	9905      	ldr	r1, [sp, #20]
 8008490:	4620      	mov	r0, r4
 8008492:	f001 fd95 	bl	8009fc0 <_Bfree>
 8008496:	4631      	mov	r1, r6
 8008498:	4620      	mov	r0, r4
 800849a:	f001 fd91 	bl	8009fc0 <_Bfree>
 800849e:	4629      	mov	r1, r5
 80084a0:	4620      	mov	r0, r4
 80084a2:	f001 fd8d 	bl	8009fc0 <_Bfree>
 80084a6:	e61a      	b.n	80080de <_strtod_l+0x666>
 80084a8:	f1ba 0f00 	cmp.w	sl, #0
 80084ac:	d11b      	bne.n	80084e6 <_strtod_l+0xa6e>
 80084ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80084b2:	b9f3      	cbnz	r3, 80084f2 <_strtod_l+0xa7a>
 80084b4:	4b6c      	ldr	r3, [pc, #432]	; (8008668 <_strtod_l+0xbf0>)
 80084b6:	2200      	movs	r2, #0
 80084b8:	4640      	mov	r0, r8
 80084ba:	4649      	mov	r1, r9
 80084bc:	f7f8 fb0e 	bl	8000adc <__aeabi_dcmplt>
 80084c0:	b9d0      	cbnz	r0, 80084f8 <_strtod_l+0xa80>
 80084c2:	4640      	mov	r0, r8
 80084c4:	4649      	mov	r1, r9
 80084c6:	4b6c      	ldr	r3, [pc, #432]	; (8008678 <_strtod_l+0xc00>)
 80084c8:	2200      	movs	r2, #0
 80084ca:	f7f8 f895 	bl	80005f8 <__aeabi_dmul>
 80084ce:	4680      	mov	r8, r0
 80084d0:	4689      	mov	r9, r1
 80084d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80084d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80084da:	9315      	str	r3, [sp, #84]	; 0x54
 80084dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80084e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80084e4:	e79d      	b.n	8008422 <_strtod_l+0x9aa>
 80084e6:	f1ba 0f01 	cmp.w	sl, #1
 80084ea:	d102      	bne.n	80084f2 <_strtod_l+0xa7a>
 80084ec:	2f00      	cmp	r7, #0
 80084ee:	f43f ad83 	beq.w	8007ff8 <_strtod_l+0x580>
 80084f2:	4b62      	ldr	r3, [pc, #392]	; (800867c <_strtod_l+0xc04>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	e78e      	b.n	8008416 <_strtod_l+0x99e>
 80084f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008678 <_strtod_l+0xc00>
 80084fc:	f04f 0800 	mov.w	r8, #0
 8008500:	e7e7      	b.n	80084d2 <_strtod_l+0xa5a>
 8008502:	4b5d      	ldr	r3, [pc, #372]	; (8008678 <_strtod_l+0xc00>)
 8008504:	4640      	mov	r0, r8
 8008506:	4649      	mov	r1, r9
 8008508:	2200      	movs	r2, #0
 800850a:	f7f8 f875 	bl	80005f8 <__aeabi_dmul>
 800850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008510:	4680      	mov	r8, r0
 8008512:	4689      	mov	r9, r1
 8008514:	b933      	cbnz	r3, 8008524 <_strtod_l+0xaac>
 8008516:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800851a:	900e      	str	r0, [sp, #56]	; 0x38
 800851c:	930f      	str	r3, [sp, #60]	; 0x3c
 800851e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008522:	e7dd      	b.n	80084e0 <_strtod_l+0xa68>
 8008524:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008528:	e7f9      	b.n	800851e <_strtod_l+0xaa6>
 800852a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800852e:	9b04      	ldr	r3, [sp, #16]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d1a8      	bne.n	8008486 <_strtod_l+0xa0e>
 8008534:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008538:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800853a:	0d1b      	lsrs	r3, r3, #20
 800853c:	051b      	lsls	r3, r3, #20
 800853e:	429a      	cmp	r2, r3
 8008540:	d1a1      	bne.n	8008486 <_strtod_l+0xa0e>
 8008542:	4640      	mov	r0, r8
 8008544:	4649      	mov	r1, r9
 8008546:	f7f8 fbb7 	bl	8000cb8 <__aeabi_d2lz>
 800854a:	f7f8 f827 	bl	800059c <__aeabi_l2d>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4640      	mov	r0, r8
 8008554:	4649      	mov	r1, r9
 8008556:	f7f7 fe97 	bl	8000288 <__aeabi_dsub>
 800855a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800855c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008560:	ea43 030a 	orr.w	r3, r3, sl
 8008564:	4313      	orrs	r3, r2
 8008566:	4680      	mov	r8, r0
 8008568:	4689      	mov	r9, r1
 800856a:	d055      	beq.n	8008618 <_strtod_l+0xba0>
 800856c:	a336      	add	r3, pc, #216	; (adr r3, 8008648 <_strtod_l+0xbd0>)
 800856e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008572:	f7f8 fab3 	bl	8000adc <__aeabi_dcmplt>
 8008576:	2800      	cmp	r0, #0
 8008578:	f47f acd0 	bne.w	8007f1c <_strtod_l+0x4a4>
 800857c:	a334      	add	r3, pc, #208	; (adr r3, 8008650 <_strtod_l+0xbd8>)
 800857e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008582:	4640      	mov	r0, r8
 8008584:	4649      	mov	r1, r9
 8008586:	f7f8 fac7 	bl	8000b18 <__aeabi_dcmpgt>
 800858a:	2800      	cmp	r0, #0
 800858c:	f43f af7b 	beq.w	8008486 <_strtod_l+0xa0e>
 8008590:	e4c4      	b.n	8007f1c <_strtod_l+0x4a4>
 8008592:	9b04      	ldr	r3, [sp, #16]
 8008594:	b333      	cbz	r3, 80085e4 <_strtod_l+0xb6c>
 8008596:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008598:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800859c:	d822      	bhi.n	80085e4 <_strtod_l+0xb6c>
 800859e:	a32e      	add	r3, pc, #184	; (adr r3, 8008658 <_strtod_l+0xbe0>)
 80085a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085a4:	4640      	mov	r0, r8
 80085a6:	4649      	mov	r1, r9
 80085a8:	f7f8 faa2 	bl	8000af0 <__aeabi_dcmple>
 80085ac:	b1a0      	cbz	r0, 80085d8 <_strtod_l+0xb60>
 80085ae:	4649      	mov	r1, r9
 80085b0:	4640      	mov	r0, r8
 80085b2:	f7f8 faf9 	bl	8000ba8 <__aeabi_d2uiz>
 80085b6:	2801      	cmp	r0, #1
 80085b8:	bf38      	it	cc
 80085ba:	2001      	movcc	r0, #1
 80085bc:	f7f7 ffa2 	bl	8000504 <__aeabi_ui2d>
 80085c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80085c2:	4680      	mov	r8, r0
 80085c4:	4689      	mov	r9, r1
 80085c6:	bb23      	cbnz	r3, 8008612 <_strtod_l+0xb9a>
 80085c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80085cc:	9010      	str	r0, [sp, #64]	; 0x40
 80085ce:	9311      	str	r3, [sp, #68]	; 0x44
 80085d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80085d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80085d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80085dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80085e0:	1a9b      	subs	r3, r3, r2
 80085e2:	9309      	str	r3, [sp, #36]	; 0x24
 80085e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085e8:	eeb0 0a48 	vmov.f32	s0, s16
 80085ec:	eef0 0a68 	vmov.f32	s1, s17
 80085f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80085f4:	f002 f816 	bl	800a624 <__ulp>
 80085f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80085fc:	ec53 2b10 	vmov	r2, r3, d0
 8008600:	f7f7 fffa 	bl	80005f8 <__aeabi_dmul>
 8008604:	ec53 2b18 	vmov	r2, r3, d8
 8008608:	f7f7 fe40 	bl	800028c <__adddf3>
 800860c:	4682      	mov	sl, r0
 800860e:	468b      	mov	fp, r1
 8008610:	e78d      	b.n	800852e <_strtod_l+0xab6>
 8008612:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008616:	e7db      	b.n	80085d0 <_strtod_l+0xb58>
 8008618:	a311      	add	r3, pc, #68	; (adr r3, 8008660 <_strtod_l+0xbe8>)
 800861a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800861e:	f7f8 fa5d 	bl	8000adc <__aeabi_dcmplt>
 8008622:	e7b2      	b.n	800858a <_strtod_l+0xb12>
 8008624:	2300      	movs	r3, #0
 8008626:	930a      	str	r3, [sp, #40]	; 0x28
 8008628:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800862a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800862c:	6013      	str	r3, [r2, #0]
 800862e:	f7ff ba6b 	b.w	8007b08 <_strtod_l+0x90>
 8008632:	2a65      	cmp	r2, #101	; 0x65
 8008634:	f43f ab5f 	beq.w	8007cf6 <_strtod_l+0x27e>
 8008638:	2a45      	cmp	r2, #69	; 0x45
 800863a:	f43f ab5c 	beq.w	8007cf6 <_strtod_l+0x27e>
 800863e:	2301      	movs	r3, #1
 8008640:	f7ff bb94 	b.w	8007d6c <_strtod_l+0x2f4>
 8008644:	f3af 8000 	nop.w
 8008648:	94a03595 	.word	0x94a03595
 800864c:	3fdfffff 	.word	0x3fdfffff
 8008650:	35afe535 	.word	0x35afe535
 8008654:	3fe00000 	.word	0x3fe00000
 8008658:	ffc00000 	.word	0xffc00000
 800865c:	41dfffff 	.word	0x41dfffff
 8008660:	94a03595 	.word	0x94a03595
 8008664:	3fcfffff 	.word	0x3fcfffff
 8008668:	3ff00000 	.word	0x3ff00000
 800866c:	7ff00000 	.word	0x7ff00000
 8008670:	7fe00000 	.word	0x7fe00000
 8008674:	7c9fffff 	.word	0x7c9fffff
 8008678:	3fe00000 	.word	0x3fe00000
 800867c:	bff00000 	.word	0xbff00000
 8008680:	7fefffff 	.word	0x7fefffff

08008684 <strtod>:
 8008684:	460a      	mov	r2, r1
 8008686:	4601      	mov	r1, r0
 8008688:	4802      	ldr	r0, [pc, #8]	; (8008694 <strtod+0x10>)
 800868a:	4b03      	ldr	r3, [pc, #12]	; (8008698 <strtod+0x14>)
 800868c:	6800      	ldr	r0, [r0, #0]
 800868e:	f7ff b9f3 	b.w	8007a78 <_strtod_l>
 8008692:	bf00      	nop
 8008694:	20000058 	.word	0x20000058
 8008698:	200000c0 	.word	0x200000c0

0800869c <strtok>:
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <strtok+0x5c>)
 800869e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80086a0:	681e      	ldr	r6, [r3, #0]
 80086a2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 80086a4:	4605      	mov	r5, r0
 80086a6:	b9fc      	cbnz	r4, 80086e8 <strtok+0x4c>
 80086a8:	2050      	movs	r0, #80	; 0x50
 80086aa:	9101      	str	r1, [sp, #4]
 80086ac:	f7fe fbae 	bl	8006e0c <malloc>
 80086b0:	9901      	ldr	r1, [sp, #4]
 80086b2:	65b0      	str	r0, [r6, #88]	; 0x58
 80086b4:	4602      	mov	r2, r0
 80086b6:	b920      	cbnz	r0, 80086c2 <strtok+0x26>
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <strtok+0x60>)
 80086ba:	4811      	ldr	r0, [pc, #68]	; (8008700 <strtok+0x64>)
 80086bc:	2157      	movs	r1, #87	; 0x57
 80086be:	f000 f8e7 	bl	8008890 <__assert_func>
 80086c2:	e9c0 4400 	strd	r4, r4, [r0]
 80086c6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80086ca:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80086ce:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80086d2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80086d6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80086da:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80086de:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80086e2:	6184      	str	r4, [r0, #24]
 80086e4:	7704      	strb	r4, [r0, #28]
 80086e6:	6244      	str	r4, [r0, #36]	; 0x24
 80086e8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80086ea:	2301      	movs	r3, #1
 80086ec:	4628      	mov	r0, r5
 80086ee:	b002      	add	sp, #8
 80086f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086f4:	f000 b806 	b.w	8008704 <__strtok_r>
 80086f8:	20000058 	.word	0x20000058
 80086fc:	0800b770 	.word	0x0800b770
 8008700:	0800b787 	.word	0x0800b787

08008704 <__strtok_r>:
 8008704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008706:	b908      	cbnz	r0, 800870c <__strtok_r+0x8>
 8008708:	6810      	ldr	r0, [r2, #0]
 800870a:	b188      	cbz	r0, 8008730 <__strtok_r+0x2c>
 800870c:	4604      	mov	r4, r0
 800870e:	4620      	mov	r0, r4
 8008710:	f814 5b01 	ldrb.w	r5, [r4], #1
 8008714:	460f      	mov	r7, r1
 8008716:	f817 6b01 	ldrb.w	r6, [r7], #1
 800871a:	b91e      	cbnz	r6, 8008724 <__strtok_r+0x20>
 800871c:	b965      	cbnz	r5, 8008738 <__strtok_r+0x34>
 800871e:	6015      	str	r5, [r2, #0]
 8008720:	4628      	mov	r0, r5
 8008722:	e005      	b.n	8008730 <__strtok_r+0x2c>
 8008724:	42b5      	cmp	r5, r6
 8008726:	d1f6      	bne.n	8008716 <__strtok_r+0x12>
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1f0      	bne.n	800870e <__strtok_r+0xa>
 800872c:	6014      	str	r4, [r2, #0]
 800872e:	7003      	strb	r3, [r0, #0]
 8008730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008732:	461c      	mov	r4, r3
 8008734:	e00c      	b.n	8008750 <__strtok_r+0x4c>
 8008736:	b915      	cbnz	r5, 800873e <__strtok_r+0x3a>
 8008738:	f814 3b01 	ldrb.w	r3, [r4], #1
 800873c:	460e      	mov	r6, r1
 800873e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8008742:	42ab      	cmp	r3, r5
 8008744:	d1f7      	bne.n	8008736 <__strtok_r+0x32>
 8008746:	2b00      	cmp	r3, #0
 8008748:	d0f3      	beq.n	8008732 <__strtok_r+0x2e>
 800874a:	2300      	movs	r3, #0
 800874c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008750:	6014      	str	r4, [r2, #0]
 8008752:	e7ed      	b.n	8008730 <__strtok_r+0x2c>

08008754 <_strtol_l.constprop.0>:
 8008754:	2b01      	cmp	r3, #1
 8008756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800875a:	d001      	beq.n	8008760 <_strtol_l.constprop.0+0xc>
 800875c:	2b24      	cmp	r3, #36	; 0x24
 800875e:	d906      	bls.n	800876e <_strtol_l.constprop.0+0x1a>
 8008760:	f7fe fb2a 	bl	8006db8 <__errno>
 8008764:	2316      	movs	r3, #22
 8008766:	6003      	str	r3, [r0, #0]
 8008768:	2000      	movs	r0, #0
 800876a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800876e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008854 <_strtol_l.constprop.0+0x100>
 8008772:	460d      	mov	r5, r1
 8008774:	462e      	mov	r6, r5
 8008776:	f815 4b01 	ldrb.w	r4, [r5], #1
 800877a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800877e:	f017 0708 	ands.w	r7, r7, #8
 8008782:	d1f7      	bne.n	8008774 <_strtol_l.constprop.0+0x20>
 8008784:	2c2d      	cmp	r4, #45	; 0x2d
 8008786:	d132      	bne.n	80087ee <_strtol_l.constprop.0+0x9a>
 8008788:	782c      	ldrb	r4, [r5, #0]
 800878a:	2701      	movs	r7, #1
 800878c:	1cb5      	adds	r5, r6, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d05b      	beq.n	800884a <_strtol_l.constprop.0+0xf6>
 8008792:	2b10      	cmp	r3, #16
 8008794:	d109      	bne.n	80087aa <_strtol_l.constprop.0+0x56>
 8008796:	2c30      	cmp	r4, #48	; 0x30
 8008798:	d107      	bne.n	80087aa <_strtol_l.constprop.0+0x56>
 800879a:	782c      	ldrb	r4, [r5, #0]
 800879c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80087a0:	2c58      	cmp	r4, #88	; 0x58
 80087a2:	d14d      	bne.n	8008840 <_strtol_l.constprop.0+0xec>
 80087a4:	786c      	ldrb	r4, [r5, #1]
 80087a6:	2310      	movs	r3, #16
 80087a8:	3502      	adds	r5, #2
 80087aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80087ae:	f108 38ff 	add.w	r8, r8, #4294967295
 80087b2:	f04f 0c00 	mov.w	ip, #0
 80087b6:	fbb8 f9f3 	udiv	r9, r8, r3
 80087ba:	4666      	mov	r6, ip
 80087bc:	fb03 8a19 	mls	sl, r3, r9, r8
 80087c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80087c4:	f1be 0f09 	cmp.w	lr, #9
 80087c8:	d816      	bhi.n	80087f8 <_strtol_l.constprop.0+0xa4>
 80087ca:	4674      	mov	r4, lr
 80087cc:	42a3      	cmp	r3, r4
 80087ce:	dd24      	ble.n	800881a <_strtol_l.constprop.0+0xc6>
 80087d0:	f1bc 0f00 	cmp.w	ip, #0
 80087d4:	db1e      	blt.n	8008814 <_strtol_l.constprop.0+0xc0>
 80087d6:	45b1      	cmp	r9, r6
 80087d8:	d31c      	bcc.n	8008814 <_strtol_l.constprop.0+0xc0>
 80087da:	d101      	bne.n	80087e0 <_strtol_l.constprop.0+0x8c>
 80087dc:	45a2      	cmp	sl, r4
 80087de:	db19      	blt.n	8008814 <_strtol_l.constprop.0+0xc0>
 80087e0:	fb06 4603 	mla	r6, r6, r3, r4
 80087e4:	f04f 0c01 	mov.w	ip, #1
 80087e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80087ec:	e7e8      	b.n	80087c0 <_strtol_l.constprop.0+0x6c>
 80087ee:	2c2b      	cmp	r4, #43	; 0x2b
 80087f0:	bf04      	itt	eq
 80087f2:	782c      	ldrbeq	r4, [r5, #0]
 80087f4:	1cb5      	addeq	r5, r6, #2
 80087f6:	e7ca      	b.n	800878e <_strtol_l.constprop.0+0x3a>
 80087f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80087fc:	f1be 0f19 	cmp.w	lr, #25
 8008800:	d801      	bhi.n	8008806 <_strtol_l.constprop.0+0xb2>
 8008802:	3c37      	subs	r4, #55	; 0x37
 8008804:	e7e2      	b.n	80087cc <_strtol_l.constprop.0+0x78>
 8008806:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800880a:	f1be 0f19 	cmp.w	lr, #25
 800880e:	d804      	bhi.n	800881a <_strtol_l.constprop.0+0xc6>
 8008810:	3c57      	subs	r4, #87	; 0x57
 8008812:	e7db      	b.n	80087cc <_strtol_l.constprop.0+0x78>
 8008814:	f04f 3cff 	mov.w	ip, #4294967295
 8008818:	e7e6      	b.n	80087e8 <_strtol_l.constprop.0+0x94>
 800881a:	f1bc 0f00 	cmp.w	ip, #0
 800881e:	da05      	bge.n	800882c <_strtol_l.constprop.0+0xd8>
 8008820:	2322      	movs	r3, #34	; 0x22
 8008822:	6003      	str	r3, [r0, #0]
 8008824:	4646      	mov	r6, r8
 8008826:	b942      	cbnz	r2, 800883a <_strtol_l.constprop.0+0xe6>
 8008828:	4630      	mov	r0, r6
 800882a:	e79e      	b.n	800876a <_strtol_l.constprop.0+0x16>
 800882c:	b107      	cbz	r7, 8008830 <_strtol_l.constprop.0+0xdc>
 800882e:	4276      	negs	r6, r6
 8008830:	2a00      	cmp	r2, #0
 8008832:	d0f9      	beq.n	8008828 <_strtol_l.constprop.0+0xd4>
 8008834:	f1bc 0f00 	cmp.w	ip, #0
 8008838:	d000      	beq.n	800883c <_strtol_l.constprop.0+0xe8>
 800883a:	1e69      	subs	r1, r5, #1
 800883c:	6011      	str	r1, [r2, #0]
 800883e:	e7f3      	b.n	8008828 <_strtol_l.constprop.0+0xd4>
 8008840:	2430      	movs	r4, #48	; 0x30
 8008842:	2b00      	cmp	r3, #0
 8008844:	d1b1      	bne.n	80087aa <_strtol_l.constprop.0+0x56>
 8008846:	2308      	movs	r3, #8
 8008848:	e7af      	b.n	80087aa <_strtol_l.constprop.0+0x56>
 800884a:	2c30      	cmp	r4, #48	; 0x30
 800884c:	d0a5      	beq.n	800879a <_strtol_l.constprop.0+0x46>
 800884e:	230a      	movs	r3, #10
 8008850:	e7ab      	b.n	80087aa <_strtol_l.constprop.0+0x56>
 8008852:	bf00      	nop
 8008854:	0800b5e1 	.word	0x0800b5e1

08008858 <strtol>:
 8008858:	4613      	mov	r3, r2
 800885a:	460a      	mov	r2, r1
 800885c:	4601      	mov	r1, r0
 800885e:	4802      	ldr	r0, [pc, #8]	; (8008868 <strtol+0x10>)
 8008860:	6800      	ldr	r0, [r0, #0]
 8008862:	f7ff bf77 	b.w	8008754 <_strtol_l.constprop.0>
 8008866:	bf00      	nop
 8008868:	20000058 	.word	0x20000058

0800886c <_write_r>:
 800886c:	b538      	push	{r3, r4, r5, lr}
 800886e:	4d07      	ldr	r5, [pc, #28]	; (800888c <_write_r+0x20>)
 8008870:	4604      	mov	r4, r0
 8008872:	4608      	mov	r0, r1
 8008874:	4611      	mov	r1, r2
 8008876:	2200      	movs	r2, #0
 8008878:	602a      	str	r2, [r5, #0]
 800887a:	461a      	mov	r2, r3
 800887c:	f7fa fee1 	bl	8003642 <_write>
 8008880:	1c43      	adds	r3, r0, #1
 8008882:	d102      	bne.n	800888a <_write_r+0x1e>
 8008884:	682b      	ldr	r3, [r5, #0]
 8008886:	b103      	cbz	r3, 800888a <_write_r+0x1e>
 8008888:	6023      	str	r3, [r4, #0]
 800888a:	bd38      	pop	{r3, r4, r5, pc}
 800888c:	200005e0 	.word	0x200005e0

08008890 <__assert_func>:
 8008890:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008892:	4614      	mov	r4, r2
 8008894:	461a      	mov	r2, r3
 8008896:	4b09      	ldr	r3, [pc, #36]	; (80088bc <__assert_func+0x2c>)
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	4605      	mov	r5, r0
 800889c:	68d8      	ldr	r0, [r3, #12]
 800889e:	b14c      	cbz	r4, 80088b4 <__assert_func+0x24>
 80088a0:	4b07      	ldr	r3, [pc, #28]	; (80088c0 <__assert_func+0x30>)
 80088a2:	9100      	str	r1, [sp, #0]
 80088a4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088a8:	4906      	ldr	r1, [pc, #24]	; (80088c4 <__assert_func+0x34>)
 80088aa:	462b      	mov	r3, r5
 80088ac:	f000 ff70 	bl	8009790 <fiprintf>
 80088b0:	f002 fbec 	bl	800b08c <abort>
 80088b4:	4b04      	ldr	r3, [pc, #16]	; (80088c8 <__assert_func+0x38>)
 80088b6:	461c      	mov	r4, r3
 80088b8:	e7f3      	b.n	80088a2 <__assert_func+0x12>
 80088ba:	bf00      	nop
 80088bc:	20000058 	.word	0x20000058
 80088c0:	0800b7e4 	.word	0x0800b7e4
 80088c4:	0800b7f1 	.word	0x0800b7f1
 80088c8:	0800b81f 	.word	0x0800b81f

080088cc <_close_r>:
 80088cc:	b538      	push	{r3, r4, r5, lr}
 80088ce:	4d06      	ldr	r5, [pc, #24]	; (80088e8 <_close_r+0x1c>)
 80088d0:	2300      	movs	r3, #0
 80088d2:	4604      	mov	r4, r0
 80088d4:	4608      	mov	r0, r1
 80088d6:	602b      	str	r3, [r5, #0]
 80088d8:	f7fa fecf 	bl	800367a <_close>
 80088dc:	1c43      	adds	r3, r0, #1
 80088de:	d102      	bne.n	80088e6 <_close_r+0x1a>
 80088e0:	682b      	ldr	r3, [r5, #0]
 80088e2:	b103      	cbz	r3, 80088e6 <_close_r+0x1a>
 80088e4:	6023      	str	r3, [r4, #0]
 80088e6:	bd38      	pop	{r3, r4, r5, pc}
 80088e8:	200005e0 	.word	0x200005e0

080088ec <quorem>:
 80088ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f0:	6903      	ldr	r3, [r0, #16]
 80088f2:	690c      	ldr	r4, [r1, #16]
 80088f4:	42a3      	cmp	r3, r4
 80088f6:	4607      	mov	r7, r0
 80088f8:	f2c0 8081 	blt.w	80089fe <quorem+0x112>
 80088fc:	3c01      	subs	r4, #1
 80088fe:	f101 0814 	add.w	r8, r1, #20
 8008902:	f100 0514 	add.w	r5, r0, #20
 8008906:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800890a:	9301      	str	r3, [sp, #4]
 800890c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008910:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008914:	3301      	adds	r3, #1
 8008916:	429a      	cmp	r2, r3
 8008918:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800891c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008920:	fbb2 f6f3 	udiv	r6, r2, r3
 8008924:	d331      	bcc.n	800898a <quorem+0x9e>
 8008926:	f04f 0e00 	mov.w	lr, #0
 800892a:	4640      	mov	r0, r8
 800892c:	46ac      	mov	ip, r5
 800892e:	46f2      	mov	sl, lr
 8008930:	f850 2b04 	ldr.w	r2, [r0], #4
 8008934:	b293      	uxth	r3, r2
 8008936:	fb06 e303 	mla	r3, r6, r3, lr
 800893a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800893e:	b29b      	uxth	r3, r3
 8008940:	ebaa 0303 	sub.w	r3, sl, r3
 8008944:	f8dc a000 	ldr.w	sl, [ip]
 8008948:	0c12      	lsrs	r2, r2, #16
 800894a:	fa13 f38a 	uxtah	r3, r3, sl
 800894e:	fb06 e202 	mla	r2, r6, r2, lr
 8008952:	9300      	str	r3, [sp, #0]
 8008954:	9b00      	ldr	r3, [sp, #0]
 8008956:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800895a:	b292      	uxth	r2, r2
 800895c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008960:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008964:	f8bd 3000 	ldrh.w	r3, [sp]
 8008968:	4581      	cmp	r9, r0
 800896a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800896e:	f84c 3b04 	str.w	r3, [ip], #4
 8008972:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008976:	d2db      	bcs.n	8008930 <quorem+0x44>
 8008978:	f855 300b 	ldr.w	r3, [r5, fp]
 800897c:	b92b      	cbnz	r3, 800898a <quorem+0x9e>
 800897e:	9b01      	ldr	r3, [sp, #4]
 8008980:	3b04      	subs	r3, #4
 8008982:	429d      	cmp	r5, r3
 8008984:	461a      	mov	r2, r3
 8008986:	d32e      	bcc.n	80089e6 <quorem+0xfa>
 8008988:	613c      	str	r4, [r7, #16]
 800898a:	4638      	mov	r0, r7
 800898c:	f001 fda4 	bl	800a4d8 <__mcmp>
 8008990:	2800      	cmp	r0, #0
 8008992:	db24      	blt.n	80089de <quorem+0xf2>
 8008994:	3601      	adds	r6, #1
 8008996:	4628      	mov	r0, r5
 8008998:	f04f 0c00 	mov.w	ip, #0
 800899c:	f858 2b04 	ldr.w	r2, [r8], #4
 80089a0:	f8d0 e000 	ldr.w	lr, [r0]
 80089a4:	b293      	uxth	r3, r2
 80089a6:	ebac 0303 	sub.w	r3, ip, r3
 80089aa:	0c12      	lsrs	r2, r2, #16
 80089ac:	fa13 f38e 	uxtah	r3, r3, lr
 80089b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80089b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80089b8:	b29b      	uxth	r3, r3
 80089ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089be:	45c1      	cmp	r9, r8
 80089c0:	f840 3b04 	str.w	r3, [r0], #4
 80089c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80089c8:	d2e8      	bcs.n	800899c <quorem+0xb0>
 80089ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80089ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80089d2:	b922      	cbnz	r2, 80089de <quorem+0xf2>
 80089d4:	3b04      	subs	r3, #4
 80089d6:	429d      	cmp	r5, r3
 80089d8:	461a      	mov	r2, r3
 80089da:	d30a      	bcc.n	80089f2 <quorem+0x106>
 80089dc:	613c      	str	r4, [r7, #16]
 80089de:	4630      	mov	r0, r6
 80089e0:	b003      	add	sp, #12
 80089e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089e6:	6812      	ldr	r2, [r2, #0]
 80089e8:	3b04      	subs	r3, #4
 80089ea:	2a00      	cmp	r2, #0
 80089ec:	d1cc      	bne.n	8008988 <quorem+0x9c>
 80089ee:	3c01      	subs	r4, #1
 80089f0:	e7c7      	b.n	8008982 <quorem+0x96>
 80089f2:	6812      	ldr	r2, [r2, #0]
 80089f4:	3b04      	subs	r3, #4
 80089f6:	2a00      	cmp	r2, #0
 80089f8:	d1f0      	bne.n	80089dc <quorem+0xf0>
 80089fa:	3c01      	subs	r4, #1
 80089fc:	e7eb      	b.n	80089d6 <quorem+0xea>
 80089fe:	2000      	movs	r0, #0
 8008a00:	e7ee      	b.n	80089e0 <quorem+0xf4>
 8008a02:	0000      	movs	r0, r0
 8008a04:	0000      	movs	r0, r0
	...

08008a08 <_dtoa_r>:
 8008a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a0c:	ed2d 8b04 	vpush	{d8-d9}
 8008a10:	ec57 6b10 	vmov	r6, r7, d0
 8008a14:	b093      	sub	sp, #76	; 0x4c
 8008a16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008a18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008a1c:	9106      	str	r1, [sp, #24]
 8008a1e:	ee10 aa10 	vmov	sl, s0
 8008a22:	4604      	mov	r4, r0
 8008a24:	9209      	str	r2, [sp, #36]	; 0x24
 8008a26:	930c      	str	r3, [sp, #48]	; 0x30
 8008a28:	46bb      	mov	fp, r7
 8008a2a:	b975      	cbnz	r5, 8008a4a <_dtoa_r+0x42>
 8008a2c:	2010      	movs	r0, #16
 8008a2e:	f7fe f9ed 	bl	8006e0c <malloc>
 8008a32:	4602      	mov	r2, r0
 8008a34:	6260      	str	r0, [r4, #36]	; 0x24
 8008a36:	b920      	cbnz	r0, 8008a42 <_dtoa_r+0x3a>
 8008a38:	4ba7      	ldr	r3, [pc, #668]	; (8008cd8 <_dtoa_r+0x2d0>)
 8008a3a:	21ea      	movs	r1, #234	; 0xea
 8008a3c:	48a7      	ldr	r0, [pc, #668]	; (8008cdc <_dtoa_r+0x2d4>)
 8008a3e:	f7ff ff27 	bl	8008890 <__assert_func>
 8008a42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8008a46:	6005      	str	r5, [r0, #0]
 8008a48:	60c5      	str	r5, [r0, #12]
 8008a4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a4c:	6819      	ldr	r1, [r3, #0]
 8008a4e:	b151      	cbz	r1, 8008a66 <_dtoa_r+0x5e>
 8008a50:	685a      	ldr	r2, [r3, #4]
 8008a52:	604a      	str	r2, [r1, #4]
 8008a54:	2301      	movs	r3, #1
 8008a56:	4093      	lsls	r3, r2
 8008a58:	608b      	str	r3, [r1, #8]
 8008a5a:	4620      	mov	r0, r4
 8008a5c:	f001 fab0 	bl	8009fc0 <_Bfree>
 8008a60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008a62:	2200      	movs	r2, #0
 8008a64:	601a      	str	r2, [r3, #0]
 8008a66:	1e3b      	subs	r3, r7, #0
 8008a68:	bfaa      	itet	ge
 8008a6a:	2300      	movge	r3, #0
 8008a6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008a70:	f8c8 3000 	strge.w	r3, [r8]
 8008a74:	4b9a      	ldr	r3, [pc, #616]	; (8008ce0 <_dtoa_r+0x2d8>)
 8008a76:	bfbc      	itt	lt
 8008a78:	2201      	movlt	r2, #1
 8008a7a:	f8c8 2000 	strlt.w	r2, [r8]
 8008a7e:	ea33 030b 	bics.w	r3, r3, fp
 8008a82:	d11b      	bne.n	8008abc <_dtoa_r+0xb4>
 8008a84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a86:	f242 730f 	movw	r3, #9999	; 0x270f
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a90:	4333      	orrs	r3, r6
 8008a92:	f000 8592 	beq.w	80095ba <_dtoa_r+0xbb2>
 8008a96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008a98:	b963      	cbnz	r3, 8008ab4 <_dtoa_r+0xac>
 8008a9a:	4b92      	ldr	r3, [pc, #584]	; (8008ce4 <_dtoa_r+0x2dc>)
 8008a9c:	e022      	b.n	8008ae4 <_dtoa_r+0xdc>
 8008a9e:	4b92      	ldr	r3, [pc, #584]	; (8008ce8 <_dtoa_r+0x2e0>)
 8008aa0:	9301      	str	r3, [sp, #4]
 8008aa2:	3308      	adds	r3, #8
 8008aa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008aa6:	6013      	str	r3, [r2, #0]
 8008aa8:	9801      	ldr	r0, [sp, #4]
 8008aaa:	b013      	add	sp, #76	; 0x4c
 8008aac:	ecbd 8b04 	vpop	{d8-d9}
 8008ab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ab4:	4b8b      	ldr	r3, [pc, #556]	; (8008ce4 <_dtoa_r+0x2dc>)
 8008ab6:	9301      	str	r3, [sp, #4]
 8008ab8:	3303      	adds	r3, #3
 8008aba:	e7f3      	b.n	8008aa4 <_dtoa_r+0x9c>
 8008abc:	2200      	movs	r2, #0
 8008abe:	2300      	movs	r3, #0
 8008ac0:	4650      	mov	r0, sl
 8008ac2:	4659      	mov	r1, fp
 8008ac4:	f7f8 f800 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ac8:	ec4b ab19 	vmov	d9, sl, fp
 8008acc:	4680      	mov	r8, r0
 8008ace:	b158      	cbz	r0, 8008ae8 <_dtoa_r+0xe0>
 8008ad0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	6013      	str	r3, [r2, #0]
 8008ad6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 856b 	beq.w	80095b4 <_dtoa_r+0xbac>
 8008ade:	4883      	ldr	r0, [pc, #524]	; (8008cec <_dtoa_r+0x2e4>)
 8008ae0:	6018      	str	r0, [r3, #0]
 8008ae2:	1e43      	subs	r3, r0, #1
 8008ae4:	9301      	str	r3, [sp, #4]
 8008ae6:	e7df      	b.n	8008aa8 <_dtoa_r+0xa0>
 8008ae8:	ec4b ab10 	vmov	d0, sl, fp
 8008aec:	aa10      	add	r2, sp, #64	; 0x40
 8008aee:	a911      	add	r1, sp, #68	; 0x44
 8008af0:	4620      	mov	r0, r4
 8008af2:	f001 fe13 	bl	800a71c <__d2b>
 8008af6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008afa:	ee08 0a10 	vmov	s16, r0
 8008afe:	2d00      	cmp	r5, #0
 8008b00:	f000 8084 	beq.w	8008c0c <_dtoa_r+0x204>
 8008b04:	ee19 3a90 	vmov	r3, s19
 8008b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008b0c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008b10:	4656      	mov	r6, sl
 8008b12:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8008b16:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008b1a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008b1e:	4b74      	ldr	r3, [pc, #464]	; (8008cf0 <_dtoa_r+0x2e8>)
 8008b20:	2200      	movs	r2, #0
 8008b22:	4630      	mov	r0, r6
 8008b24:	4639      	mov	r1, r7
 8008b26:	f7f7 fbaf 	bl	8000288 <__aeabi_dsub>
 8008b2a:	a365      	add	r3, pc, #404	; (adr r3, 8008cc0 <_dtoa_r+0x2b8>)
 8008b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b30:	f7f7 fd62 	bl	80005f8 <__aeabi_dmul>
 8008b34:	a364      	add	r3, pc, #400	; (adr r3, 8008cc8 <_dtoa_r+0x2c0>)
 8008b36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b3a:	f7f7 fba7 	bl	800028c <__adddf3>
 8008b3e:	4606      	mov	r6, r0
 8008b40:	4628      	mov	r0, r5
 8008b42:	460f      	mov	r7, r1
 8008b44:	f7f7 fcee 	bl	8000524 <__aeabi_i2d>
 8008b48:	a361      	add	r3, pc, #388	; (adr r3, 8008cd0 <_dtoa_r+0x2c8>)
 8008b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b4e:	f7f7 fd53 	bl	80005f8 <__aeabi_dmul>
 8008b52:	4602      	mov	r2, r0
 8008b54:	460b      	mov	r3, r1
 8008b56:	4630      	mov	r0, r6
 8008b58:	4639      	mov	r1, r7
 8008b5a:	f7f7 fb97 	bl	800028c <__adddf3>
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	f7f7 fff9 	bl	8000b58 <__aeabi_d2iz>
 8008b66:	2200      	movs	r2, #0
 8008b68:	9000      	str	r0, [sp, #0]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	4630      	mov	r0, r6
 8008b6e:	4639      	mov	r1, r7
 8008b70:	f7f7 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8008b74:	b150      	cbz	r0, 8008b8c <_dtoa_r+0x184>
 8008b76:	9800      	ldr	r0, [sp, #0]
 8008b78:	f7f7 fcd4 	bl	8000524 <__aeabi_i2d>
 8008b7c:	4632      	mov	r2, r6
 8008b7e:	463b      	mov	r3, r7
 8008b80:	f7f7 ffa2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b84:	b910      	cbnz	r0, 8008b8c <_dtoa_r+0x184>
 8008b86:	9b00      	ldr	r3, [sp, #0]
 8008b88:	3b01      	subs	r3, #1
 8008b8a:	9300      	str	r3, [sp, #0]
 8008b8c:	9b00      	ldr	r3, [sp, #0]
 8008b8e:	2b16      	cmp	r3, #22
 8008b90:	d85a      	bhi.n	8008c48 <_dtoa_r+0x240>
 8008b92:	9a00      	ldr	r2, [sp, #0]
 8008b94:	4b57      	ldr	r3, [pc, #348]	; (8008cf4 <_dtoa_r+0x2ec>)
 8008b96:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b9e:	ec51 0b19 	vmov	r0, r1, d9
 8008ba2:	f7f7 ff9b 	bl	8000adc <__aeabi_dcmplt>
 8008ba6:	2800      	cmp	r0, #0
 8008ba8:	d050      	beq.n	8008c4c <_dtoa_r+0x244>
 8008baa:	9b00      	ldr	r3, [sp, #0]
 8008bac:	3b01      	subs	r3, #1
 8008bae:	9300      	str	r3, [sp, #0]
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	930b      	str	r3, [sp, #44]	; 0x2c
 8008bb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008bb6:	1b5d      	subs	r5, r3, r5
 8008bb8:	1e6b      	subs	r3, r5, #1
 8008bba:	9305      	str	r3, [sp, #20]
 8008bbc:	bf45      	ittet	mi
 8008bbe:	f1c5 0301 	rsbmi	r3, r5, #1
 8008bc2:	9304      	strmi	r3, [sp, #16]
 8008bc4:	2300      	movpl	r3, #0
 8008bc6:	2300      	movmi	r3, #0
 8008bc8:	bf4c      	ite	mi
 8008bca:	9305      	strmi	r3, [sp, #20]
 8008bcc:	9304      	strpl	r3, [sp, #16]
 8008bce:	9b00      	ldr	r3, [sp, #0]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	db3d      	blt.n	8008c50 <_dtoa_r+0x248>
 8008bd4:	9b05      	ldr	r3, [sp, #20]
 8008bd6:	9a00      	ldr	r2, [sp, #0]
 8008bd8:	920a      	str	r2, [sp, #40]	; 0x28
 8008bda:	4413      	add	r3, r2
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	2300      	movs	r3, #0
 8008be0:	9307      	str	r3, [sp, #28]
 8008be2:	9b06      	ldr	r3, [sp, #24]
 8008be4:	2b09      	cmp	r3, #9
 8008be6:	f200 8089 	bhi.w	8008cfc <_dtoa_r+0x2f4>
 8008bea:	2b05      	cmp	r3, #5
 8008bec:	bfc4      	itt	gt
 8008bee:	3b04      	subgt	r3, #4
 8008bf0:	9306      	strgt	r3, [sp, #24]
 8008bf2:	9b06      	ldr	r3, [sp, #24]
 8008bf4:	f1a3 0302 	sub.w	r3, r3, #2
 8008bf8:	bfcc      	ite	gt
 8008bfa:	2500      	movgt	r5, #0
 8008bfc:	2501      	movle	r5, #1
 8008bfe:	2b03      	cmp	r3, #3
 8008c00:	f200 8087 	bhi.w	8008d12 <_dtoa_r+0x30a>
 8008c04:	e8df f003 	tbb	[pc, r3]
 8008c08:	59383a2d 	.word	0x59383a2d
 8008c0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008c10:	441d      	add	r5, r3
 8008c12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8008c16:	2b20      	cmp	r3, #32
 8008c18:	bfc1      	itttt	gt
 8008c1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008c1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8008c22:	fa0b f303 	lslgt.w	r3, fp, r3
 8008c26:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008c2a:	bfda      	itte	le
 8008c2c:	f1c3 0320 	rsble	r3, r3, #32
 8008c30:	fa06 f003 	lslle.w	r0, r6, r3
 8008c34:	4318      	orrgt	r0, r3
 8008c36:	f7f7 fc65 	bl	8000504 <__aeabi_ui2d>
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4606      	mov	r6, r0
 8008c3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8008c42:	3d01      	subs	r5, #1
 8008c44:	930e      	str	r3, [sp, #56]	; 0x38
 8008c46:	e76a      	b.n	8008b1e <_dtoa_r+0x116>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7b2      	b.n	8008bb2 <_dtoa_r+0x1aa>
 8008c4c:	900b      	str	r0, [sp, #44]	; 0x2c
 8008c4e:	e7b1      	b.n	8008bb4 <_dtoa_r+0x1ac>
 8008c50:	9b04      	ldr	r3, [sp, #16]
 8008c52:	9a00      	ldr	r2, [sp, #0]
 8008c54:	1a9b      	subs	r3, r3, r2
 8008c56:	9304      	str	r3, [sp, #16]
 8008c58:	4253      	negs	r3, r2
 8008c5a:	9307      	str	r3, [sp, #28]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	930a      	str	r3, [sp, #40]	; 0x28
 8008c60:	e7bf      	b.n	8008be2 <_dtoa_r+0x1da>
 8008c62:	2300      	movs	r3, #0
 8008c64:	9308      	str	r3, [sp, #32]
 8008c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	dc55      	bgt.n	8008d18 <_dtoa_r+0x310>
 8008c6c:	2301      	movs	r3, #1
 8008c6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008c72:	461a      	mov	r2, r3
 8008c74:	9209      	str	r2, [sp, #36]	; 0x24
 8008c76:	e00c      	b.n	8008c92 <_dtoa_r+0x28a>
 8008c78:	2301      	movs	r3, #1
 8008c7a:	e7f3      	b.n	8008c64 <_dtoa_r+0x25c>
 8008c7c:	2300      	movs	r3, #0
 8008c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c80:	9308      	str	r3, [sp, #32]
 8008c82:	9b00      	ldr	r3, [sp, #0]
 8008c84:	4413      	add	r3, r2
 8008c86:	9302      	str	r3, [sp, #8]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	9303      	str	r3, [sp, #12]
 8008c8e:	bfb8      	it	lt
 8008c90:	2301      	movlt	r3, #1
 8008c92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008c94:	2200      	movs	r2, #0
 8008c96:	6042      	str	r2, [r0, #4]
 8008c98:	2204      	movs	r2, #4
 8008c9a:	f102 0614 	add.w	r6, r2, #20
 8008c9e:	429e      	cmp	r6, r3
 8008ca0:	6841      	ldr	r1, [r0, #4]
 8008ca2:	d93d      	bls.n	8008d20 <_dtoa_r+0x318>
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	f001 f94b 	bl	8009f40 <_Balloc>
 8008caa:	9001      	str	r0, [sp, #4]
 8008cac:	2800      	cmp	r0, #0
 8008cae:	d13b      	bne.n	8008d28 <_dtoa_r+0x320>
 8008cb0:	4b11      	ldr	r3, [pc, #68]	; (8008cf8 <_dtoa_r+0x2f0>)
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008cb8:	e6c0      	b.n	8008a3c <_dtoa_r+0x34>
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e7df      	b.n	8008c7e <_dtoa_r+0x276>
 8008cbe:	bf00      	nop
 8008cc0:	636f4361 	.word	0x636f4361
 8008cc4:	3fd287a7 	.word	0x3fd287a7
 8008cc8:	8b60c8b3 	.word	0x8b60c8b3
 8008ccc:	3fc68a28 	.word	0x3fc68a28
 8008cd0:	509f79fb 	.word	0x509f79fb
 8008cd4:	3fd34413 	.word	0x3fd34413
 8008cd8:	0800b770 	.word	0x0800b770
 8008cdc:	0800b82d 	.word	0x0800b82d
 8008ce0:	7ff00000 	.word	0x7ff00000
 8008ce4:	0800b829 	.word	0x0800b829
 8008ce8:	0800b820 	.word	0x0800b820
 8008cec:	0800b6f9 	.word	0x0800b6f9
 8008cf0:	3ff80000 	.word	0x3ff80000
 8008cf4:	0800ba00 	.word	0x0800ba00
 8008cf8:	0800b888 	.word	0x0800b888
 8008cfc:	2501      	movs	r5, #1
 8008cfe:	2300      	movs	r3, #0
 8008d00:	9306      	str	r3, [sp, #24]
 8008d02:	9508      	str	r5, [sp, #32]
 8008d04:	f04f 33ff 	mov.w	r3, #4294967295
 8008d08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	2312      	movs	r3, #18
 8008d10:	e7b0      	b.n	8008c74 <_dtoa_r+0x26c>
 8008d12:	2301      	movs	r3, #1
 8008d14:	9308      	str	r3, [sp, #32]
 8008d16:	e7f5      	b.n	8008d04 <_dtoa_r+0x2fc>
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008d1e:	e7b8      	b.n	8008c92 <_dtoa_r+0x28a>
 8008d20:	3101      	adds	r1, #1
 8008d22:	6041      	str	r1, [r0, #4]
 8008d24:	0052      	lsls	r2, r2, #1
 8008d26:	e7b8      	b.n	8008c9a <_dtoa_r+0x292>
 8008d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d2a:	9a01      	ldr	r2, [sp, #4]
 8008d2c:	601a      	str	r2, [r3, #0]
 8008d2e:	9b03      	ldr	r3, [sp, #12]
 8008d30:	2b0e      	cmp	r3, #14
 8008d32:	f200 809d 	bhi.w	8008e70 <_dtoa_r+0x468>
 8008d36:	2d00      	cmp	r5, #0
 8008d38:	f000 809a 	beq.w	8008e70 <_dtoa_r+0x468>
 8008d3c:	9b00      	ldr	r3, [sp, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	dd32      	ble.n	8008da8 <_dtoa_r+0x3a0>
 8008d42:	4ab7      	ldr	r2, [pc, #732]	; (8009020 <_dtoa_r+0x618>)
 8008d44:	f003 030f 	and.w	r3, r3, #15
 8008d48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008d4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008d50:	9b00      	ldr	r3, [sp, #0]
 8008d52:	05d8      	lsls	r0, r3, #23
 8008d54:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008d58:	d516      	bpl.n	8008d88 <_dtoa_r+0x380>
 8008d5a:	4bb2      	ldr	r3, [pc, #712]	; (8009024 <_dtoa_r+0x61c>)
 8008d5c:	ec51 0b19 	vmov	r0, r1, d9
 8008d60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008d64:	f7f7 fd72 	bl	800084c <__aeabi_ddiv>
 8008d68:	f007 070f 	and.w	r7, r7, #15
 8008d6c:	4682      	mov	sl, r0
 8008d6e:	468b      	mov	fp, r1
 8008d70:	2503      	movs	r5, #3
 8008d72:	4eac      	ldr	r6, [pc, #688]	; (8009024 <_dtoa_r+0x61c>)
 8008d74:	b957      	cbnz	r7, 8008d8c <_dtoa_r+0x384>
 8008d76:	4642      	mov	r2, r8
 8008d78:	464b      	mov	r3, r9
 8008d7a:	4650      	mov	r0, sl
 8008d7c:	4659      	mov	r1, fp
 8008d7e:	f7f7 fd65 	bl	800084c <__aeabi_ddiv>
 8008d82:	4682      	mov	sl, r0
 8008d84:	468b      	mov	fp, r1
 8008d86:	e028      	b.n	8008dda <_dtoa_r+0x3d2>
 8008d88:	2502      	movs	r5, #2
 8008d8a:	e7f2      	b.n	8008d72 <_dtoa_r+0x36a>
 8008d8c:	07f9      	lsls	r1, r7, #31
 8008d8e:	d508      	bpl.n	8008da2 <_dtoa_r+0x39a>
 8008d90:	4640      	mov	r0, r8
 8008d92:	4649      	mov	r1, r9
 8008d94:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008d98:	f7f7 fc2e 	bl	80005f8 <__aeabi_dmul>
 8008d9c:	3501      	adds	r5, #1
 8008d9e:	4680      	mov	r8, r0
 8008da0:	4689      	mov	r9, r1
 8008da2:	107f      	asrs	r7, r7, #1
 8008da4:	3608      	adds	r6, #8
 8008da6:	e7e5      	b.n	8008d74 <_dtoa_r+0x36c>
 8008da8:	f000 809b 	beq.w	8008ee2 <_dtoa_r+0x4da>
 8008dac:	9b00      	ldr	r3, [sp, #0]
 8008dae:	4f9d      	ldr	r7, [pc, #628]	; (8009024 <_dtoa_r+0x61c>)
 8008db0:	425e      	negs	r6, r3
 8008db2:	4b9b      	ldr	r3, [pc, #620]	; (8009020 <_dtoa_r+0x618>)
 8008db4:	f006 020f 	and.w	r2, r6, #15
 8008db8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc0:	ec51 0b19 	vmov	r0, r1, d9
 8008dc4:	f7f7 fc18 	bl	80005f8 <__aeabi_dmul>
 8008dc8:	1136      	asrs	r6, r6, #4
 8008dca:	4682      	mov	sl, r0
 8008dcc:	468b      	mov	fp, r1
 8008dce:	2300      	movs	r3, #0
 8008dd0:	2502      	movs	r5, #2
 8008dd2:	2e00      	cmp	r6, #0
 8008dd4:	d17a      	bne.n	8008ecc <_dtoa_r+0x4c4>
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1d3      	bne.n	8008d82 <_dtoa_r+0x37a>
 8008dda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	f000 8082 	beq.w	8008ee6 <_dtoa_r+0x4de>
 8008de2:	4b91      	ldr	r3, [pc, #580]	; (8009028 <_dtoa_r+0x620>)
 8008de4:	2200      	movs	r2, #0
 8008de6:	4650      	mov	r0, sl
 8008de8:	4659      	mov	r1, fp
 8008dea:	f7f7 fe77 	bl	8000adc <__aeabi_dcmplt>
 8008dee:	2800      	cmp	r0, #0
 8008df0:	d079      	beq.n	8008ee6 <_dtoa_r+0x4de>
 8008df2:	9b03      	ldr	r3, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d076      	beq.n	8008ee6 <_dtoa_r+0x4de>
 8008df8:	9b02      	ldr	r3, [sp, #8]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	dd36      	ble.n	8008e6c <_dtoa_r+0x464>
 8008dfe:	9b00      	ldr	r3, [sp, #0]
 8008e00:	4650      	mov	r0, sl
 8008e02:	4659      	mov	r1, fp
 8008e04:	1e5f      	subs	r7, r3, #1
 8008e06:	2200      	movs	r2, #0
 8008e08:	4b88      	ldr	r3, [pc, #544]	; (800902c <_dtoa_r+0x624>)
 8008e0a:	f7f7 fbf5 	bl	80005f8 <__aeabi_dmul>
 8008e0e:	9e02      	ldr	r6, [sp, #8]
 8008e10:	4682      	mov	sl, r0
 8008e12:	468b      	mov	fp, r1
 8008e14:	3501      	adds	r5, #1
 8008e16:	4628      	mov	r0, r5
 8008e18:	f7f7 fb84 	bl	8000524 <__aeabi_i2d>
 8008e1c:	4652      	mov	r2, sl
 8008e1e:	465b      	mov	r3, fp
 8008e20:	f7f7 fbea 	bl	80005f8 <__aeabi_dmul>
 8008e24:	4b82      	ldr	r3, [pc, #520]	; (8009030 <_dtoa_r+0x628>)
 8008e26:	2200      	movs	r2, #0
 8008e28:	f7f7 fa30 	bl	800028c <__adddf3>
 8008e2c:	46d0      	mov	r8, sl
 8008e2e:	46d9      	mov	r9, fp
 8008e30:	4682      	mov	sl, r0
 8008e32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8008e36:	2e00      	cmp	r6, #0
 8008e38:	d158      	bne.n	8008eec <_dtoa_r+0x4e4>
 8008e3a:	4b7e      	ldr	r3, [pc, #504]	; (8009034 <_dtoa_r+0x62c>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	4640      	mov	r0, r8
 8008e40:	4649      	mov	r1, r9
 8008e42:	f7f7 fa21 	bl	8000288 <__aeabi_dsub>
 8008e46:	4652      	mov	r2, sl
 8008e48:	465b      	mov	r3, fp
 8008e4a:	4680      	mov	r8, r0
 8008e4c:	4689      	mov	r9, r1
 8008e4e:	f7f7 fe63 	bl	8000b18 <__aeabi_dcmpgt>
 8008e52:	2800      	cmp	r0, #0
 8008e54:	f040 8295 	bne.w	8009382 <_dtoa_r+0x97a>
 8008e58:	4652      	mov	r2, sl
 8008e5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008e5e:	4640      	mov	r0, r8
 8008e60:	4649      	mov	r1, r9
 8008e62:	f7f7 fe3b 	bl	8000adc <__aeabi_dcmplt>
 8008e66:	2800      	cmp	r0, #0
 8008e68:	f040 8289 	bne.w	800937e <_dtoa_r+0x976>
 8008e6c:	ec5b ab19 	vmov	sl, fp, d9
 8008e70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	f2c0 8148 	blt.w	8009108 <_dtoa_r+0x700>
 8008e78:	9a00      	ldr	r2, [sp, #0]
 8008e7a:	2a0e      	cmp	r2, #14
 8008e7c:	f300 8144 	bgt.w	8009108 <_dtoa_r+0x700>
 8008e80:	4b67      	ldr	r3, [pc, #412]	; (8009020 <_dtoa_r+0x618>)
 8008e82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008e86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008e8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f280 80d5 	bge.w	800903c <_dtoa_r+0x634>
 8008e92:	9b03      	ldr	r3, [sp, #12]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	f300 80d1 	bgt.w	800903c <_dtoa_r+0x634>
 8008e9a:	f040 826f 	bne.w	800937c <_dtoa_r+0x974>
 8008e9e:	4b65      	ldr	r3, [pc, #404]	; (8009034 <_dtoa_r+0x62c>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	4640      	mov	r0, r8
 8008ea4:	4649      	mov	r1, r9
 8008ea6:	f7f7 fba7 	bl	80005f8 <__aeabi_dmul>
 8008eaa:	4652      	mov	r2, sl
 8008eac:	465b      	mov	r3, fp
 8008eae:	f7f7 fe29 	bl	8000b04 <__aeabi_dcmpge>
 8008eb2:	9e03      	ldr	r6, [sp, #12]
 8008eb4:	4637      	mov	r7, r6
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f040 8245 	bne.w	8009346 <_dtoa_r+0x93e>
 8008ebc:	9d01      	ldr	r5, [sp, #4]
 8008ebe:	2331      	movs	r3, #49	; 0x31
 8008ec0:	f805 3b01 	strb.w	r3, [r5], #1
 8008ec4:	9b00      	ldr	r3, [sp, #0]
 8008ec6:	3301      	adds	r3, #1
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	e240      	b.n	800934e <_dtoa_r+0x946>
 8008ecc:	07f2      	lsls	r2, r6, #31
 8008ece:	d505      	bpl.n	8008edc <_dtoa_r+0x4d4>
 8008ed0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008ed4:	f7f7 fb90 	bl	80005f8 <__aeabi_dmul>
 8008ed8:	3501      	adds	r5, #1
 8008eda:	2301      	movs	r3, #1
 8008edc:	1076      	asrs	r6, r6, #1
 8008ede:	3708      	adds	r7, #8
 8008ee0:	e777      	b.n	8008dd2 <_dtoa_r+0x3ca>
 8008ee2:	2502      	movs	r5, #2
 8008ee4:	e779      	b.n	8008dda <_dtoa_r+0x3d2>
 8008ee6:	9f00      	ldr	r7, [sp, #0]
 8008ee8:	9e03      	ldr	r6, [sp, #12]
 8008eea:	e794      	b.n	8008e16 <_dtoa_r+0x40e>
 8008eec:	9901      	ldr	r1, [sp, #4]
 8008eee:	4b4c      	ldr	r3, [pc, #304]	; (8009020 <_dtoa_r+0x618>)
 8008ef0:	4431      	add	r1, r6
 8008ef2:	910d      	str	r1, [sp, #52]	; 0x34
 8008ef4:	9908      	ldr	r1, [sp, #32]
 8008ef6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008efa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008efe:	2900      	cmp	r1, #0
 8008f00:	d043      	beq.n	8008f8a <_dtoa_r+0x582>
 8008f02:	494d      	ldr	r1, [pc, #308]	; (8009038 <_dtoa_r+0x630>)
 8008f04:	2000      	movs	r0, #0
 8008f06:	f7f7 fca1 	bl	800084c <__aeabi_ddiv>
 8008f0a:	4652      	mov	r2, sl
 8008f0c:	465b      	mov	r3, fp
 8008f0e:	f7f7 f9bb 	bl	8000288 <__aeabi_dsub>
 8008f12:	9d01      	ldr	r5, [sp, #4]
 8008f14:	4682      	mov	sl, r0
 8008f16:	468b      	mov	fp, r1
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4640      	mov	r0, r8
 8008f1c:	f7f7 fe1c 	bl	8000b58 <__aeabi_d2iz>
 8008f20:	4606      	mov	r6, r0
 8008f22:	f7f7 faff 	bl	8000524 <__aeabi_i2d>
 8008f26:	4602      	mov	r2, r0
 8008f28:	460b      	mov	r3, r1
 8008f2a:	4640      	mov	r0, r8
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	f7f7 f9ab 	bl	8000288 <__aeabi_dsub>
 8008f32:	3630      	adds	r6, #48	; 0x30
 8008f34:	f805 6b01 	strb.w	r6, [r5], #1
 8008f38:	4652      	mov	r2, sl
 8008f3a:	465b      	mov	r3, fp
 8008f3c:	4680      	mov	r8, r0
 8008f3e:	4689      	mov	r9, r1
 8008f40:	f7f7 fdcc 	bl	8000adc <__aeabi_dcmplt>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	d163      	bne.n	8009010 <_dtoa_r+0x608>
 8008f48:	4642      	mov	r2, r8
 8008f4a:	464b      	mov	r3, r9
 8008f4c:	4936      	ldr	r1, [pc, #216]	; (8009028 <_dtoa_r+0x620>)
 8008f4e:	2000      	movs	r0, #0
 8008f50:	f7f7 f99a 	bl	8000288 <__aeabi_dsub>
 8008f54:	4652      	mov	r2, sl
 8008f56:	465b      	mov	r3, fp
 8008f58:	f7f7 fdc0 	bl	8000adc <__aeabi_dcmplt>
 8008f5c:	2800      	cmp	r0, #0
 8008f5e:	f040 80b5 	bne.w	80090cc <_dtoa_r+0x6c4>
 8008f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f64:	429d      	cmp	r5, r3
 8008f66:	d081      	beq.n	8008e6c <_dtoa_r+0x464>
 8008f68:	4b30      	ldr	r3, [pc, #192]	; (800902c <_dtoa_r+0x624>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	4650      	mov	r0, sl
 8008f6e:	4659      	mov	r1, fp
 8008f70:	f7f7 fb42 	bl	80005f8 <__aeabi_dmul>
 8008f74:	4b2d      	ldr	r3, [pc, #180]	; (800902c <_dtoa_r+0x624>)
 8008f76:	4682      	mov	sl, r0
 8008f78:	468b      	mov	fp, r1
 8008f7a:	4640      	mov	r0, r8
 8008f7c:	4649      	mov	r1, r9
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f7f7 fb3a 	bl	80005f8 <__aeabi_dmul>
 8008f84:	4680      	mov	r8, r0
 8008f86:	4689      	mov	r9, r1
 8008f88:	e7c6      	b.n	8008f18 <_dtoa_r+0x510>
 8008f8a:	4650      	mov	r0, sl
 8008f8c:	4659      	mov	r1, fp
 8008f8e:	f7f7 fb33 	bl	80005f8 <__aeabi_dmul>
 8008f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f94:	9d01      	ldr	r5, [sp, #4]
 8008f96:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f98:	4682      	mov	sl, r0
 8008f9a:	468b      	mov	fp, r1
 8008f9c:	4649      	mov	r1, r9
 8008f9e:	4640      	mov	r0, r8
 8008fa0:	f7f7 fdda 	bl	8000b58 <__aeabi_d2iz>
 8008fa4:	4606      	mov	r6, r0
 8008fa6:	f7f7 fabd 	bl	8000524 <__aeabi_i2d>
 8008faa:	3630      	adds	r6, #48	; 0x30
 8008fac:	4602      	mov	r2, r0
 8008fae:	460b      	mov	r3, r1
 8008fb0:	4640      	mov	r0, r8
 8008fb2:	4649      	mov	r1, r9
 8008fb4:	f7f7 f968 	bl	8000288 <__aeabi_dsub>
 8008fb8:	f805 6b01 	strb.w	r6, [r5], #1
 8008fbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008fbe:	429d      	cmp	r5, r3
 8008fc0:	4680      	mov	r8, r0
 8008fc2:	4689      	mov	r9, r1
 8008fc4:	f04f 0200 	mov.w	r2, #0
 8008fc8:	d124      	bne.n	8009014 <_dtoa_r+0x60c>
 8008fca:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <_dtoa_r+0x630>)
 8008fcc:	4650      	mov	r0, sl
 8008fce:	4659      	mov	r1, fp
 8008fd0:	f7f7 f95c 	bl	800028c <__adddf3>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	460b      	mov	r3, r1
 8008fd8:	4640      	mov	r0, r8
 8008fda:	4649      	mov	r1, r9
 8008fdc:	f7f7 fd9c 	bl	8000b18 <__aeabi_dcmpgt>
 8008fe0:	2800      	cmp	r0, #0
 8008fe2:	d173      	bne.n	80090cc <_dtoa_r+0x6c4>
 8008fe4:	4652      	mov	r2, sl
 8008fe6:	465b      	mov	r3, fp
 8008fe8:	4913      	ldr	r1, [pc, #76]	; (8009038 <_dtoa_r+0x630>)
 8008fea:	2000      	movs	r0, #0
 8008fec:	f7f7 f94c 	bl	8000288 <__aeabi_dsub>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4640      	mov	r0, r8
 8008ff6:	4649      	mov	r1, r9
 8008ff8:	f7f7 fd70 	bl	8000adc <__aeabi_dcmplt>
 8008ffc:	2800      	cmp	r0, #0
 8008ffe:	f43f af35 	beq.w	8008e6c <_dtoa_r+0x464>
 8009002:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009004:	1e6b      	subs	r3, r5, #1
 8009006:	930f      	str	r3, [sp, #60]	; 0x3c
 8009008:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800900c:	2b30      	cmp	r3, #48	; 0x30
 800900e:	d0f8      	beq.n	8009002 <_dtoa_r+0x5fa>
 8009010:	9700      	str	r7, [sp, #0]
 8009012:	e049      	b.n	80090a8 <_dtoa_r+0x6a0>
 8009014:	4b05      	ldr	r3, [pc, #20]	; (800902c <_dtoa_r+0x624>)
 8009016:	f7f7 faef 	bl	80005f8 <__aeabi_dmul>
 800901a:	4680      	mov	r8, r0
 800901c:	4689      	mov	r9, r1
 800901e:	e7bd      	b.n	8008f9c <_dtoa_r+0x594>
 8009020:	0800ba00 	.word	0x0800ba00
 8009024:	0800b9d8 	.word	0x0800b9d8
 8009028:	3ff00000 	.word	0x3ff00000
 800902c:	40240000 	.word	0x40240000
 8009030:	401c0000 	.word	0x401c0000
 8009034:	40140000 	.word	0x40140000
 8009038:	3fe00000 	.word	0x3fe00000
 800903c:	9d01      	ldr	r5, [sp, #4]
 800903e:	4656      	mov	r6, sl
 8009040:	465f      	mov	r7, fp
 8009042:	4642      	mov	r2, r8
 8009044:	464b      	mov	r3, r9
 8009046:	4630      	mov	r0, r6
 8009048:	4639      	mov	r1, r7
 800904a:	f7f7 fbff 	bl	800084c <__aeabi_ddiv>
 800904e:	f7f7 fd83 	bl	8000b58 <__aeabi_d2iz>
 8009052:	4682      	mov	sl, r0
 8009054:	f7f7 fa66 	bl	8000524 <__aeabi_i2d>
 8009058:	4642      	mov	r2, r8
 800905a:	464b      	mov	r3, r9
 800905c:	f7f7 facc 	bl	80005f8 <__aeabi_dmul>
 8009060:	4602      	mov	r2, r0
 8009062:	460b      	mov	r3, r1
 8009064:	4630      	mov	r0, r6
 8009066:	4639      	mov	r1, r7
 8009068:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800906c:	f7f7 f90c 	bl	8000288 <__aeabi_dsub>
 8009070:	f805 6b01 	strb.w	r6, [r5], #1
 8009074:	9e01      	ldr	r6, [sp, #4]
 8009076:	9f03      	ldr	r7, [sp, #12]
 8009078:	1bae      	subs	r6, r5, r6
 800907a:	42b7      	cmp	r7, r6
 800907c:	4602      	mov	r2, r0
 800907e:	460b      	mov	r3, r1
 8009080:	d135      	bne.n	80090ee <_dtoa_r+0x6e6>
 8009082:	f7f7 f903 	bl	800028c <__adddf3>
 8009086:	4642      	mov	r2, r8
 8009088:	464b      	mov	r3, r9
 800908a:	4606      	mov	r6, r0
 800908c:	460f      	mov	r7, r1
 800908e:	f7f7 fd43 	bl	8000b18 <__aeabi_dcmpgt>
 8009092:	b9d0      	cbnz	r0, 80090ca <_dtoa_r+0x6c2>
 8009094:	4642      	mov	r2, r8
 8009096:	464b      	mov	r3, r9
 8009098:	4630      	mov	r0, r6
 800909a:	4639      	mov	r1, r7
 800909c:	f7f7 fd14 	bl	8000ac8 <__aeabi_dcmpeq>
 80090a0:	b110      	cbz	r0, 80090a8 <_dtoa_r+0x6a0>
 80090a2:	f01a 0f01 	tst.w	sl, #1
 80090a6:	d110      	bne.n	80090ca <_dtoa_r+0x6c2>
 80090a8:	4620      	mov	r0, r4
 80090aa:	ee18 1a10 	vmov	r1, s16
 80090ae:	f000 ff87 	bl	8009fc0 <_Bfree>
 80090b2:	2300      	movs	r3, #0
 80090b4:	9800      	ldr	r0, [sp, #0]
 80090b6:	702b      	strb	r3, [r5, #0]
 80090b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090ba:	3001      	adds	r0, #1
 80090bc:	6018      	str	r0, [r3, #0]
 80090be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	f43f acf1 	beq.w	8008aa8 <_dtoa_r+0xa0>
 80090c6:	601d      	str	r5, [r3, #0]
 80090c8:	e4ee      	b.n	8008aa8 <_dtoa_r+0xa0>
 80090ca:	9f00      	ldr	r7, [sp, #0]
 80090cc:	462b      	mov	r3, r5
 80090ce:	461d      	mov	r5, r3
 80090d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80090d4:	2a39      	cmp	r2, #57	; 0x39
 80090d6:	d106      	bne.n	80090e6 <_dtoa_r+0x6de>
 80090d8:	9a01      	ldr	r2, [sp, #4]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d1f7      	bne.n	80090ce <_dtoa_r+0x6c6>
 80090de:	9901      	ldr	r1, [sp, #4]
 80090e0:	2230      	movs	r2, #48	; 0x30
 80090e2:	3701      	adds	r7, #1
 80090e4:	700a      	strb	r2, [r1, #0]
 80090e6:	781a      	ldrb	r2, [r3, #0]
 80090e8:	3201      	adds	r2, #1
 80090ea:	701a      	strb	r2, [r3, #0]
 80090ec:	e790      	b.n	8009010 <_dtoa_r+0x608>
 80090ee:	4ba6      	ldr	r3, [pc, #664]	; (8009388 <_dtoa_r+0x980>)
 80090f0:	2200      	movs	r2, #0
 80090f2:	f7f7 fa81 	bl	80005f8 <__aeabi_dmul>
 80090f6:	2200      	movs	r2, #0
 80090f8:	2300      	movs	r3, #0
 80090fa:	4606      	mov	r6, r0
 80090fc:	460f      	mov	r7, r1
 80090fe:	f7f7 fce3 	bl	8000ac8 <__aeabi_dcmpeq>
 8009102:	2800      	cmp	r0, #0
 8009104:	d09d      	beq.n	8009042 <_dtoa_r+0x63a>
 8009106:	e7cf      	b.n	80090a8 <_dtoa_r+0x6a0>
 8009108:	9a08      	ldr	r2, [sp, #32]
 800910a:	2a00      	cmp	r2, #0
 800910c:	f000 80d7 	beq.w	80092be <_dtoa_r+0x8b6>
 8009110:	9a06      	ldr	r2, [sp, #24]
 8009112:	2a01      	cmp	r2, #1
 8009114:	f300 80ba 	bgt.w	800928c <_dtoa_r+0x884>
 8009118:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800911a:	2a00      	cmp	r2, #0
 800911c:	f000 80b2 	beq.w	8009284 <_dtoa_r+0x87c>
 8009120:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009124:	9e07      	ldr	r6, [sp, #28]
 8009126:	9d04      	ldr	r5, [sp, #16]
 8009128:	9a04      	ldr	r2, [sp, #16]
 800912a:	441a      	add	r2, r3
 800912c:	9204      	str	r2, [sp, #16]
 800912e:	9a05      	ldr	r2, [sp, #20]
 8009130:	2101      	movs	r1, #1
 8009132:	441a      	add	r2, r3
 8009134:	4620      	mov	r0, r4
 8009136:	9205      	str	r2, [sp, #20]
 8009138:	f001 f844 	bl	800a1c4 <__i2b>
 800913c:	4607      	mov	r7, r0
 800913e:	2d00      	cmp	r5, #0
 8009140:	dd0c      	ble.n	800915c <_dtoa_r+0x754>
 8009142:	9b05      	ldr	r3, [sp, #20]
 8009144:	2b00      	cmp	r3, #0
 8009146:	dd09      	ble.n	800915c <_dtoa_r+0x754>
 8009148:	42ab      	cmp	r3, r5
 800914a:	9a04      	ldr	r2, [sp, #16]
 800914c:	bfa8      	it	ge
 800914e:	462b      	movge	r3, r5
 8009150:	1ad2      	subs	r2, r2, r3
 8009152:	9204      	str	r2, [sp, #16]
 8009154:	9a05      	ldr	r2, [sp, #20]
 8009156:	1aed      	subs	r5, r5, r3
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	9305      	str	r3, [sp, #20]
 800915c:	9b07      	ldr	r3, [sp, #28]
 800915e:	b31b      	cbz	r3, 80091a8 <_dtoa_r+0x7a0>
 8009160:	9b08      	ldr	r3, [sp, #32]
 8009162:	2b00      	cmp	r3, #0
 8009164:	f000 80af 	beq.w	80092c6 <_dtoa_r+0x8be>
 8009168:	2e00      	cmp	r6, #0
 800916a:	dd13      	ble.n	8009194 <_dtoa_r+0x78c>
 800916c:	4639      	mov	r1, r7
 800916e:	4632      	mov	r2, r6
 8009170:	4620      	mov	r0, r4
 8009172:	f001 f8e7 	bl	800a344 <__pow5mult>
 8009176:	ee18 2a10 	vmov	r2, s16
 800917a:	4601      	mov	r1, r0
 800917c:	4607      	mov	r7, r0
 800917e:	4620      	mov	r0, r4
 8009180:	f001 f836 	bl	800a1f0 <__multiply>
 8009184:	ee18 1a10 	vmov	r1, s16
 8009188:	4680      	mov	r8, r0
 800918a:	4620      	mov	r0, r4
 800918c:	f000 ff18 	bl	8009fc0 <_Bfree>
 8009190:	ee08 8a10 	vmov	s16, r8
 8009194:	9b07      	ldr	r3, [sp, #28]
 8009196:	1b9a      	subs	r2, r3, r6
 8009198:	d006      	beq.n	80091a8 <_dtoa_r+0x7a0>
 800919a:	ee18 1a10 	vmov	r1, s16
 800919e:	4620      	mov	r0, r4
 80091a0:	f001 f8d0 	bl	800a344 <__pow5mult>
 80091a4:	ee08 0a10 	vmov	s16, r0
 80091a8:	2101      	movs	r1, #1
 80091aa:	4620      	mov	r0, r4
 80091ac:	f001 f80a 	bl	800a1c4 <__i2b>
 80091b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	4606      	mov	r6, r0
 80091b6:	f340 8088 	ble.w	80092ca <_dtoa_r+0x8c2>
 80091ba:	461a      	mov	r2, r3
 80091bc:	4601      	mov	r1, r0
 80091be:	4620      	mov	r0, r4
 80091c0:	f001 f8c0 	bl	800a344 <__pow5mult>
 80091c4:	9b06      	ldr	r3, [sp, #24]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	4606      	mov	r6, r0
 80091ca:	f340 8081 	ble.w	80092d0 <_dtoa_r+0x8c8>
 80091ce:	f04f 0800 	mov.w	r8, #0
 80091d2:	6933      	ldr	r3, [r6, #16]
 80091d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80091d8:	6918      	ldr	r0, [r3, #16]
 80091da:	f000 ffa3 	bl	800a124 <__hi0bits>
 80091de:	f1c0 0020 	rsb	r0, r0, #32
 80091e2:	9b05      	ldr	r3, [sp, #20]
 80091e4:	4418      	add	r0, r3
 80091e6:	f010 001f 	ands.w	r0, r0, #31
 80091ea:	f000 8092 	beq.w	8009312 <_dtoa_r+0x90a>
 80091ee:	f1c0 0320 	rsb	r3, r0, #32
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	f340 808a 	ble.w	800930c <_dtoa_r+0x904>
 80091f8:	f1c0 001c 	rsb	r0, r0, #28
 80091fc:	9b04      	ldr	r3, [sp, #16]
 80091fe:	4403      	add	r3, r0
 8009200:	9304      	str	r3, [sp, #16]
 8009202:	9b05      	ldr	r3, [sp, #20]
 8009204:	4403      	add	r3, r0
 8009206:	4405      	add	r5, r0
 8009208:	9305      	str	r3, [sp, #20]
 800920a:	9b04      	ldr	r3, [sp, #16]
 800920c:	2b00      	cmp	r3, #0
 800920e:	dd07      	ble.n	8009220 <_dtoa_r+0x818>
 8009210:	ee18 1a10 	vmov	r1, s16
 8009214:	461a      	mov	r2, r3
 8009216:	4620      	mov	r0, r4
 8009218:	f001 f8ee 	bl	800a3f8 <__lshift>
 800921c:	ee08 0a10 	vmov	s16, r0
 8009220:	9b05      	ldr	r3, [sp, #20]
 8009222:	2b00      	cmp	r3, #0
 8009224:	dd05      	ble.n	8009232 <_dtoa_r+0x82a>
 8009226:	4631      	mov	r1, r6
 8009228:	461a      	mov	r2, r3
 800922a:	4620      	mov	r0, r4
 800922c:	f001 f8e4 	bl	800a3f8 <__lshift>
 8009230:	4606      	mov	r6, r0
 8009232:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009234:	2b00      	cmp	r3, #0
 8009236:	d06e      	beq.n	8009316 <_dtoa_r+0x90e>
 8009238:	ee18 0a10 	vmov	r0, s16
 800923c:	4631      	mov	r1, r6
 800923e:	f001 f94b 	bl	800a4d8 <__mcmp>
 8009242:	2800      	cmp	r0, #0
 8009244:	da67      	bge.n	8009316 <_dtoa_r+0x90e>
 8009246:	9b00      	ldr	r3, [sp, #0]
 8009248:	3b01      	subs	r3, #1
 800924a:	ee18 1a10 	vmov	r1, s16
 800924e:	9300      	str	r3, [sp, #0]
 8009250:	220a      	movs	r2, #10
 8009252:	2300      	movs	r3, #0
 8009254:	4620      	mov	r0, r4
 8009256:	f000 fed5 	bl	800a004 <__multadd>
 800925a:	9b08      	ldr	r3, [sp, #32]
 800925c:	ee08 0a10 	vmov	s16, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	f000 81b1 	beq.w	80095c8 <_dtoa_r+0xbc0>
 8009266:	2300      	movs	r3, #0
 8009268:	4639      	mov	r1, r7
 800926a:	220a      	movs	r2, #10
 800926c:	4620      	mov	r0, r4
 800926e:	f000 fec9 	bl	800a004 <__multadd>
 8009272:	9b02      	ldr	r3, [sp, #8]
 8009274:	2b00      	cmp	r3, #0
 8009276:	4607      	mov	r7, r0
 8009278:	f300 808e 	bgt.w	8009398 <_dtoa_r+0x990>
 800927c:	9b06      	ldr	r3, [sp, #24]
 800927e:	2b02      	cmp	r3, #2
 8009280:	dc51      	bgt.n	8009326 <_dtoa_r+0x91e>
 8009282:	e089      	b.n	8009398 <_dtoa_r+0x990>
 8009284:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009286:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800928a:	e74b      	b.n	8009124 <_dtoa_r+0x71c>
 800928c:	9b03      	ldr	r3, [sp, #12]
 800928e:	1e5e      	subs	r6, r3, #1
 8009290:	9b07      	ldr	r3, [sp, #28]
 8009292:	42b3      	cmp	r3, r6
 8009294:	bfbf      	itttt	lt
 8009296:	9b07      	ldrlt	r3, [sp, #28]
 8009298:	9607      	strlt	r6, [sp, #28]
 800929a:	1af2      	sublt	r2, r6, r3
 800929c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800929e:	bfb6      	itet	lt
 80092a0:	189b      	addlt	r3, r3, r2
 80092a2:	1b9e      	subge	r6, r3, r6
 80092a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80092a6:	9b03      	ldr	r3, [sp, #12]
 80092a8:	bfb8      	it	lt
 80092aa:	2600      	movlt	r6, #0
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	bfb7      	itett	lt
 80092b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80092b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80092b8:	1a9d      	sublt	r5, r3, r2
 80092ba:	2300      	movlt	r3, #0
 80092bc:	e734      	b.n	8009128 <_dtoa_r+0x720>
 80092be:	9e07      	ldr	r6, [sp, #28]
 80092c0:	9d04      	ldr	r5, [sp, #16]
 80092c2:	9f08      	ldr	r7, [sp, #32]
 80092c4:	e73b      	b.n	800913e <_dtoa_r+0x736>
 80092c6:	9a07      	ldr	r2, [sp, #28]
 80092c8:	e767      	b.n	800919a <_dtoa_r+0x792>
 80092ca:	9b06      	ldr	r3, [sp, #24]
 80092cc:	2b01      	cmp	r3, #1
 80092ce:	dc18      	bgt.n	8009302 <_dtoa_r+0x8fa>
 80092d0:	f1ba 0f00 	cmp.w	sl, #0
 80092d4:	d115      	bne.n	8009302 <_dtoa_r+0x8fa>
 80092d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092da:	b993      	cbnz	r3, 8009302 <_dtoa_r+0x8fa>
 80092dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80092e0:	0d1b      	lsrs	r3, r3, #20
 80092e2:	051b      	lsls	r3, r3, #20
 80092e4:	b183      	cbz	r3, 8009308 <_dtoa_r+0x900>
 80092e6:	9b04      	ldr	r3, [sp, #16]
 80092e8:	3301      	adds	r3, #1
 80092ea:	9304      	str	r3, [sp, #16]
 80092ec:	9b05      	ldr	r3, [sp, #20]
 80092ee:	3301      	adds	r3, #1
 80092f0:	9305      	str	r3, [sp, #20]
 80092f2:	f04f 0801 	mov.w	r8, #1
 80092f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	f47f af6a 	bne.w	80091d2 <_dtoa_r+0x7ca>
 80092fe:	2001      	movs	r0, #1
 8009300:	e76f      	b.n	80091e2 <_dtoa_r+0x7da>
 8009302:	f04f 0800 	mov.w	r8, #0
 8009306:	e7f6      	b.n	80092f6 <_dtoa_r+0x8ee>
 8009308:	4698      	mov	r8, r3
 800930a:	e7f4      	b.n	80092f6 <_dtoa_r+0x8ee>
 800930c:	f43f af7d 	beq.w	800920a <_dtoa_r+0x802>
 8009310:	4618      	mov	r0, r3
 8009312:	301c      	adds	r0, #28
 8009314:	e772      	b.n	80091fc <_dtoa_r+0x7f4>
 8009316:	9b03      	ldr	r3, [sp, #12]
 8009318:	2b00      	cmp	r3, #0
 800931a:	dc37      	bgt.n	800938c <_dtoa_r+0x984>
 800931c:	9b06      	ldr	r3, [sp, #24]
 800931e:	2b02      	cmp	r3, #2
 8009320:	dd34      	ble.n	800938c <_dtoa_r+0x984>
 8009322:	9b03      	ldr	r3, [sp, #12]
 8009324:	9302      	str	r3, [sp, #8]
 8009326:	9b02      	ldr	r3, [sp, #8]
 8009328:	b96b      	cbnz	r3, 8009346 <_dtoa_r+0x93e>
 800932a:	4631      	mov	r1, r6
 800932c:	2205      	movs	r2, #5
 800932e:	4620      	mov	r0, r4
 8009330:	f000 fe68 	bl	800a004 <__multadd>
 8009334:	4601      	mov	r1, r0
 8009336:	4606      	mov	r6, r0
 8009338:	ee18 0a10 	vmov	r0, s16
 800933c:	f001 f8cc 	bl	800a4d8 <__mcmp>
 8009340:	2800      	cmp	r0, #0
 8009342:	f73f adbb 	bgt.w	8008ebc <_dtoa_r+0x4b4>
 8009346:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009348:	9d01      	ldr	r5, [sp, #4]
 800934a:	43db      	mvns	r3, r3
 800934c:	9300      	str	r3, [sp, #0]
 800934e:	f04f 0800 	mov.w	r8, #0
 8009352:	4631      	mov	r1, r6
 8009354:	4620      	mov	r0, r4
 8009356:	f000 fe33 	bl	8009fc0 <_Bfree>
 800935a:	2f00      	cmp	r7, #0
 800935c:	f43f aea4 	beq.w	80090a8 <_dtoa_r+0x6a0>
 8009360:	f1b8 0f00 	cmp.w	r8, #0
 8009364:	d005      	beq.n	8009372 <_dtoa_r+0x96a>
 8009366:	45b8      	cmp	r8, r7
 8009368:	d003      	beq.n	8009372 <_dtoa_r+0x96a>
 800936a:	4641      	mov	r1, r8
 800936c:	4620      	mov	r0, r4
 800936e:	f000 fe27 	bl	8009fc0 <_Bfree>
 8009372:	4639      	mov	r1, r7
 8009374:	4620      	mov	r0, r4
 8009376:	f000 fe23 	bl	8009fc0 <_Bfree>
 800937a:	e695      	b.n	80090a8 <_dtoa_r+0x6a0>
 800937c:	2600      	movs	r6, #0
 800937e:	4637      	mov	r7, r6
 8009380:	e7e1      	b.n	8009346 <_dtoa_r+0x93e>
 8009382:	9700      	str	r7, [sp, #0]
 8009384:	4637      	mov	r7, r6
 8009386:	e599      	b.n	8008ebc <_dtoa_r+0x4b4>
 8009388:	40240000 	.word	0x40240000
 800938c:	9b08      	ldr	r3, [sp, #32]
 800938e:	2b00      	cmp	r3, #0
 8009390:	f000 80ca 	beq.w	8009528 <_dtoa_r+0xb20>
 8009394:	9b03      	ldr	r3, [sp, #12]
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	2d00      	cmp	r5, #0
 800939a:	dd05      	ble.n	80093a8 <_dtoa_r+0x9a0>
 800939c:	4639      	mov	r1, r7
 800939e:	462a      	mov	r2, r5
 80093a0:	4620      	mov	r0, r4
 80093a2:	f001 f829 	bl	800a3f8 <__lshift>
 80093a6:	4607      	mov	r7, r0
 80093a8:	f1b8 0f00 	cmp.w	r8, #0
 80093ac:	d05b      	beq.n	8009466 <_dtoa_r+0xa5e>
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4620      	mov	r0, r4
 80093b2:	f000 fdc5 	bl	8009f40 <_Balloc>
 80093b6:	4605      	mov	r5, r0
 80093b8:	b928      	cbnz	r0, 80093c6 <_dtoa_r+0x9be>
 80093ba:	4b87      	ldr	r3, [pc, #540]	; (80095d8 <_dtoa_r+0xbd0>)
 80093bc:	4602      	mov	r2, r0
 80093be:	f240 21ea 	movw	r1, #746	; 0x2ea
 80093c2:	f7ff bb3b 	b.w	8008a3c <_dtoa_r+0x34>
 80093c6:	693a      	ldr	r2, [r7, #16]
 80093c8:	3202      	adds	r2, #2
 80093ca:	0092      	lsls	r2, r2, #2
 80093cc:	f107 010c 	add.w	r1, r7, #12
 80093d0:	300c      	adds	r0, #12
 80093d2:	f7fd fd23 	bl	8006e1c <memcpy>
 80093d6:	2201      	movs	r2, #1
 80093d8:	4629      	mov	r1, r5
 80093da:	4620      	mov	r0, r4
 80093dc:	f001 f80c 	bl	800a3f8 <__lshift>
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	f103 0901 	add.w	r9, r3, #1
 80093e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80093ea:	4413      	add	r3, r2
 80093ec:	9305      	str	r3, [sp, #20]
 80093ee:	f00a 0301 	and.w	r3, sl, #1
 80093f2:	46b8      	mov	r8, r7
 80093f4:	9304      	str	r3, [sp, #16]
 80093f6:	4607      	mov	r7, r0
 80093f8:	4631      	mov	r1, r6
 80093fa:	ee18 0a10 	vmov	r0, s16
 80093fe:	f7ff fa75 	bl	80088ec <quorem>
 8009402:	4641      	mov	r1, r8
 8009404:	9002      	str	r0, [sp, #8]
 8009406:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800940a:	ee18 0a10 	vmov	r0, s16
 800940e:	f001 f863 	bl	800a4d8 <__mcmp>
 8009412:	463a      	mov	r2, r7
 8009414:	9003      	str	r0, [sp, #12]
 8009416:	4631      	mov	r1, r6
 8009418:	4620      	mov	r0, r4
 800941a:	f001 f879 	bl	800a510 <__mdiff>
 800941e:	68c2      	ldr	r2, [r0, #12]
 8009420:	f109 3bff 	add.w	fp, r9, #4294967295
 8009424:	4605      	mov	r5, r0
 8009426:	bb02      	cbnz	r2, 800946a <_dtoa_r+0xa62>
 8009428:	4601      	mov	r1, r0
 800942a:	ee18 0a10 	vmov	r0, s16
 800942e:	f001 f853 	bl	800a4d8 <__mcmp>
 8009432:	4602      	mov	r2, r0
 8009434:	4629      	mov	r1, r5
 8009436:	4620      	mov	r0, r4
 8009438:	9207      	str	r2, [sp, #28]
 800943a:	f000 fdc1 	bl	8009fc0 <_Bfree>
 800943e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009442:	ea43 0102 	orr.w	r1, r3, r2
 8009446:	9b04      	ldr	r3, [sp, #16]
 8009448:	430b      	orrs	r3, r1
 800944a:	464d      	mov	r5, r9
 800944c:	d10f      	bne.n	800946e <_dtoa_r+0xa66>
 800944e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009452:	d02a      	beq.n	80094aa <_dtoa_r+0xaa2>
 8009454:	9b03      	ldr	r3, [sp, #12]
 8009456:	2b00      	cmp	r3, #0
 8009458:	dd02      	ble.n	8009460 <_dtoa_r+0xa58>
 800945a:	9b02      	ldr	r3, [sp, #8]
 800945c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009460:	f88b a000 	strb.w	sl, [fp]
 8009464:	e775      	b.n	8009352 <_dtoa_r+0x94a>
 8009466:	4638      	mov	r0, r7
 8009468:	e7ba      	b.n	80093e0 <_dtoa_r+0x9d8>
 800946a:	2201      	movs	r2, #1
 800946c:	e7e2      	b.n	8009434 <_dtoa_r+0xa2c>
 800946e:	9b03      	ldr	r3, [sp, #12]
 8009470:	2b00      	cmp	r3, #0
 8009472:	db04      	blt.n	800947e <_dtoa_r+0xa76>
 8009474:	9906      	ldr	r1, [sp, #24]
 8009476:	430b      	orrs	r3, r1
 8009478:	9904      	ldr	r1, [sp, #16]
 800947a:	430b      	orrs	r3, r1
 800947c:	d122      	bne.n	80094c4 <_dtoa_r+0xabc>
 800947e:	2a00      	cmp	r2, #0
 8009480:	ddee      	ble.n	8009460 <_dtoa_r+0xa58>
 8009482:	ee18 1a10 	vmov	r1, s16
 8009486:	2201      	movs	r2, #1
 8009488:	4620      	mov	r0, r4
 800948a:	f000 ffb5 	bl	800a3f8 <__lshift>
 800948e:	4631      	mov	r1, r6
 8009490:	ee08 0a10 	vmov	s16, r0
 8009494:	f001 f820 	bl	800a4d8 <__mcmp>
 8009498:	2800      	cmp	r0, #0
 800949a:	dc03      	bgt.n	80094a4 <_dtoa_r+0xa9c>
 800949c:	d1e0      	bne.n	8009460 <_dtoa_r+0xa58>
 800949e:	f01a 0f01 	tst.w	sl, #1
 80094a2:	d0dd      	beq.n	8009460 <_dtoa_r+0xa58>
 80094a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094a8:	d1d7      	bne.n	800945a <_dtoa_r+0xa52>
 80094aa:	2339      	movs	r3, #57	; 0x39
 80094ac:	f88b 3000 	strb.w	r3, [fp]
 80094b0:	462b      	mov	r3, r5
 80094b2:	461d      	mov	r5, r3
 80094b4:	3b01      	subs	r3, #1
 80094b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80094ba:	2a39      	cmp	r2, #57	; 0x39
 80094bc:	d071      	beq.n	80095a2 <_dtoa_r+0xb9a>
 80094be:	3201      	adds	r2, #1
 80094c0:	701a      	strb	r2, [r3, #0]
 80094c2:	e746      	b.n	8009352 <_dtoa_r+0x94a>
 80094c4:	2a00      	cmp	r2, #0
 80094c6:	dd07      	ble.n	80094d8 <_dtoa_r+0xad0>
 80094c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80094cc:	d0ed      	beq.n	80094aa <_dtoa_r+0xaa2>
 80094ce:	f10a 0301 	add.w	r3, sl, #1
 80094d2:	f88b 3000 	strb.w	r3, [fp]
 80094d6:	e73c      	b.n	8009352 <_dtoa_r+0x94a>
 80094d8:	9b05      	ldr	r3, [sp, #20]
 80094da:	f809 ac01 	strb.w	sl, [r9, #-1]
 80094de:	4599      	cmp	r9, r3
 80094e0:	d047      	beq.n	8009572 <_dtoa_r+0xb6a>
 80094e2:	ee18 1a10 	vmov	r1, s16
 80094e6:	2300      	movs	r3, #0
 80094e8:	220a      	movs	r2, #10
 80094ea:	4620      	mov	r0, r4
 80094ec:	f000 fd8a 	bl	800a004 <__multadd>
 80094f0:	45b8      	cmp	r8, r7
 80094f2:	ee08 0a10 	vmov	s16, r0
 80094f6:	f04f 0300 	mov.w	r3, #0
 80094fa:	f04f 020a 	mov.w	r2, #10
 80094fe:	4641      	mov	r1, r8
 8009500:	4620      	mov	r0, r4
 8009502:	d106      	bne.n	8009512 <_dtoa_r+0xb0a>
 8009504:	f000 fd7e 	bl	800a004 <__multadd>
 8009508:	4680      	mov	r8, r0
 800950a:	4607      	mov	r7, r0
 800950c:	f109 0901 	add.w	r9, r9, #1
 8009510:	e772      	b.n	80093f8 <_dtoa_r+0x9f0>
 8009512:	f000 fd77 	bl	800a004 <__multadd>
 8009516:	4639      	mov	r1, r7
 8009518:	4680      	mov	r8, r0
 800951a:	2300      	movs	r3, #0
 800951c:	220a      	movs	r2, #10
 800951e:	4620      	mov	r0, r4
 8009520:	f000 fd70 	bl	800a004 <__multadd>
 8009524:	4607      	mov	r7, r0
 8009526:	e7f1      	b.n	800950c <_dtoa_r+0xb04>
 8009528:	9b03      	ldr	r3, [sp, #12]
 800952a:	9302      	str	r3, [sp, #8]
 800952c:	9d01      	ldr	r5, [sp, #4]
 800952e:	ee18 0a10 	vmov	r0, s16
 8009532:	4631      	mov	r1, r6
 8009534:	f7ff f9da 	bl	80088ec <quorem>
 8009538:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800953c:	9b01      	ldr	r3, [sp, #4]
 800953e:	f805 ab01 	strb.w	sl, [r5], #1
 8009542:	1aea      	subs	r2, r5, r3
 8009544:	9b02      	ldr	r3, [sp, #8]
 8009546:	4293      	cmp	r3, r2
 8009548:	dd09      	ble.n	800955e <_dtoa_r+0xb56>
 800954a:	ee18 1a10 	vmov	r1, s16
 800954e:	2300      	movs	r3, #0
 8009550:	220a      	movs	r2, #10
 8009552:	4620      	mov	r0, r4
 8009554:	f000 fd56 	bl	800a004 <__multadd>
 8009558:	ee08 0a10 	vmov	s16, r0
 800955c:	e7e7      	b.n	800952e <_dtoa_r+0xb26>
 800955e:	9b02      	ldr	r3, [sp, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	bfc8      	it	gt
 8009564:	461d      	movgt	r5, r3
 8009566:	9b01      	ldr	r3, [sp, #4]
 8009568:	bfd8      	it	le
 800956a:	2501      	movle	r5, #1
 800956c:	441d      	add	r5, r3
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	ee18 1a10 	vmov	r1, s16
 8009576:	2201      	movs	r2, #1
 8009578:	4620      	mov	r0, r4
 800957a:	f000 ff3d 	bl	800a3f8 <__lshift>
 800957e:	4631      	mov	r1, r6
 8009580:	ee08 0a10 	vmov	s16, r0
 8009584:	f000 ffa8 	bl	800a4d8 <__mcmp>
 8009588:	2800      	cmp	r0, #0
 800958a:	dc91      	bgt.n	80094b0 <_dtoa_r+0xaa8>
 800958c:	d102      	bne.n	8009594 <_dtoa_r+0xb8c>
 800958e:	f01a 0f01 	tst.w	sl, #1
 8009592:	d18d      	bne.n	80094b0 <_dtoa_r+0xaa8>
 8009594:	462b      	mov	r3, r5
 8009596:	461d      	mov	r5, r3
 8009598:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800959c:	2a30      	cmp	r2, #48	; 0x30
 800959e:	d0fa      	beq.n	8009596 <_dtoa_r+0xb8e>
 80095a0:	e6d7      	b.n	8009352 <_dtoa_r+0x94a>
 80095a2:	9a01      	ldr	r2, [sp, #4]
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d184      	bne.n	80094b2 <_dtoa_r+0xaaa>
 80095a8:	9b00      	ldr	r3, [sp, #0]
 80095aa:	3301      	adds	r3, #1
 80095ac:	9300      	str	r3, [sp, #0]
 80095ae:	2331      	movs	r3, #49	; 0x31
 80095b0:	7013      	strb	r3, [r2, #0]
 80095b2:	e6ce      	b.n	8009352 <_dtoa_r+0x94a>
 80095b4:	4b09      	ldr	r3, [pc, #36]	; (80095dc <_dtoa_r+0xbd4>)
 80095b6:	f7ff ba95 	b.w	8008ae4 <_dtoa_r+0xdc>
 80095ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095bc:	2b00      	cmp	r3, #0
 80095be:	f47f aa6e 	bne.w	8008a9e <_dtoa_r+0x96>
 80095c2:	4b07      	ldr	r3, [pc, #28]	; (80095e0 <_dtoa_r+0xbd8>)
 80095c4:	f7ff ba8e 	b.w	8008ae4 <_dtoa_r+0xdc>
 80095c8:	9b02      	ldr	r3, [sp, #8]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	dcae      	bgt.n	800952c <_dtoa_r+0xb24>
 80095ce:	9b06      	ldr	r3, [sp, #24]
 80095d0:	2b02      	cmp	r3, #2
 80095d2:	f73f aea8 	bgt.w	8009326 <_dtoa_r+0x91e>
 80095d6:	e7a9      	b.n	800952c <_dtoa_r+0xb24>
 80095d8:	0800b888 	.word	0x0800b888
 80095dc:	0800b6f8 	.word	0x0800b6f8
 80095e0:	0800b820 	.word	0x0800b820

080095e4 <std>:
 80095e4:	2300      	movs	r3, #0
 80095e6:	b510      	push	{r4, lr}
 80095e8:	4604      	mov	r4, r0
 80095ea:	e9c0 3300 	strd	r3, r3, [r0]
 80095ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80095f2:	6083      	str	r3, [r0, #8]
 80095f4:	8181      	strh	r1, [r0, #12]
 80095f6:	6643      	str	r3, [r0, #100]	; 0x64
 80095f8:	81c2      	strh	r2, [r0, #14]
 80095fa:	6183      	str	r3, [r0, #24]
 80095fc:	4619      	mov	r1, r3
 80095fe:	2208      	movs	r2, #8
 8009600:	305c      	adds	r0, #92	; 0x5c
 8009602:	f7fd fc19 	bl	8006e38 <memset>
 8009606:	4b05      	ldr	r3, [pc, #20]	; (800961c <std+0x38>)
 8009608:	6263      	str	r3, [r4, #36]	; 0x24
 800960a:	4b05      	ldr	r3, [pc, #20]	; (8009620 <std+0x3c>)
 800960c:	62a3      	str	r3, [r4, #40]	; 0x28
 800960e:	4b05      	ldr	r3, [pc, #20]	; (8009624 <std+0x40>)
 8009610:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009612:	4b05      	ldr	r3, [pc, #20]	; (8009628 <std+0x44>)
 8009614:	6224      	str	r4, [r4, #32]
 8009616:	6323      	str	r3, [r4, #48]	; 0x30
 8009618:	bd10      	pop	{r4, pc}
 800961a:	bf00      	nop
 800961c:	0800796d 	.word	0x0800796d
 8009620:	0800798f 	.word	0x0800798f
 8009624:	080079c7 	.word	0x080079c7
 8009628:	080079eb 	.word	0x080079eb

0800962c <_cleanup_r>:
 800962c:	4901      	ldr	r1, [pc, #4]	; (8009634 <_cleanup_r+0x8>)
 800962e:	f000 b8c1 	b.w	80097b4 <_fwalk_reent>
 8009632:	bf00      	nop
 8009634:	0800b1a9 	.word	0x0800b1a9

08009638 <__sfmoreglue>:
 8009638:	b570      	push	{r4, r5, r6, lr}
 800963a:	2268      	movs	r2, #104	; 0x68
 800963c:	1e4d      	subs	r5, r1, #1
 800963e:	4355      	muls	r5, r2
 8009640:	460e      	mov	r6, r1
 8009642:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009646:	f7fd fc6b 	bl	8006f20 <_malloc_r>
 800964a:	4604      	mov	r4, r0
 800964c:	b140      	cbz	r0, 8009660 <__sfmoreglue+0x28>
 800964e:	2100      	movs	r1, #0
 8009650:	e9c0 1600 	strd	r1, r6, [r0]
 8009654:	300c      	adds	r0, #12
 8009656:	60a0      	str	r0, [r4, #8]
 8009658:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800965c:	f7fd fbec 	bl	8006e38 <memset>
 8009660:	4620      	mov	r0, r4
 8009662:	bd70      	pop	{r4, r5, r6, pc}

08009664 <__sfp_lock_acquire>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__sfp_lock_acquire+0x8>)
 8009666:	f000 bc38 	b.w	8009eda <__retarget_lock_acquire_recursive>
 800966a:	bf00      	nop
 800966c:	200005dd 	.word	0x200005dd

08009670 <__sfp_lock_release>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__sfp_lock_release+0x8>)
 8009672:	f000 bc33 	b.w	8009edc <__retarget_lock_release_recursive>
 8009676:	bf00      	nop
 8009678:	200005dd 	.word	0x200005dd

0800967c <__sinit_lock_acquire>:
 800967c:	4801      	ldr	r0, [pc, #4]	; (8009684 <__sinit_lock_acquire+0x8>)
 800967e:	f000 bc2c 	b.w	8009eda <__retarget_lock_acquire_recursive>
 8009682:	bf00      	nop
 8009684:	200005de 	.word	0x200005de

08009688 <__sinit_lock_release>:
 8009688:	4801      	ldr	r0, [pc, #4]	; (8009690 <__sinit_lock_release+0x8>)
 800968a:	f000 bc27 	b.w	8009edc <__retarget_lock_release_recursive>
 800968e:	bf00      	nop
 8009690:	200005de 	.word	0x200005de

08009694 <__sinit>:
 8009694:	b510      	push	{r4, lr}
 8009696:	4604      	mov	r4, r0
 8009698:	f7ff fff0 	bl	800967c <__sinit_lock_acquire>
 800969c:	69a3      	ldr	r3, [r4, #24]
 800969e:	b11b      	cbz	r3, 80096a8 <__sinit+0x14>
 80096a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096a4:	f7ff bff0 	b.w	8009688 <__sinit_lock_release>
 80096a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80096ac:	6523      	str	r3, [r4, #80]	; 0x50
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <__sinit+0x68>)
 80096b0:	4a13      	ldr	r2, [pc, #76]	; (8009700 <__sinit+0x6c>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	62a2      	str	r2, [r4, #40]	; 0x28
 80096b6:	42a3      	cmp	r3, r4
 80096b8:	bf04      	itt	eq
 80096ba:	2301      	moveq	r3, #1
 80096bc:	61a3      	streq	r3, [r4, #24]
 80096be:	4620      	mov	r0, r4
 80096c0:	f000 f820 	bl	8009704 <__sfp>
 80096c4:	6060      	str	r0, [r4, #4]
 80096c6:	4620      	mov	r0, r4
 80096c8:	f000 f81c 	bl	8009704 <__sfp>
 80096cc:	60a0      	str	r0, [r4, #8]
 80096ce:	4620      	mov	r0, r4
 80096d0:	f000 f818 	bl	8009704 <__sfp>
 80096d4:	2200      	movs	r2, #0
 80096d6:	60e0      	str	r0, [r4, #12]
 80096d8:	2104      	movs	r1, #4
 80096da:	6860      	ldr	r0, [r4, #4]
 80096dc:	f7ff ff82 	bl	80095e4 <std>
 80096e0:	68a0      	ldr	r0, [r4, #8]
 80096e2:	2201      	movs	r2, #1
 80096e4:	2109      	movs	r1, #9
 80096e6:	f7ff ff7d 	bl	80095e4 <std>
 80096ea:	68e0      	ldr	r0, [r4, #12]
 80096ec:	2202      	movs	r2, #2
 80096ee:	2112      	movs	r1, #18
 80096f0:	f7ff ff78 	bl	80095e4 <std>
 80096f4:	2301      	movs	r3, #1
 80096f6:	61a3      	str	r3, [r4, #24]
 80096f8:	e7d2      	b.n	80096a0 <__sinit+0xc>
 80096fa:	bf00      	nop
 80096fc:	0800b6e4 	.word	0x0800b6e4
 8009700:	0800962d 	.word	0x0800962d

08009704 <__sfp>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	4607      	mov	r7, r0
 8009708:	f7ff ffac 	bl	8009664 <__sfp_lock_acquire>
 800970c:	4b1e      	ldr	r3, [pc, #120]	; (8009788 <__sfp+0x84>)
 800970e:	681e      	ldr	r6, [r3, #0]
 8009710:	69b3      	ldr	r3, [r6, #24]
 8009712:	b913      	cbnz	r3, 800971a <__sfp+0x16>
 8009714:	4630      	mov	r0, r6
 8009716:	f7ff ffbd 	bl	8009694 <__sinit>
 800971a:	3648      	adds	r6, #72	; 0x48
 800971c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009720:	3b01      	subs	r3, #1
 8009722:	d503      	bpl.n	800972c <__sfp+0x28>
 8009724:	6833      	ldr	r3, [r6, #0]
 8009726:	b30b      	cbz	r3, 800976c <__sfp+0x68>
 8009728:	6836      	ldr	r6, [r6, #0]
 800972a:	e7f7      	b.n	800971c <__sfp+0x18>
 800972c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009730:	b9d5      	cbnz	r5, 8009768 <__sfp+0x64>
 8009732:	4b16      	ldr	r3, [pc, #88]	; (800978c <__sfp+0x88>)
 8009734:	60e3      	str	r3, [r4, #12]
 8009736:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800973a:	6665      	str	r5, [r4, #100]	; 0x64
 800973c:	f000 fbcc 	bl	8009ed8 <__retarget_lock_init_recursive>
 8009740:	f7ff ff96 	bl	8009670 <__sfp_lock_release>
 8009744:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009748:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800974c:	6025      	str	r5, [r4, #0]
 800974e:	61a5      	str	r5, [r4, #24]
 8009750:	2208      	movs	r2, #8
 8009752:	4629      	mov	r1, r5
 8009754:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009758:	f7fd fb6e 	bl	8006e38 <memset>
 800975c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009760:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009764:	4620      	mov	r0, r4
 8009766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009768:	3468      	adds	r4, #104	; 0x68
 800976a:	e7d9      	b.n	8009720 <__sfp+0x1c>
 800976c:	2104      	movs	r1, #4
 800976e:	4638      	mov	r0, r7
 8009770:	f7ff ff62 	bl	8009638 <__sfmoreglue>
 8009774:	4604      	mov	r4, r0
 8009776:	6030      	str	r0, [r6, #0]
 8009778:	2800      	cmp	r0, #0
 800977a:	d1d5      	bne.n	8009728 <__sfp+0x24>
 800977c:	f7ff ff78 	bl	8009670 <__sfp_lock_release>
 8009780:	230c      	movs	r3, #12
 8009782:	603b      	str	r3, [r7, #0]
 8009784:	e7ee      	b.n	8009764 <__sfp+0x60>
 8009786:	bf00      	nop
 8009788:	0800b6e4 	.word	0x0800b6e4
 800978c:	ffff0001 	.word	0xffff0001

08009790 <fiprintf>:
 8009790:	b40e      	push	{r1, r2, r3}
 8009792:	b503      	push	{r0, r1, lr}
 8009794:	4601      	mov	r1, r0
 8009796:	ab03      	add	r3, sp, #12
 8009798:	4805      	ldr	r0, [pc, #20]	; (80097b0 <fiprintf+0x20>)
 800979a:	f853 2b04 	ldr.w	r2, [r3], #4
 800979e:	6800      	ldr	r0, [r0, #0]
 80097a0:	9301      	str	r3, [sp, #4]
 80097a2:	f001 fa59 	bl	800ac58 <_vfiprintf_r>
 80097a6:	b002      	add	sp, #8
 80097a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80097ac:	b003      	add	sp, #12
 80097ae:	4770      	bx	lr
 80097b0:	20000058 	.word	0x20000058

080097b4 <_fwalk_reent>:
 80097b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097b8:	4606      	mov	r6, r0
 80097ba:	4688      	mov	r8, r1
 80097bc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80097c0:	2700      	movs	r7, #0
 80097c2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097c6:	f1b9 0901 	subs.w	r9, r9, #1
 80097ca:	d505      	bpl.n	80097d8 <_fwalk_reent+0x24>
 80097cc:	6824      	ldr	r4, [r4, #0]
 80097ce:	2c00      	cmp	r4, #0
 80097d0:	d1f7      	bne.n	80097c2 <_fwalk_reent+0xe>
 80097d2:	4638      	mov	r0, r7
 80097d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097d8:	89ab      	ldrh	r3, [r5, #12]
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d907      	bls.n	80097ee <_fwalk_reent+0x3a>
 80097de:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097e2:	3301      	adds	r3, #1
 80097e4:	d003      	beq.n	80097ee <_fwalk_reent+0x3a>
 80097e6:	4629      	mov	r1, r5
 80097e8:	4630      	mov	r0, r6
 80097ea:	47c0      	blx	r8
 80097ec:	4307      	orrs	r7, r0
 80097ee:	3568      	adds	r5, #104	; 0x68
 80097f0:	e7e9      	b.n	80097c6 <_fwalk_reent+0x12>

080097f2 <rshift>:
 80097f2:	6903      	ldr	r3, [r0, #16]
 80097f4:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80097f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80097fc:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009800:	f100 0414 	add.w	r4, r0, #20
 8009804:	dd45      	ble.n	8009892 <rshift+0xa0>
 8009806:	f011 011f 	ands.w	r1, r1, #31
 800980a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800980e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009812:	d10c      	bne.n	800982e <rshift+0x3c>
 8009814:	f100 0710 	add.w	r7, r0, #16
 8009818:	4629      	mov	r1, r5
 800981a:	42b1      	cmp	r1, r6
 800981c:	d334      	bcc.n	8009888 <rshift+0x96>
 800981e:	1a9b      	subs	r3, r3, r2
 8009820:	009b      	lsls	r3, r3, #2
 8009822:	1eea      	subs	r2, r5, #3
 8009824:	4296      	cmp	r6, r2
 8009826:	bf38      	it	cc
 8009828:	2300      	movcc	r3, #0
 800982a:	4423      	add	r3, r4
 800982c:	e015      	b.n	800985a <rshift+0x68>
 800982e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009832:	f1c1 0820 	rsb	r8, r1, #32
 8009836:	40cf      	lsrs	r7, r1
 8009838:	f105 0e04 	add.w	lr, r5, #4
 800983c:	46a1      	mov	r9, r4
 800983e:	4576      	cmp	r6, lr
 8009840:	46f4      	mov	ip, lr
 8009842:	d815      	bhi.n	8009870 <rshift+0x7e>
 8009844:	1a9a      	subs	r2, r3, r2
 8009846:	0092      	lsls	r2, r2, #2
 8009848:	3a04      	subs	r2, #4
 800984a:	3501      	adds	r5, #1
 800984c:	42ae      	cmp	r6, r5
 800984e:	bf38      	it	cc
 8009850:	2200      	movcc	r2, #0
 8009852:	18a3      	adds	r3, r4, r2
 8009854:	50a7      	str	r7, [r4, r2]
 8009856:	b107      	cbz	r7, 800985a <rshift+0x68>
 8009858:	3304      	adds	r3, #4
 800985a:	1b1a      	subs	r2, r3, r4
 800985c:	42a3      	cmp	r3, r4
 800985e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009862:	bf08      	it	eq
 8009864:	2300      	moveq	r3, #0
 8009866:	6102      	str	r2, [r0, #16]
 8009868:	bf08      	it	eq
 800986a:	6143      	streq	r3, [r0, #20]
 800986c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009870:	f8dc c000 	ldr.w	ip, [ip]
 8009874:	fa0c fc08 	lsl.w	ip, ip, r8
 8009878:	ea4c 0707 	orr.w	r7, ip, r7
 800987c:	f849 7b04 	str.w	r7, [r9], #4
 8009880:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009884:	40cf      	lsrs	r7, r1
 8009886:	e7da      	b.n	800983e <rshift+0x4c>
 8009888:	f851 cb04 	ldr.w	ip, [r1], #4
 800988c:	f847 cf04 	str.w	ip, [r7, #4]!
 8009890:	e7c3      	b.n	800981a <rshift+0x28>
 8009892:	4623      	mov	r3, r4
 8009894:	e7e1      	b.n	800985a <rshift+0x68>

08009896 <__hexdig_fun>:
 8009896:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800989a:	2b09      	cmp	r3, #9
 800989c:	d802      	bhi.n	80098a4 <__hexdig_fun+0xe>
 800989e:	3820      	subs	r0, #32
 80098a0:	b2c0      	uxtb	r0, r0
 80098a2:	4770      	bx	lr
 80098a4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80098a8:	2b05      	cmp	r3, #5
 80098aa:	d801      	bhi.n	80098b0 <__hexdig_fun+0x1a>
 80098ac:	3847      	subs	r0, #71	; 0x47
 80098ae:	e7f7      	b.n	80098a0 <__hexdig_fun+0xa>
 80098b0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80098b4:	2b05      	cmp	r3, #5
 80098b6:	d801      	bhi.n	80098bc <__hexdig_fun+0x26>
 80098b8:	3827      	subs	r0, #39	; 0x27
 80098ba:	e7f1      	b.n	80098a0 <__hexdig_fun+0xa>
 80098bc:	2000      	movs	r0, #0
 80098be:	4770      	bx	lr

080098c0 <__gethex>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	ed2d 8b02 	vpush	{d8}
 80098c8:	b089      	sub	sp, #36	; 0x24
 80098ca:	ee08 0a10 	vmov	s16, r0
 80098ce:	9304      	str	r3, [sp, #16]
 80098d0:	4bb4      	ldr	r3, [pc, #720]	; (8009ba4 <__gethex+0x2e4>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	9301      	str	r3, [sp, #4]
 80098d6:	4618      	mov	r0, r3
 80098d8:	468b      	mov	fp, r1
 80098da:	4690      	mov	r8, r2
 80098dc:	f7f6 fc78 	bl	80001d0 <strlen>
 80098e0:	9b01      	ldr	r3, [sp, #4]
 80098e2:	f8db 2000 	ldr.w	r2, [fp]
 80098e6:	4403      	add	r3, r0
 80098e8:	4682      	mov	sl, r0
 80098ea:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 80098ee:	9305      	str	r3, [sp, #20]
 80098f0:	1c93      	adds	r3, r2, #2
 80098f2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 80098f6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 80098fa:	32fe      	adds	r2, #254	; 0xfe
 80098fc:	18d1      	adds	r1, r2, r3
 80098fe:	461f      	mov	r7, r3
 8009900:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009904:	9100      	str	r1, [sp, #0]
 8009906:	2830      	cmp	r0, #48	; 0x30
 8009908:	d0f8      	beq.n	80098fc <__gethex+0x3c>
 800990a:	f7ff ffc4 	bl	8009896 <__hexdig_fun>
 800990e:	4604      	mov	r4, r0
 8009910:	2800      	cmp	r0, #0
 8009912:	d13a      	bne.n	800998a <__gethex+0xca>
 8009914:	9901      	ldr	r1, [sp, #4]
 8009916:	4652      	mov	r2, sl
 8009918:	4638      	mov	r0, r7
 800991a:	f7fe f86a 	bl	80079f2 <strncmp>
 800991e:	4605      	mov	r5, r0
 8009920:	2800      	cmp	r0, #0
 8009922:	d168      	bne.n	80099f6 <__gethex+0x136>
 8009924:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009928:	eb07 060a 	add.w	r6, r7, sl
 800992c:	f7ff ffb3 	bl	8009896 <__hexdig_fun>
 8009930:	2800      	cmp	r0, #0
 8009932:	d062      	beq.n	80099fa <__gethex+0x13a>
 8009934:	4633      	mov	r3, r6
 8009936:	7818      	ldrb	r0, [r3, #0]
 8009938:	2830      	cmp	r0, #48	; 0x30
 800993a:	461f      	mov	r7, r3
 800993c:	f103 0301 	add.w	r3, r3, #1
 8009940:	d0f9      	beq.n	8009936 <__gethex+0x76>
 8009942:	f7ff ffa8 	bl	8009896 <__hexdig_fun>
 8009946:	2301      	movs	r3, #1
 8009948:	fab0 f480 	clz	r4, r0
 800994c:	0964      	lsrs	r4, r4, #5
 800994e:	4635      	mov	r5, r6
 8009950:	9300      	str	r3, [sp, #0]
 8009952:	463a      	mov	r2, r7
 8009954:	4616      	mov	r6, r2
 8009956:	3201      	adds	r2, #1
 8009958:	7830      	ldrb	r0, [r6, #0]
 800995a:	f7ff ff9c 	bl	8009896 <__hexdig_fun>
 800995e:	2800      	cmp	r0, #0
 8009960:	d1f8      	bne.n	8009954 <__gethex+0x94>
 8009962:	9901      	ldr	r1, [sp, #4]
 8009964:	4652      	mov	r2, sl
 8009966:	4630      	mov	r0, r6
 8009968:	f7fe f843 	bl	80079f2 <strncmp>
 800996c:	b980      	cbnz	r0, 8009990 <__gethex+0xd0>
 800996e:	b94d      	cbnz	r5, 8009984 <__gethex+0xc4>
 8009970:	eb06 050a 	add.w	r5, r6, sl
 8009974:	462a      	mov	r2, r5
 8009976:	4616      	mov	r6, r2
 8009978:	3201      	adds	r2, #1
 800997a:	7830      	ldrb	r0, [r6, #0]
 800997c:	f7ff ff8b 	bl	8009896 <__hexdig_fun>
 8009980:	2800      	cmp	r0, #0
 8009982:	d1f8      	bne.n	8009976 <__gethex+0xb6>
 8009984:	1bad      	subs	r5, r5, r6
 8009986:	00ad      	lsls	r5, r5, #2
 8009988:	e004      	b.n	8009994 <__gethex+0xd4>
 800998a:	2400      	movs	r4, #0
 800998c:	4625      	mov	r5, r4
 800998e:	e7e0      	b.n	8009952 <__gethex+0x92>
 8009990:	2d00      	cmp	r5, #0
 8009992:	d1f7      	bne.n	8009984 <__gethex+0xc4>
 8009994:	7833      	ldrb	r3, [r6, #0]
 8009996:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800999a:	2b50      	cmp	r3, #80	; 0x50
 800999c:	d13b      	bne.n	8009a16 <__gethex+0x156>
 800999e:	7873      	ldrb	r3, [r6, #1]
 80099a0:	2b2b      	cmp	r3, #43	; 0x2b
 80099a2:	d02c      	beq.n	80099fe <__gethex+0x13e>
 80099a4:	2b2d      	cmp	r3, #45	; 0x2d
 80099a6:	d02e      	beq.n	8009a06 <__gethex+0x146>
 80099a8:	1c71      	adds	r1, r6, #1
 80099aa:	f04f 0900 	mov.w	r9, #0
 80099ae:	7808      	ldrb	r0, [r1, #0]
 80099b0:	f7ff ff71 	bl	8009896 <__hexdig_fun>
 80099b4:	1e43      	subs	r3, r0, #1
 80099b6:	b2db      	uxtb	r3, r3
 80099b8:	2b18      	cmp	r3, #24
 80099ba:	d82c      	bhi.n	8009a16 <__gethex+0x156>
 80099bc:	f1a0 0210 	sub.w	r2, r0, #16
 80099c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80099c4:	f7ff ff67 	bl	8009896 <__hexdig_fun>
 80099c8:	1e43      	subs	r3, r0, #1
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b18      	cmp	r3, #24
 80099ce:	d91d      	bls.n	8009a0c <__gethex+0x14c>
 80099d0:	f1b9 0f00 	cmp.w	r9, #0
 80099d4:	d000      	beq.n	80099d8 <__gethex+0x118>
 80099d6:	4252      	negs	r2, r2
 80099d8:	4415      	add	r5, r2
 80099da:	f8cb 1000 	str.w	r1, [fp]
 80099de:	b1e4      	cbz	r4, 8009a1a <__gethex+0x15a>
 80099e0:	9b00      	ldr	r3, [sp, #0]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	bf14      	ite	ne
 80099e6:	2700      	movne	r7, #0
 80099e8:	2706      	moveq	r7, #6
 80099ea:	4638      	mov	r0, r7
 80099ec:	b009      	add	sp, #36	; 0x24
 80099ee:	ecbd 8b02 	vpop	{d8}
 80099f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099f6:	463e      	mov	r6, r7
 80099f8:	4625      	mov	r5, r4
 80099fa:	2401      	movs	r4, #1
 80099fc:	e7ca      	b.n	8009994 <__gethex+0xd4>
 80099fe:	f04f 0900 	mov.w	r9, #0
 8009a02:	1cb1      	adds	r1, r6, #2
 8009a04:	e7d3      	b.n	80099ae <__gethex+0xee>
 8009a06:	f04f 0901 	mov.w	r9, #1
 8009a0a:	e7fa      	b.n	8009a02 <__gethex+0x142>
 8009a0c:	230a      	movs	r3, #10
 8009a0e:	fb03 0202 	mla	r2, r3, r2, r0
 8009a12:	3a10      	subs	r2, #16
 8009a14:	e7d4      	b.n	80099c0 <__gethex+0x100>
 8009a16:	4631      	mov	r1, r6
 8009a18:	e7df      	b.n	80099da <__gethex+0x11a>
 8009a1a:	1bf3      	subs	r3, r6, r7
 8009a1c:	3b01      	subs	r3, #1
 8009a1e:	4621      	mov	r1, r4
 8009a20:	2b07      	cmp	r3, #7
 8009a22:	dc0b      	bgt.n	8009a3c <__gethex+0x17c>
 8009a24:	ee18 0a10 	vmov	r0, s16
 8009a28:	f000 fa8a 	bl	8009f40 <_Balloc>
 8009a2c:	4604      	mov	r4, r0
 8009a2e:	b940      	cbnz	r0, 8009a42 <__gethex+0x182>
 8009a30:	4b5d      	ldr	r3, [pc, #372]	; (8009ba8 <__gethex+0x2e8>)
 8009a32:	4602      	mov	r2, r0
 8009a34:	21de      	movs	r1, #222	; 0xde
 8009a36:	485d      	ldr	r0, [pc, #372]	; (8009bac <__gethex+0x2ec>)
 8009a38:	f7fe ff2a 	bl	8008890 <__assert_func>
 8009a3c:	3101      	adds	r1, #1
 8009a3e:	105b      	asrs	r3, r3, #1
 8009a40:	e7ee      	b.n	8009a20 <__gethex+0x160>
 8009a42:	f100 0914 	add.w	r9, r0, #20
 8009a46:	f04f 0b00 	mov.w	fp, #0
 8009a4a:	f1ca 0301 	rsb	r3, sl, #1
 8009a4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8009a52:	f8cd b000 	str.w	fp, [sp]
 8009a56:	9306      	str	r3, [sp, #24]
 8009a58:	42b7      	cmp	r7, r6
 8009a5a:	d340      	bcc.n	8009ade <__gethex+0x21e>
 8009a5c:	9802      	ldr	r0, [sp, #8]
 8009a5e:	9b00      	ldr	r3, [sp, #0]
 8009a60:	f840 3b04 	str.w	r3, [r0], #4
 8009a64:	eba0 0009 	sub.w	r0, r0, r9
 8009a68:	1080      	asrs	r0, r0, #2
 8009a6a:	0146      	lsls	r6, r0, #5
 8009a6c:	6120      	str	r0, [r4, #16]
 8009a6e:	4618      	mov	r0, r3
 8009a70:	f000 fb58 	bl	800a124 <__hi0bits>
 8009a74:	1a30      	subs	r0, r6, r0
 8009a76:	f8d8 6000 	ldr.w	r6, [r8]
 8009a7a:	42b0      	cmp	r0, r6
 8009a7c:	dd63      	ble.n	8009b46 <__gethex+0x286>
 8009a7e:	1b87      	subs	r7, r0, r6
 8009a80:	4639      	mov	r1, r7
 8009a82:	4620      	mov	r0, r4
 8009a84:	f000 fefc 	bl	800a880 <__any_on>
 8009a88:	4682      	mov	sl, r0
 8009a8a:	b1a8      	cbz	r0, 8009ab8 <__gethex+0x1f8>
 8009a8c:	1e7b      	subs	r3, r7, #1
 8009a8e:	1159      	asrs	r1, r3, #5
 8009a90:	f003 021f 	and.w	r2, r3, #31
 8009a94:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009a98:	f04f 0a01 	mov.w	sl, #1
 8009a9c:	fa0a f202 	lsl.w	r2, sl, r2
 8009aa0:	420a      	tst	r2, r1
 8009aa2:	d009      	beq.n	8009ab8 <__gethex+0x1f8>
 8009aa4:	4553      	cmp	r3, sl
 8009aa6:	dd05      	ble.n	8009ab4 <__gethex+0x1f4>
 8009aa8:	1eb9      	subs	r1, r7, #2
 8009aaa:	4620      	mov	r0, r4
 8009aac:	f000 fee8 	bl	800a880 <__any_on>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	d145      	bne.n	8009b40 <__gethex+0x280>
 8009ab4:	f04f 0a02 	mov.w	sl, #2
 8009ab8:	4639      	mov	r1, r7
 8009aba:	4620      	mov	r0, r4
 8009abc:	f7ff fe99 	bl	80097f2 <rshift>
 8009ac0:	443d      	add	r5, r7
 8009ac2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ac6:	42ab      	cmp	r3, r5
 8009ac8:	da4c      	bge.n	8009b64 <__gethex+0x2a4>
 8009aca:	ee18 0a10 	vmov	r0, s16
 8009ace:	4621      	mov	r1, r4
 8009ad0:	f000 fa76 	bl	8009fc0 <_Bfree>
 8009ad4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	6013      	str	r3, [r2, #0]
 8009ada:	27a3      	movs	r7, #163	; 0xa3
 8009adc:	e785      	b.n	80099ea <__gethex+0x12a>
 8009ade:	1e73      	subs	r3, r6, #1
 8009ae0:	9a05      	ldr	r2, [sp, #20]
 8009ae2:	9303      	str	r3, [sp, #12]
 8009ae4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ae8:	4293      	cmp	r3, r2
 8009aea:	d019      	beq.n	8009b20 <__gethex+0x260>
 8009aec:	f1bb 0f20 	cmp.w	fp, #32
 8009af0:	d107      	bne.n	8009b02 <__gethex+0x242>
 8009af2:	9b02      	ldr	r3, [sp, #8]
 8009af4:	9a00      	ldr	r2, [sp, #0]
 8009af6:	f843 2b04 	str.w	r2, [r3], #4
 8009afa:	9302      	str	r3, [sp, #8]
 8009afc:	2300      	movs	r3, #0
 8009afe:	9300      	str	r3, [sp, #0]
 8009b00:	469b      	mov	fp, r3
 8009b02:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009b06:	f7ff fec6 	bl	8009896 <__hexdig_fun>
 8009b0a:	9b00      	ldr	r3, [sp, #0]
 8009b0c:	f000 000f 	and.w	r0, r0, #15
 8009b10:	fa00 f00b 	lsl.w	r0, r0, fp
 8009b14:	4303      	orrs	r3, r0
 8009b16:	9300      	str	r3, [sp, #0]
 8009b18:	f10b 0b04 	add.w	fp, fp, #4
 8009b1c:	9b03      	ldr	r3, [sp, #12]
 8009b1e:	e00d      	b.n	8009b3c <__gethex+0x27c>
 8009b20:	9b03      	ldr	r3, [sp, #12]
 8009b22:	9a06      	ldr	r2, [sp, #24]
 8009b24:	4413      	add	r3, r2
 8009b26:	42bb      	cmp	r3, r7
 8009b28:	d3e0      	bcc.n	8009aec <__gethex+0x22c>
 8009b2a:	4618      	mov	r0, r3
 8009b2c:	9901      	ldr	r1, [sp, #4]
 8009b2e:	9307      	str	r3, [sp, #28]
 8009b30:	4652      	mov	r2, sl
 8009b32:	f7fd ff5e 	bl	80079f2 <strncmp>
 8009b36:	9b07      	ldr	r3, [sp, #28]
 8009b38:	2800      	cmp	r0, #0
 8009b3a:	d1d7      	bne.n	8009aec <__gethex+0x22c>
 8009b3c:	461e      	mov	r6, r3
 8009b3e:	e78b      	b.n	8009a58 <__gethex+0x198>
 8009b40:	f04f 0a03 	mov.w	sl, #3
 8009b44:	e7b8      	b.n	8009ab8 <__gethex+0x1f8>
 8009b46:	da0a      	bge.n	8009b5e <__gethex+0x29e>
 8009b48:	1a37      	subs	r7, r6, r0
 8009b4a:	4621      	mov	r1, r4
 8009b4c:	ee18 0a10 	vmov	r0, s16
 8009b50:	463a      	mov	r2, r7
 8009b52:	f000 fc51 	bl	800a3f8 <__lshift>
 8009b56:	1bed      	subs	r5, r5, r7
 8009b58:	4604      	mov	r4, r0
 8009b5a:	f100 0914 	add.w	r9, r0, #20
 8009b5e:	f04f 0a00 	mov.w	sl, #0
 8009b62:	e7ae      	b.n	8009ac2 <__gethex+0x202>
 8009b64:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009b68:	42a8      	cmp	r0, r5
 8009b6a:	dd72      	ble.n	8009c52 <__gethex+0x392>
 8009b6c:	1b45      	subs	r5, r0, r5
 8009b6e:	42ae      	cmp	r6, r5
 8009b70:	dc36      	bgt.n	8009be0 <__gethex+0x320>
 8009b72:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009b76:	2b02      	cmp	r3, #2
 8009b78:	d02a      	beq.n	8009bd0 <__gethex+0x310>
 8009b7a:	2b03      	cmp	r3, #3
 8009b7c:	d02c      	beq.n	8009bd8 <__gethex+0x318>
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d11c      	bne.n	8009bbc <__gethex+0x2fc>
 8009b82:	42ae      	cmp	r6, r5
 8009b84:	d11a      	bne.n	8009bbc <__gethex+0x2fc>
 8009b86:	2e01      	cmp	r6, #1
 8009b88:	d112      	bne.n	8009bb0 <__gethex+0x2f0>
 8009b8a:	9a04      	ldr	r2, [sp, #16]
 8009b8c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009b90:	6013      	str	r3, [r2, #0]
 8009b92:	2301      	movs	r3, #1
 8009b94:	6123      	str	r3, [r4, #16]
 8009b96:	f8c9 3000 	str.w	r3, [r9]
 8009b9a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009b9c:	2762      	movs	r7, #98	; 0x62
 8009b9e:	601c      	str	r4, [r3, #0]
 8009ba0:	e723      	b.n	80099ea <__gethex+0x12a>
 8009ba2:	bf00      	nop
 8009ba4:	0800b964 	.word	0x0800b964
 8009ba8:	0800b888 	.word	0x0800b888
 8009bac:	0800b8fc 	.word	0x0800b8fc
 8009bb0:	1e71      	subs	r1, r6, #1
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f000 fe64 	bl	800a880 <__any_on>
 8009bb8:	2800      	cmp	r0, #0
 8009bba:	d1e6      	bne.n	8009b8a <__gethex+0x2ca>
 8009bbc:	ee18 0a10 	vmov	r0, s16
 8009bc0:	4621      	mov	r1, r4
 8009bc2:	f000 f9fd 	bl	8009fc0 <_Bfree>
 8009bc6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009bc8:	2300      	movs	r3, #0
 8009bca:	6013      	str	r3, [r2, #0]
 8009bcc:	2750      	movs	r7, #80	; 0x50
 8009bce:	e70c      	b.n	80099ea <__gethex+0x12a>
 8009bd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d1f2      	bne.n	8009bbc <__gethex+0x2fc>
 8009bd6:	e7d8      	b.n	8009b8a <__gethex+0x2ca>
 8009bd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1d5      	bne.n	8009b8a <__gethex+0x2ca>
 8009bde:	e7ed      	b.n	8009bbc <__gethex+0x2fc>
 8009be0:	1e6f      	subs	r7, r5, #1
 8009be2:	f1ba 0f00 	cmp.w	sl, #0
 8009be6:	d131      	bne.n	8009c4c <__gethex+0x38c>
 8009be8:	b127      	cbz	r7, 8009bf4 <__gethex+0x334>
 8009bea:	4639      	mov	r1, r7
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 fe47 	bl	800a880 <__any_on>
 8009bf2:	4682      	mov	sl, r0
 8009bf4:	117b      	asrs	r3, r7, #5
 8009bf6:	2101      	movs	r1, #1
 8009bf8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009bfc:	f007 071f 	and.w	r7, r7, #31
 8009c00:	fa01 f707 	lsl.w	r7, r1, r7
 8009c04:	421f      	tst	r7, r3
 8009c06:	4629      	mov	r1, r5
 8009c08:	4620      	mov	r0, r4
 8009c0a:	bf18      	it	ne
 8009c0c:	f04a 0a02 	orrne.w	sl, sl, #2
 8009c10:	1b76      	subs	r6, r6, r5
 8009c12:	f7ff fdee 	bl	80097f2 <rshift>
 8009c16:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009c1a:	2702      	movs	r7, #2
 8009c1c:	f1ba 0f00 	cmp.w	sl, #0
 8009c20:	d048      	beq.n	8009cb4 <__gethex+0x3f4>
 8009c22:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009c26:	2b02      	cmp	r3, #2
 8009c28:	d015      	beq.n	8009c56 <__gethex+0x396>
 8009c2a:	2b03      	cmp	r3, #3
 8009c2c:	d017      	beq.n	8009c5e <__gethex+0x39e>
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d109      	bne.n	8009c46 <__gethex+0x386>
 8009c32:	f01a 0f02 	tst.w	sl, #2
 8009c36:	d006      	beq.n	8009c46 <__gethex+0x386>
 8009c38:	f8d9 0000 	ldr.w	r0, [r9]
 8009c3c:	ea4a 0a00 	orr.w	sl, sl, r0
 8009c40:	f01a 0f01 	tst.w	sl, #1
 8009c44:	d10e      	bne.n	8009c64 <__gethex+0x3a4>
 8009c46:	f047 0710 	orr.w	r7, r7, #16
 8009c4a:	e033      	b.n	8009cb4 <__gethex+0x3f4>
 8009c4c:	f04f 0a01 	mov.w	sl, #1
 8009c50:	e7d0      	b.n	8009bf4 <__gethex+0x334>
 8009c52:	2701      	movs	r7, #1
 8009c54:	e7e2      	b.n	8009c1c <__gethex+0x35c>
 8009c56:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c58:	f1c3 0301 	rsb	r3, r3, #1
 8009c5c:	9315      	str	r3, [sp, #84]	; 0x54
 8009c5e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d0f0      	beq.n	8009c46 <__gethex+0x386>
 8009c64:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009c68:	f104 0314 	add.w	r3, r4, #20
 8009c6c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009c70:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009c74:	f04f 0c00 	mov.w	ip, #0
 8009c78:	4618      	mov	r0, r3
 8009c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c7e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009c82:	d01c      	beq.n	8009cbe <__gethex+0x3fe>
 8009c84:	3201      	adds	r2, #1
 8009c86:	6002      	str	r2, [r0, #0]
 8009c88:	2f02      	cmp	r7, #2
 8009c8a:	f104 0314 	add.w	r3, r4, #20
 8009c8e:	d13f      	bne.n	8009d10 <__gethex+0x450>
 8009c90:	f8d8 2000 	ldr.w	r2, [r8]
 8009c94:	3a01      	subs	r2, #1
 8009c96:	42b2      	cmp	r2, r6
 8009c98:	d10a      	bne.n	8009cb0 <__gethex+0x3f0>
 8009c9a:	1171      	asrs	r1, r6, #5
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ca2:	f006 061f 	and.w	r6, r6, #31
 8009ca6:	fa02 f606 	lsl.w	r6, r2, r6
 8009caa:	421e      	tst	r6, r3
 8009cac:	bf18      	it	ne
 8009cae:	4617      	movne	r7, r2
 8009cb0:	f047 0720 	orr.w	r7, r7, #32
 8009cb4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009cb6:	601c      	str	r4, [r3, #0]
 8009cb8:	9b04      	ldr	r3, [sp, #16]
 8009cba:	601d      	str	r5, [r3, #0]
 8009cbc:	e695      	b.n	80099ea <__gethex+0x12a>
 8009cbe:	4299      	cmp	r1, r3
 8009cc0:	f843 cc04 	str.w	ip, [r3, #-4]
 8009cc4:	d8d8      	bhi.n	8009c78 <__gethex+0x3b8>
 8009cc6:	68a3      	ldr	r3, [r4, #8]
 8009cc8:	459b      	cmp	fp, r3
 8009cca:	db19      	blt.n	8009d00 <__gethex+0x440>
 8009ccc:	6861      	ldr	r1, [r4, #4]
 8009cce:	ee18 0a10 	vmov	r0, s16
 8009cd2:	3101      	adds	r1, #1
 8009cd4:	f000 f934 	bl	8009f40 <_Balloc>
 8009cd8:	4681      	mov	r9, r0
 8009cda:	b918      	cbnz	r0, 8009ce4 <__gethex+0x424>
 8009cdc:	4b1a      	ldr	r3, [pc, #104]	; (8009d48 <__gethex+0x488>)
 8009cde:	4602      	mov	r2, r0
 8009ce0:	2184      	movs	r1, #132	; 0x84
 8009ce2:	e6a8      	b.n	8009a36 <__gethex+0x176>
 8009ce4:	6922      	ldr	r2, [r4, #16]
 8009ce6:	3202      	adds	r2, #2
 8009ce8:	f104 010c 	add.w	r1, r4, #12
 8009cec:	0092      	lsls	r2, r2, #2
 8009cee:	300c      	adds	r0, #12
 8009cf0:	f7fd f894 	bl	8006e1c <memcpy>
 8009cf4:	4621      	mov	r1, r4
 8009cf6:	ee18 0a10 	vmov	r0, s16
 8009cfa:	f000 f961 	bl	8009fc0 <_Bfree>
 8009cfe:	464c      	mov	r4, r9
 8009d00:	6923      	ldr	r3, [r4, #16]
 8009d02:	1c5a      	adds	r2, r3, #1
 8009d04:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009d08:	6122      	str	r2, [r4, #16]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	615a      	str	r2, [r3, #20]
 8009d0e:	e7bb      	b.n	8009c88 <__gethex+0x3c8>
 8009d10:	6922      	ldr	r2, [r4, #16]
 8009d12:	455a      	cmp	r2, fp
 8009d14:	dd0b      	ble.n	8009d2e <__gethex+0x46e>
 8009d16:	2101      	movs	r1, #1
 8009d18:	4620      	mov	r0, r4
 8009d1a:	f7ff fd6a 	bl	80097f2 <rshift>
 8009d1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009d22:	3501      	adds	r5, #1
 8009d24:	42ab      	cmp	r3, r5
 8009d26:	f6ff aed0 	blt.w	8009aca <__gethex+0x20a>
 8009d2a:	2701      	movs	r7, #1
 8009d2c:	e7c0      	b.n	8009cb0 <__gethex+0x3f0>
 8009d2e:	f016 061f 	ands.w	r6, r6, #31
 8009d32:	d0fa      	beq.n	8009d2a <__gethex+0x46a>
 8009d34:	4453      	add	r3, sl
 8009d36:	f1c6 0620 	rsb	r6, r6, #32
 8009d3a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009d3e:	f000 f9f1 	bl	800a124 <__hi0bits>
 8009d42:	42b0      	cmp	r0, r6
 8009d44:	dbe7      	blt.n	8009d16 <__gethex+0x456>
 8009d46:	e7f0      	b.n	8009d2a <__gethex+0x46a>
 8009d48:	0800b888 	.word	0x0800b888

08009d4c <L_shift>:
 8009d4c:	f1c2 0208 	rsb	r2, r2, #8
 8009d50:	0092      	lsls	r2, r2, #2
 8009d52:	b570      	push	{r4, r5, r6, lr}
 8009d54:	f1c2 0620 	rsb	r6, r2, #32
 8009d58:	6843      	ldr	r3, [r0, #4]
 8009d5a:	6804      	ldr	r4, [r0, #0]
 8009d5c:	fa03 f506 	lsl.w	r5, r3, r6
 8009d60:	432c      	orrs	r4, r5
 8009d62:	40d3      	lsrs	r3, r2
 8009d64:	6004      	str	r4, [r0, #0]
 8009d66:	f840 3f04 	str.w	r3, [r0, #4]!
 8009d6a:	4288      	cmp	r0, r1
 8009d6c:	d3f4      	bcc.n	8009d58 <L_shift+0xc>
 8009d6e:	bd70      	pop	{r4, r5, r6, pc}

08009d70 <__match>:
 8009d70:	b530      	push	{r4, r5, lr}
 8009d72:	6803      	ldr	r3, [r0, #0]
 8009d74:	3301      	adds	r3, #1
 8009d76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d7a:	b914      	cbnz	r4, 8009d82 <__match+0x12>
 8009d7c:	6003      	str	r3, [r0, #0]
 8009d7e:	2001      	movs	r0, #1
 8009d80:	bd30      	pop	{r4, r5, pc}
 8009d82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d86:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009d8a:	2d19      	cmp	r5, #25
 8009d8c:	bf98      	it	ls
 8009d8e:	3220      	addls	r2, #32
 8009d90:	42a2      	cmp	r2, r4
 8009d92:	d0f0      	beq.n	8009d76 <__match+0x6>
 8009d94:	2000      	movs	r0, #0
 8009d96:	e7f3      	b.n	8009d80 <__match+0x10>

08009d98 <__hexnan>:
 8009d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d9c:	680b      	ldr	r3, [r1, #0]
 8009d9e:	115e      	asrs	r6, r3, #5
 8009da0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009da4:	f013 031f 	ands.w	r3, r3, #31
 8009da8:	b087      	sub	sp, #28
 8009daa:	bf18      	it	ne
 8009dac:	3604      	addne	r6, #4
 8009dae:	2500      	movs	r5, #0
 8009db0:	1f37      	subs	r7, r6, #4
 8009db2:	4690      	mov	r8, r2
 8009db4:	6802      	ldr	r2, [r0, #0]
 8009db6:	9301      	str	r3, [sp, #4]
 8009db8:	4682      	mov	sl, r0
 8009dba:	f846 5c04 	str.w	r5, [r6, #-4]
 8009dbe:	46b9      	mov	r9, r7
 8009dc0:	463c      	mov	r4, r7
 8009dc2:	9502      	str	r5, [sp, #8]
 8009dc4:	46ab      	mov	fp, r5
 8009dc6:	7851      	ldrb	r1, [r2, #1]
 8009dc8:	1c53      	adds	r3, r2, #1
 8009dca:	9303      	str	r3, [sp, #12]
 8009dcc:	b341      	cbz	r1, 8009e20 <__hexnan+0x88>
 8009dce:	4608      	mov	r0, r1
 8009dd0:	9205      	str	r2, [sp, #20]
 8009dd2:	9104      	str	r1, [sp, #16]
 8009dd4:	f7ff fd5f 	bl	8009896 <__hexdig_fun>
 8009dd8:	2800      	cmp	r0, #0
 8009dda:	d14f      	bne.n	8009e7c <__hexnan+0xe4>
 8009ddc:	9904      	ldr	r1, [sp, #16]
 8009dde:	9a05      	ldr	r2, [sp, #20]
 8009de0:	2920      	cmp	r1, #32
 8009de2:	d818      	bhi.n	8009e16 <__hexnan+0x7e>
 8009de4:	9b02      	ldr	r3, [sp, #8]
 8009de6:	459b      	cmp	fp, r3
 8009de8:	dd13      	ble.n	8009e12 <__hexnan+0x7a>
 8009dea:	454c      	cmp	r4, r9
 8009dec:	d206      	bcs.n	8009dfc <__hexnan+0x64>
 8009dee:	2d07      	cmp	r5, #7
 8009df0:	dc04      	bgt.n	8009dfc <__hexnan+0x64>
 8009df2:	462a      	mov	r2, r5
 8009df4:	4649      	mov	r1, r9
 8009df6:	4620      	mov	r0, r4
 8009df8:	f7ff ffa8 	bl	8009d4c <L_shift>
 8009dfc:	4544      	cmp	r4, r8
 8009dfe:	d950      	bls.n	8009ea2 <__hexnan+0x10a>
 8009e00:	2300      	movs	r3, #0
 8009e02:	f1a4 0904 	sub.w	r9, r4, #4
 8009e06:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e0a:	f8cd b008 	str.w	fp, [sp, #8]
 8009e0e:	464c      	mov	r4, r9
 8009e10:	461d      	mov	r5, r3
 8009e12:	9a03      	ldr	r2, [sp, #12]
 8009e14:	e7d7      	b.n	8009dc6 <__hexnan+0x2e>
 8009e16:	2929      	cmp	r1, #41	; 0x29
 8009e18:	d156      	bne.n	8009ec8 <__hexnan+0x130>
 8009e1a:	3202      	adds	r2, #2
 8009e1c:	f8ca 2000 	str.w	r2, [sl]
 8009e20:	f1bb 0f00 	cmp.w	fp, #0
 8009e24:	d050      	beq.n	8009ec8 <__hexnan+0x130>
 8009e26:	454c      	cmp	r4, r9
 8009e28:	d206      	bcs.n	8009e38 <__hexnan+0xa0>
 8009e2a:	2d07      	cmp	r5, #7
 8009e2c:	dc04      	bgt.n	8009e38 <__hexnan+0xa0>
 8009e2e:	462a      	mov	r2, r5
 8009e30:	4649      	mov	r1, r9
 8009e32:	4620      	mov	r0, r4
 8009e34:	f7ff ff8a 	bl	8009d4c <L_shift>
 8009e38:	4544      	cmp	r4, r8
 8009e3a:	d934      	bls.n	8009ea6 <__hexnan+0x10e>
 8009e3c:	f1a8 0204 	sub.w	r2, r8, #4
 8009e40:	4623      	mov	r3, r4
 8009e42:	f853 1b04 	ldr.w	r1, [r3], #4
 8009e46:	f842 1f04 	str.w	r1, [r2, #4]!
 8009e4a:	429f      	cmp	r7, r3
 8009e4c:	d2f9      	bcs.n	8009e42 <__hexnan+0xaa>
 8009e4e:	1b3b      	subs	r3, r7, r4
 8009e50:	f023 0303 	bic.w	r3, r3, #3
 8009e54:	3304      	adds	r3, #4
 8009e56:	3401      	adds	r4, #1
 8009e58:	3e03      	subs	r6, #3
 8009e5a:	42b4      	cmp	r4, r6
 8009e5c:	bf88      	it	hi
 8009e5e:	2304      	movhi	r3, #4
 8009e60:	4443      	add	r3, r8
 8009e62:	2200      	movs	r2, #0
 8009e64:	f843 2b04 	str.w	r2, [r3], #4
 8009e68:	429f      	cmp	r7, r3
 8009e6a:	d2fb      	bcs.n	8009e64 <__hexnan+0xcc>
 8009e6c:	683b      	ldr	r3, [r7, #0]
 8009e6e:	b91b      	cbnz	r3, 8009e78 <__hexnan+0xe0>
 8009e70:	4547      	cmp	r7, r8
 8009e72:	d127      	bne.n	8009ec4 <__hexnan+0x12c>
 8009e74:	2301      	movs	r3, #1
 8009e76:	603b      	str	r3, [r7, #0]
 8009e78:	2005      	movs	r0, #5
 8009e7a:	e026      	b.n	8009eca <__hexnan+0x132>
 8009e7c:	3501      	adds	r5, #1
 8009e7e:	2d08      	cmp	r5, #8
 8009e80:	f10b 0b01 	add.w	fp, fp, #1
 8009e84:	dd06      	ble.n	8009e94 <__hexnan+0xfc>
 8009e86:	4544      	cmp	r4, r8
 8009e88:	d9c3      	bls.n	8009e12 <__hexnan+0x7a>
 8009e8a:	2300      	movs	r3, #0
 8009e8c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009e90:	2501      	movs	r5, #1
 8009e92:	3c04      	subs	r4, #4
 8009e94:	6822      	ldr	r2, [r4, #0]
 8009e96:	f000 000f 	and.w	r0, r0, #15
 8009e9a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8009e9e:	6022      	str	r2, [r4, #0]
 8009ea0:	e7b7      	b.n	8009e12 <__hexnan+0x7a>
 8009ea2:	2508      	movs	r5, #8
 8009ea4:	e7b5      	b.n	8009e12 <__hexnan+0x7a>
 8009ea6:	9b01      	ldr	r3, [sp, #4]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d0df      	beq.n	8009e6c <__hexnan+0xd4>
 8009eac:	f04f 32ff 	mov.w	r2, #4294967295
 8009eb0:	f1c3 0320 	rsb	r3, r3, #32
 8009eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8009eb8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009ebc:	401a      	ands	r2, r3
 8009ebe:	f846 2c04 	str.w	r2, [r6, #-4]
 8009ec2:	e7d3      	b.n	8009e6c <__hexnan+0xd4>
 8009ec4:	3f04      	subs	r7, #4
 8009ec6:	e7d1      	b.n	8009e6c <__hexnan+0xd4>
 8009ec8:	2004      	movs	r0, #4
 8009eca:	b007      	add	sp, #28
 8009ecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009ed0 <_localeconv_r>:
 8009ed0:	4800      	ldr	r0, [pc, #0]	; (8009ed4 <_localeconv_r+0x4>)
 8009ed2:	4770      	bx	lr
 8009ed4:	200001b0 	.word	0x200001b0

08009ed8 <__retarget_lock_init_recursive>:
 8009ed8:	4770      	bx	lr

08009eda <__retarget_lock_acquire_recursive>:
 8009eda:	4770      	bx	lr

08009edc <__retarget_lock_release_recursive>:
 8009edc:	4770      	bx	lr
	...

08009ee0 <_lseek_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d07      	ldr	r5, [pc, #28]	; (8009f00 <_lseek_r+0x20>)
 8009ee4:	4604      	mov	r4, r0
 8009ee6:	4608      	mov	r0, r1
 8009ee8:	4611      	mov	r1, r2
 8009eea:	2200      	movs	r2, #0
 8009eec:	602a      	str	r2, [r5, #0]
 8009eee:	461a      	mov	r2, r3
 8009ef0:	f7f9 fbea 	bl	80036c8 <_lseek>
 8009ef4:	1c43      	adds	r3, r0, #1
 8009ef6:	d102      	bne.n	8009efe <_lseek_r+0x1e>
 8009ef8:	682b      	ldr	r3, [r5, #0]
 8009efa:	b103      	cbz	r3, 8009efe <_lseek_r+0x1e>
 8009efc:	6023      	str	r3, [r4, #0]
 8009efe:	bd38      	pop	{r3, r4, r5, pc}
 8009f00:	200005e0 	.word	0x200005e0

08009f04 <__ascii_mbtowc>:
 8009f04:	b082      	sub	sp, #8
 8009f06:	b901      	cbnz	r1, 8009f0a <__ascii_mbtowc+0x6>
 8009f08:	a901      	add	r1, sp, #4
 8009f0a:	b142      	cbz	r2, 8009f1e <__ascii_mbtowc+0x1a>
 8009f0c:	b14b      	cbz	r3, 8009f22 <__ascii_mbtowc+0x1e>
 8009f0e:	7813      	ldrb	r3, [r2, #0]
 8009f10:	600b      	str	r3, [r1, #0]
 8009f12:	7812      	ldrb	r2, [r2, #0]
 8009f14:	1e10      	subs	r0, r2, #0
 8009f16:	bf18      	it	ne
 8009f18:	2001      	movne	r0, #1
 8009f1a:	b002      	add	sp, #8
 8009f1c:	4770      	bx	lr
 8009f1e:	4610      	mov	r0, r2
 8009f20:	e7fb      	b.n	8009f1a <__ascii_mbtowc+0x16>
 8009f22:	f06f 0001 	mvn.w	r0, #1
 8009f26:	e7f8      	b.n	8009f1a <__ascii_mbtowc+0x16>

08009f28 <__malloc_lock>:
 8009f28:	4801      	ldr	r0, [pc, #4]	; (8009f30 <__malloc_lock+0x8>)
 8009f2a:	f7ff bfd6 	b.w	8009eda <__retarget_lock_acquire_recursive>
 8009f2e:	bf00      	nop
 8009f30:	200005dc 	.word	0x200005dc

08009f34 <__malloc_unlock>:
 8009f34:	4801      	ldr	r0, [pc, #4]	; (8009f3c <__malloc_unlock+0x8>)
 8009f36:	f7ff bfd1 	b.w	8009edc <__retarget_lock_release_recursive>
 8009f3a:	bf00      	nop
 8009f3c:	200005dc 	.word	0x200005dc

08009f40 <_Balloc>:
 8009f40:	b570      	push	{r4, r5, r6, lr}
 8009f42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009f44:	4604      	mov	r4, r0
 8009f46:	460d      	mov	r5, r1
 8009f48:	b976      	cbnz	r6, 8009f68 <_Balloc+0x28>
 8009f4a:	2010      	movs	r0, #16
 8009f4c:	f7fc ff5e 	bl	8006e0c <malloc>
 8009f50:	4602      	mov	r2, r0
 8009f52:	6260      	str	r0, [r4, #36]	; 0x24
 8009f54:	b920      	cbnz	r0, 8009f60 <_Balloc+0x20>
 8009f56:	4b18      	ldr	r3, [pc, #96]	; (8009fb8 <_Balloc+0x78>)
 8009f58:	4818      	ldr	r0, [pc, #96]	; (8009fbc <_Balloc+0x7c>)
 8009f5a:	2166      	movs	r1, #102	; 0x66
 8009f5c:	f7fe fc98 	bl	8008890 <__assert_func>
 8009f60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009f64:	6006      	str	r6, [r0, #0]
 8009f66:	60c6      	str	r6, [r0, #12]
 8009f68:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8009f6a:	68f3      	ldr	r3, [r6, #12]
 8009f6c:	b183      	cbz	r3, 8009f90 <_Balloc+0x50>
 8009f6e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f70:	68db      	ldr	r3, [r3, #12]
 8009f72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009f76:	b9b8      	cbnz	r0, 8009fa8 <_Balloc+0x68>
 8009f78:	2101      	movs	r1, #1
 8009f7a:	fa01 f605 	lsl.w	r6, r1, r5
 8009f7e:	1d72      	adds	r2, r6, #5
 8009f80:	0092      	lsls	r2, r2, #2
 8009f82:	4620      	mov	r0, r4
 8009f84:	f000 fc9d 	bl	800a8c2 <_calloc_r>
 8009f88:	b160      	cbz	r0, 8009fa4 <_Balloc+0x64>
 8009f8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009f8e:	e00e      	b.n	8009fae <_Balloc+0x6e>
 8009f90:	2221      	movs	r2, #33	; 0x21
 8009f92:	2104      	movs	r1, #4
 8009f94:	4620      	mov	r0, r4
 8009f96:	f000 fc94 	bl	800a8c2 <_calloc_r>
 8009f9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009f9c:	60f0      	str	r0, [r6, #12]
 8009f9e:	68db      	ldr	r3, [r3, #12]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e4      	bne.n	8009f6e <_Balloc+0x2e>
 8009fa4:	2000      	movs	r0, #0
 8009fa6:	bd70      	pop	{r4, r5, r6, pc}
 8009fa8:	6802      	ldr	r2, [r0, #0]
 8009faa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009fb4:	e7f7      	b.n	8009fa6 <_Balloc+0x66>
 8009fb6:	bf00      	nop
 8009fb8:	0800b770 	.word	0x0800b770
 8009fbc:	0800b978 	.word	0x0800b978

08009fc0 <_Bfree>:
 8009fc0:	b570      	push	{r4, r5, r6, lr}
 8009fc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009fc4:	4605      	mov	r5, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	b976      	cbnz	r6, 8009fe8 <_Bfree+0x28>
 8009fca:	2010      	movs	r0, #16
 8009fcc:	f7fc ff1e 	bl	8006e0c <malloc>
 8009fd0:	4602      	mov	r2, r0
 8009fd2:	6268      	str	r0, [r5, #36]	; 0x24
 8009fd4:	b920      	cbnz	r0, 8009fe0 <_Bfree+0x20>
 8009fd6:	4b09      	ldr	r3, [pc, #36]	; (8009ffc <_Bfree+0x3c>)
 8009fd8:	4809      	ldr	r0, [pc, #36]	; (800a000 <_Bfree+0x40>)
 8009fda:	218a      	movs	r1, #138	; 0x8a
 8009fdc:	f7fe fc58 	bl	8008890 <__assert_func>
 8009fe0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009fe4:	6006      	str	r6, [r0, #0]
 8009fe6:	60c6      	str	r6, [r0, #12]
 8009fe8:	b13c      	cbz	r4, 8009ffa <_Bfree+0x3a>
 8009fea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009fec:	6862      	ldr	r2, [r4, #4]
 8009fee:	68db      	ldr	r3, [r3, #12]
 8009ff0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009ff4:	6021      	str	r1, [r4, #0]
 8009ff6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009ffa:	bd70      	pop	{r4, r5, r6, pc}
 8009ffc:	0800b770 	.word	0x0800b770
 800a000:	0800b978 	.word	0x0800b978

0800a004 <__multadd>:
 800a004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a008:	690d      	ldr	r5, [r1, #16]
 800a00a:	4607      	mov	r7, r0
 800a00c:	460c      	mov	r4, r1
 800a00e:	461e      	mov	r6, r3
 800a010:	f101 0c14 	add.w	ip, r1, #20
 800a014:	2000      	movs	r0, #0
 800a016:	f8dc 3000 	ldr.w	r3, [ip]
 800a01a:	b299      	uxth	r1, r3
 800a01c:	fb02 6101 	mla	r1, r2, r1, r6
 800a020:	0c1e      	lsrs	r6, r3, #16
 800a022:	0c0b      	lsrs	r3, r1, #16
 800a024:	fb02 3306 	mla	r3, r2, r6, r3
 800a028:	b289      	uxth	r1, r1
 800a02a:	3001      	adds	r0, #1
 800a02c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a030:	4285      	cmp	r5, r0
 800a032:	f84c 1b04 	str.w	r1, [ip], #4
 800a036:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a03a:	dcec      	bgt.n	800a016 <__multadd+0x12>
 800a03c:	b30e      	cbz	r6, 800a082 <__multadd+0x7e>
 800a03e:	68a3      	ldr	r3, [r4, #8]
 800a040:	42ab      	cmp	r3, r5
 800a042:	dc19      	bgt.n	800a078 <__multadd+0x74>
 800a044:	6861      	ldr	r1, [r4, #4]
 800a046:	4638      	mov	r0, r7
 800a048:	3101      	adds	r1, #1
 800a04a:	f7ff ff79 	bl	8009f40 <_Balloc>
 800a04e:	4680      	mov	r8, r0
 800a050:	b928      	cbnz	r0, 800a05e <__multadd+0x5a>
 800a052:	4602      	mov	r2, r0
 800a054:	4b0c      	ldr	r3, [pc, #48]	; (800a088 <__multadd+0x84>)
 800a056:	480d      	ldr	r0, [pc, #52]	; (800a08c <__multadd+0x88>)
 800a058:	21b5      	movs	r1, #181	; 0xb5
 800a05a:	f7fe fc19 	bl	8008890 <__assert_func>
 800a05e:	6922      	ldr	r2, [r4, #16]
 800a060:	3202      	adds	r2, #2
 800a062:	f104 010c 	add.w	r1, r4, #12
 800a066:	0092      	lsls	r2, r2, #2
 800a068:	300c      	adds	r0, #12
 800a06a:	f7fc fed7 	bl	8006e1c <memcpy>
 800a06e:	4621      	mov	r1, r4
 800a070:	4638      	mov	r0, r7
 800a072:	f7ff ffa5 	bl	8009fc0 <_Bfree>
 800a076:	4644      	mov	r4, r8
 800a078:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a07c:	3501      	adds	r5, #1
 800a07e:	615e      	str	r6, [r3, #20]
 800a080:	6125      	str	r5, [r4, #16]
 800a082:	4620      	mov	r0, r4
 800a084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a088:	0800b888 	.word	0x0800b888
 800a08c:	0800b978 	.word	0x0800b978

0800a090 <__s2b>:
 800a090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a094:	460c      	mov	r4, r1
 800a096:	4615      	mov	r5, r2
 800a098:	461f      	mov	r7, r3
 800a09a:	2209      	movs	r2, #9
 800a09c:	3308      	adds	r3, #8
 800a09e:	4606      	mov	r6, r0
 800a0a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	2201      	movs	r2, #1
 800a0a8:	429a      	cmp	r2, r3
 800a0aa:	db09      	blt.n	800a0c0 <__s2b+0x30>
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	f7ff ff47 	bl	8009f40 <_Balloc>
 800a0b2:	b940      	cbnz	r0, 800a0c6 <__s2b+0x36>
 800a0b4:	4602      	mov	r2, r0
 800a0b6:	4b19      	ldr	r3, [pc, #100]	; (800a11c <__s2b+0x8c>)
 800a0b8:	4819      	ldr	r0, [pc, #100]	; (800a120 <__s2b+0x90>)
 800a0ba:	21ce      	movs	r1, #206	; 0xce
 800a0bc:	f7fe fbe8 	bl	8008890 <__assert_func>
 800a0c0:	0052      	lsls	r2, r2, #1
 800a0c2:	3101      	adds	r1, #1
 800a0c4:	e7f0      	b.n	800a0a8 <__s2b+0x18>
 800a0c6:	9b08      	ldr	r3, [sp, #32]
 800a0c8:	6143      	str	r3, [r0, #20]
 800a0ca:	2d09      	cmp	r5, #9
 800a0cc:	f04f 0301 	mov.w	r3, #1
 800a0d0:	6103      	str	r3, [r0, #16]
 800a0d2:	dd16      	ble.n	800a102 <__s2b+0x72>
 800a0d4:	f104 0909 	add.w	r9, r4, #9
 800a0d8:	46c8      	mov	r8, r9
 800a0da:	442c      	add	r4, r5
 800a0dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a0e0:	4601      	mov	r1, r0
 800a0e2:	3b30      	subs	r3, #48	; 0x30
 800a0e4:	220a      	movs	r2, #10
 800a0e6:	4630      	mov	r0, r6
 800a0e8:	f7ff ff8c 	bl	800a004 <__multadd>
 800a0ec:	45a0      	cmp	r8, r4
 800a0ee:	d1f5      	bne.n	800a0dc <__s2b+0x4c>
 800a0f0:	f1a5 0408 	sub.w	r4, r5, #8
 800a0f4:	444c      	add	r4, r9
 800a0f6:	1b2d      	subs	r5, r5, r4
 800a0f8:	1963      	adds	r3, r4, r5
 800a0fa:	42bb      	cmp	r3, r7
 800a0fc:	db04      	blt.n	800a108 <__s2b+0x78>
 800a0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a102:	340a      	adds	r4, #10
 800a104:	2509      	movs	r5, #9
 800a106:	e7f6      	b.n	800a0f6 <__s2b+0x66>
 800a108:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a10c:	4601      	mov	r1, r0
 800a10e:	3b30      	subs	r3, #48	; 0x30
 800a110:	220a      	movs	r2, #10
 800a112:	4630      	mov	r0, r6
 800a114:	f7ff ff76 	bl	800a004 <__multadd>
 800a118:	e7ee      	b.n	800a0f8 <__s2b+0x68>
 800a11a:	bf00      	nop
 800a11c:	0800b888 	.word	0x0800b888
 800a120:	0800b978 	.word	0x0800b978

0800a124 <__hi0bits>:
 800a124:	0c03      	lsrs	r3, r0, #16
 800a126:	041b      	lsls	r3, r3, #16
 800a128:	b9d3      	cbnz	r3, 800a160 <__hi0bits+0x3c>
 800a12a:	0400      	lsls	r0, r0, #16
 800a12c:	2310      	movs	r3, #16
 800a12e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a132:	bf04      	itt	eq
 800a134:	0200      	lsleq	r0, r0, #8
 800a136:	3308      	addeq	r3, #8
 800a138:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a13c:	bf04      	itt	eq
 800a13e:	0100      	lsleq	r0, r0, #4
 800a140:	3304      	addeq	r3, #4
 800a142:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a146:	bf04      	itt	eq
 800a148:	0080      	lsleq	r0, r0, #2
 800a14a:	3302      	addeq	r3, #2
 800a14c:	2800      	cmp	r0, #0
 800a14e:	db05      	blt.n	800a15c <__hi0bits+0x38>
 800a150:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a154:	f103 0301 	add.w	r3, r3, #1
 800a158:	bf08      	it	eq
 800a15a:	2320      	moveq	r3, #32
 800a15c:	4618      	mov	r0, r3
 800a15e:	4770      	bx	lr
 800a160:	2300      	movs	r3, #0
 800a162:	e7e4      	b.n	800a12e <__hi0bits+0xa>

0800a164 <__lo0bits>:
 800a164:	6803      	ldr	r3, [r0, #0]
 800a166:	f013 0207 	ands.w	r2, r3, #7
 800a16a:	4601      	mov	r1, r0
 800a16c:	d00b      	beq.n	800a186 <__lo0bits+0x22>
 800a16e:	07da      	lsls	r2, r3, #31
 800a170:	d423      	bmi.n	800a1ba <__lo0bits+0x56>
 800a172:	0798      	lsls	r0, r3, #30
 800a174:	bf49      	itett	mi
 800a176:	085b      	lsrmi	r3, r3, #1
 800a178:	089b      	lsrpl	r3, r3, #2
 800a17a:	2001      	movmi	r0, #1
 800a17c:	600b      	strmi	r3, [r1, #0]
 800a17e:	bf5c      	itt	pl
 800a180:	600b      	strpl	r3, [r1, #0]
 800a182:	2002      	movpl	r0, #2
 800a184:	4770      	bx	lr
 800a186:	b298      	uxth	r0, r3
 800a188:	b9a8      	cbnz	r0, 800a1b6 <__lo0bits+0x52>
 800a18a:	0c1b      	lsrs	r3, r3, #16
 800a18c:	2010      	movs	r0, #16
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	b90a      	cbnz	r2, 800a196 <__lo0bits+0x32>
 800a192:	3008      	adds	r0, #8
 800a194:	0a1b      	lsrs	r3, r3, #8
 800a196:	071a      	lsls	r2, r3, #28
 800a198:	bf04      	itt	eq
 800a19a:	091b      	lsreq	r3, r3, #4
 800a19c:	3004      	addeq	r0, #4
 800a19e:	079a      	lsls	r2, r3, #30
 800a1a0:	bf04      	itt	eq
 800a1a2:	089b      	lsreq	r3, r3, #2
 800a1a4:	3002      	addeq	r0, #2
 800a1a6:	07da      	lsls	r2, r3, #31
 800a1a8:	d403      	bmi.n	800a1b2 <__lo0bits+0x4e>
 800a1aa:	085b      	lsrs	r3, r3, #1
 800a1ac:	f100 0001 	add.w	r0, r0, #1
 800a1b0:	d005      	beq.n	800a1be <__lo0bits+0x5a>
 800a1b2:	600b      	str	r3, [r1, #0]
 800a1b4:	4770      	bx	lr
 800a1b6:	4610      	mov	r0, r2
 800a1b8:	e7e9      	b.n	800a18e <__lo0bits+0x2a>
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	4770      	bx	lr
 800a1be:	2020      	movs	r0, #32
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <__i2b>:
 800a1c4:	b510      	push	{r4, lr}
 800a1c6:	460c      	mov	r4, r1
 800a1c8:	2101      	movs	r1, #1
 800a1ca:	f7ff feb9 	bl	8009f40 <_Balloc>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	b928      	cbnz	r0, 800a1de <__i2b+0x1a>
 800a1d2:	4b05      	ldr	r3, [pc, #20]	; (800a1e8 <__i2b+0x24>)
 800a1d4:	4805      	ldr	r0, [pc, #20]	; (800a1ec <__i2b+0x28>)
 800a1d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a1da:	f7fe fb59 	bl	8008890 <__assert_func>
 800a1de:	2301      	movs	r3, #1
 800a1e0:	6144      	str	r4, [r0, #20]
 800a1e2:	6103      	str	r3, [r0, #16]
 800a1e4:	bd10      	pop	{r4, pc}
 800a1e6:	bf00      	nop
 800a1e8:	0800b888 	.word	0x0800b888
 800a1ec:	0800b978 	.word	0x0800b978

0800a1f0 <__multiply>:
 800a1f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1f4:	4691      	mov	r9, r2
 800a1f6:	690a      	ldr	r2, [r1, #16]
 800a1f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	bfb8      	it	lt
 800a200:	460b      	movlt	r3, r1
 800a202:	460c      	mov	r4, r1
 800a204:	bfbc      	itt	lt
 800a206:	464c      	movlt	r4, r9
 800a208:	4699      	movlt	r9, r3
 800a20a:	6927      	ldr	r7, [r4, #16]
 800a20c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a210:	68a3      	ldr	r3, [r4, #8]
 800a212:	6861      	ldr	r1, [r4, #4]
 800a214:	eb07 060a 	add.w	r6, r7, sl
 800a218:	42b3      	cmp	r3, r6
 800a21a:	b085      	sub	sp, #20
 800a21c:	bfb8      	it	lt
 800a21e:	3101      	addlt	r1, #1
 800a220:	f7ff fe8e 	bl	8009f40 <_Balloc>
 800a224:	b930      	cbnz	r0, 800a234 <__multiply+0x44>
 800a226:	4602      	mov	r2, r0
 800a228:	4b44      	ldr	r3, [pc, #272]	; (800a33c <__multiply+0x14c>)
 800a22a:	4845      	ldr	r0, [pc, #276]	; (800a340 <__multiply+0x150>)
 800a22c:	f240 115d 	movw	r1, #349	; 0x15d
 800a230:	f7fe fb2e 	bl	8008890 <__assert_func>
 800a234:	f100 0514 	add.w	r5, r0, #20
 800a238:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a23c:	462b      	mov	r3, r5
 800a23e:	2200      	movs	r2, #0
 800a240:	4543      	cmp	r3, r8
 800a242:	d321      	bcc.n	800a288 <__multiply+0x98>
 800a244:	f104 0314 	add.w	r3, r4, #20
 800a248:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a24c:	f109 0314 	add.w	r3, r9, #20
 800a250:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a254:	9202      	str	r2, [sp, #8]
 800a256:	1b3a      	subs	r2, r7, r4
 800a258:	3a15      	subs	r2, #21
 800a25a:	f022 0203 	bic.w	r2, r2, #3
 800a25e:	3204      	adds	r2, #4
 800a260:	f104 0115 	add.w	r1, r4, #21
 800a264:	428f      	cmp	r7, r1
 800a266:	bf38      	it	cc
 800a268:	2204      	movcc	r2, #4
 800a26a:	9201      	str	r2, [sp, #4]
 800a26c:	9a02      	ldr	r2, [sp, #8]
 800a26e:	9303      	str	r3, [sp, #12]
 800a270:	429a      	cmp	r2, r3
 800a272:	d80c      	bhi.n	800a28e <__multiply+0x9e>
 800a274:	2e00      	cmp	r6, #0
 800a276:	dd03      	ble.n	800a280 <__multiply+0x90>
 800a278:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d05a      	beq.n	800a336 <__multiply+0x146>
 800a280:	6106      	str	r6, [r0, #16]
 800a282:	b005      	add	sp, #20
 800a284:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a288:	f843 2b04 	str.w	r2, [r3], #4
 800a28c:	e7d8      	b.n	800a240 <__multiply+0x50>
 800a28e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a292:	f1ba 0f00 	cmp.w	sl, #0
 800a296:	d024      	beq.n	800a2e2 <__multiply+0xf2>
 800a298:	f104 0e14 	add.w	lr, r4, #20
 800a29c:	46a9      	mov	r9, r5
 800a29e:	f04f 0c00 	mov.w	ip, #0
 800a2a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a2a6:	f8d9 1000 	ldr.w	r1, [r9]
 800a2aa:	fa1f fb82 	uxth.w	fp, r2
 800a2ae:	b289      	uxth	r1, r1
 800a2b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a2b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a2b8:	f8d9 2000 	ldr.w	r2, [r9]
 800a2bc:	4461      	add	r1, ip
 800a2be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a2c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a2ca:	b289      	uxth	r1, r1
 800a2cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a2d0:	4577      	cmp	r7, lr
 800a2d2:	f849 1b04 	str.w	r1, [r9], #4
 800a2d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a2da:	d8e2      	bhi.n	800a2a2 <__multiply+0xb2>
 800a2dc:	9a01      	ldr	r2, [sp, #4]
 800a2de:	f845 c002 	str.w	ip, [r5, r2]
 800a2e2:	9a03      	ldr	r2, [sp, #12]
 800a2e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a2e8:	3304      	adds	r3, #4
 800a2ea:	f1b9 0f00 	cmp.w	r9, #0
 800a2ee:	d020      	beq.n	800a332 <__multiply+0x142>
 800a2f0:	6829      	ldr	r1, [r5, #0]
 800a2f2:	f104 0c14 	add.w	ip, r4, #20
 800a2f6:	46ae      	mov	lr, r5
 800a2f8:	f04f 0a00 	mov.w	sl, #0
 800a2fc:	f8bc b000 	ldrh.w	fp, [ip]
 800a300:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a304:	fb09 220b 	mla	r2, r9, fp, r2
 800a308:	4492      	add	sl, r2
 800a30a:	b289      	uxth	r1, r1
 800a30c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800a310:	f84e 1b04 	str.w	r1, [lr], #4
 800a314:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a318:	f8be 1000 	ldrh.w	r1, [lr]
 800a31c:	0c12      	lsrs	r2, r2, #16
 800a31e:	fb09 1102 	mla	r1, r9, r2, r1
 800a322:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800a326:	4567      	cmp	r7, ip
 800a328:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a32c:	d8e6      	bhi.n	800a2fc <__multiply+0x10c>
 800a32e:	9a01      	ldr	r2, [sp, #4]
 800a330:	50a9      	str	r1, [r5, r2]
 800a332:	3504      	adds	r5, #4
 800a334:	e79a      	b.n	800a26c <__multiply+0x7c>
 800a336:	3e01      	subs	r6, #1
 800a338:	e79c      	b.n	800a274 <__multiply+0x84>
 800a33a:	bf00      	nop
 800a33c:	0800b888 	.word	0x0800b888
 800a340:	0800b978 	.word	0x0800b978

0800a344 <__pow5mult>:
 800a344:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a348:	4615      	mov	r5, r2
 800a34a:	f012 0203 	ands.w	r2, r2, #3
 800a34e:	4606      	mov	r6, r0
 800a350:	460f      	mov	r7, r1
 800a352:	d007      	beq.n	800a364 <__pow5mult+0x20>
 800a354:	4c25      	ldr	r4, [pc, #148]	; (800a3ec <__pow5mult+0xa8>)
 800a356:	3a01      	subs	r2, #1
 800a358:	2300      	movs	r3, #0
 800a35a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a35e:	f7ff fe51 	bl	800a004 <__multadd>
 800a362:	4607      	mov	r7, r0
 800a364:	10ad      	asrs	r5, r5, #2
 800a366:	d03d      	beq.n	800a3e4 <__pow5mult+0xa0>
 800a368:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a36a:	b97c      	cbnz	r4, 800a38c <__pow5mult+0x48>
 800a36c:	2010      	movs	r0, #16
 800a36e:	f7fc fd4d 	bl	8006e0c <malloc>
 800a372:	4602      	mov	r2, r0
 800a374:	6270      	str	r0, [r6, #36]	; 0x24
 800a376:	b928      	cbnz	r0, 800a384 <__pow5mult+0x40>
 800a378:	4b1d      	ldr	r3, [pc, #116]	; (800a3f0 <__pow5mult+0xac>)
 800a37a:	481e      	ldr	r0, [pc, #120]	; (800a3f4 <__pow5mult+0xb0>)
 800a37c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a380:	f7fe fa86 	bl	8008890 <__assert_func>
 800a384:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a388:	6004      	str	r4, [r0, #0]
 800a38a:	60c4      	str	r4, [r0, #12]
 800a38c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a390:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a394:	b94c      	cbnz	r4, 800a3aa <__pow5mult+0x66>
 800a396:	f240 2171 	movw	r1, #625	; 0x271
 800a39a:	4630      	mov	r0, r6
 800a39c:	f7ff ff12 	bl	800a1c4 <__i2b>
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800a3a6:	4604      	mov	r4, r0
 800a3a8:	6003      	str	r3, [r0, #0]
 800a3aa:	f04f 0900 	mov.w	r9, #0
 800a3ae:	07eb      	lsls	r3, r5, #31
 800a3b0:	d50a      	bpl.n	800a3c8 <__pow5mult+0x84>
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	4622      	mov	r2, r4
 800a3b6:	4630      	mov	r0, r6
 800a3b8:	f7ff ff1a 	bl	800a1f0 <__multiply>
 800a3bc:	4639      	mov	r1, r7
 800a3be:	4680      	mov	r8, r0
 800a3c0:	4630      	mov	r0, r6
 800a3c2:	f7ff fdfd 	bl	8009fc0 <_Bfree>
 800a3c6:	4647      	mov	r7, r8
 800a3c8:	106d      	asrs	r5, r5, #1
 800a3ca:	d00b      	beq.n	800a3e4 <__pow5mult+0xa0>
 800a3cc:	6820      	ldr	r0, [r4, #0]
 800a3ce:	b938      	cbnz	r0, 800a3e0 <__pow5mult+0x9c>
 800a3d0:	4622      	mov	r2, r4
 800a3d2:	4621      	mov	r1, r4
 800a3d4:	4630      	mov	r0, r6
 800a3d6:	f7ff ff0b 	bl	800a1f0 <__multiply>
 800a3da:	6020      	str	r0, [r4, #0]
 800a3dc:	f8c0 9000 	str.w	r9, [r0]
 800a3e0:	4604      	mov	r4, r0
 800a3e2:	e7e4      	b.n	800a3ae <__pow5mult+0x6a>
 800a3e4:	4638      	mov	r0, r7
 800a3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	bf00      	nop
 800a3ec:	0800bac8 	.word	0x0800bac8
 800a3f0:	0800b770 	.word	0x0800b770
 800a3f4:	0800b978 	.word	0x0800b978

0800a3f8 <__lshift>:
 800a3f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3fc:	460c      	mov	r4, r1
 800a3fe:	6849      	ldr	r1, [r1, #4]
 800a400:	6923      	ldr	r3, [r4, #16]
 800a402:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a406:	68a3      	ldr	r3, [r4, #8]
 800a408:	4607      	mov	r7, r0
 800a40a:	4691      	mov	r9, r2
 800a40c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a410:	f108 0601 	add.w	r6, r8, #1
 800a414:	42b3      	cmp	r3, r6
 800a416:	db0b      	blt.n	800a430 <__lshift+0x38>
 800a418:	4638      	mov	r0, r7
 800a41a:	f7ff fd91 	bl	8009f40 <_Balloc>
 800a41e:	4605      	mov	r5, r0
 800a420:	b948      	cbnz	r0, 800a436 <__lshift+0x3e>
 800a422:	4602      	mov	r2, r0
 800a424:	4b2a      	ldr	r3, [pc, #168]	; (800a4d0 <__lshift+0xd8>)
 800a426:	482b      	ldr	r0, [pc, #172]	; (800a4d4 <__lshift+0xdc>)
 800a428:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a42c:	f7fe fa30 	bl	8008890 <__assert_func>
 800a430:	3101      	adds	r1, #1
 800a432:	005b      	lsls	r3, r3, #1
 800a434:	e7ee      	b.n	800a414 <__lshift+0x1c>
 800a436:	2300      	movs	r3, #0
 800a438:	f100 0114 	add.w	r1, r0, #20
 800a43c:	f100 0210 	add.w	r2, r0, #16
 800a440:	4618      	mov	r0, r3
 800a442:	4553      	cmp	r3, sl
 800a444:	db37      	blt.n	800a4b6 <__lshift+0xbe>
 800a446:	6920      	ldr	r0, [r4, #16]
 800a448:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a44c:	f104 0314 	add.w	r3, r4, #20
 800a450:	f019 091f 	ands.w	r9, r9, #31
 800a454:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a458:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800a45c:	d02f      	beq.n	800a4be <__lshift+0xc6>
 800a45e:	f1c9 0e20 	rsb	lr, r9, #32
 800a462:	468a      	mov	sl, r1
 800a464:	f04f 0c00 	mov.w	ip, #0
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	fa02 f209 	lsl.w	r2, r2, r9
 800a46e:	ea42 020c 	orr.w	r2, r2, ip
 800a472:	f84a 2b04 	str.w	r2, [sl], #4
 800a476:	f853 2b04 	ldr.w	r2, [r3], #4
 800a47a:	4298      	cmp	r0, r3
 800a47c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800a480:	d8f2      	bhi.n	800a468 <__lshift+0x70>
 800a482:	1b03      	subs	r3, r0, r4
 800a484:	3b15      	subs	r3, #21
 800a486:	f023 0303 	bic.w	r3, r3, #3
 800a48a:	3304      	adds	r3, #4
 800a48c:	f104 0215 	add.w	r2, r4, #21
 800a490:	4290      	cmp	r0, r2
 800a492:	bf38      	it	cc
 800a494:	2304      	movcc	r3, #4
 800a496:	f841 c003 	str.w	ip, [r1, r3]
 800a49a:	f1bc 0f00 	cmp.w	ip, #0
 800a49e:	d001      	beq.n	800a4a4 <__lshift+0xac>
 800a4a0:	f108 0602 	add.w	r6, r8, #2
 800a4a4:	3e01      	subs	r6, #1
 800a4a6:	4638      	mov	r0, r7
 800a4a8:	612e      	str	r6, [r5, #16]
 800a4aa:	4621      	mov	r1, r4
 800a4ac:	f7ff fd88 	bl	8009fc0 <_Bfree>
 800a4b0:	4628      	mov	r0, r5
 800a4b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	e7c1      	b.n	800a442 <__lshift+0x4a>
 800a4be:	3904      	subs	r1, #4
 800a4c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a4c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a4c8:	4298      	cmp	r0, r3
 800a4ca:	d8f9      	bhi.n	800a4c0 <__lshift+0xc8>
 800a4cc:	e7ea      	b.n	800a4a4 <__lshift+0xac>
 800a4ce:	bf00      	nop
 800a4d0:	0800b888 	.word	0x0800b888
 800a4d4:	0800b978 	.word	0x0800b978

0800a4d8 <__mcmp>:
 800a4d8:	b530      	push	{r4, r5, lr}
 800a4da:	6902      	ldr	r2, [r0, #16]
 800a4dc:	690c      	ldr	r4, [r1, #16]
 800a4de:	1b12      	subs	r2, r2, r4
 800a4e0:	d10e      	bne.n	800a500 <__mcmp+0x28>
 800a4e2:	f100 0314 	add.w	r3, r0, #20
 800a4e6:	3114      	adds	r1, #20
 800a4e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a4ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a4f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a4f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a4f8:	42a5      	cmp	r5, r4
 800a4fa:	d003      	beq.n	800a504 <__mcmp+0x2c>
 800a4fc:	d305      	bcc.n	800a50a <__mcmp+0x32>
 800a4fe:	2201      	movs	r2, #1
 800a500:	4610      	mov	r0, r2
 800a502:	bd30      	pop	{r4, r5, pc}
 800a504:	4283      	cmp	r3, r0
 800a506:	d3f3      	bcc.n	800a4f0 <__mcmp+0x18>
 800a508:	e7fa      	b.n	800a500 <__mcmp+0x28>
 800a50a:	f04f 32ff 	mov.w	r2, #4294967295
 800a50e:	e7f7      	b.n	800a500 <__mcmp+0x28>

0800a510 <__mdiff>:
 800a510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a514:	460c      	mov	r4, r1
 800a516:	4606      	mov	r6, r0
 800a518:	4611      	mov	r1, r2
 800a51a:	4620      	mov	r0, r4
 800a51c:	4690      	mov	r8, r2
 800a51e:	f7ff ffdb 	bl	800a4d8 <__mcmp>
 800a522:	1e05      	subs	r5, r0, #0
 800a524:	d110      	bne.n	800a548 <__mdiff+0x38>
 800a526:	4629      	mov	r1, r5
 800a528:	4630      	mov	r0, r6
 800a52a:	f7ff fd09 	bl	8009f40 <_Balloc>
 800a52e:	b930      	cbnz	r0, 800a53e <__mdiff+0x2e>
 800a530:	4b3a      	ldr	r3, [pc, #232]	; (800a61c <__mdiff+0x10c>)
 800a532:	4602      	mov	r2, r0
 800a534:	f240 2132 	movw	r1, #562	; 0x232
 800a538:	4839      	ldr	r0, [pc, #228]	; (800a620 <__mdiff+0x110>)
 800a53a:	f7fe f9a9 	bl	8008890 <__assert_func>
 800a53e:	2301      	movs	r3, #1
 800a540:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a544:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a548:	bfa4      	itt	ge
 800a54a:	4643      	movge	r3, r8
 800a54c:	46a0      	movge	r8, r4
 800a54e:	4630      	mov	r0, r6
 800a550:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a554:	bfa6      	itte	ge
 800a556:	461c      	movge	r4, r3
 800a558:	2500      	movge	r5, #0
 800a55a:	2501      	movlt	r5, #1
 800a55c:	f7ff fcf0 	bl	8009f40 <_Balloc>
 800a560:	b920      	cbnz	r0, 800a56c <__mdiff+0x5c>
 800a562:	4b2e      	ldr	r3, [pc, #184]	; (800a61c <__mdiff+0x10c>)
 800a564:	4602      	mov	r2, r0
 800a566:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a56a:	e7e5      	b.n	800a538 <__mdiff+0x28>
 800a56c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a570:	6926      	ldr	r6, [r4, #16]
 800a572:	60c5      	str	r5, [r0, #12]
 800a574:	f104 0914 	add.w	r9, r4, #20
 800a578:	f108 0514 	add.w	r5, r8, #20
 800a57c:	f100 0e14 	add.w	lr, r0, #20
 800a580:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a584:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a588:	f108 0210 	add.w	r2, r8, #16
 800a58c:	46f2      	mov	sl, lr
 800a58e:	2100      	movs	r1, #0
 800a590:	f859 3b04 	ldr.w	r3, [r9], #4
 800a594:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a598:	fa1f f883 	uxth.w	r8, r3
 800a59c:	fa11 f18b 	uxtah	r1, r1, fp
 800a5a0:	0c1b      	lsrs	r3, r3, #16
 800a5a2:	eba1 0808 	sub.w	r8, r1, r8
 800a5a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a5aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a5ae:	fa1f f888 	uxth.w	r8, r8
 800a5b2:	1419      	asrs	r1, r3, #16
 800a5b4:	454e      	cmp	r6, r9
 800a5b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a5ba:	f84a 3b04 	str.w	r3, [sl], #4
 800a5be:	d8e7      	bhi.n	800a590 <__mdiff+0x80>
 800a5c0:	1b33      	subs	r3, r6, r4
 800a5c2:	3b15      	subs	r3, #21
 800a5c4:	f023 0303 	bic.w	r3, r3, #3
 800a5c8:	3304      	adds	r3, #4
 800a5ca:	3415      	adds	r4, #21
 800a5cc:	42a6      	cmp	r6, r4
 800a5ce:	bf38      	it	cc
 800a5d0:	2304      	movcc	r3, #4
 800a5d2:	441d      	add	r5, r3
 800a5d4:	4473      	add	r3, lr
 800a5d6:	469e      	mov	lr, r3
 800a5d8:	462e      	mov	r6, r5
 800a5da:	4566      	cmp	r6, ip
 800a5dc:	d30e      	bcc.n	800a5fc <__mdiff+0xec>
 800a5de:	f10c 0203 	add.w	r2, ip, #3
 800a5e2:	1b52      	subs	r2, r2, r5
 800a5e4:	f022 0203 	bic.w	r2, r2, #3
 800a5e8:	3d03      	subs	r5, #3
 800a5ea:	45ac      	cmp	ip, r5
 800a5ec:	bf38      	it	cc
 800a5ee:	2200      	movcc	r2, #0
 800a5f0:	441a      	add	r2, r3
 800a5f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a5f6:	b17b      	cbz	r3, 800a618 <__mdiff+0x108>
 800a5f8:	6107      	str	r7, [r0, #16]
 800a5fa:	e7a3      	b.n	800a544 <__mdiff+0x34>
 800a5fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800a600:	fa11 f288 	uxtah	r2, r1, r8
 800a604:	1414      	asrs	r4, r2, #16
 800a606:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a60a:	b292      	uxth	r2, r2
 800a60c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a610:	f84e 2b04 	str.w	r2, [lr], #4
 800a614:	1421      	asrs	r1, r4, #16
 800a616:	e7e0      	b.n	800a5da <__mdiff+0xca>
 800a618:	3f01      	subs	r7, #1
 800a61a:	e7ea      	b.n	800a5f2 <__mdiff+0xe2>
 800a61c:	0800b888 	.word	0x0800b888
 800a620:	0800b978 	.word	0x0800b978

0800a624 <__ulp>:
 800a624:	b082      	sub	sp, #8
 800a626:	ed8d 0b00 	vstr	d0, [sp]
 800a62a:	9b01      	ldr	r3, [sp, #4]
 800a62c:	4912      	ldr	r1, [pc, #72]	; (800a678 <__ulp+0x54>)
 800a62e:	4019      	ands	r1, r3
 800a630:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a634:	2900      	cmp	r1, #0
 800a636:	dd05      	ble.n	800a644 <__ulp+0x20>
 800a638:	2200      	movs	r2, #0
 800a63a:	460b      	mov	r3, r1
 800a63c:	ec43 2b10 	vmov	d0, r2, r3
 800a640:	b002      	add	sp, #8
 800a642:	4770      	bx	lr
 800a644:	4249      	negs	r1, r1
 800a646:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a64a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a64e:	f04f 0200 	mov.w	r2, #0
 800a652:	f04f 0300 	mov.w	r3, #0
 800a656:	da04      	bge.n	800a662 <__ulp+0x3e>
 800a658:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a65c:	fa41 f300 	asr.w	r3, r1, r0
 800a660:	e7ec      	b.n	800a63c <__ulp+0x18>
 800a662:	f1a0 0114 	sub.w	r1, r0, #20
 800a666:	291e      	cmp	r1, #30
 800a668:	bfda      	itte	le
 800a66a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a66e:	fa20 f101 	lsrle.w	r1, r0, r1
 800a672:	2101      	movgt	r1, #1
 800a674:	460a      	mov	r2, r1
 800a676:	e7e1      	b.n	800a63c <__ulp+0x18>
 800a678:	7ff00000 	.word	0x7ff00000

0800a67c <__b2d>:
 800a67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a67e:	6905      	ldr	r5, [r0, #16]
 800a680:	f100 0714 	add.w	r7, r0, #20
 800a684:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a688:	1f2e      	subs	r6, r5, #4
 800a68a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a68e:	4620      	mov	r0, r4
 800a690:	f7ff fd48 	bl	800a124 <__hi0bits>
 800a694:	f1c0 0320 	rsb	r3, r0, #32
 800a698:	280a      	cmp	r0, #10
 800a69a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a718 <__b2d+0x9c>
 800a69e:	600b      	str	r3, [r1, #0]
 800a6a0:	dc14      	bgt.n	800a6cc <__b2d+0x50>
 800a6a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800a6a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800a6aa:	42b7      	cmp	r7, r6
 800a6ac:	ea41 030c 	orr.w	r3, r1, ip
 800a6b0:	bf34      	ite	cc
 800a6b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6b6:	2100      	movcs	r1, #0
 800a6b8:	3015      	adds	r0, #21
 800a6ba:	fa04 f000 	lsl.w	r0, r4, r0
 800a6be:	fa21 f10e 	lsr.w	r1, r1, lr
 800a6c2:	ea40 0201 	orr.w	r2, r0, r1
 800a6c6:	ec43 2b10 	vmov	d0, r2, r3
 800a6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6cc:	42b7      	cmp	r7, r6
 800a6ce:	bf3a      	itte	cc
 800a6d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a6d4:	f1a5 0608 	subcc.w	r6, r5, #8
 800a6d8:	2100      	movcs	r1, #0
 800a6da:	380b      	subs	r0, #11
 800a6dc:	d017      	beq.n	800a70e <__b2d+0x92>
 800a6de:	f1c0 0c20 	rsb	ip, r0, #32
 800a6e2:	fa04 f500 	lsl.w	r5, r4, r0
 800a6e6:	42be      	cmp	r6, r7
 800a6e8:	fa21 f40c 	lsr.w	r4, r1, ip
 800a6ec:	ea45 0504 	orr.w	r5, r5, r4
 800a6f0:	bf8c      	ite	hi
 800a6f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a6f6:	2400      	movls	r4, #0
 800a6f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a6fc:	fa01 f000 	lsl.w	r0, r1, r0
 800a700:	fa24 f40c 	lsr.w	r4, r4, ip
 800a704:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a708:	ea40 0204 	orr.w	r2, r0, r4
 800a70c:	e7db      	b.n	800a6c6 <__b2d+0x4a>
 800a70e:	ea44 030c 	orr.w	r3, r4, ip
 800a712:	460a      	mov	r2, r1
 800a714:	e7d7      	b.n	800a6c6 <__b2d+0x4a>
 800a716:	bf00      	nop
 800a718:	3ff00000 	.word	0x3ff00000

0800a71c <__d2b>:
 800a71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a720:	4689      	mov	r9, r1
 800a722:	2101      	movs	r1, #1
 800a724:	ec57 6b10 	vmov	r6, r7, d0
 800a728:	4690      	mov	r8, r2
 800a72a:	f7ff fc09 	bl	8009f40 <_Balloc>
 800a72e:	4604      	mov	r4, r0
 800a730:	b930      	cbnz	r0, 800a740 <__d2b+0x24>
 800a732:	4602      	mov	r2, r0
 800a734:	4b25      	ldr	r3, [pc, #148]	; (800a7cc <__d2b+0xb0>)
 800a736:	4826      	ldr	r0, [pc, #152]	; (800a7d0 <__d2b+0xb4>)
 800a738:	f240 310a 	movw	r1, #778	; 0x30a
 800a73c:	f7fe f8a8 	bl	8008890 <__assert_func>
 800a740:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a744:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a748:	bb35      	cbnz	r5, 800a798 <__d2b+0x7c>
 800a74a:	2e00      	cmp	r6, #0
 800a74c:	9301      	str	r3, [sp, #4]
 800a74e:	d028      	beq.n	800a7a2 <__d2b+0x86>
 800a750:	4668      	mov	r0, sp
 800a752:	9600      	str	r6, [sp, #0]
 800a754:	f7ff fd06 	bl	800a164 <__lo0bits>
 800a758:	9900      	ldr	r1, [sp, #0]
 800a75a:	b300      	cbz	r0, 800a79e <__d2b+0x82>
 800a75c:	9a01      	ldr	r2, [sp, #4]
 800a75e:	f1c0 0320 	rsb	r3, r0, #32
 800a762:	fa02 f303 	lsl.w	r3, r2, r3
 800a766:	430b      	orrs	r3, r1
 800a768:	40c2      	lsrs	r2, r0
 800a76a:	6163      	str	r3, [r4, #20]
 800a76c:	9201      	str	r2, [sp, #4]
 800a76e:	9b01      	ldr	r3, [sp, #4]
 800a770:	61a3      	str	r3, [r4, #24]
 800a772:	2b00      	cmp	r3, #0
 800a774:	bf14      	ite	ne
 800a776:	2202      	movne	r2, #2
 800a778:	2201      	moveq	r2, #1
 800a77a:	6122      	str	r2, [r4, #16]
 800a77c:	b1d5      	cbz	r5, 800a7b4 <__d2b+0x98>
 800a77e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800a782:	4405      	add	r5, r0
 800a784:	f8c9 5000 	str.w	r5, [r9]
 800a788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800a78c:	f8c8 0000 	str.w	r0, [r8]
 800a790:	4620      	mov	r0, r4
 800a792:	b003      	add	sp, #12
 800a794:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a798:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a79c:	e7d5      	b.n	800a74a <__d2b+0x2e>
 800a79e:	6161      	str	r1, [r4, #20]
 800a7a0:	e7e5      	b.n	800a76e <__d2b+0x52>
 800a7a2:	a801      	add	r0, sp, #4
 800a7a4:	f7ff fcde 	bl	800a164 <__lo0bits>
 800a7a8:	9b01      	ldr	r3, [sp, #4]
 800a7aa:	6163      	str	r3, [r4, #20]
 800a7ac:	2201      	movs	r2, #1
 800a7ae:	6122      	str	r2, [r4, #16]
 800a7b0:	3020      	adds	r0, #32
 800a7b2:	e7e3      	b.n	800a77c <__d2b+0x60>
 800a7b4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a7b8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800a7bc:	f8c9 0000 	str.w	r0, [r9]
 800a7c0:	6918      	ldr	r0, [r3, #16]
 800a7c2:	f7ff fcaf 	bl	800a124 <__hi0bits>
 800a7c6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a7ca:	e7df      	b.n	800a78c <__d2b+0x70>
 800a7cc:	0800b888 	.word	0x0800b888
 800a7d0:	0800b978 	.word	0x0800b978

0800a7d4 <__ratio>:
 800a7d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7d8:	4688      	mov	r8, r1
 800a7da:	4669      	mov	r1, sp
 800a7dc:	4681      	mov	r9, r0
 800a7de:	f7ff ff4d 	bl	800a67c <__b2d>
 800a7e2:	a901      	add	r1, sp, #4
 800a7e4:	4640      	mov	r0, r8
 800a7e6:	ec55 4b10 	vmov	r4, r5, d0
 800a7ea:	f7ff ff47 	bl	800a67c <__b2d>
 800a7ee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a7f2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800a7f6:	eba3 0c02 	sub.w	ip, r3, r2
 800a7fa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a7fe:	1a9b      	subs	r3, r3, r2
 800a800:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800a804:	ec51 0b10 	vmov	r0, r1, d0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	bfd6      	itet	le
 800a80c:	460a      	movle	r2, r1
 800a80e:	462a      	movgt	r2, r5
 800a810:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a814:	468b      	mov	fp, r1
 800a816:	462f      	mov	r7, r5
 800a818:	bfd4      	ite	le
 800a81a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800a81e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a822:	4620      	mov	r0, r4
 800a824:	ee10 2a10 	vmov	r2, s0
 800a828:	465b      	mov	r3, fp
 800a82a:	4639      	mov	r1, r7
 800a82c:	f7f6 f80e 	bl	800084c <__aeabi_ddiv>
 800a830:	ec41 0b10 	vmov	d0, r0, r1
 800a834:	b003      	add	sp, #12
 800a836:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a83a <__copybits>:
 800a83a:	3901      	subs	r1, #1
 800a83c:	b570      	push	{r4, r5, r6, lr}
 800a83e:	1149      	asrs	r1, r1, #5
 800a840:	6914      	ldr	r4, [r2, #16]
 800a842:	3101      	adds	r1, #1
 800a844:	f102 0314 	add.w	r3, r2, #20
 800a848:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a84c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a850:	1f05      	subs	r5, r0, #4
 800a852:	42a3      	cmp	r3, r4
 800a854:	d30c      	bcc.n	800a870 <__copybits+0x36>
 800a856:	1aa3      	subs	r3, r4, r2
 800a858:	3b11      	subs	r3, #17
 800a85a:	f023 0303 	bic.w	r3, r3, #3
 800a85e:	3211      	adds	r2, #17
 800a860:	42a2      	cmp	r2, r4
 800a862:	bf88      	it	hi
 800a864:	2300      	movhi	r3, #0
 800a866:	4418      	add	r0, r3
 800a868:	2300      	movs	r3, #0
 800a86a:	4288      	cmp	r0, r1
 800a86c:	d305      	bcc.n	800a87a <__copybits+0x40>
 800a86e:	bd70      	pop	{r4, r5, r6, pc}
 800a870:	f853 6b04 	ldr.w	r6, [r3], #4
 800a874:	f845 6f04 	str.w	r6, [r5, #4]!
 800a878:	e7eb      	b.n	800a852 <__copybits+0x18>
 800a87a:	f840 3b04 	str.w	r3, [r0], #4
 800a87e:	e7f4      	b.n	800a86a <__copybits+0x30>

0800a880 <__any_on>:
 800a880:	f100 0214 	add.w	r2, r0, #20
 800a884:	6900      	ldr	r0, [r0, #16]
 800a886:	114b      	asrs	r3, r1, #5
 800a888:	4298      	cmp	r0, r3
 800a88a:	b510      	push	{r4, lr}
 800a88c:	db11      	blt.n	800a8b2 <__any_on+0x32>
 800a88e:	dd0a      	ble.n	800a8a6 <__any_on+0x26>
 800a890:	f011 011f 	ands.w	r1, r1, #31
 800a894:	d007      	beq.n	800a8a6 <__any_on+0x26>
 800a896:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a89a:	fa24 f001 	lsr.w	r0, r4, r1
 800a89e:	fa00 f101 	lsl.w	r1, r0, r1
 800a8a2:	428c      	cmp	r4, r1
 800a8a4:	d10b      	bne.n	800a8be <__any_on+0x3e>
 800a8a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d803      	bhi.n	800a8b6 <__any_on+0x36>
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	bd10      	pop	{r4, pc}
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	e7f7      	b.n	800a8a6 <__any_on+0x26>
 800a8b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a8ba:	2900      	cmp	r1, #0
 800a8bc:	d0f5      	beq.n	800a8aa <__any_on+0x2a>
 800a8be:	2001      	movs	r0, #1
 800a8c0:	e7f6      	b.n	800a8b0 <__any_on+0x30>

0800a8c2 <_calloc_r>:
 800a8c2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a8c4:	fba1 2402 	umull	r2, r4, r1, r2
 800a8c8:	b94c      	cbnz	r4, 800a8de <_calloc_r+0x1c>
 800a8ca:	4611      	mov	r1, r2
 800a8cc:	9201      	str	r2, [sp, #4]
 800a8ce:	f7fc fb27 	bl	8006f20 <_malloc_r>
 800a8d2:	9a01      	ldr	r2, [sp, #4]
 800a8d4:	4605      	mov	r5, r0
 800a8d6:	b930      	cbnz	r0, 800a8e6 <_calloc_r+0x24>
 800a8d8:	4628      	mov	r0, r5
 800a8da:	b003      	add	sp, #12
 800a8dc:	bd30      	pop	{r4, r5, pc}
 800a8de:	220c      	movs	r2, #12
 800a8e0:	6002      	str	r2, [r0, #0]
 800a8e2:	2500      	movs	r5, #0
 800a8e4:	e7f8      	b.n	800a8d8 <_calloc_r+0x16>
 800a8e6:	4621      	mov	r1, r4
 800a8e8:	f7fc faa6 	bl	8006e38 <memset>
 800a8ec:	e7f4      	b.n	800a8d8 <_calloc_r+0x16>

0800a8ee <_realloc_r>:
 800a8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f2:	4680      	mov	r8, r0
 800a8f4:	4614      	mov	r4, r2
 800a8f6:	460e      	mov	r6, r1
 800a8f8:	b921      	cbnz	r1, 800a904 <_realloc_r+0x16>
 800a8fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8fe:	4611      	mov	r1, r2
 800a900:	f7fc bb0e 	b.w	8006f20 <_malloc_r>
 800a904:	b92a      	cbnz	r2, 800a912 <_realloc_r+0x24>
 800a906:	f7fc fa9f 	bl	8006e48 <_free_r>
 800a90a:	4625      	mov	r5, r4
 800a90c:	4628      	mov	r0, r5
 800a90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a912:	f000 fd05 	bl	800b320 <_malloc_usable_size_r>
 800a916:	4284      	cmp	r4, r0
 800a918:	4607      	mov	r7, r0
 800a91a:	d802      	bhi.n	800a922 <_realloc_r+0x34>
 800a91c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a920:	d812      	bhi.n	800a948 <_realloc_r+0x5a>
 800a922:	4621      	mov	r1, r4
 800a924:	4640      	mov	r0, r8
 800a926:	f7fc fafb 	bl	8006f20 <_malloc_r>
 800a92a:	4605      	mov	r5, r0
 800a92c:	2800      	cmp	r0, #0
 800a92e:	d0ed      	beq.n	800a90c <_realloc_r+0x1e>
 800a930:	42bc      	cmp	r4, r7
 800a932:	4622      	mov	r2, r4
 800a934:	4631      	mov	r1, r6
 800a936:	bf28      	it	cs
 800a938:	463a      	movcs	r2, r7
 800a93a:	f7fc fa6f 	bl	8006e1c <memcpy>
 800a93e:	4631      	mov	r1, r6
 800a940:	4640      	mov	r0, r8
 800a942:	f7fc fa81 	bl	8006e48 <_free_r>
 800a946:	e7e1      	b.n	800a90c <_realloc_r+0x1e>
 800a948:	4635      	mov	r5, r6
 800a94a:	e7df      	b.n	800a90c <_realloc_r+0x1e>

0800a94c <__ssputs_r>:
 800a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a950:	688e      	ldr	r6, [r1, #8]
 800a952:	429e      	cmp	r6, r3
 800a954:	4682      	mov	sl, r0
 800a956:	460c      	mov	r4, r1
 800a958:	4690      	mov	r8, r2
 800a95a:	461f      	mov	r7, r3
 800a95c:	d838      	bhi.n	800a9d0 <__ssputs_r+0x84>
 800a95e:	898a      	ldrh	r2, [r1, #12]
 800a960:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a964:	d032      	beq.n	800a9cc <__ssputs_r+0x80>
 800a966:	6825      	ldr	r5, [r4, #0]
 800a968:	6909      	ldr	r1, [r1, #16]
 800a96a:	eba5 0901 	sub.w	r9, r5, r1
 800a96e:	6965      	ldr	r5, [r4, #20]
 800a970:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a974:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a978:	3301      	adds	r3, #1
 800a97a:	444b      	add	r3, r9
 800a97c:	106d      	asrs	r5, r5, #1
 800a97e:	429d      	cmp	r5, r3
 800a980:	bf38      	it	cc
 800a982:	461d      	movcc	r5, r3
 800a984:	0553      	lsls	r3, r2, #21
 800a986:	d531      	bpl.n	800a9ec <__ssputs_r+0xa0>
 800a988:	4629      	mov	r1, r5
 800a98a:	f7fc fac9 	bl	8006f20 <_malloc_r>
 800a98e:	4606      	mov	r6, r0
 800a990:	b950      	cbnz	r0, 800a9a8 <__ssputs_r+0x5c>
 800a992:	230c      	movs	r3, #12
 800a994:	f8ca 3000 	str.w	r3, [sl]
 800a998:	89a3      	ldrh	r3, [r4, #12]
 800a99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a99e:	81a3      	strh	r3, [r4, #12]
 800a9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a9a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9a8:	6921      	ldr	r1, [r4, #16]
 800a9aa:	464a      	mov	r2, r9
 800a9ac:	f7fc fa36 	bl	8006e1c <memcpy>
 800a9b0:	89a3      	ldrh	r3, [r4, #12]
 800a9b2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a9b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9ba:	81a3      	strh	r3, [r4, #12]
 800a9bc:	6126      	str	r6, [r4, #16]
 800a9be:	6165      	str	r5, [r4, #20]
 800a9c0:	444e      	add	r6, r9
 800a9c2:	eba5 0509 	sub.w	r5, r5, r9
 800a9c6:	6026      	str	r6, [r4, #0]
 800a9c8:	60a5      	str	r5, [r4, #8]
 800a9ca:	463e      	mov	r6, r7
 800a9cc:	42be      	cmp	r6, r7
 800a9ce:	d900      	bls.n	800a9d2 <__ssputs_r+0x86>
 800a9d0:	463e      	mov	r6, r7
 800a9d2:	6820      	ldr	r0, [r4, #0]
 800a9d4:	4632      	mov	r2, r6
 800a9d6:	4641      	mov	r1, r8
 800a9d8:	f000 fc88 	bl	800b2ec <memmove>
 800a9dc:	68a3      	ldr	r3, [r4, #8]
 800a9de:	1b9b      	subs	r3, r3, r6
 800a9e0:	60a3      	str	r3, [r4, #8]
 800a9e2:	6823      	ldr	r3, [r4, #0]
 800a9e4:	4433      	add	r3, r6
 800a9e6:	6023      	str	r3, [r4, #0]
 800a9e8:	2000      	movs	r0, #0
 800a9ea:	e7db      	b.n	800a9a4 <__ssputs_r+0x58>
 800a9ec:	462a      	mov	r2, r5
 800a9ee:	f7ff ff7e 	bl	800a8ee <_realloc_r>
 800a9f2:	4606      	mov	r6, r0
 800a9f4:	2800      	cmp	r0, #0
 800a9f6:	d1e1      	bne.n	800a9bc <__ssputs_r+0x70>
 800a9f8:	6921      	ldr	r1, [r4, #16]
 800a9fa:	4650      	mov	r0, sl
 800a9fc:	f7fc fa24 	bl	8006e48 <_free_r>
 800aa00:	e7c7      	b.n	800a992 <__ssputs_r+0x46>
	...

0800aa04 <_svfiprintf_r>:
 800aa04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa08:	4698      	mov	r8, r3
 800aa0a:	898b      	ldrh	r3, [r1, #12]
 800aa0c:	061b      	lsls	r3, r3, #24
 800aa0e:	b09d      	sub	sp, #116	; 0x74
 800aa10:	4607      	mov	r7, r0
 800aa12:	460d      	mov	r5, r1
 800aa14:	4614      	mov	r4, r2
 800aa16:	d50e      	bpl.n	800aa36 <_svfiprintf_r+0x32>
 800aa18:	690b      	ldr	r3, [r1, #16]
 800aa1a:	b963      	cbnz	r3, 800aa36 <_svfiprintf_r+0x32>
 800aa1c:	2140      	movs	r1, #64	; 0x40
 800aa1e:	f7fc fa7f 	bl	8006f20 <_malloc_r>
 800aa22:	6028      	str	r0, [r5, #0]
 800aa24:	6128      	str	r0, [r5, #16]
 800aa26:	b920      	cbnz	r0, 800aa32 <_svfiprintf_r+0x2e>
 800aa28:	230c      	movs	r3, #12
 800aa2a:	603b      	str	r3, [r7, #0]
 800aa2c:	f04f 30ff 	mov.w	r0, #4294967295
 800aa30:	e0d1      	b.n	800abd6 <_svfiprintf_r+0x1d2>
 800aa32:	2340      	movs	r3, #64	; 0x40
 800aa34:	616b      	str	r3, [r5, #20]
 800aa36:	2300      	movs	r3, #0
 800aa38:	9309      	str	r3, [sp, #36]	; 0x24
 800aa3a:	2320      	movs	r3, #32
 800aa3c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aa40:	f8cd 800c 	str.w	r8, [sp, #12]
 800aa44:	2330      	movs	r3, #48	; 0x30
 800aa46:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800abf0 <_svfiprintf_r+0x1ec>
 800aa4a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aa4e:	f04f 0901 	mov.w	r9, #1
 800aa52:	4623      	mov	r3, r4
 800aa54:	469a      	mov	sl, r3
 800aa56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa5a:	b10a      	cbz	r2, 800aa60 <_svfiprintf_r+0x5c>
 800aa5c:	2a25      	cmp	r2, #37	; 0x25
 800aa5e:	d1f9      	bne.n	800aa54 <_svfiprintf_r+0x50>
 800aa60:	ebba 0b04 	subs.w	fp, sl, r4
 800aa64:	d00b      	beq.n	800aa7e <_svfiprintf_r+0x7a>
 800aa66:	465b      	mov	r3, fp
 800aa68:	4622      	mov	r2, r4
 800aa6a:	4629      	mov	r1, r5
 800aa6c:	4638      	mov	r0, r7
 800aa6e:	f7ff ff6d 	bl	800a94c <__ssputs_r>
 800aa72:	3001      	adds	r0, #1
 800aa74:	f000 80aa 	beq.w	800abcc <_svfiprintf_r+0x1c8>
 800aa78:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aa7a:	445a      	add	r2, fp
 800aa7c:	9209      	str	r2, [sp, #36]	; 0x24
 800aa7e:	f89a 3000 	ldrb.w	r3, [sl]
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	f000 80a2 	beq.w	800abcc <_svfiprintf_r+0x1c8>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa8e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800aa92:	f10a 0a01 	add.w	sl, sl, #1
 800aa96:	9304      	str	r3, [sp, #16]
 800aa98:	9307      	str	r3, [sp, #28]
 800aa9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800aa9e:	931a      	str	r3, [sp, #104]	; 0x68
 800aaa0:	4654      	mov	r4, sl
 800aaa2:	2205      	movs	r2, #5
 800aaa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aaa8:	4851      	ldr	r0, [pc, #324]	; (800abf0 <_svfiprintf_r+0x1ec>)
 800aaaa:	f7f5 fb99 	bl	80001e0 <memchr>
 800aaae:	9a04      	ldr	r2, [sp, #16]
 800aab0:	b9d8      	cbnz	r0, 800aaea <_svfiprintf_r+0xe6>
 800aab2:	06d0      	lsls	r0, r2, #27
 800aab4:	bf44      	itt	mi
 800aab6:	2320      	movmi	r3, #32
 800aab8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aabc:	0711      	lsls	r1, r2, #28
 800aabe:	bf44      	itt	mi
 800aac0:	232b      	movmi	r3, #43	; 0x2b
 800aac2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aac6:	f89a 3000 	ldrb.w	r3, [sl]
 800aaca:	2b2a      	cmp	r3, #42	; 0x2a
 800aacc:	d015      	beq.n	800aafa <_svfiprintf_r+0xf6>
 800aace:	9a07      	ldr	r2, [sp, #28]
 800aad0:	4654      	mov	r4, sl
 800aad2:	2000      	movs	r0, #0
 800aad4:	f04f 0c0a 	mov.w	ip, #10
 800aad8:	4621      	mov	r1, r4
 800aada:	f811 3b01 	ldrb.w	r3, [r1], #1
 800aade:	3b30      	subs	r3, #48	; 0x30
 800aae0:	2b09      	cmp	r3, #9
 800aae2:	d94e      	bls.n	800ab82 <_svfiprintf_r+0x17e>
 800aae4:	b1b0      	cbz	r0, 800ab14 <_svfiprintf_r+0x110>
 800aae6:	9207      	str	r2, [sp, #28]
 800aae8:	e014      	b.n	800ab14 <_svfiprintf_r+0x110>
 800aaea:	eba0 0308 	sub.w	r3, r0, r8
 800aaee:	fa09 f303 	lsl.w	r3, r9, r3
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	9304      	str	r3, [sp, #16]
 800aaf6:	46a2      	mov	sl, r4
 800aaf8:	e7d2      	b.n	800aaa0 <_svfiprintf_r+0x9c>
 800aafa:	9b03      	ldr	r3, [sp, #12]
 800aafc:	1d19      	adds	r1, r3, #4
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	9103      	str	r1, [sp, #12]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	bfbb      	ittet	lt
 800ab06:	425b      	neglt	r3, r3
 800ab08:	f042 0202 	orrlt.w	r2, r2, #2
 800ab0c:	9307      	strge	r3, [sp, #28]
 800ab0e:	9307      	strlt	r3, [sp, #28]
 800ab10:	bfb8      	it	lt
 800ab12:	9204      	strlt	r2, [sp, #16]
 800ab14:	7823      	ldrb	r3, [r4, #0]
 800ab16:	2b2e      	cmp	r3, #46	; 0x2e
 800ab18:	d10c      	bne.n	800ab34 <_svfiprintf_r+0x130>
 800ab1a:	7863      	ldrb	r3, [r4, #1]
 800ab1c:	2b2a      	cmp	r3, #42	; 0x2a
 800ab1e:	d135      	bne.n	800ab8c <_svfiprintf_r+0x188>
 800ab20:	9b03      	ldr	r3, [sp, #12]
 800ab22:	1d1a      	adds	r2, r3, #4
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	9203      	str	r2, [sp, #12]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	bfb8      	it	lt
 800ab2c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ab30:	3402      	adds	r4, #2
 800ab32:	9305      	str	r3, [sp, #20]
 800ab34:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ac00 <_svfiprintf_r+0x1fc>
 800ab38:	7821      	ldrb	r1, [r4, #0]
 800ab3a:	2203      	movs	r2, #3
 800ab3c:	4650      	mov	r0, sl
 800ab3e:	f7f5 fb4f 	bl	80001e0 <memchr>
 800ab42:	b140      	cbz	r0, 800ab56 <_svfiprintf_r+0x152>
 800ab44:	2340      	movs	r3, #64	; 0x40
 800ab46:	eba0 000a 	sub.w	r0, r0, sl
 800ab4a:	fa03 f000 	lsl.w	r0, r3, r0
 800ab4e:	9b04      	ldr	r3, [sp, #16]
 800ab50:	4303      	orrs	r3, r0
 800ab52:	3401      	adds	r4, #1
 800ab54:	9304      	str	r3, [sp, #16]
 800ab56:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab5a:	4826      	ldr	r0, [pc, #152]	; (800abf4 <_svfiprintf_r+0x1f0>)
 800ab5c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ab60:	2206      	movs	r2, #6
 800ab62:	f7f5 fb3d 	bl	80001e0 <memchr>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d038      	beq.n	800abdc <_svfiprintf_r+0x1d8>
 800ab6a:	4b23      	ldr	r3, [pc, #140]	; (800abf8 <_svfiprintf_r+0x1f4>)
 800ab6c:	bb1b      	cbnz	r3, 800abb6 <_svfiprintf_r+0x1b2>
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	3307      	adds	r3, #7
 800ab72:	f023 0307 	bic.w	r3, r3, #7
 800ab76:	3308      	adds	r3, #8
 800ab78:	9303      	str	r3, [sp, #12]
 800ab7a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab7c:	4433      	add	r3, r6
 800ab7e:	9309      	str	r3, [sp, #36]	; 0x24
 800ab80:	e767      	b.n	800aa52 <_svfiprintf_r+0x4e>
 800ab82:	fb0c 3202 	mla	r2, ip, r2, r3
 800ab86:	460c      	mov	r4, r1
 800ab88:	2001      	movs	r0, #1
 800ab8a:	e7a5      	b.n	800aad8 <_svfiprintf_r+0xd4>
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	3401      	adds	r4, #1
 800ab90:	9305      	str	r3, [sp, #20]
 800ab92:	4619      	mov	r1, r3
 800ab94:	f04f 0c0a 	mov.w	ip, #10
 800ab98:	4620      	mov	r0, r4
 800ab9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab9e:	3a30      	subs	r2, #48	; 0x30
 800aba0:	2a09      	cmp	r2, #9
 800aba2:	d903      	bls.n	800abac <_svfiprintf_r+0x1a8>
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0c5      	beq.n	800ab34 <_svfiprintf_r+0x130>
 800aba8:	9105      	str	r1, [sp, #20]
 800abaa:	e7c3      	b.n	800ab34 <_svfiprintf_r+0x130>
 800abac:	fb0c 2101 	mla	r1, ip, r1, r2
 800abb0:	4604      	mov	r4, r0
 800abb2:	2301      	movs	r3, #1
 800abb4:	e7f0      	b.n	800ab98 <_svfiprintf_r+0x194>
 800abb6:	ab03      	add	r3, sp, #12
 800abb8:	9300      	str	r3, [sp, #0]
 800abba:	462a      	mov	r2, r5
 800abbc:	4b0f      	ldr	r3, [pc, #60]	; (800abfc <_svfiprintf_r+0x1f8>)
 800abbe:	a904      	add	r1, sp, #16
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7fc fac1 	bl	8007148 <_printf_float>
 800abc6:	1c42      	adds	r2, r0, #1
 800abc8:	4606      	mov	r6, r0
 800abca:	d1d6      	bne.n	800ab7a <_svfiprintf_r+0x176>
 800abcc:	89ab      	ldrh	r3, [r5, #12]
 800abce:	065b      	lsls	r3, r3, #25
 800abd0:	f53f af2c 	bmi.w	800aa2c <_svfiprintf_r+0x28>
 800abd4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800abd6:	b01d      	add	sp, #116	; 0x74
 800abd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abdc:	ab03      	add	r3, sp, #12
 800abde:	9300      	str	r3, [sp, #0]
 800abe0:	462a      	mov	r2, r5
 800abe2:	4b06      	ldr	r3, [pc, #24]	; (800abfc <_svfiprintf_r+0x1f8>)
 800abe4:	a904      	add	r1, sp, #16
 800abe6:	4638      	mov	r0, r7
 800abe8:	f7fc fd52 	bl	8007690 <_printf_i>
 800abec:	e7eb      	b.n	800abc6 <_svfiprintf_r+0x1c2>
 800abee:	bf00      	nop
 800abf0:	0800bad4 	.word	0x0800bad4
 800abf4:	0800bade 	.word	0x0800bade
 800abf8:	08007149 	.word	0x08007149
 800abfc:	0800a94d 	.word	0x0800a94d
 800ac00:	0800bada 	.word	0x0800bada

0800ac04 <__sfputc_r>:
 800ac04:	6893      	ldr	r3, [r2, #8]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	b410      	push	{r4}
 800ac0c:	6093      	str	r3, [r2, #8]
 800ac0e:	da08      	bge.n	800ac22 <__sfputc_r+0x1e>
 800ac10:	6994      	ldr	r4, [r2, #24]
 800ac12:	42a3      	cmp	r3, r4
 800ac14:	db01      	blt.n	800ac1a <__sfputc_r+0x16>
 800ac16:	290a      	cmp	r1, #10
 800ac18:	d103      	bne.n	800ac22 <__sfputc_r+0x1e>
 800ac1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac1e:	f000 b967 	b.w	800aef0 <__swbuf_r>
 800ac22:	6813      	ldr	r3, [r2, #0]
 800ac24:	1c58      	adds	r0, r3, #1
 800ac26:	6010      	str	r0, [r2, #0]
 800ac28:	7019      	strb	r1, [r3, #0]
 800ac2a:	4608      	mov	r0, r1
 800ac2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <__sfputs_r>:
 800ac32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac34:	4606      	mov	r6, r0
 800ac36:	460f      	mov	r7, r1
 800ac38:	4614      	mov	r4, r2
 800ac3a:	18d5      	adds	r5, r2, r3
 800ac3c:	42ac      	cmp	r4, r5
 800ac3e:	d101      	bne.n	800ac44 <__sfputs_r+0x12>
 800ac40:	2000      	movs	r0, #0
 800ac42:	e007      	b.n	800ac54 <__sfputs_r+0x22>
 800ac44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac48:	463a      	mov	r2, r7
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ffda 	bl	800ac04 <__sfputc_r>
 800ac50:	1c43      	adds	r3, r0, #1
 800ac52:	d1f3      	bne.n	800ac3c <__sfputs_r+0xa>
 800ac54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ac58 <_vfiprintf_r>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	460d      	mov	r5, r1
 800ac5e:	b09d      	sub	sp, #116	; 0x74
 800ac60:	4614      	mov	r4, r2
 800ac62:	4698      	mov	r8, r3
 800ac64:	4606      	mov	r6, r0
 800ac66:	b118      	cbz	r0, 800ac70 <_vfiprintf_r+0x18>
 800ac68:	6983      	ldr	r3, [r0, #24]
 800ac6a:	b90b      	cbnz	r3, 800ac70 <_vfiprintf_r+0x18>
 800ac6c:	f7fe fd12 	bl	8009694 <__sinit>
 800ac70:	4b89      	ldr	r3, [pc, #548]	; (800ae98 <_vfiprintf_r+0x240>)
 800ac72:	429d      	cmp	r5, r3
 800ac74:	d11b      	bne.n	800acae <_vfiprintf_r+0x56>
 800ac76:	6875      	ldr	r5, [r6, #4]
 800ac78:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ac7a:	07d9      	lsls	r1, r3, #31
 800ac7c:	d405      	bmi.n	800ac8a <_vfiprintf_r+0x32>
 800ac7e:	89ab      	ldrh	r3, [r5, #12]
 800ac80:	059a      	lsls	r2, r3, #22
 800ac82:	d402      	bmi.n	800ac8a <_vfiprintf_r+0x32>
 800ac84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac86:	f7ff f928 	bl	8009eda <__retarget_lock_acquire_recursive>
 800ac8a:	89ab      	ldrh	r3, [r5, #12]
 800ac8c:	071b      	lsls	r3, r3, #28
 800ac8e:	d501      	bpl.n	800ac94 <_vfiprintf_r+0x3c>
 800ac90:	692b      	ldr	r3, [r5, #16]
 800ac92:	b9eb      	cbnz	r3, 800acd0 <_vfiprintf_r+0x78>
 800ac94:	4629      	mov	r1, r5
 800ac96:	4630      	mov	r0, r6
 800ac98:	f000 f98a 	bl	800afb0 <__swsetup_r>
 800ac9c:	b1c0      	cbz	r0, 800acd0 <_vfiprintf_r+0x78>
 800ac9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800aca0:	07dc      	lsls	r4, r3, #31
 800aca2:	d50e      	bpl.n	800acc2 <_vfiprintf_r+0x6a>
 800aca4:	f04f 30ff 	mov.w	r0, #4294967295
 800aca8:	b01d      	add	sp, #116	; 0x74
 800acaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acae:	4b7b      	ldr	r3, [pc, #492]	; (800ae9c <_vfiprintf_r+0x244>)
 800acb0:	429d      	cmp	r5, r3
 800acb2:	d101      	bne.n	800acb8 <_vfiprintf_r+0x60>
 800acb4:	68b5      	ldr	r5, [r6, #8]
 800acb6:	e7df      	b.n	800ac78 <_vfiprintf_r+0x20>
 800acb8:	4b79      	ldr	r3, [pc, #484]	; (800aea0 <_vfiprintf_r+0x248>)
 800acba:	429d      	cmp	r5, r3
 800acbc:	bf08      	it	eq
 800acbe:	68f5      	ldreq	r5, [r6, #12]
 800acc0:	e7da      	b.n	800ac78 <_vfiprintf_r+0x20>
 800acc2:	89ab      	ldrh	r3, [r5, #12]
 800acc4:	0598      	lsls	r0, r3, #22
 800acc6:	d4ed      	bmi.n	800aca4 <_vfiprintf_r+0x4c>
 800acc8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800acca:	f7ff f907 	bl	8009edc <__retarget_lock_release_recursive>
 800acce:	e7e9      	b.n	800aca4 <_vfiprintf_r+0x4c>
 800acd0:	2300      	movs	r3, #0
 800acd2:	9309      	str	r3, [sp, #36]	; 0x24
 800acd4:	2320      	movs	r3, #32
 800acd6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800acda:	f8cd 800c 	str.w	r8, [sp, #12]
 800acde:	2330      	movs	r3, #48	; 0x30
 800ace0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800aea4 <_vfiprintf_r+0x24c>
 800ace4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ace8:	f04f 0901 	mov.w	r9, #1
 800acec:	4623      	mov	r3, r4
 800acee:	469a      	mov	sl, r3
 800acf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800acf4:	b10a      	cbz	r2, 800acfa <_vfiprintf_r+0xa2>
 800acf6:	2a25      	cmp	r2, #37	; 0x25
 800acf8:	d1f9      	bne.n	800acee <_vfiprintf_r+0x96>
 800acfa:	ebba 0b04 	subs.w	fp, sl, r4
 800acfe:	d00b      	beq.n	800ad18 <_vfiprintf_r+0xc0>
 800ad00:	465b      	mov	r3, fp
 800ad02:	4622      	mov	r2, r4
 800ad04:	4629      	mov	r1, r5
 800ad06:	4630      	mov	r0, r6
 800ad08:	f7ff ff93 	bl	800ac32 <__sfputs_r>
 800ad0c:	3001      	adds	r0, #1
 800ad0e:	f000 80aa 	beq.w	800ae66 <_vfiprintf_r+0x20e>
 800ad12:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad14:	445a      	add	r2, fp
 800ad16:	9209      	str	r2, [sp, #36]	; 0x24
 800ad18:	f89a 3000 	ldrb.w	r3, [sl]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	f000 80a2 	beq.w	800ae66 <_vfiprintf_r+0x20e>
 800ad22:	2300      	movs	r3, #0
 800ad24:	f04f 32ff 	mov.w	r2, #4294967295
 800ad28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ad2c:	f10a 0a01 	add.w	sl, sl, #1
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	9307      	str	r3, [sp, #28]
 800ad34:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ad38:	931a      	str	r3, [sp, #104]	; 0x68
 800ad3a:	4654      	mov	r4, sl
 800ad3c:	2205      	movs	r2, #5
 800ad3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad42:	4858      	ldr	r0, [pc, #352]	; (800aea4 <_vfiprintf_r+0x24c>)
 800ad44:	f7f5 fa4c 	bl	80001e0 <memchr>
 800ad48:	9a04      	ldr	r2, [sp, #16]
 800ad4a:	b9d8      	cbnz	r0, 800ad84 <_vfiprintf_r+0x12c>
 800ad4c:	06d1      	lsls	r1, r2, #27
 800ad4e:	bf44      	itt	mi
 800ad50:	2320      	movmi	r3, #32
 800ad52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad56:	0713      	lsls	r3, r2, #28
 800ad58:	bf44      	itt	mi
 800ad5a:	232b      	movmi	r3, #43	; 0x2b
 800ad5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ad60:	f89a 3000 	ldrb.w	r3, [sl]
 800ad64:	2b2a      	cmp	r3, #42	; 0x2a
 800ad66:	d015      	beq.n	800ad94 <_vfiprintf_r+0x13c>
 800ad68:	9a07      	ldr	r2, [sp, #28]
 800ad6a:	4654      	mov	r4, sl
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	f04f 0c0a 	mov.w	ip, #10
 800ad72:	4621      	mov	r1, r4
 800ad74:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ad78:	3b30      	subs	r3, #48	; 0x30
 800ad7a:	2b09      	cmp	r3, #9
 800ad7c:	d94e      	bls.n	800ae1c <_vfiprintf_r+0x1c4>
 800ad7e:	b1b0      	cbz	r0, 800adae <_vfiprintf_r+0x156>
 800ad80:	9207      	str	r2, [sp, #28]
 800ad82:	e014      	b.n	800adae <_vfiprintf_r+0x156>
 800ad84:	eba0 0308 	sub.w	r3, r0, r8
 800ad88:	fa09 f303 	lsl.w	r3, r9, r3
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	9304      	str	r3, [sp, #16]
 800ad90:	46a2      	mov	sl, r4
 800ad92:	e7d2      	b.n	800ad3a <_vfiprintf_r+0xe2>
 800ad94:	9b03      	ldr	r3, [sp, #12]
 800ad96:	1d19      	adds	r1, r3, #4
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	9103      	str	r1, [sp, #12]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	bfbb      	ittet	lt
 800ada0:	425b      	neglt	r3, r3
 800ada2:	f042 0202 	orrlt.w	r2, r2, #2
 800ada6:	9307      	strge	r3, [sp, #28]
 800ada8:	9307      	strlt	r3, [sp, #28]
 800adaa:	bfb8      	it	lt
 800adac:	9204      	strlt	r2, [sp, #16]
 800adae:	7823      	ldrb	r3, [r4, #0]
 800adb0:	2b2e      	cmp	r3, #46	; 0x2e
 800adb2:	d10c      	bne.n	800adce <_vfiprintf_r+0x176>
 800adb4:	7863      	ldrb	r3, [r4, #1]
 800adb6:	2b2a      	cmp	r3, #42	; 0x2a
 800adb8:	d135      	bne.n	800ae26 <_vfiprintf_r+0x1ce>
 800adba:	9b03      	ldr	r3, [sp, #12]
 800adbc:	1d1a      	adds	r2, r3, #4
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	9203      	str	r2, [sp, #12]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bfb8      	it	lt
 800adc6:	f04f 33ff 	movlt.w	r3, #4294967295
 800adca:	3402      	adds	r4, #2
 800adcc:	9305      	str	r3, [sp, #20]
 800adce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800aeb4 <_vfiprintf_r+0x25c>
 800add2:	7821      	ldrb	r1, [r4, #0]
 800add4:	2203      	movs	r2, #3
 800add6:	4650      	mov	r0, sl
 800add8:	f7f5 fa02 	bl	80001e0 <memchr>
 800addc:	b140      	cbz	r0, 800adf0 <_vfiprintf_r+0x198>
 800adde:	2340      	movs	r3, #64	; 0x40
 800ade0:	eba0 000a 	sub.w	r0, r0, sl
 800ade4:	fa03 f000 	lsl.w	r0, r3, r0
 800ade8:	9b04      	ldr	r3, [sp, #16]
 800adea:	4303      	orrs	r3, r0
 800adec:	3401      	adds	r4, #1
 800adee:	9304      	str	r3, [sp, #16]
 800adf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800adf4:	482c      	ldr	r0, [pc, #176]	; (800aea8 <_vfiprintf_r+0x250>)
 800adf6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800adfa:	2206      	movs	r2, #6
 800adfc:	f7f5 f9f0 	bl	80001e0 <memchr>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	d03f      	beq.n	800ae84 <_vfiprintf_r+0x22c>
 800ae04:	4b29      	ldr	r3, [pc, #164]	; (800aeac <_vfiprintf_r+0x254>)
 800ae06:	bb1b      	cbnz	r3, 800ae50 <_vfiprintf_r+0x1f8>
 800ae08:	9b03      	ldr	r3, [sp, #12]
 800ae0a:	3307      	adds	r3, #7
 800ae0c:	f023 0307 	bic.w	r3, r3, #7
 800ae10:	3308      	adds	r3, #8
 800ae12:	9303      	str	r3, [sp, #12]
 800ae14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae16:	443b      	add	r3, r7
 800ae18:	9309      	str	r3, [sp, #36]	; 0x24
 800ae1a:	e767      	b.n	800acec <_vfiprintf_r+0x94>
 800ae1c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ae20:	460c      	mov	r4, r1
 800ae22:	2001      	movs	r0, #1
 800ae24:	e7a5      	b.n	800ad72 <_vfiprintf_r+0x11a>
 800ae26:	2300      	movs	r3, #0
 800ae28:	3401      	adds	r4, #1
 800ae2a:	9305      	str	r3, [sp, #20]
 800ae2c:	4619      	mov	r1, r3
 800ae2e:	f04f 0c0a 	mov.w	ip, #10
 800ae32:	4620      	mov	r0, r4
 800ae34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ae38:	3a30      	subs	r2, #48	; 0x30
 800ae3a:	2a09      	cmp	r2, #9
 800ae3c:	d903      	bls.n	800ae46 <_vfiprintf_r+0x1ee>
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d0c5      	beq.n	800adce <_vfiprintf_r+0x176>
 800ae42:	9105      	str	r1, [sp, #20]
 800ae44:	e7c3      	b.n	800adce <_vfiprintf_r+0x176>
 800ae46:	fb0c 2101 	mla	r1, ip, r1, r2
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e7f0      	b.n	800ae32 <_vfiprintf_r+0x1da>
 800ae50:	ab03      	add	r3, sp, #12
 800ae52:	9300      	str	r3, [sp, #0]
 800ae54:	462a      	mov	r2, r5
 800ae56:	4b16      	ldr	r3, [pc, #88]	; (800aeb0 <_vfiprintf_r+0x258>)
 800ae58:	a904      	add	r1, sp, #16
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	f7fc f974 	bl	8007148 <_printf_float>
 800ae60:	4607      	mov	r7, r0
 800ae62:	1c78      	adds	r0, r7, #1
 800ae64:	d1d6      	bne.n	800ae14 <_vfiprintf_r+0x1bc>
 800ae66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ae68:	07d9      	lsls	r1, r3, #31
 800ae6a:	d405      	bmi.n	800ae78 <_vfiprintf_r+0x220>
 800ae6c:	89ab      	ldrh	r3, [r5, #12]
 800ae6e:	059a      	lsls	r2, r3, #22
 800ae70:	d402      	bmi.n	800ae78 <_vfiprintf_r+0x220>
 800ae72:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ae74:	f7ff f832 	bl	8009edc <__retarget_lock_release_recursive>
 800ae78:	89ab      	ldrh	r3, [r5, #12]
 800ae7a:	065b      	lsls	r3, r3, #25
 800ae7c:	f53f af12 	bmi.w	800aca4 <_vfiprintf_r+0x4c>
 800ae80:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ae82:	e711      	b.n	800aca8 <_vfiprintf_r+0x50>
 800ae84:	ab03      	add	r3, sp, #12
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	462a      	mov	r2, r5
 800ae8a:	4b09      	ldr	r3, [pc, #36]	; (800aeb0 <_vfiprintf_r+0x258>)
 800ae8c:	a904      	add	r1, sp, #16
 800ae8e:	4630      	mov	r0, r6
 800ae90:	f7fc fbfe 	bl	8007690 <_printf_i>
 800ae94:	e7e4      	b.n	800ae60 <_vfiprintf_r+0x208>
 800ae96:	bf00      	nop
 800ae98:	0800b8bc 	.word	0x0800b8bc
 800ae9c:	0800b8dc 	.word	0x0800b8dc
 800aea0:	0800b89c 	.word	0x0800b89c
 800aea4:	0800bad4 	.word	0x0800bad4
 800aea8:	0800bade 	.word	0x0800bade
 800aeac:	08007149 	.word	0x08007149
 800aeb0:	0800ac33 	.word	0x0800ac33
 800aeb4:	0800bada 	.word	0x0800bada

0800aeb8 <_read_r>:
 800aeb8:	b538      	push	{r3, r4, r5, lr}
 800aeba:	4d07      	ldr	r5, [pc, #28]	; (800aed8 <_read_r+0x20>)
 800aebc:	4604      	mov	r4, r0
 800aebe:	4608      	mov	r0, r1
 800aec0:	4611      	mov	r1, r2
 800aec2:	2200      	movs	r2, #0
 800aec4:	602a      	str	r2, [r5, #0]
 800aec6:	461a      	mov	r2, r3
 800aec8:	f7f8 fb9e 	bl	8003608 <_read>
 800aecc:	1c43      	adds	r3, r0, #1
 800aece:	d102      	bne.n	800aed6 <_read_r+0x1e>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	b103      	cbz	r3, 800aed6 <_read_r+0x1e>
 800aed4:	6023      	str	r3, [r4, #0]
 800aed6:	bd38      	pop	{r3, r4, r5, pc}
 800aed8:	200005e0 	.word	0x200005e0
 800aedc:	00000000 	.word	0x00000000

0800aee0 <nan>:
 800aee0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800aee8 <nan+0x8>
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	00000000 	.word	0x00000000
 800aeec:	7ff80000 	.word	0x7ff80000

0800aef0 <__swbuf_r>:
 800aef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aef2:	460e      	mov	r6, r1
 800aef4:	4614      	mov	r4, r2
 800aef6:	4605      	mov	r5, r0
 800aef8:	b118      	cbz	r0, 800af02 <__swbuf_r+0x12>
 800aefa:	6983      	ldr	r3, [r0, #24]
 800aefc:	b90b      	cbnz	r3, 800af02 <__swbuf_r+0x12>
 800aefe:	f7fe fbc9 	bl	8009694 <__sinit>
 800af02:	4b21      	ldr	r3, [pc, #132]	; (800af88 <__swbuf_r+0x98>)
 800af04:	429c      	cmp	r4, r3
 800af06:	d12b      	bne.n	800af60 <__swbuf_r+0x70>
 800af08:	686c      	ldr	r4, [r5, #4]
 800af0a:	69a3      	ldr	r3, [r4, #24]
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	89a3      	ldrh	r3, [r4, #12]
 800af10:	071a      	lsls	r2, r3, #28
 800af12:	d52f      	bpl.n	800af74 <__swbuf_r+0x84>
 800af14:	6923      	ldr	r3, [r4, #16]
 800af16:	b36b      	cbz	r3, 800af74 <__swbuf_r+0x84>
 800af18:	6923      	ldr	r3, [r4, #16]
 800af1a:	6820      	ldr	r0, [r4, #0]
 800af1c:	1ac0      	subs	r0, r0, r3
 800af1e:	6963      	ldr	r3, [r4, #20]
 800af20:	b2f6      	uxtb	r6, r6
 800af22:	4283      	cmp	r3, r0
 800af24:	4637      	mov	r7, r6
 800af26:	dc04      	bgt.n	800af32 <__swbuf_r+0x42>
 800af28:	4621      	mov	r1, r4
 800af2a:	4628      	mov	r0, r5
 800af2c:	f000 f93c 	bl	800b1a8 <_fflush_r>
 800af30:	bb30      	cbnz	r0, 800af80 <__swbuf_r+0x90>
 800af32:	68a3      	ldr	r3, [r4, #8]
 800af34:	3b01      	subs	r3, #1
 800af36:	60a3      	str	r3, [r4, #8]
 800af38:	6823      	ldr	r3, [r4, #0]
 800af3a:	1c5a      	adds	r2, r3, #1
 800af3c:	6022      	str	r2, [r4, #0]
 800af3e:	701e      	strb	r6, [r3, #0]
 800af40:	6963      	ldr	r3, [r4, #20]
 800af42:	3001      	adds	r0, #1
 800af44:	4283      	cmp	r3, r0
 800af46:	d004      	beq.n	800af52 <__swbuf_r+0x62>
 800af48:	89a3      	ldrh	r3, [r4, #12]
 800af4a:	07db      	lsls	r3, r3, #31
 800af4c:	d506      	bpl.n	800af5c <__swbuf_r+0x6c>
 800af4e:	2e0a      	cmp	r6, #10
 800af50:	d104      	bne.n	800af5c <__swbuf_r+0x6c>
 800af52:	4621      	mov	r1, r4
 800af54:	4628      	mov	r0, r5
 800af56:	f000 f927 	bl	800b1a8 <_fflush_r>
 800af5a:	b988      	cbnz	r0, 800af80 <__swbuf_r+0x90>
 800af5c:	4638      	mov	r0, r7
 800af5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af60:	4b0a      	ldr	r3, [pc, #40]	; (800af8c <__swbuf_r+0x9c>)
 800af62:	429c      	cmp	r4, r3
 800af64:	d101      	bne.n	800af6a <__swbuf_r+0x7a>
 800af66:	68ac      	ldr	r4, [r5, #8]
 800af68:	e7cf      	b.n	800af0a <__swbuf_r+0x1a>
 800af6a:	4b09      	ldr	r3, [pc, #36]	; (800af90 <__swbuf_r+0xa0>)
 800af6c:	429c      	cmp	r4, r3
 800af6e:	bf08      	it	eq
 800af70:	68ec      	ldreq	r4, [r5, #12]
 800af72:	e7ca      	b.n	800af0a <__swbuf_r+0x1a>
 800af74:	4621      	mov	r1, r4
 800af76:	4628      	mov	r0, r5
 800af78:	f000 f81a 	bl	800afb0 <__swsetup_r>
 800af7c:	2800      	cmp	r0, #0
 800af7e:	d0cb      	beq.n	800af18 <__swbuf_r+0x28>
 800af80:	f04f 37ff 	mov.w	r7, #4294967295
 800af84:	e7ea      	b.n	800af5c <__swbuf_r+0x6c>
 800af86:	bf00      	nop
 800af88:	0800b8bc 	.word	0x0800b8bc
 800af8c:	0800b8dc 	.word	0x0800b8dc
 800af90:	0800b89c 	.word	0x0800b89c

0800af94 <__ascii_wctomb>:
 800af94:	b149      	cbz	r1, 800afaa <__ascii_wctomb+0x16>
 800af96:	2aff      	cmp	r2, #255	; 0xff
 800af98:	bf85      	ittet	hi
 800af9a:	238a      	movhi	r3, #138	; 0x8a
 800af9c:	6003      	strhi	r3, [r0, #0]
 800af9e:	700a      	strbls	r2, [r1, #0]
 800afa0:	f04f 30ff 	movhi.w	r0, #4294967295
 800afa4:	bf98      	it	ls
 800afa6:	2001      	movls	r0, #1
 800afa8:	4770      	bx	lr
 800afaa:	4608      	mov	r0, r1
 800afac:	4770      	bx	lr
	...

0800afb0 <__swsetup_r>:
 800afb0:	4b32      	ldr	r3, [pc, #200]	; (800b07c <__swsetup_r+0xcc>)
 800afb2:	b570      	push	{r4, r5, r6, lr}
 800afb4:	681d      	ldr	r5, [r3, #0]
 800afb6:	4606      	mov	r6, r0
 800afb8:	460c      	mov	r4, r1
 800afba:	b125      	cbz	r5, 800afc6 <__swsetup_r+0x16>
 800afbc:	69ab      	ldr	r3, [r5, #24]
 800afbe:	b913      	cbnz	r3, 800afc6 <__swsetup_r+0x16>
 800afc0:	4628      	mov	r0, r5
 800afc2:	f7fe fb67 	bl	8009694 <__sinit>
 800afc6:	4b2e      	ldr	r3, [pc, #184]	; (800b080 <__swsetup_r+0xd0>)
 800afc8:	429c      	cmp	r4, r3
 800afca:	d10f      	bne.n	800afec <__swsetup_r+0x3c>
 800afcc:	686c      	ldr	r4, [r5, #4]
 800afce:	89a3      	ldrh	r3, [r4, #12]
 800afd0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800afd4:	0719      	lsls	r1, r3, #28
 800afd6:	d42c      	bmi.n	800b032 <__swsetup_r+0x82>
 800afd8:	06dd      	lsls	r5, r3, #27
 800afda:	d411      	bmi.n	800b000 <__swsetup_r+0x50>
 800afdc:	2309      	movs	r3, #9
 800afde:	6033      	str	r3, [r6, #0]
 800afe0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800afe4:	81a3      	strh	r3, [r4, #12]
 800afe6:	f04f 30ff 	mov.w	r0, #4294967295
 800afea:	e03e      	b.n	800b06a <__swsetup_r+0xba>
 800afec:	4b25      	ldr	r3, [pc, #148]	; (800b084 <__swsetup_r+0xd4>)
 800afee:	429c      	cmp	r4, r3
 800aff0:	d101      	bne.n	800aff6 <__swsetup_r+0x46>
 800aff2:	68ac      	ldr	r4, [r5, #8]
 800aff4:	e7eb      	b.n	800afce <__swsetup_r+0x1e>
 800aff6:	4b24      	ldr	r3, [pc, #144]	; (800b088 <__swsetup_r+0xd8>)
 800aff8:	429c      	cmp	r4, r3
 800affa:	bf08      	it	eq
 800affc:	68ec      	ldreq	r4, [r5, #12]
 800affe:	e7e6      	b.n	800afce <__swsetup_r+0x1e>
 800b000:	0758      	lsls	r0, r3, #29
 800b002:	d512      	bpl.n	800b02a <__swsetup_r+0x7a>
 800b004:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b006:	b141      	cbz	r1, 800b01a <__swsetup_r+0x6a>
 800b008:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b00c:	4299      	cmp	r1, r3
 800b00e:	d002      	beq.n	800b016 <__swsetup_r+0x66>
 800b010:	4630      	mov	r0, r6
 800b012:	f7fb ff19 	bl	8006e48 <_free_r>
 800b016:	2300      	movs	r3, #0
 800b018:	6363      	str	r3, [r4, #52]	; 0x34
 800b01a:	89a3      	ldrh	r3, [r4, #12]
 800b01c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b020:	81a3      	strh	r3, [r4, #12]
 800b022:	2300      	movs	r3, #0
 800b024:	6063      	str	r3, [r4, #4]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	f043 0308 	orr.w	r3, r3, #8
 800b030:	81a3      	strh	r3, [r4, #12]
 800b032:	6923      	ldr	r3, [r4, #16]
 800b034:	b94b      	cbnz	r3, 800b04a <__swsetup_r+0x9a>
 800b036:	89a3      	ldrh	r3, [r4, #12]
 800b038:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b03c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b040:	d003      	beq.n	800b04a <__swsetup_r+0x9a>
 800b042:	4621      	mov	r1, r4
 800b044:	4630      	mov	r0, r6
 800b046:	f000 f911 	bl	800b26c <__smakebuf_r>
 800b04a:	89a0      	ldrh	r0, [r4, #12]
 800b04c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b050:	f010 0301 	ands.w	r3, r0, #1
 800b054:	d00a      	beq.n	800b06c <__swsetup_r+0xbc>
 800b056:	2300      	movs	r3, #0
 800b058:	60a3      	str	r3, [r4, #8]
 800b05a:	6963      	ldr	r3, [r4, #20]
 800b05c:	425b      	negs	r3, r3
 800b05e:	61a3      	str	r3, [r4, #24]
 800b060:	6923      	ldr	r3, [r4, #16]
 800b062:	b943      	cbnz	r3, 800b076 <__swsetup_r+0xc6>
 800b064:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b068:	d1ba      	bne.n	800afe0 <__swsetup_r+0x30>
 800b06a:	bd70      	pop	{r4, r5, r6, pc}
 800b06c:	0781      	lsls	r1, r0, #30
 800b06e:	bf58      	it	pl
 800b070:	6963      	ldrpl	r3, [r4, #20]
 800b072:	60a3      	str	r3, [r4, #8]
 800b074:	e7f4      	b.n	800b060 <__swsetup_r+0xb0>
 800b076:	2000      	movs	r0, #0
 800b078:	e7f7      	b.n	800b06a <__swsetup_r+0xba>
 800b07a:	bf00      	nop
 800b07c:	20000058 	.word	0x20000058
 800b080:	0800b8bc 	.word	0x0800b8bc
 800b084:	0800b8dc 	.word	0x0800b8dc
 800b088:	0800b89c 	.word	0x0800b89c

0800b08c <abort>:
 800b08c:	b508      	push	{r3, lr}
 800b08e:	2006      	movs	r0, #6
 800b090:	f000 f976 	bl	800b380 <raise>
 800b094:	2001      	movs	r0, #1
 800b096:	f7f8 faad 	bl	80035f4 <_exit>
	...

0800b09c <__sflush_r>:
 800b09c:	898a      	ldrh	r2, [r1, #12]
 800b09e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a2:	4605      	mov	r5, r0
 800b0a4:	0710      	lsls	r0, r2, #28
 800b0a6:	460c      	mov	r4, r1
 800b0a8:	d458      	bmi.n	800b15c <__sflush_r+0xc0>
 800b0aa:	684b      	ldr	r3, [r1, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	dc05      	bgt.n	800b0bc <__sflush_r+0x20>
 800b0b0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	dc02      	bgt.n	800b0bc <__sflush_r+0x20>
 800b0b6:	2000      	movs	r0, #0
 800b0b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0be:	2e00      	cmp	r6, #0
 800b0c0:	d0f9      	beq.n	800b0b6 <__sflush_r+0x1a>
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b0c8:	682f      	ldr	r7, [r5, #0]
 800b0ca:	602b      	str	r3, [r5, #0]
 800b0cc:	d032      	beq.n	800b134 <__sflush_r+0x98>
 800b0ce:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b0d0:	89a3      	ldrh	r3, [r4, #12]
 800b0d2:	075a      	lsls	r2, r3, #29
 800b0d4:	d505      	bpl.n	800b0e2 <__sflush_r+0x46>
 800b0d6:	6863      	ldr	r3, [r4, #4]
 800b0d8:	1ac0      	subs	r0, r0, r3
 800b0da:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b0dc:	b10b      	cbz	r3, 800b0e2 <__sflush_r+0x46>
 800b0de:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b0e0:	1ac0      	subs	r0, r0, r3
 800b0e2:	2300      	movs	r3, #0
 800b0e4:	4602      	mov	r2, r0
 800b0e6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b0e8:	6a21      	ldr	r1, [r4, #32]
 800b0ea:	4628      	mov	r0, r5
 800b0ec:	47b0      	blx	r6
 800b0ee:	1c43      	adds	r3, r0, #1
 800b0f0:	89a3      	ldrh	r3, [r4, #12]
 800b0f2:	d106      	bne.n	800b102 <__sflush_r+0x66>
 800b0f4:	6829      	ldr	r1, [r5, #0]
 800b0f6:	291d      	cmp	r1, #29
 800b0f8:	d82c      	bhi.n	800b154 <__sflush_r+0xb8>
 800b0fa:	4a2a      	ldr	r2, [pc, #168]	; (800b1a4 <__sflush_r+0x108>)
 800b0fc:	40ca      	lsrs	r2, r1
 800b0fe:	07d6      	lsls	r6, r2, #31
 800b100:	d528      	bpl.n	800b154 <__sflush_r+0xb8>
 800b102:	2200      	movs	r2, #0
 800b104:	6062      	str	r2, [r4, #4]
 800b106:	04d9      	lsls	r1, r3, #19
 800b108:	6922      	ldr	r2, [r4, #16]
 800b10a:	6022      	str	r2, [r4, #0]
 800b10c:	d504      	bpl.n	800b118 <__sflush_r+0x7c>
 800b10e:	1c42      	adds	r2, r0, #1
 800b110:	d101      	bne.n	800b116 <__sflush_r+0x7a>
 800b112:	682b      	ldr	r3, [r5, #0]
 800b114:	b903      	cbnz	r3, 800b118 <__sflush_r+0x7c>
 800b116:	6560      	str	r0, [r4, #84]	; 0x54
 800b118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b11a:	602f      	str	r7, [r5, #0]
 800b11c:	2900      	cmp	r1, #0
 800b11e:	d0ca      	beq.n	800b0b6 <__sflush_r+0x1a>
 800b120:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b124:	4299      	cmp	r1, r3
 800b126:	d002      	beq.n	800b12e <__sflush_r+0x92>
 800b128:	4628      	mov	r0, r5
 800b12a:	f7fb fe8d 	bl	8006e48 <_free_r>
 800b12e:	2000      	movs	r0, #0
 800b130:	6360      	str	r0, [r4, #52]	; 0x34
 800b132:	e7c1      	b.n	800b0b8 <__sflush_r+0x1c>
 800b134:	6a21      	ldr	r1, [r4, #32]
 800b136:	2301      	movs	r3, #1
 800b138:	4628      	mov	r0, r5
 800b13a:	47b0      	blx	r6
 800b13c:	1c41      	adds	r1, r0, #1
 800b13e:	d1c7      	bne.n	800b0d0 <__sflush_r+0x34>
 800b140:	682b      	ldr	r3, [r5, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d0c4      	beq.n	800b0d0 <__sflush_r+0x34>
 800b146:	2b1d      	cmp	r3, #29
 800b148:	d001      	beq.n	800b14e <__sflush_r+0xb2>
 800b14a:	2b16      	cmp	r3, #22
 800b14c:	d101      	bne.n	800b152 <__sflush_r+0xb6>
 800b14e:	602f      	str	r7, [r5, #0]
 800b150:	e7b1      	b.n	800b0b6 <__sflush_r+0x1a>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	e7ad      	b.n	800b0b8 <__sflush_r+0x1c>
 800b15c:	690f      	ldr	r7, [r1, #16]
 800b15e:	2f00      	cmp	r7, #0
 800b160:	d0a9      	beq.n	800b0b6 <__sflush_r+0x1a>
 800b162:	0793      	lsls	r3, r2, #30
 800b164:	680e      	ldr	r6, [r1, #0]
 800b166:	bf08      	it	eq
 800b168:	694b      	ldreq	r3, [r1, #20]
 800b16a:	600f      	str	r7, [r1, #0]
 800b16c:	bf18      	it	ne
 800b16e:	2300      	movne	r3, #0
 800b170:	eba6 0807 	sub.w	r8, r6, r7
 800b174:	608b      	str	r3, [r1, #8]
 800b176:	f1b8 0f00 	cmp.w	r8, #0
 800b17a:	dd9c      	ble.n	800b0b6 <__sflush_r+0x1a>
 800b17c:	6a21      	ldr	r1, [r4, #32]
 800b17e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b180:	4643      	mov	r3, r8
 800b182:	463a      	mov	r2, r7
 800b184:	4628      	mov	r0, r5
 800b186:	47b0      	blx	r6
 800b188:	2800      	cmp	r0, #0
 800b18a:	dc06      	bgt.n	800b19a <__sflush_r+0xfe>
 800b18c:	89a3      	ldrh	r3, [r4, #12]
 800b18e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b192:	81a3      	strh	r3, [r4, #12]
 800b194:	f04f 30ff 	mov.w	r0, #4294967295
 800b198:	e78e      	b.n	800b0b8 <__sflush_r+0x1c>
 800b19a:	4407      	add	r7, r0
 800b19c:	eba8 0800 	sub.w	r8, r8, r0
 800b1a0:	e7e9      	b.n	800b176 <__sflush_r+0xda>
 800b1a2:	bf00      	nop
 800b1a4:	20400001 	.word	0x20400001

0800b1a8 <_fflush_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	690b      	ldr	r3, [r1, #16]
 800b1ac:	4605      	mov	r5, r0
 800b1ae:	460c      	mov	r4, r1
 800b1b0:	b913      	cbnz	r3, 800b1b8 <_fflush_r+0x10>
 800b1b2:	2500      	movs	r5, #0
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	bd38      	pop	{r3, r4, r5, pc}
 800b1b8:	b118      	cbz	r0, 800b1c2 <_fflush_r+0x1a>
 800b1ba:	6983      	ldr	r3, [r0, #24]
 800b1bc:	b90b      	cbnz	r3, 800b1c2 <_fflush_r+0x1a>
 800b1be:	f7fe fa69 	bl	8009694 <__sinit>
 800b1c2:	4b14      	ldr	r3, [pc, #80]	; (800b214 <_fflush_r+0x6c>)
 800b1c4:	429c      	cmp	r4, r3
 800b1c6:	d11b      	bne.n	800b200 <_fflush_r+0x58>
 800b1c8:	686c      	ldr	r4, [r5, #4]
 800b1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d0ef      	beq.n	800b1b2 <_fflush_r+0xa>
 800b1d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b1d4:	07d0      	lsls	r0, r2, #31
 800b1d6:	d404      	bmi.n	800b1e2 <_fflush_r+0x3a>
 800b1d8:	0599      	lsls	r1, r3, #22
 800b1da:	d402      	bmi.n	800b1e2 <_fflush_r+0x3a>
 800b1dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1de:	f7fe fe7c 	bl	8009eda <__retarget_lock_acquire_recursive>
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	4621      	mov	r1, r4
 800b1e6:	f7ff ff59 	bl	800b09c <__sflush_r>
 800b1ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1ec:	07da      	lsls	r2, r3, #31
 800b1ee:	4605      	mov	r5, r0
 800b1f0:	d4e0      	bmi.n	800b1b4 <_fflush_r+0xc>
 800b1f2:	89a3      	ldrh	r3, [r4, #12]
 800b1f4:	059b      	lsls	r3, r3, #22
 800b1f6:	d4dd      	bmi.n	800b1b4 <_fflush_r+0xc>
 800b1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1fa:	f7fe fe6f 	bl	8009edc <__retarget_lock_release_recursive>
 800b1fe:	e7d9      	b.n	800b1b4 <_fflush_r+0xc>
 800b200:	4b05      	ldr	r3, [pc, #20]	; (800b218 <_fflush_r+0x70>)
 800b202:	429c      	cmp	r4, r3
 800b204:	d101      	bne.n	800b20a <_fflush_r+0x62>
 800b206:	68ac      	ldr	r4, [r5, #8]
 800b208:	e7df      	b.n	800b1ca <_fflush_r+0x22>
 800b20a:	4b04      	ldr	r3, [pc, #16]	; (800b21c <_fflush_r+0x74>)
 800b20c:	429c      	cmp	r4, r3
 800b20e:	bf08      	it	eq
 800b210:	68ec      	ldreq	r4, [r5, #12]
 800b212:	e7da      	b.n	800b1ca <_fflush_r+0x22>
 800b214:	0800b8bc 	.word	0x0800b8bc
 800b218:	0800b8dc 	.word	0x0800b8dc
 800b21c:	0800b89c 	.word	0x0800b89c

0800b220 <__swhatbuf_r>:
 800b220:	b570      	push	{r4, r5, r6, lr}
 800b222:	460e      	mov	r6, r1
 800b224:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b228:	2900      	cmp	r1, #0
 800b22a:	b096      	sub	sp, #88	; 0x58
 800b22c:	4614      	mov	r4, r2
 800b22e:	461d      	mov	r5, r3
 800b230:	da08      	bge.n	800b244 <__swhatbuf_r+0x24>
 800b232:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b236:	2200      	movs	r2, #0
 800b238:	602a      	str	r2, [r5, #0]
 800b23a:	061a      	lsls	r2, r3, #24
 800b23c:	d410      	bmi.n	800b260 <__swhatbuf_r+0x40>
 800b23e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b242:	e00e      	b.n	800b262 <__swhatbuf_r+0x42>
 800b244:	466a      	mov	r2, sp
 800b246:	f000 f8b7 	bl	800b3b8 <_fstat_r>
 800b24a:	2800      	cmp	r0, #0
 800b24c:	dbf1      	blt.n	800b232 <__swhatbuf_r+0x12>
 800b24e:	9a01      	ldr	r2, [sp, #4]
 800b250:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b254:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b258:	425a      	negs	r2, r3
 800b25a:	415a      	adcs	r2, r3
 800b25c:	602a      	str	r2, [r5, #0]
 800b25e:	e7ee      	b.n	800b23e <__swhatbuf_r+0x1e>
 800b260:	2340      	movs	r3, #64	; 0x40
 800b262:	2000      	movs	r0, #0
 800b264:	6023      	str	r3, [r4, #0]
 800b266:	b016      	add	sp, #88	; 0x58
 800b268:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b26c <__smakebuf_r>:
 800b26c:	898b      	ldrh	r3, [r1, #12]
 800b26e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b270:	079d      	lsls	r5, r3, #30
 800b272:	4606      	mov	r6, r0
 800b274:	460c      	mov	r4, r1
 800b276:	d507      	bpl.n	800b288 <__smakebuf_r+0x1c>
 800b278:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b27c:	6023      	str	r3, [r4, #0]
 800b27e:	6123      	str	r3, [r4, #16]
 800b280:	2301      	movs	r3, #1
 800b282:	6163      	str	r3, [r4, #20]
 800b284:	b002      	add	sp, #8
 800b286:	bd70      	pop	{r4, r5, r6, pc}
 800b288:	ab01      	add	r3, sp, #4
 800b28a:	466a      	mov	r2, sp
 800b28c:	f7ff ffc8 	bl	800b220 <__swhatbuf_r>
 800b290:	9900      	ldr	r1, [sp, #0]
 800b292:	4605      	mov	r5, r0
 800b294:	4630      	mov	r0, r6
 800b296:	f7fb fe43 	bl	8006f20 <_malloc_r>
 800b29a:	b948      	cbnz	r0, 800b2b0 <__smakebuf_r+0x44>
 800b29c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b2a0:	059a      	lsls	r2, r3, #22
 800b2a2:	d4ef      	bmi.n	800b284 <__smakebuf_r+0x18>
 800b2a4:	f023 0303 	bic.w	r3, r3, #3
 800b2a8:	f043 0302 	orr.w	r3, r3, #2
 800b2ac:	81a3      	strh	r3, [r4, #12]
 800b2ae:	e7e3      	b.n	800b278 <__smakebuf_r+0xc>
 800b2b0:	4b0d      	ldr	r3, [pc, #52]	; (800b2e8 <__smakebuf_r+0x7c>)
 800b2b2:	62b3      	str	r3, [r6, #40]	; 0x28
 800b2b4:	89a3      	ldrh	r3, [r4, #12]
 800b2b6:	6020      	str	r0, [r4, #0]
 800b2b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b2bc:	81a3      	strh	r3, [r4, #12]
 800b2be:	9b00      	ldr	r3, [sp, #0]
 800b2c0:	6163      	str	r3, [r4, #20]
 800b2c2:	9b01      	ldr	r3, [sp, #4]
 800b2c4:	6120      	str	r0, [r4, #16]
 800b2c6:	b15b      	cbz	r3, 800b2e0 <__smakebuf_r+0x74>
 800b2c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f000 f885 	bl	800b3dc <_isatty_r>
 800b2d2:	b128      	cbz	r0, 800b2e0 <__smakebuf_r+0x74>
 800b2d4:	89a3      	ldrh	r3, [r4, #12]
 800b2d6:	f023 0303 	bic.w	r3, r3, #3
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	81a3      	strh	r3, [r4, #12]
 800b2e0:	89a0      	ldrh	r0, [r4, #12]
 800b2e2:	4305      	orrs	r5, r0
 800b2e4:	81a5      	strh	r5, [r4, #12]
 800b2e6:	e7cd      	b.n	800b284 <__smakebuf_r+0x18>
 800b2e8:	0800962d 	.word	0x0800962d

0800b2ec <memmove>:
 800b2ec:	4288      	cmp	r0, r1
 800b2ee:	b510      	push	{r4, lr}
 800b2f0:	eb01 0402 	add.w	r4, r1, r2
 800b2f4:	d902      	bls.n	800b2fc <memmove+0x10>
 800b2f6:	4284      	cmp	r4, r0
 800b2f8:	4623      	mov	r3, r4
 800b2fa:	d807      	bhi.n	800b30c <memmove+0x20>
 800b2fc:	1e43      	subs	r3, r0, #1
 800b2fe:	42a1      	cmp	r1, r4
 800b300:	d008      	beq.n	800b314 <memmove+0x28>
 800b302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b30a:	e7f8      	b.n	800b2fe <memmove+0x12>
 800b30c:	4402      	add	r2, r0
 800b30e:	4601      	mov	r1, r0
 800b310:	428a      	cmp	r2, r1
 800b312:	d100      	bne.n	800b316 <memmove+0x2a>
 800b314:	bd10      	pop	{r4, pc}
 800b316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b31e:	e7f7      	b.n	800b310 <memmove+0x24>

0800b320 <_malloc_usable_size_r>:
 800b320:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b324:	1f18      	subs	r0, r3, #4
 800b326:	2b00      	cmp	r3, #0
 800b328:	bfbc      	itt	lt
 800b32a:	580b      	ldrlt	r3, [r1, r0]
 800b32c:	18c0      	addlt	r0, r0, r3
 800b32e:	4770      	bx	lr

0800b330 <_raise_r>:
 800b330:	291f      	cmp	r1, #31
 800b332:	b538      	push	{r3, r4, r5, lr}
 800b334:	4604      	mov	r4, r0
 800b336:	460d      	mov	r5, r1
 800b338:	d904      	bls.n	800b344 <_raise_r+0x14>
 800b33a:	2316      	movs	r3, #22
 800b33c:	6003      	str	r3, [r0, #0]
 800b33e:	f04f 30ff 	mov.w	r0, #4294967295
 800b342:	bd38      	pop	{r3, r4, r5, pc}
 800b344:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b346:	b112      	cbz	r2, 800b34e <_raise_r+0x1e>
 800b348:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b34c:	b94b      	cbnz	r3, 800b362 <_raise_r+0x32>
 800b34e:	4620      	mov	r0, r4
 800b350:	f000 f830 	bl	800b3b4 <_getpid_r>
 800b354:	462a      	mov	r2, r5
 800b356:	4601      	mov	r1, r0
 800b358:	4620      	mov	r0, r4
 800b35a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b35e:	f000 b817 	b.w	800b390 <_kill_r>
 800b362:	2b01      	cmp	r3, #1
 800b364:	d00a      	beq.n	800b37c <_raise_r+0x4c>
 800b366:	1c59      	adds	r1, r3, #1
 800b368:	d103      	bne.n	800b372 <_raise_r+0x42>
 800b36a:	2316      	movs	r3, #22
 800b36c:	6003      	str	r3, [r0, #0]
 800b36e:	2001      	movs	r0, #1
 800b370:	e7e7      	b.n	800b342 <_raise_r+0x12>
 800b372:	2400      	movs	r4, #0
 800b374:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800b378:	4628      	mov	r0, r5
 800b37a:	4798      	blx	r3
 800b37c:	2000      	movs	r0, #0
 800b37e:	e7e0      	b.n	800b342 <_raise_r+0x12>

0800b380 <raise>:
 800b380:	4b02      	ldr	r3, [pc, #8]	; (800b38c <raise+0xc>)
 800b382:	4601      	mov	r1, r0
 800b384:	6818      	ldr	r0, [r3, #0]
 800b386:	f7ff bfd3 	b.w	800b330 <_raise_r>
 800b38a:	bf00      	nop
 800b38c:	20000058 	.word	0x20000058

0800b390 <_kill_r>:
 800b390:	b538      	push	{r3, r4, r5, lr}
 800b392:	4d07      	ldr	r5, [pc, #28]	; (800b3b0 <_kill_r+0x20>)
 800b394:	2300      	movs	r3, #0
 800b396:	4604      	mov	r4, r0
 800b398:	4608      	mov	r0, r1
 800b39a:	4611      	mov	r1, r2
 800b39c:	602b      	str	r3, [r5, #0]
 800b39e:	f7f8 f919 	bl	80035d4 <_kill>
 800b3a2:	1c43      	adds	r3, r0, #1
 800b3a4:	d102      	bne.n	800b3ac <_kill_r+0x1c>
 800b3a6:	682b      	ldr	r3, [r5, #0]
 800b3a8:	b103      	cbz	r3, 800b3ac <_kill_r+0x1c>
 800b3aa:	6023      	str	r3, [r4, #0]
 800b3ac:	bd38      	pop	{r3, r4, r5, pc}
 800b3ae:	bf00      	nop
 800b3b0:	200005e0 	.word	0x200005e0

0800b3b4 <_getpid_r>:
 800b3b4:	f7f8 b906 	b.w	80035c4 <_getpid>

0800b3b8 <_fstat_r>:
 800b3b8:	b538      	push	{r3, r4, r5, lr}
 800b3ba:	4d07      	ldr	r5, [pc, #28]	; (800b3d8 <_fstat_r+0x20>)
 800b3bc:	2300      	movs	r3, #0
 800b3be:	4604      	mov	r4, r0
 800b3c0:	4608      	mov	r0, r1
 800b3c2:	4611      	mov	r1, r2
 800b3c4:	602b      	str	r3, [r5, #0]
 800b3c6:	f7f8 f964 	bl	8003692 <_fstat>
 800b3ca:	1c43      	adds	r3, r0, #1
 800b3cc:	d102      	bne.n	800b3d4 <_fstat_r+0x1c>
 800b3ce:	682b      	ldr	r3, [r5, #0]
 800b3d0:	b103      	cbz	r3, 800b3d4 <_fstat_r+0x1c>
 800b3d2:	6023      	str	r3, [r4, #0]
 800b3d4:	bd38      	pop	{r3, r4, r5, pc}
 800b3d6:	bf00      	nop
 800b3d8:	200005e0 	.word	0x200005e0

0800b3dc <_isatty_r>:
 800b3dc:	b538      	push	{r3, r4, r5, lr}
 800b3de:	4d06      	ldr	r5, [pc, #24]	; (800b3f8 <_isatty_r+0x1c>)
 800b3e0:	2300      	movs	r3, #0
 800b3e2:	4604      	mov	r4, r0
 800b3e4:	4608      	mov	r0, r1
 800b3e6:	602b      	str	r3, [r5, #0]
 800b3e8:	f7f8 f963 	bl	80036b2 <_isatty>
 800b3ec:	1c43      	adds	r3, r0, #1
 800b3ee:	d102      	bne.n	800b3f6 <_isatty_r+0x1a>
 800b3f0:	682b      	ldr	r3, [r5, #0]
 800b3f2:	b103      	cbz	r3, 800b3f6 <_isatty_r+0x1a>
 800b3f4:	6023      	str	r3, [r4, #0]
 800b3f6:	bd38      	pop	{r3, r4, r5, pc}
 800b3f8:	200005e0 	.word	0x200005e0

0800b3fc <_init>:
 800b3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fe:	bf00      	nop
 800b400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b402:	bc08      	pop	{r3}
 800b404:	469e      	mov	lr, r3
 800b406:	4770      	bx	lr

0800b408 <_fini>:
 800b408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b40a:	bf00      	nop
 800b40c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b40e:	bc08      	pop	{r3}
 800b410:	469e      	mov	lr, r3
 800b412:	4770      	bx	lr
